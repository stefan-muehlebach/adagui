digraph callgraph {
  "runtime.throw" -> "runtime.systemstack"
  "runtime.fatalthrow" -> "runtime.getcallerpc"
  "runtime.fatalthrow" -> "runtime.getcallersp"
  "runtime.fatalthrow" -> "runtime.getg"
  "runtime.fatalthrow" -> "runtime.systemstack"
  "runtime.throw" -> "runtime.fatalthrow"
  "runtime.typeBitsBulkBarrier" -> "runtime.throw"
  "runtime.typeBitsBulkBarrier" -> "runtime.toRType"
  "runtime.lock" -> "runtime.getLockRank"
  "runtime.lock2" -> "runtime.getg"
  "runtime.lock2" -> "runtime.throw"
  "runtime.lock2" -> "runtime.key32"
  "runtime.lock2" -> "runtime/internal/atomic.Xchg"
  "(*runtime.lockTimer).begin" -> "runtime/internal/atomic.Load64"
  "runtime.cheaprand" -> "runtime.getg"
  "runtime.cheaprand" -> "runtime/internal/math.Mul64"
  "(*runtime.lockTimer).begin" -> "runtime.cheaprand"
  "runtime.nanotime" -> "runtime.nanotime1"
  "(*runtime.lockTimer).begin" -> "runtime.nanotime"
  "runtime.cputicks" -> "runtime.nanotime"
  "(*runtime.lockTimer).begin" -> "runtime.cputicks"
  "(*runtime.lockTimer).begin" -> "runtime.cheaprand"
  "runtime.lock2" -> "(*runtime.lockTimer).begin"
  "runtime.lock2" -> "runtime.key32"
  "runtime.lock2" -> "runtime/internal/atomic.Cas"
  "runtime.lock2" -> "runtime.procyield"
  "(*runtime.lockTimer).end" -> "runtime.getg"
  "(*runtime.lockTimer).end" -> "runtime.nanotime"
  "(*runtime/internal/atomic.Int64).Add" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.lockTimer).end" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.lockTimer).end" -> "runtime.cputicks"
  "runtime.cheaprand64" -> "runtime.cheaprand"
  "runtime.cheaprand64" -> "runtime.cheaprand"
  "(*runtime.mLockProfile).recordLock" -> "runtime.cheaprand64"
  "(*runtime.mLockProfile).recordLock" -> "runtime.cheaprand64"
  "(*runtime.lockTimer).end" -> "(*runtime.mLockProfile).recordLock"
  "runtime.lock2" -> "(*runtime.lockTimer).end"
  "runtime.lock2" -> "runtime.key32"
  "runtime.lock2" -> "runtime/internal/atomic.Xchg"
  "runtime.lock2" -> "runtime.key32"
  "runtime.lock2" -> "runtime/internal/atomic.Cas"
  "runtime.lock2" -> "runtime.osyield"
  "runtime.lock2" -> "(*runtime.lockTimer).end"
  "runtime.lock2" -> "(*runtime.lockTimer).end"
  "runtime.lock2" -> "runtime.key32"
  "runtime.futexsleep" -> "runtime.futex"
  "runtime.futexsleep" -> "(*runtime.timespec).setNsec"
  "runtime.futexsleep" -> "runtime.futex"
  "runtime.lock2" -> "runtime.futexsleep"
  "runtime.lockWithRank" -> "runtime.lock2"
  "runtime.lock" -> "runtime.lockWithRank"
  "runtime.reflectOffsLock" -> "runtime.lock"
  "runtime.raceacquire" -> "runtime.throw"
  "runtime.reflectOffsLock" -> "runtime.raceacquire"
  "runtime.resolveNameOff" -> "runtime.reflectOffsLock"
  "runtime.racerelease" -> "runtime.throw"
  "runtime.reflectOffsUnlock" -> "runtime.racerelease"
  "runtime.unlock2" -> "runtime.key32"
  "runtime.unlock2" -> "runtime/internal/atomic.Xchg"
  "runtime.unlock2" -> "runtime.throw"
  "runtime.unlock2" -> "runtime.key32"
  "runtime.futexwakeup" -> "runtime.futex"
  "runtime.futexwakeup" -> "runtime.systemstack"
  "runtime.unlock2" -> "runtime.futexwakeup"
  "runtime.unlock2" -> "runtime.getg"
  "(*runtime/internal/atomic.Int32).Load" -> "runtime/internal/atomic.Loadint32"
  "(*runtime.mLockProfile).captureStack" -> "(*runtime/internal/atomic.Int32).Load"
  "(*runtime.mLockProfile).captureStack" -> "internal/abi.FuncPCABIInternal"
  "(*runtime.mLockProfile).captureStack" -> "runtime.getg"
  "(*runtime.mLockProfile).captureStack" -> "runtime.getcallersp"
  "(*runtime.mLockProfile).captureStack" -> "runtime.getcallerpc"
  "(*runtime.mLockProfile).captureStack" -> "runtime.systemstack"
  "(*runtime.mLockProfile).recordUnlock" -> "(*runtime.mLockProfile).captureStack"
  "(*runtime.mLockProfile).recordUnlock" -> "runtime.getg"
  "runtime.acquirem" -> "runtime.getg"
  "(*runtime.mLockProfile).store" -> "runtime.acquirem"
  "(*runtime.mLockProfile).store" -> "runtime/internal/atomic.Load64"
  "(*runtime/internal/atomic.UnsafePointer).Load" -> "runtime/internal/atomic.Loadp"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.stkbucket" -> "runtime.lock"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.sysMemStat).add" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.sysMemStat).add" -> "runtime.throw"
  "runtime.sysAlloc" -> "(*runtime.sysMemStat).add"
  "(*runtime/internal/atomic.Uint64).Add" -> "runtime/internal/atomic.Xadd64"
  "runtime.sysAlloc" -> "(*runtime/internal/atomic.Uint64).Add"
  "runtime.mmap" -> "runtime.systemstack"
  "runtime.mmap" -> "runtime.sysMmap"
  "runtime.sysAllocOS" -> "runtime.mmap"
  "runtime.sysAllocOS" -> "runtime.exit"
  "runtime.sysAllocOS" -> "runtime.exit"
  "runtime.sysAlloc" -> "runtime.sysAllocOS"
  "runtime.stkbucket" -> "runtime.sysAlloc"
  "runtime.stkbucket" -> "runtime.unlock"
  "runtime.stkbucket" -> "runtime.throw"
  "(*runtime/internal/atomic.UnsafePointer).StoreNoWB" -> "runtime/internal/atomic.StorepNoWB"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.bucket).stk" -> "runtime.add"
  "(*runtime.bucket).stk" -> "runtime.throw"
  "runtime.stkbucket" -> "(*runtime.bucket).stk"
  "runtime.stkbucket" -> "runtime.eqslice"
  "runtime.stkbucket" -> "runtime.lock"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.persistentalloc" -> "runtime.systemstack"
  "runtime.newBucket" -> "runtime.persistentalloc"
  "runtime.newBucket" -> "runtime.throw"
  "runtime.stkbucket" -> "runtime.newBucket"
  "runtime.stkbucket" -> "(*runtime.bucket).stk"
  "runtime.stkbucket" -> "runtime.unlock"
  "runtime.stkbucket" -> "(*runtime.bucket).stk"
  "runtime.stkbucket" -> "runtime.eqslice"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "runtime.stkbucket" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "runtime.stkbucket" -> "runtime.unlock"
  "runtime.saveBlockEventStack" -> "runtime.stkbucket"
  "(*runtime.bucket).bp" -> "runtime.throw"
  "(*runtime.bucket).bp" -> "runtime.add"
  "runtime.saveBlockEventStack" -> "(*runtime.bucket).bp"
  "runtime.saveBlockEventStack" -> "runtime.lock"
  "runtime.saveBlockEventStack" -> "runtime.unlock"
  "(*runtime.mLockProfile).store" -> "runtime.saveBlockEventStack"
  "(*runtime.mLockProfile).store" -> "internal/abi.FuncPCABIInternal"
  "(*runtime.mLockProfile).store" -> "runtime.saveBlockEventStack"
  "runtime.releasem" -> "runtime.getg"
  "(*runtime.mLockProfile).store" -> "runtime.releasem"
  "(*runtime.mLockProfile).recordUnlock" -> "(*runtime.mLockProfile).store"
  "runtime.unlock2" -> "(*runtime.mLockProfile).recordUnlock"
  "runtime.unlock2" -> "runtime.throw"
  "runtime.unlockWithRank" -> "runtime.unlock2"
  "runtime.unlock" -> "runtime.unlockWithRank"
  "runtime.reflectOffsUnlock" -> "runtime.unlock"
  "runtime.resolveNameOff" -> "runtime.reflectOffsUnlock"
  "runtime.resolveNameOff" -> "runtime.throw"
  "runtime.resolveNameOff" -> "runtime.throw"
  "(runtime.rtype).nameOff" -> "runtime.resolveNameOff"
  "(runtime.rtype).string" -> "(runtime.rtype).nameOff"
  "(internal/abi.Name).DataChecked" -> "internal/abi.addChecked"
  "(internal/abi.Name).ReadVarint" -> "(internal/abi.Name).DataChecked"
  "(internal/abi.Name).Name" -> "(internal/abi.Name).ReadVarint"
  "(internal/abi.Name).Name" -> "(internal/abi.Name).DataChecked"
  "(runtime.rtype).string" -> "(internal/abi.Name).Name"
  "runtime.typeBitsBulkBarrier" -> "(runtime.rtype).string"
  "runtime.typeBitsBulkBarrier" -> "runtime.throw"
  "runtime.typeBitsBulkBarrier" -> "runtime.toRType"
  "runtime.typeBitsBulkBarrier" -> "(runtime.rtype).string"
  "runtime.typeBitsBulkBarrier" -> "runtime.throw"
  "runtime.typeBitsBulkBarrier" -> "runtime.getg"
  "runtime.typeBitsBulkBarrier" -> "(runtime.puintptr).ptr"
  "runtime.typeBitsBulkBarrier" -> "runtime.addb"
  "runtime.wbBufFlush" -> "runtime.getg"
  "runtime.wbBufFlush" -> "runtime.getg"
  "runtime.wbBufFlush" -> "(runtime.puintptr).ptr"
  "runtime.wbBufFlush" -> "(*runtime.wbBuf).discard"
  "runtime.wbBufFlush" -> "runtime.systemstack"
  "(*runtime.wbBuf).get2" -> "runtime.wbBufFlush"
  "runtime.typeBitsBulkBarrier" -> "(*runtime.wbBuf).get2"
  "runtime.sendDirect" -> "runtime.typeBitsBulkBarrier"
  "runtime.sendDirect" -> "runtime.memmove"
  "(*compress/zlib.Writer).writeHeader" -> "(encoding/binary.bigEndian).Uint16"
  "(*bytes.Buffer).Write" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).Reset"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).tryGrowByReslice"
  "bytes.growSlice" -> "bytes.growSlice$1"
  "(*bytes.Buffer).grow" -> "bytes.growSlice"
  "(*bytes.Buffer).Write" -> "(*bytes.Buffer).grow"
  "(*compress/zlib.Writer).writeHeader" -> "(*bytes.Buffer).Write"
  "(*os.File).Write" -> "(*os.File).checkValid"
  "(*internal/poll.fdMutex).rwlock" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).rwlock" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.fdMutex).rwlock" -> "internal/poll.runtime_Semacquire"
  "(*internal/poll.FD).writeLock" -> "(*internal/poll.fdMutex).rwlock"
  "(*internal/poll.FD).writeLock" -> "internal/poll.errClosing"
  "(*internal/poll.FD).Write" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.fdMutex).rwunlock" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).rwunlock" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.fdMutex).rwunlock" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.FD).writeUnlock" -> "(*internal/poll.fdMutex).rwunlock"
  "(*internal/poll.pollDesc).close" -> "internal/poll.runtime_pollClose"
  "(*internal/poll.FD).destroy" -> "(*internal/poll.pollDesc).close"
  "syscall.Syscall" -> "syscall.runtime_entersyscall"
  "syscall.Syscall" -> "syscall.RawSyscall6"
  "syscall.Syscall" -> "syscall.runtime_exitsyscall"
  "syscall.Close" -> "syscall.Syscall"
  "syscall.Close" -> "syscall.errnoErr"
  "(*internal/poll.SysFile).destroy" -> "syscall.Close"
  "(*internal/poll.FD).destroy" -> "(*internal/poll.SysFile).destroy"
  "(*internal/poll.FD).destroy" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.FD).writeUnlock" -> "(*internal/poll.FD).destroy"
  "(*internal/poll.FD).Write" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.pollDesc).prepare" -> "internal/poll.runtime_pollReset"
  "internal/poll.convertErr" -> "internal/poll.errClosing"
  "(*internal/poll.pollDesc).prepare" -> "internal/poll.convertErr"
  "(*internal/poll.pollDesc).prepareWrite" -> "(*internal/poll.pollDesc).prepare"
  "(*internal/poll.FD).Write" -> "(*internal/poll.pollDesc).prepareWrite"
  "syscall.read" -> "syscall.Syscall"
  "syscall.read" -> "syscall.errnoErr"
  "syscall.Read" -> "syscall.read"
  "syscall.Read" -> "internal/race.WriteRange"
  "syscall.Read" -> "internal/race.Acquire"
  "syscall.Read" -> "syscall.msanWrite"
  "syscall.Read" -> "syscall.asanWrite"
  "internal/poll.ignoringEINTRIO" -> "syscall.Read"
  "syscall.Getdents" -> "syscall.Syscall"
  "syscall.Getdents" -> "syscall.errnoErr"
  "syscall.ReadDirent" -> "syscall.Getdents"
  "internal/poll.ignoringEINTRIO" -> "syscall.ReadDirent"
  "syscall.Write" -> "internal/race.ReleaseMerge"
  "syscall.Write" -> "syscall.faketimeWrite"
  "syscall.write" -> "syscall.Syscall"
  "syscall.write" -> "syscall.errnoErr"
  "syscall.Write" -> "syscall.write"
  "syscall.Write" -> "syscall.errnoErr"
  "syscall.Write" -> "internal/race.ReadRange"
  "syscall.Write" -> "syscall.msanRead"
  "syscall.Write" -> "syscall.asanRead"
  "internal/poll.ignoringEINTRIO" -> "syscall.Write"
  "(*internal/poll.FD).Write" -> "internal/poll.ignoringEINTRIO"
  "(*internal/poll.pollDesc).wait" -> "errors.New"
  "(*internal/poll.pollDesc).wait" -> "internal/poll.runtime_pollWait"
  "(*internal/poll.pollDesc).wait" -> "internal/poll.convertErr"
  "(*internal/poll.pollDesc).waitWrite" -> "(*internal/poll.pollDesc).wait"
  "(*internal/poll.FD).Write" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).Write" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).write" -> "(*internal/poll.FD).Write"
  "(*os.File).write" -> "runtime.KeepAlive"
  "(*os.File).Write" -> "(*os.File).write"
  "os.epipecheck" -> "os.sigpipe"
  "(*os.File).Write" -> "os.epipecheck"
  "(*os.File).wrapErr" -> "(*errors.errorString).Error"
  "(*os.File).wrapErr" -> "(runtime.errorString).Error"
  "(*os.File).wrapErr" -> "(time.fileSizeError).Error"
  "internal/itoa.Itoa" -> "internal/itoa.Uitoa"
  "internal/itoa.Itoa" -> "internal/itoa.Uitoa"
  "(syscall.Errno).Error" -> "internal/itoa.Itoa"
  "(*os.File).wrapErr" -> "(syscall.Errno).Error"
  "(*reflect.rtype).nameOff" -> "reflect.resolveNameOff"
  "(*reflect.rtype).String" -> "(*reflect.rtype).nameOff"
  "(*reflect.rtype).String" -> "(internal/abi.Name).Name"
  "(*encoding/json.UnsupportedTypeError).Error" -> "(*reflect.rtype).String"
  "(*os.File).wrapErr" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(*os.File).wrapErr" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*os.File).wrapErr" -> "(context.deadlineExceededError).Error"
  "strconv.FormatInt" -> "strconv.small"
  "strconv.formatBits" -> "strconv.isPowerOfTwo"
  "math/bits.TrailingZeros" -> "math/bits.TrailingZeros32"
  "math/bits.TrailingZeros" -> "math/bits.TrailingZeros64"
  "strconv.formatBits" -> "math/bits.TrailingZeros"
  "strconv.FormatInt" -> "strconv.formatBits"
  "(compress/flate.CorruptInputError).Error" -> "strconv.FormatInt"
  "(*os.File).wrapErr" -> "(compress/flate.CorruptInputError).Error"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*os.File).wrapErr" -> "(*time.ParseError).Error"
  "(*io/fs.PathError).Error" -> "(*errors.errorString).Error"
  "(*io/fs.PathError).Error" -> "(runtime.errorString).Error"
  "(*io/fs.PathError).Error" -> "(time.fileSizeError).Error"
  "(*io/fs.PathError).Error" -> "(syscall.Errno).Error"
  "(*io/fs.PathError).Error" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(*io/fs.PathError).Error" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*io/fs.PathError).Error" -> "(context.deadlineExceededError).Error"
  "(*io/fs.PathError).Error" -> "(compress/flate.CorruptInputError).Error"
  "(*io/fs.PathError).Error" -> "(*time.ParseError).Error"
  "(*io/fs.PathError).Error" -> "(*io/fs.PathError).Error"
  "strconv.Itoa" -> "strconv.FormatInt"
  "(reflect.Kind).String" -> "strconv.Itoa"
  "(*reflect.ValueError).Error" -> "(reflect.Kind).String"
  "(*io/fs.PathError).Error" -> "(*reflect.ValueError).Error"
  "(*io/fs.PathError).Error" -> "(runtime.plainError).Error"
  "(*os.SyscallError).Error" -> "(*errors.errorString).Error"
  "(*os.SyscallError).Error" -> "(runtime.errorString).Error"
  "(*os.SyscallError).Error" -> "(time.fileSizeError).Error"
  "(*os.SyscallError).Error" -> "(syscall.Errno).Error"
  "(*os.SyscallError).Error" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(*os.SyscallError).Error" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*os.SyscallError).Error" -> "(context.deadlineExceededError).Error"
  "(*os.SyscallError).Error" -> "(compress/flate.CorruptInputError).Error"
  "(*os.SyscallError).Error" -> "(*time.ParseError).Error"
  "(*os.SyscallError).Error" -> "(*io/fs.PathError).Error"
  "(*os.SyscallError).Error" -> "(*reflect.ValueError).Error"
  "(*os.SyscallError).Error" -> "(runtime.plainError).Error"
  "(*os.SyscallError).Error" -> "(*os.SyscallError).Error"
  "(*os.SyscallError).Error" -> "(image/png.FormatError).Error"
  "(*os.SyscallError).Error" -> "(compress/flate.InternalError).Error"
  "(*os.SyscallError).Error" -> "(*fmt.wrapError).Error"
  "(*os.SyscallError).Error" -> "(*fmt.wrapErrors).Error"
  "(*os.SyscallError).Error" -> "(internal/poll.errNetClosing).Error"
  "(*internal/reflectlite.ValueError).Error" -> "(internal/abi.Kind).String"
  "(*os.SyscallError).Error" -> "(*internal/reflectlite.ValueError).Error"
  "(*reflect.rtype).Kind" -> "(*internal/abi.Type).Kind"
  "(*encoding/json.InvalidUnmarshalError).Error" -> "(*reflect.rtype).Kind"
  "(*encoding/json.InvalidUnmarshalError).Error" -> "(*reflect.rtype).String"
  "(*encoding/json.InvalidUnmarshalError).Error" -> "(*reflect.rtype).String"
  "(*os.SyscallError).Error" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*os.SyscallError).Error" -> "(*encoding/json.UnsupportedValueError).Error"
  "(encoding/base64.CorruptInputError).Error" -> "strconv.FormatInt"
  "(*os.SyscallError).Error" -> "(encoding/base64.CorruptInputError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*reflect.rtype).String"
  "(*encoding/json.MarshalerError).Error" -> "(*errors.errorString).Error"
  "(*encoding/json.MarshalerError).Error" -> "(runtime.errorString).Error"
  "(*encoding/json.MarshalerError).Error" -> "(time.fileSizeError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(syscall.Errno).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(context.deadlineExceededError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(compress/flate.CorruptInputError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*time.ParseError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*io/fs.PathError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*reflect.ValueError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(runtime.plainError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*os.SyscallError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(image/png.FormatError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(compress/flate.InternalError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*fmt.wrapError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*fmt.wrapErrors).Error"
  "(*encoding/json.MarshalerError).Error" -> "(internal/poll.errNetClosing).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*internal/reflectlite.ValueError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*encoding/json.UnsupportedValueError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(encoding/base64.CorruptInputError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*encoding/json.MarshalerError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*internal/bisect.parseError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(image/jpeg.UnsupportedError).Error"
  "strconv.appendQuotedWith" -> "unicode/utf8.DecodeRuneInString"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.IsPrint" -> "strconv.bsearch32"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.appendEscapedRune" -> "strconv.IsPrint"
  "strconv.appendEscapedRune" -> "strconv.IsPrint"
  "unicode/utf8.AppendRune" -> "unicode/utf8.appendRuneNonASCII"
  "strconv.appendEscapedRune" -> "unicode/utf8.AppendRune"
  "strconv.isInGraphicList" -> "strconv.bsearch16"
  "strconv.appendEscapedRune" -> "strconv.isInGraphicList"
  "strconv.appendEscapedRune" -> "unicode/utf8.ValidRune"
  "strconv.appendQuotedWith" -> "strconv.appendEscapedRune"
  "strconv.quoteWith" -> "strconv.appendQuotedWith"
  "strconv.Quote" -> "strconv.quoteWith"
  "(*strconv.NumError).Error" -> "strconv.Quote"
  "(*strconv.NumError).Error" -> "(*errors.errorString).Error"
  "(*strconv.NumError).Error" -> "(runtime.errorString).Error"
  "(*strconv.NumError).Error" -> "(time.fileSizeError).Error"
  "(*strconv.NumError).Error" -> "(syscall.Errno).Error"
  "(*strconv.NumError).Error" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(*strconv.NumError).Error" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*strconv.NumError).Error" -> "(context.deadlineExceededError).Error"
  "(*strconv.NumError).Error" -> "(compress/flate.CorruptInputError).Error"
  "(*strconv.NumError).Error" -> "(*time.ParseError).Error"
  "(*strconv.NumError).Error" -> "(*io/fs.PathError).Error"
  "(*strconv.NumError).Error" -> "(*reflect.ValueError).Error"
  "(*strconv.NumError).Error" -> "(runtime.plainError).Error"
  "(*strconv.NumError).Error" -> "(*os.SyscallError).Error"
  "(*strconv.NumError).Error" -> "(image/png.FormatError).Error"
  "(*strconv.NumError).Error" -> "(compress/flate.InternalError).Error"
  "(*strconv.NumError).Error" -> "(*fmt.wrapError).Error"
  "(*strconv.NumError).Error" -> "(*fmt.wrapErrors).Error"
  "(*strconv.NumError).Error" -> "(internal/poll.errNetClosing).Error"
  "(*strconv.NumError).Error" -> "(*internal/reflectlite.ValueError).Error"
  "(*strconv.NumError).Error" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*strconv.NumError).Error" -> "(*encoding/json.UnsupportedValueError).Error"
  "(*strconv.NumError).Error" -> "(encoding/base64.CorruptInputError).Error"
  "(*strconv.NumError).Error" -> "(*encoding/json.MarshalerError).Error"
  "(*strconv.NumError).Error" -> "(*internal/bisect.parseError).Error"
  "(*strconv.NumError).Error" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*strconv.NumError).Error" -> "(image/jpeg.UnsupportedError).Error"
  "(*strconv.NumError).Error" -> "(*strconv.NumError).Error"
  "(*strconv.NumError).Error" -> "(*encoding/json.SyntaxError).Error"
  "(*runtime.TypeAssertionError).Error" -> "runtime.toRType"
  "(*runtime.TypeAssertionError).Error" -> "(runtime.rtype).string"
  "(*runtime.TypeAssertionError).Error" -> "runtime.toRType"
  "(*runtime.TypeAssertionError).Error" -> "(runtime.rtype).string"
  "(*runtime.TypeAssertionError).Error" -> "runtime.toRType"
  "(*runtime.TypeAssertionError).Error" -> "(runtime.rtype).string"
  "(*runtime.TypeAssertionError).Error" -> "runtime.toRType"
  "(*internal/abi.Type).Uncommon" -> "(*internal/abi.Type).Kind"
  "(runtime.rtype).uncommon" -> "(*internal/abi.Type).Uncommon"
  "(runtime.rtype).pkgpath" -> "(runtime.rtype).uncommon"
  "(runtime.rtype).pkgpath" -> "(runtime.rtype).nameOff"
  "(runtime.rtype).pkgpath" -> "(internal/abi.Name).Name"
  "(runtime.rtype).pkgpath" -> "(internal/abi.Name).Name"
  "(runtime.rtype).pkgpath" -> "(internal/abi.Name).Name"
  "(*runtime.TypeAssertionError).Error" -> "(runtime.rtype).pkgpath"
  "(*runtime.TypeAssertionError).Error" -> "runtime.toRType"
  "(*runtime.TypeAssertionError).Error" -> "(runtime.rtype).pkgpath"
  "(*strconv.NumError).Error" -> "(*runtime.TypeAssertionError).Error"
  "(*strconv.NumError).Error" -> "(runtime.errorAddressString).Error"
  "(*strconv.NumError).Error" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*strconv.NumError).Error" -> "(image/jpeg.FormatError).Error"
  "(*strconv.NumError).Error" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(*strconv.NumError).Error" -> "(image/png.UnsupportedError).Error"
  "(*encoding/json.UnmarshalTypeError).Error" -> "(*reflect.rtype).String"
  "(*encoding/json.UnmarshalTypeError).Error" -> "(*reflect.rtype).String"
  "(*strconv.NumError).Error" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*strconv.NumError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*encoding/json.SyntaxError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*runtime.TypeAssertionError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(runtime.errorAddressString).Error"
  "(*encoding/json.MarshalerError).Error" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(image/jpeg.FormatError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(image/png.UnsupportedError).Error"
  "(*encoding/json.MarshalerError).Error" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*os.SyscallError).Error" -> "(*encoding/json.MarshalerError).Error"
  "(*os.SyscallError).Error" -> "(*internal/bisect.parseError).Error"
  "(*os.SyscallError).Error" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*os.SyscallError).Error" -> "(image/jpeg.UnsupportedError).Error"
  "(*os.SyscallError).Error" -> "(*strconv.NumError).Error"
  "(*os.SyscallError).Error" -> "(*encoding/json.SyntaxError).Error"
  "(*os.SyscallError).Error" -> "(*runtime.TypeAssertionError).Error"
  "(*os.SyscallError).Error" -> "(runtime.errorAddressString).Error"
  "(*os.SyscallError).Error" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*os.SyscallError).Error" -> "(image/jpeg.FormatError).Error"
  "(*os.SyscallError).Error" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(*os.SyscallError).Error" -> "(image/png.UnsupportedError).Error"
  "(*os.SyscallError).Error" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*io/fs.PathError).Error" -> "(*os.SyscallError).Error"
  "(*io/fs.PathError).Error" -> "(image/png.FormatError).Error"
  "(*io/fs.PathError).Error" -> "(compress/flate.InternalError).Error"
  "(*io/fs.PathError).Error" -> "(*fmt.wrapError).Error"
  "(*io/fs.PathError).Error" -> "(*fmt.wrapErrors).Error"
  "(*io/fs.PathError).Error" -> "(internal/poll.errNetClosing).Error"
  "(*io/fs.PathError).Error" -> "(*internal/reflectlite.ValueError).Error"
  "(*io/fs.PathError).Error" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*io/fs.PathError).Error" -> "(*encoding/json.UnsupportedValueError).Error"
  "(*io/fs.PathError).Error" -> "(encoding/base64.CorruptInputError).Error"
  "(*io/fs.PathError).Error" -> "(*encoding/json.MarshalerError).Error"
  "(*io/fs.PathError).Error" -> "(*internal/bisect.parseError).Error"
  "(*io/fs.PathError).Error" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*io/fs.PathError).Error" -> "(image/jpeg.UnsupportedError).Error"
  "(*io/fs.PathError).Error" -> "(*strconv.NumError).Error"
  "(*io/fs.PathError).Error" -> "(*encoding/json.SyntaxError).Error"
  "(*io/fs.PathError).Error" -> "(*runtime.TypeAssertionError).Error"
  "(*io/fs.PathError).Error" -> "(runtime.errorAddressString).Error"
  "(*io/fs.PathError).Error" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*io/fs.PathError).Error" -> "(image/jpeg.FormatError).Error"
  "(*io/fs.PathError).Error" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(*io/fs.PathError).Error" -> "(image/png.UnsupportedError).Error"
  "(*io/fs.PathError).Error" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*os.File).wrapErr" -> "(*io/fs.PathError).Error"
  "(*os.File).wrapErr" -> "(*reflect.ValueError).Error"
  "(*os.File).wrapErr" -> "(runtime.plainError).Error"
  "(*os.File).wrapErr" -> "(*os.SyscallError).Error"
  "(*os.File).wrapErr" -> "(image/png.FormatError).Error"
  "(*os.File).wrapErr" -> "(compress/flate.InternalError).Error"
  "(*os.File).wrapErr" -> "(*fmt.wrapError).Error"
  "(*os.File).wrapErr" -> "(*fmt.wrapErrors).Error"
  "internal/reflectlite.TypeOf" -> "internal/reflectlite.noescape"
  "internal/reflectlite.toType" -> "internal/reflectlite.toRType"
  "internal/reflectlite.TypeOf" -> "internal/reflectlite.toType"
  "errors.Is" -> "internal/reflectlite.TypeOf"
  "errors.is" -> "(syscall.Errno).Is"
  "errors.is" -> "(*encoding/json.MarshalerError).Unwrap"
  "errors.is" -> "(*io/fs.PathError).Unwrap"
  "errors.is" -> "(*fmt.wrapError).Unwrap"
  "errors.is" -> "(*fmt.wrapErrors).Unwrap"
  "errors.is" -> "errors.is"
  "errors.is" -> "(*strconv.NumError).Unwrap"
  "errors.is" -> "(*os.SyscallError).Unwrap"
  "errors.Is" -> "errors.is"
  "errors.Is" -> "(internal/reflectlite.rtype).Comparable"
  "(*os.File).wrapErr" -> "errors.Is"
  "(*os.File).wrapErr" -> "(internal/poll.errNetClosing).Error"
  "(*os.File).wrapErr" -> "(*internal/reflectlite.ValueError).Error"
  "(*os.File).wrapErr" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*os.File).wrapErr" -> "(*encoding/json.UnsupportedValueError).Error"
  "(*os.File).wrapErr" -> "(encoding/base64.CorruptInputError).Error"
  "(*os.File).wrapErr" -> "(*encoding/json.MarshalerError).Error"
  "(*os.File).wrapErr" -> "(*internal/bisect.parseError).Error"
  "(*os.File).wrapErr" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*os.File).wrapErr" -> "(image/jpeg.UnsupportedError).Error"
  "(*os.File).wrapErr" -> "(*strconv.NumError).Error"
  "(*os.File).wrapErr" -> "(*encoding/json.SyntaxError).Error"
  "(*os.File).wrapErr" -> "(*runtime.TypeAssertionError).Error"
  "(*os.File).wrapErr" -> "(runtime.errorAddressString).Error"
  "(*os.File).wrapErr" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*os.File).wrapErr" -> "(image/jpeg.FormatError).Error"
  "(*os.File).wrapErr" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(*os.File).wrapErr" -> "(image/png.UnsupportedError).Error"
  "(*os.File).wrapErr" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*os.File).Write" -> "(*os.File).wrapErr"
  "(*compress/zlib.Writer).writeHeader" -> "(*os.File).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*internal/poll.FD).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(io.discard).Write"
  "(*periph.io/x/host/v3/sysfs.spiConn).Write" -> "errors.New"
  "(*sync.Pool).Get" -> "internal/race.Disable"
  "(*sync.Pool).pin" -> "sync.runtime_procPin"
  "(*sync.Pool).pin" -> "sync.runtime_LoadAcquintptr"
  "(*sync.Pool).pin" -> "sync.indexLocal"
  "(*sync.Pool).pinSlow" -> "sync.runtime_procUnpin"
  "(*sync.Mutex).Lock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_canSpin"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_doSpin"
  "(*sync.Mutex).lockSlow" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).lockSlow" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).lockSlow" -> "sync.throw"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_nanotime"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_SemacquireMutex"
  "(*sync.Mutex).lockSlow" -> "sync.runtime_nanotime"
  "(*sync.Mutex).lockSlow" -> "sync.throw"
  "(*sync.Mutex).lockSlow" -> "sync/atomic.AddInt32"
  "(*sync.Mutex).lockSlow" -> "internal/race.Acquire"
  "(*sync.Mutex).Lock" -> "(*sync.Mutex).lockSlow"
  "(*sync.Mutex).Lock" -> "internal/race.Acquire"
  "(*sync.Pool).pinSlow" -> "(*sync.Mutex).Lock"
  "(*sync.Mutex).Unlock" -> "internal/race.Release"
  "(*sync.Mutex).Unlock" -> "sync/atomic.AddInt32"
  "(*sync.Mutex).unlockSlow" -> "sync.fatal"
  "(*sync.Mutex).unlockSlow" -> "sync.runtime_Semrelease"
  "(*sync.Mutex).unlockSlow" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).unlockSlow" -> "sync.runtime_Semrelease"
  "(*sync.Mutex).Unlock" -> "(*sync.Mutex).unlockSlow"
  "(*sync.Pool).pinSlow" -> "(*sync.Mutex).Unlock"
  "(*sync.Pool).pinSlow" -> "sync.runtime_procPin"
  "(*sync.Pool).pinSlow" -> "sync.indexLocal"
  "runtime.GOMAXPROCS" -> "runtime.lock"
  "runtime.GOMAXPROCS" -> "runtime.unlock"
  "runtime.semacquire1" -> "runtime.getg"
  "runtime.semacquire1" -> "runtime.throw"
  "runtime.cansemacquire" -> "runtime/internal/atomic.Load"
  "runtime.cansemacquire" -> "runtime/internal/atomic.Cas"
  "runtime.semacquire1" -> "runtime.cansemacquire"
  "runtime.acquireSudog" -> "runtime.acquirem"
  "runtime.acquireSudog" -> "(runtime.puintptr).ptr"
  "runtime.acquireSudog" -> "runtime.lock"
  "runtime.acquireSudog" -> "runtime.unlock"
  "runtime.acquireSudog" -> "runtime.throw"
  "runtime.acquireSudog" -> "runtime.releasem"
  "runtime.semacquire1" -> "runtime.acquireSudog"
  "runtime.semacquire1" -> "(*runtime.semTable).rootFor"
  "runtime.semacquire1" -> "runtime.cputicks"
  "runtime.semacquire1" -> "runtime.cputicks"
  "runtime.semacquire1" -> "runtime.lockWithRank"
  "(*runtime/internal/atomic.Uint32).Add" -> "runtime/internal/atomic.Xadd"
  "runtime.semacquire1" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.semacquire1" -> "runtime.cansemacquire"
  "runtime.semacquire1" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.semacquire1" -> "runtime.unlock"
  "(*runtime.semaRoot).queue" -> "runtime.getg"
  "(*runtime.semaRoot).queue" -> "runtime.cheaprand"
  "(*runtime.semaRoot).rotateRight" -> "runtime.throw"
  "(*runtime.semaRoot).queue" -> "(*runtime.semaRoot).rotateRight"
  "(*runtime.semaRoot).rotateLeft" -> "runtime.throw"
  "(*runtime.semaRoot).queue" -> "(*runtime.semaRoot).rotateLeft"
  "runtime.semacquire1" -> "(*runtime.semaRoot).queue"
  "runtime.gopark" -> "runtime.checkTimeouts"
  "runtime.gopark" -> "runtime.acquirem"
  "(*runtime/internal/atomic.Uint32).Load" -> "runtime/internal/atomic.Load"
  "runtime.readgstatus" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.gopark" -> "runtime.readgstatus"
  "runtime.gopark" -> "runtime.throw"
  "runtime.gopark" -> "runtime.releasem"
  "runtime.gopark" -> "runtime.mcall"
  "runtime.goparkunlock" -> "runtime.gopark"
  "runtime.semacquire1" -> "runtime.goparkunlock"
  "runtime.semacquire1" -> "runtime.cansemacquire"
  "runtime.blockevent" -> "runtime/internal/atomic.Load64"
  "runtime.blocksampled" -> "runtime.cheaprand64"
  "runtime.blockevent" -> "runtime.blocksampled"
  "runtime.saveblockevent" -> "runtime.getg"
  "runtime.callers" -> "runtime.getcallersp"
  "runtime.callers" -> "runtime.getcallerpc"
  "runtime.callers" -> "runtime.getg"
  "runtime.callers" -> "runtime.systemstack"
  "runtime.saveblockevent" -> "runtime.callers"
  "runtime.saveblockevent" -> "runtime.saveBlockEventStack"
  "(*runtime.unwinder).initAt" -> "runtime.getg"
  "(*runtime.unwinder).initAt" -> "runtime.throw"
  "runtime.findfunc" -> "runtime.findmoduledatap"
  "runtime.findfunc" -> "(*runtime.moduledata).textOff"
  "runtime.findfunc" -> "runtime.add"
  "(*runtime.unwinder).initAt" -> "runtime.findfunc"
  "(*runtime.unwinder).initAt" -> "(runtime.funcInfo).valid"
  "(*runtime.unwinder).initAt" -> "(*runtime.g).guintptr"
  "runtime.printlock" -> "runtime.getg"
  "runtime.printlock" -> "runtime.lock"
  "runtime.hexdumpWords" -> "runtime.printlock"
  "runtime.printunlock" -> "runtime.getg"
  "runtime.printunlock" -> "runtime.unlock"
  "runtime.hexdumpWords" -> "runtime.printunlock"
  "runtime.recordForPanic" -> "runtime.printlock"
  "runtime.recordForPanic" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.recordForPanic" -> "runtime.printunlock"
  "runtime.gwrite" -> "runtime.recordForPanic"
  "runtime.gwrite" -> "runtime.getg"
  "runtime.write" -> "runtime.noescape"
  "runtime.write" -> "runtime.write1"
  "runtime.writeErr" -> "runtime.write"
  "runtime.gwrite" -> "runtime.writeErr"
  "runtime.hexdumpWords" -> "runtime.gwrite"
  "runtime.hexdumpWords" -> "runtime.findfunc"
  "runtime.hexdumpWords" -> "(runtime.funcInfo).valid"
  "runtime.funcname" -> "(runtime.funcInfo).valid"
  "runtime.findnull" -> "internal/bytealg.IndexByteString"
  "runtime.gostringnocopy" -> "runtime.findnull"
  "(*runtime.moduledata).funcName" -> "runtime.gostringnocopy"
  "runtime.funcname" -> "(*runtime.moduledata).funcName"
  "runtime.hexdumpWords" -> "runtime.funcname"
  "(*runtime.moduledata).textAddr" -> "runtime.throw"
  "(runtime.funcInfo).entry" -> "(*runtime.moduledata).textAddr"
  "runtime.hexdumpWords" -> "(runtime.funcInfo).entry"
  "runtime.hexdumpWords" -> "runtime.tracebackHexdump$1"
  "runtime.scanConservative$1" -> "runtime.addb"
  "runtime.spanOf" -> "runtime.arenaIndex"
  "runtime.spanOf" -> "(runtime.arenaIdx).l2"
  "runtime.spanOf" -> "(runtime.arenaIdx).l1"
  "runtime.spanOf" -> "(runtime.arenaIdx).l1"
  "runtime.spanOf" -> "(runtime.arenaIdx).l2"
  "runtime.spanOfHeap" -> "runtime.spanOf"
  "runtime.spanOfHeap" -> "(*runtime.mspan).base"
  "(*runtime/internal/atomic.Uint8).Load" -> "runtime/internal/atomic.Load8"
  "(*runtime.mSpanStateBox).get" -> "(*runtime/internal/atomic.Uint8).Load"
  "runtime.spanOfHeap" -> "(*runtime.mSpanStateBox).get"
  "runtime.scanConservative$1" -> "runtime.spanOfHeap"
  "(*runtime.mspan).objIndex" -> "(*runtime.mspan).base"
  "(*runtime.mspan).divideByElemSize" -> "runtime.throw"
  "(*runtime.mspan).objIndex" -> "(*runtime.mspan).divideByElemSize"
  "runtime.scanConservative$1" -> "(*runtime.mspan).objIndex"
  "(*runtime.gcBits).bytep" -> "runtime.addb"
  "(*runtime.gcBits).bitp" -> "(*runtime.gcBits).bytep"
  "(*runtime.mspan).isFree" -> "(*runtime.gcBits).bitp"
  "runtime.scanConservative$1" -> "(*runtime.mspan).isFree"
  "runtime.hexdumpWords" -> "runtime.scanConservative$1"
  "runtime.tracebackHexdump" -> "runtime.hexdumpWords"
  "(*runtime.unwinder).initAt" -> "runtime.tracebackHexdump"
  "(*runtime.unwinder).initAt" -> "runtime.throw"
  "(*runtime.unwinder).resolveInternal" -> "(runtime.guintptr).ptr"
  "(*runtime.unwinder).finishInternal" -> "(runtime.guintptr).ptr"
  "(*runtime.unwinder).finishInternal" -> "runtime.throw"
  "(*runtime.unwinder).resolveInternal" -> "(*runtime.unwinder).finishInternal"
  "runtime.pcvalue" -> "runtime.pcvalueCacheKey"
  "runtime.pcvalue" -> "runtime.acquirem"
  "runtime.pcvalue" -> "runtime.releasem"
  "runtime.pcvalue" -> "(runtime.funcInfo).valid"
  "runtime.pcvalue" -> "runtime.releasem"
  "runtime.pcvalue" -> "runtime.throw"
  "runtime.pcvalue" -> "(runtime.funcInfo).entry"
  "runtime.pcvalue" -> "(runtime.funcInfo).entry"
  "runtime.pcvalue" -> "runtime.throw"
  "runtime.pcvalue" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.pcvalue" -> "(runtime.funcInfo).entry"
  "runtime.step" -> "runtime.readvarint"
  "runtime.step" -> "runtime.readvarint"
  "runtime.pcvalue" -> "runtime.step"
  "runtime.pcvalue" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.pcvalue" -> "runtime.acquirem"
  "runtime.pcvalue" -> "runtime.throw"
  "runtime.cheaprandn" -> "runtime.cheaprand"
  "runtime.pcvalue" -> "runtime.cheaprandn"
  "runtime.pcvalue" -> "runtime.releasem"
  "runtime.pcvalue" -> "runtime.funcname"
  "runtime.pcvalue" -> "(runtime.funcInfo).entry"
  "runtime.pcvalue" -> "(runtime.funcInfo).entry"
  "runtime.pcvalue" -> "runtime.step"
  "runtime.pcvalue" -> "runtime.throw"
  "runtime.funcspdelta" -> "runtime.pcvalue"
  "runtime.funcspdelta" -> "runtime.funcname"
  "runtime.funcspdelta" -> "(runtime.funcInfo).entry"
  "runtime.funcspdelta" -> "runtime.throw"
  "(*runtime.unwinder).resolveInternal" -> "runtime.funcspdelta"
  "(*runtime.unwinder).resolveInternal" -> "(*runtime.guintptr).set"
  "(*runtime.unwinder).resolveInternal" -> "runtime.findfunc"
  "(*runtime.unwinder).resolveInternal" -> "(*runtime.guintptr).set"
  "(*runtime.unwinder).resolveInternal" -> "runtime.funcspdelta"
  "(*runtime.unwinder).resolveInternal" -> "runtime.funcname"
  "(*runtime.unwinder).resolveInternal" -> "runtime.throw"
  "(*runtime.unwinder).resolveInternal" -> "(runtime.funcInfo).entry"
  "(*runtime.unwinder).initAt" -> "(*runtime.unwinder).resolveInternal"
  "(*runtime.unwinder).init" -> "(*runtime.unwinder).initAt"
  "runtime.gcallers" -> "(*runtime.unwinder).init"
  "(*runtime.unwinder).cgoCallers" -> "(runtime.guintptr).ptr"
  "runtime.cgoContextPCs" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.cgoContextPCs" -> "runtime.noescape"
  "runtime.cgoContextPCs" -> "runtime.getg"
  "runtime.cgoContextPCs" -> "runtime.getg"
  "runtime.msanwrite" -> "runtime.throw"
  "runtime.cgoContextPCs" -> "runtime.msanwrite"
  "runtime.asanwrite" -> "runtime.throw"
  "runtime.cgoContextPCs" -> "runtime.asanwrite"
  "runtime.cgoContextPCs" -> "runtime.noescape"
  "runtime.cgocall" -> "runtime.throw"
  "runtime.cgocall" -> "runtime.throw"
  "runtime.racereleasemerge" -> "runtime.throw"
  "runtime.cgocall" -> "runtime.racereleasemerge"
  "runtime.cgocall" -> "runtime.getg"
  "runtime.entersyscall" -> "runtime.getcallerpc"
  "runtime.entersyscall" -> "runtime.getcallersp"
  "(*runtime/internal/atomic.Uintptr).Load" -> "runtime/internal/atomic.Loaduintptr"
  "runtime.traceEnabled" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.traceAcquire" -> "runtime.traceEnabled"
  "runtime.lockRankMayTraceFlush" -> "runtime.getLockRank"
  "runtime.lockRankMayTraceFlush" -> "runtime.lockWithRankMayAcquire"
  "runtime.traceAcquireEnabled" -> "runtime.lockRankMayTraceFlush"
  "runtime.traceAcquireEnabled" -> "runtime.acquirem"
  "(*runtime/internal/atomic.Uintptr).Add" -> "runtime/internal/atomic.Xadduintptr"
  "runtime.traceAcquireEnabled" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.traceAcquireEnabled" -> "runtime.throw"
  "runtime.traceAcquireEnabled" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.traceAcquireEnabled" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.traceAcquireEnabled" -> "runtime.releasem"
  "runtime.traceAcquire" -> "runtime.traceAcquireEnabled"
  "runtime.reentersyscall" -> "runtime.traceAcquire"
  "runtime.reentersyscall" -> "runtime.getg"
  "runtime.save" -> "runtime.getg"
  "runtime.save" -> "runtime.throw"
  "runtime.badctxt" -> "runtime.throw"
  "runtime.save" -> "runtime.badctxt"
  "runtime.reentersyscall" -> "runtime.save"
  "runtime.casgstatus" -> "runtime.systemstack"
  "runtime.casgstatus" -> "runtime.acquireLockRank"
  "runtime.casgstatus" -> "runtime.releaseLockRank"
  "(*runtime/internal/atomic.Uint32).CompareAndSwap" -> "runtime/internal/atomic.Cas"
  "runtime.casgstatus" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.casgstatus" -> "runtime.throw"
  "runtime.casgstatus" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.casgstatus" -> "runtime.nanotime"
  "runtime.casgstatus" -> "runtime.nanotime"
  "runtime.casgstatus" -> "runtime.osyield"
  "runtime.casgstatus" -> "runtime.nanotime"
  "runtime.casgstatus" -> "runtime.procyield"
  "runtime.casgstatus" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.casgstatus" -> "runtime.nanotime"
  "runtime.casgstatus" -> "(runtime.waitReason).isMutexWait"
  "runtime.casgstatus" -> "runtime.nanotime"
  "runtime.casgstatus" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.casgstatus" -> "(runtime.waitReason).isMutexWait"
  "runtime.casgstatus" -> "runtime.nanotime"
  "runtime.casgstatus" -> "runtime.nanotime"
  "(*runtime.timeHistogram).record" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.timeHistogram).record" -> "runtime/internal/sys.Len64"
  "(*runtime.timeHistogram).record" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.timeHistogram).record" -> "(*runtime/internal/atomic.Uint64).Add"
  "runtime.casgstatus" -> "(*runtime.timeHistogram).record"
  "runtime.reentersyscall" -> "runtime.casgstatus"
  "runtime.reentersyscall" -> "runtime.save"
  "runtime.reentersyscall" -> "runtime.systemstack"
  "runtime.reentersyscall" -> "(runtime.traceLocker).ok"
  "runtime.reentersyscall" -> "runtime.systemstack"
  "runtime.reentersyscall" -> "runtime.save"
  "(*runtime/internal/atomic.Bool).Load" -> "(*runtime/internal/atomic.Uint8).Load"
  "runtime.reentersyscall" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.reentersyscall" -> "runtime.systemstack"
  "runtime.reentersyscall" -> "runtime.save"
  "runtime.reentersyscall" -> "(runtime.puintptr).ptr"
  "runtime.reentersyscall" -> "runtime.systemstack"
  "runtime.reentersyscall" -> "runtime.save"
  "runtime.reentersyscall" -> "(runtime.puintptr).ptr"
  "runtime.reentersyscall" -> "(runtime.puintptr).ptr"
  "runtime.reentersyscall" -> "(*runtime.puintptr).set"
  "runtime.reentersyscall" -> "runtime/internal/atomic.Store"
  "runtime.reentersyscall" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.reentersyscall" -> "runtime.systemstack"
  "runtime.reentersyscall" -> "runtime.save"
  "runtime.entersyscall" -> "runtime.reentersyscall"
  "runtime.cgocall" -> "runtime.entersyscall"
  "runtime.cgocall" -> "runtime.osPreemptExtEnter"
  "runtime.cgocall" -> "runtime.asmcgocall"
  "runtime.cgocall" -> "runtime.osPreemptExtExit"
  "runtime.exitsyscall" -> "runtime.getg"
  "runtime.exitsyscall" -> "runtime.getcallersp"
  "runtime.exitsyscall" -> "runtime.throw"
  "runtime.exitsyscall" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscallfast" -> "runtime.getg"
  "runtime.exitsyscallfast" -> "runtime.traceAcquire"
  "runtime.wirep" -> "runtime.getg"
  "runtime.wirep" -> "runtime.systemstack"
  "runtime.wirep" -> "runtime.systemstack"
  "runtime.wirep" -> "(*runtime.puintptr).set"
  "runtime.wirep" -> "(*runtime.muintptr).set"
  "runtime.exitsyscallfast" -> "runtime.wirep"
  "runtime.exitsyscallfast_reacquired" -> "runtime.getg"
  "runtime.exitsyscallfast_reacquired" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscallfast_reacquired" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscallfast_reacquired" -> "runtime.systemstack"
  "runtime.exitsyscallfast_reacquired" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscallfast" -> "runtime.exitsyscallfast_reacquired"
  "runtime.exitsyscallfast" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscallfast" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscallfast" -> "runtime/internal/atomic.Cas"
  "runtime.traceRelease" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.traceRelease" -> "runtime.throw"
  "runtime.traceRelease" -> "runtime.releasem"
  "runtime.exitsyscallfast" -> "runtime.traceRelease"
  "runtime.exitsyscallfast" -> "runtime.traceRelease"
  "runtime.exitsyscallfast" -> "runtime.systemstack"
  "runtime.exitsyscall" -> "runtime.exitsyscallfast"
  "runtime.exitsyscall" -> "runtime.systemstack"
  "runtime.exitsyscall" -> "runtime.traceAcquire"
  "runtime.exitsyscall" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscall" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscall" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscall" -> "runtime.casgstatus"
  "runtime.exitsyscall" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscall" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscall" -> "runtime.systemstack"
  "runtime.exitsyscall" -> "runtime.traceRelease"
  "runtime.Gosched" -> "runtime.checkTimeouts"
  "runtime.Gosched" -> "runtime.mcall"
  "runtime.exitsyscall" -> "runtime.Gosched"
  "runtime.schedEnabled" -> "runtime.assertLockHeld"
  "runtime.isSystemGoroutine" -> "runtime.findfunc"
  "runtime.isSystemGoroutine" -> "(runtime.funcInfo).valid"
  "runtime.isSystemGoroutine" -> "runtime.funcname"
  "runtime.isSystemGoroutine" -> "runtime.hasPrefix"
  "runtime.isSystemGoroutine" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.schedEnabled" -> "runtime.isSystemGoroutine"
  "runtime.exitsyscall" -> "runtime.schedEnabled"
  "runtime.exitsyscall" -> "runtime.traceAcquire"
  "runtime.exitsyscall" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscall" -> "runtime.mcall"
  "runtime.exitsyscall" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscall" -> "(runtime.traceLocker).RecordSyscallExitedTime"
  "runtime.exitsyscall" -> "runtime.traceRelease"
  "runtime.cgocall" -> "runtime.exitsyscall"
  "runtime.cgocall" -> "runtime.raceacquire"
  "runtime.cgocall" -> "runtime.KeepAlive"
  "runtime.cgocall" -> "runtime.KeepAlive"
  "runtime.cgocall" -> "runtime.KeepAlive"
  "runtime.cgoContextPCs" -> "runtime.cgocall"
  "runtime.cgoContextPCs" -> "runtime.asmcgocall"
  "(*runtime.unwinder).cgoCallers" -> "runtime.cgoContextPCs"
  "runtime.tracebackPCs" -> "(*runtime.unwinder).cgoCallers"
  "(*runtime.unwinder).symPC" -> "(runtime.funcInfo).entry"
  "runtime.tracebackPCs" -> "(*runtime.unwinder).symPC"
  "runtime.newInlineUnwinder" -> "runtime.funcdata"
  "runtime.pcdatastart" -> "runtime.add"
  "runtime.pcdatavalue1" -> "runtime.pcdatastart"
  "runtime.pcdatavalue1" -> "runtime.pcvalue"
  "(*runtime.inlineUnwinder).resolveInternal" -> "runtime.pcdatavalue1"
  "runtime.newInlineUnwinder" -> "(*runtime.inlineUnwinder).resolveInternal"
  "runtime.tracebackPCs" -> "runtime.newInlineUnwinder"
  "runtime.tracebackPCs" -> "(*runtime.unwinder).valid"
  "(runtime.funcInfo).srcFunc" -> "(runtime.funcInfo).valid"
  "(*runtime.inlineUnwinder).srcFunc" -> "(runtime.funcInfo).srcFunc"
  "runtime.tracebackPCs" -> "(*runtime.inlineUnwinder).srcFunc"
  "runtime.tracebackPCs" -> "(runtime.inlineFrame).valid"
  "(*runtime.inlineUnwinder).next" -> "(runtime.funcInfo).entry"
  "(*runtime.inlineUnwinder).next" -> "(*runtime.inlineUnwinder).resolveInternal"
  "runtime.tracebackPCs" -> "(*runtime.inlineUnwinder).next"
  "runtime.tracebackPCs" -> "runtime.elideWrapperCalling"
  "(*runtime.unwinder).next" -> "(runtime.guintptr).ptr"
  "(*runtime.unwinder).next" -> "(*runtime.unwinder).finishInternal"
  "(*runtime.unwinder).next" -> "runtime.findfunc"
  "(*runtime.unwinder).next" -> "(runtime.funcInfo).valid"
  "(*runtime.unwinder).next" -> "runtime.funcname"
  "(*runtime.unwinder).next" -> "runtime.tracebackHexdump"
  "(*runtime.unwinder).next" -> "runtime.throw"
  "(*runtime.unwinder).next" -> "(*runtime.unwinder).finishInternal"
  "(*runtime.unwinder).next" -> "runtime.tracebackHexdump"
  "(*runtime.unwinder).next" -> "runtime.throw"
  "(*runtime.unwinder).next" -> "runtime.alignUp"
  "(*runtime.unwinder).next" -> "runtime.findfunc"
  "(*runtime.unwinder).next" -> "(runtime.funcInfo).valid"
  "(*runtime.unwinder).next" -> "(*runtime.unwinder).resolveInternal"
  "(*runtime.unwinder).next" -> "runtime.funcspdelta"
  "runtime.tracebackPCs" -> "(*runtime.unwinder).next"
  "runtime.gcallers" -> "runtime.tracebackPCs"
  "runtime.saveblockevent" -> "runtime.gcallers"
  "runtime.blockevent" -> "runtime.saveblockevent"
  "runtime.semacquire1" -> "runtime.blockevent"
  "runtime.releaseSudog" -> "runtime.throw"
  "runtime.releaseSudog" -> "runtime.throw"
  "runtime.releaseSudog" -> "runtime.throw"
  "runtime.releaseSudog" -> "runtime.throw"
  "runtime.releaseSudog" -> "runtime.throw"
  "runtime.releaseSudog" -> "runtime.throw"
  "runtime.releaseSudog" -> "runtime.getg"
  "runtime.releaseSudog" -> "runtime.throw"
  "runtime.releaseSudog" -> "runtime.acquirem"
  "runtime.releaseSudog" -> "(runtime.puintptr).ptr"
  "runtime.releaseSudog" -> "runtime.releasem"
  "runtime.releaseSudog" -> "runtime.lock"
  "runtime.releaseSudog" -> "runtime.unlock"
  "runtime.semacquire1" -> "runtime.releaseSudog"
  "runtime.semacquire" -> "runtime.semacquire1"
  "runtime.stopTheWorldGC" -> "runtime.semacquire"
  "runtime.stopTheWorld" -> "runtime.semacquire"
  "runtime.stopTheWorld" -> "runtime.getg"
  "runtime.stopTheWorld" -> "(runtime.stwReason).String"
  "runtime.stopTheWorld" -> "runtime.systemstack"
  "runtime.stopTheWorldGC" -> "runtime.stopTheWorld"
  "runtime.GOMAXPROCS" -> "runtime.stopTheWorldGC"
  "runtime.startTheWorld" -> "runtime.systemstack"
  "runtime.startTheWorld" -> "runtime.acquirem"
  "runtime.semrelease1" -> "(*runtime.semTable).rootFor"
  "runtime.semrelease1" -> "runtime/internal/atomic.Xadd"
  "runtime.semrelease1" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.semrelease1" -> "runtime.lockWithRank"
  "runtime.semrelease1" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.semrelease1" -> "runtime.unlock"
  "(*runtime.semaRoot).dequeue" -> "runtime.cputicks"
  "(*runtime.semaRoot).dequeue" -> "(*runtime.semaRoot).rotateRight"
  "(*runtime.semaRoot).dequeue" -> "(*runtime.semaRoot).rotateLeft"
  "runtime.semrelease1" -> "(*runtime.semaRoot).dequeue"
  "runtime.semrelease1" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.semrelease1" -> "runtime.unlock"
  "runtime.mutexevent" -> "runtime/internal/atomic.Load64"
  "runtime.mutexevent" -> "runtime.saveblockevent"
  "runtime.mutexevent" -> "runtime.cheaprand64"
  "runtime.semrelease1" -> "runtime.mutexevent"
  "runtime.semrelease1" -> "runtime.throw"
  "runtime.readyWithTime" -> "runtime.cputicks"
  "runtime.goready" -> "runtime.systemstack"
  "runtime.readyWithTime" -> "runtime.goready"
  "runtime.semrelease1" -> "runtime.readyWithTime"
  "runtime.semrelease1" -> "runtime.cansemacquire"
  "runtime.goyield" -> "runtime.checkTimeouts"
  "runtime.goyield" -> "runtime.mcall"
  "runtime.semrelease1" -> "runtime.goyield"
  "runtime.semrelease1" -> "runtime.getg"
  "runtime.startTheWorld" -> "runtime.semrelease1"
  "runtime.startTheWorld" -> "runtime.releasem"
  "runtime.startTheWorldGC" -> "runtime.startTheWorld"
  "runtime.semrelease" -> "runtime.semrelease1"
  "runtime.startTheWorldGC" -> "runtime.semrelease"
  "runtime.GOMAXPROCS" -> "runtime.startTheWorldGC"
  "(*sync.Pool).pinSlow" -> "runtime.GOMAXPROCS"
  "(*sync.Pool).pinSlow" -> "sync/atomic.StorePointer"
  "(*sync.Pool).pinSlow" -> "sync.runtime_StoreReluintptr"
  "(*sync.Pool).pin" -> "(*sync.Pool).pinSlow"
  "(*sync.Pool).Get" -> "(*sync.Pool).pin"
  "(*sync/atomic.Uint64).Load" -> "sync/atomic.LoadUint64"
  "(*sync.poolDequeue).popHead" -> "(*sync/atomic.Uint64).Load"
  "(*sync.poolDequeue).popHead" -> "(*sync.poolDequeue).unpack"
  "(*sync.poolDequeue).popHead" -> "(*sync.poolDequeue).pack"
  "(*sync/atomic.Uint64).CompareAndSwap" -> "sync/atomic.CompareAndSwapUint64"
  "(*sync.poolDequeue).popHead" -> "(*sync/atomic.Uint64).CompareAndSwap"
  "(*sync.poolChain).popHead" -> "(*sync.poolDequeue).popHead"
  "sync.loadPoolChainElt" -> "sync/atomic.LoadPointer"
  "(*sync.poolChain).popHead" -> "sync.loadPoolChainElt"
  "(*sync.Pool).Get" -> "(*sync.poolChain).popHead"
  "(*sync.Pool).Get" -> "sync.runtime_procUnpin"
  "(*sync.Pool).getSlow" -> "sync.runtime_LoadAcquintptr"
  "(*sync.Pool).getSlow" -> "sync.indexLocal"
  "(*sync.poolChain).popTail" -> "sync.loadPoolChainElt"
  "(*sync.poolChain).popTail" -> "sync.loadPoolChainElt"
  "(*sync.poolDequeue).popTail" -> "(*sync/atomic.Uint64).Load"
  "(*sync.poolDequeue).popTail" -> "(*sync.poolDequeue).unpack"
  "(*sync.poolDequeue).popTail" -> "(*sync.poolDequeue).pack"
  "(*sync.poolDequeue).popTail" -> "(*sync/atomic.Uint64).CompareAndSwap"
  "(*sync.poolDequeue).popTail" -> "sync/atomic.StorePointer"
  "(*sync.poolChain).popTail" -> "(*sync.poolDequeue).popTail"
  "(*sync.poolChain).popTail" -> "sync/atomic.CompareAndSwapPointer"
  "sync.storePoolChainElt" -> "sync/atomic.StorePointer"
  "(*sync.poolChain).popTail" -> "sync.storePoolChainElt"
  "(*sync.Pool).getSlow" -> "(*sync.poolChain).popTail"
  "(*sync.Pool).getSlow" -> "sync/atomic.LoadUintptr"
  "(*sync.Pool).getSlow" -> "sync.indexLocal"
  "(*sync.Pool).getSlow" -> "sync.indexLocal"
  "(*sync.Pool).getSlow" -> "(*sync.poolChain).popTail"
  "(*sync.Pool).getSlow" -> "sync/atomic.StoreUintptr"
  "(*sync.Pool).Get" -> "(*sync.Pool).getSlow"
  "(*sync.Pool).Get" -> "internal/race.Enable"
  "(*sync.Pool).Get" -> "sync.poolRaceAddr"
  "(*sync.Pool).Get" -> "internal/race.Acquire"
  "(*sync.Pool).Get" -> "fmt.init$1"
  "(*sync.Pool).Get" -> "fmt.init$2"
  "(*sync.Pool).Get" -> "os.init$1"
  "(*sync.Pool).Get" -> "io.init$1"
  "(*sync.Pool).Get" -> "log.init$1"
  "(*sync.Pool).Get" -> "encoding/json.init$1"
  "syscall.init$1" -> "syscall.Getpagesize"
  "(*sync.Pool).Get" -> "syscall.init$1"
  "syscall.RawSyscall" -> "syscall.RawSyscall6"
  "syscall.pipe2" -> "syscall.RawSyscall"
  "syscall.pipe2" -> "syscall.errnoErr"
  "syscall.Pipe2" -> "syscall.pipe2"
  "internal/poll.newPipe" -> "syscall.Pipe2"
  "internal/syscall/unix.Fcntl" -> "internal/syscall/unix.fcntl"
  "internal/poll.newPipe" -> "internal/syscall/unix.Fcntl"
  "internal/poll.newPoolPipe" -> "internal/poll.newPipe"
  "runtime.SetFinalizer" -> "runtime.efaceOf"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.inUserArenaChunk" -> "runtime.spanOf"
  "runtime.SetFinalizer" -> "runtime.inUserArenaChunk"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.findObject" -> "runtime.spanOf"
  "runtime.findObject" -> "(*runtime.mSpanStateBox).get"
  "runtime.badPointer" -> "runtime.printlock"
  "runtime.badPointer" -> "(*runtime.mSpanStateBox).get"
  "runtime.badPointer" -> "(*runtime.mspan).base"
  "runtime.gcDumpObject" -> "runtime.spanOf"
  "runtime.gcDumpObject" -> "(*runtime.mspan).base"
  "runtime.gcDumpObject" -> "(*runtime.mSpanStateBox).get"
  "runtime.gcDumpObject" -> "(*runtime.mSpanStateBox).get"
  "runtime.badPointer" -> "runtime.gcDumpObject"
  "runtime.badPointer" -> "runtime.getg"
  "runtime.badPointer" -> "runtime.throw"
  "runtime.findObject" -> "runtime.badPointer"
  "runtime.findObject" -> "(*runtime.mspan).objIndex"
  "runtime.findObject" -> "(*runtime.mspan).base"
  "runtime.findObject" -> "(*runtime.mspan).base"
  "runtime.findObject" -> "runtime.badPointer"
  "runtime.SetFinalizer" -> "runtime.findObject"
  "runtime.SetFinalizer" -> "runtime.isGoPointerWithoutSpan"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.SetFinalizer" -> "(runtime.spanClass).sizeclass"
  "runtime.SetFinalizer" -> "runtime.heapBitsInSpan"
  "runtime.SetFinalizer" -> "(runtime.spanClass).noscan"
  "runtime.SetFinalizer" -> "runtime.efaceOf"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.SetFinalizer" -> "runtime.systemstack"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.SetFinalizer" -> "(*internal/abi.FuncType).IsVariadic"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.throw"
  "(*internal/abi.FuncType).InSlice" -> "internal/abi.addChecked"
  "runtime.SetFinalizer" -> "(*internal/abi.FuncType).InSlice"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.toRType"
  "runtime.SetFinalizer" -> "(runtime.rtype).string"
  "runtime.SetFinalizer" -> "runtime.throw"
  "runtime.SetFinalizer" -> "(*internal/abi.Type).Uncommon"
  "(*internal/abi.FuncType).OutSlice" -> "(*internal/abi.FuncType).NumOut"
  "(*internal/abi.FuncType).OutSlice" -> "internal/abi.addChecked"
  "runtime.SetFinalizer" -> "(*internal/abi.FuncType).OutSlice"
  "runtime.SetFinalizer" -> "(*internal/abi.Type).Uncommon"
  "runtime.SetFinalizer" -> "runtime.efaceOf"
  "runtime.getitab" -> "runtime.throw"
  "runtime.getitab" -> "runtime/internal/atomic.Loadp"
  "(*runtime.itabTableType).find" -> "runtime.itabHashFunc"
  "(*runtime.itabTableType).find" -> "runtime.add"
  "(*runtime.itabTableType).find" -> "runtime/internal/atomic.Loadp"
  "runtime.getitab" -> "(*runtime.itabTableType).find"
  "runtime.getitab" -> "runtime.toRType"
  "runtime.getitab" -> "(runtime.rtype).nameOff"
  "runtime.getitab" -> "(internal/abi.Name).Name"
  "runtime.getitab" -> "runtime.lock"
  "runtime.getitab" -> "(*runtime.itabTableType).find"
  "runtime.getitab" -> "runtime.unlock"
  "runtime.getitab" -> "runtime.persistentalloc"
  "(*runtime.itab).init" -> "(*internal/abi.Type).Uncommon"
  "(*runtime.itab).init" -> "runtime.add"
  "(*runtime.itab).init" -> "runtime.toRType"
  "runtime.resolveTypeOff" -> "runtime.reflectOffsLock"
  "runtime.resolveTypeOff" -> "runtime.reflectOffsUnlock"
  "runtime.resolveTypeOff" -> "runtime.throw"
  "runtime.resolveTypeOff" -> "runtime.throw"
  "(runtime.rtype).typeOff" -> "runtime.resolveTypeOff"
  "(*runtime.itab).init" -> "(runtime.rtype).typeOff"
  "(*runtime.itab).init" -> "runtime.toRType"
  "(*runtime.itab).init" -> "(runtime.rtype).nameOff"
  "(*runtime.itab).init" -> "(internal/abi.Name).Name"
  "runtime.pkgPath" -> "(internal/abi.Name).ReadVarint"
  "(internal/abi.Name).Data" -> "internal/abi.addChecked"
  "runtime.pkgPath" -> "(internal/abi.Name).Data"
  "runtime.pkgPath" -> "(internal/abi.Name).Data"
  "runtime.pkgPath" -> "(internal/abi.Name).ReadVarint"
  "runtime.pkgPath" -> "(internal/abi.Name).Data"
  "runtime.pkgPath" -> "runtime.resolveNameOff"
  "runtime.pkgPath" -> "(internal/abi.Name).Name"
  "(*runtime.itab).init" -> "runtime.pkgPath"
  "(*runtime.itab).init" -> "(internal/abi.Name).Name"
  "(*runtime.itab).init" -> "runtime.toRType"
  "(*runtime.itab).init" -> "(runtime.rtype).nameOff"
  "(*runtime.itab).init" -> "(runtime.rtype).typeOff"
  "(*runtime.itab).init" -> "runtime.pkgPath"
  "(*runtime.itab).init" -> "(internal/abi.Name).Name"
  "(*runtime.itab).init" -> "(runtime.rtype).nameOff"
  "(*runtime.itab).init" -> "(internal/abi.Name).Name"
  "(*runtime.itab).init" -> "(internal/abi.Name).IsExported"
  "(runtime.rtype).textOff" -> "internal/abi.FuncPCABIInternal"
  "(runtime.rtype).textOff" -> "runtime.reflectOffsLock"
  "(runtime.rtype).textOff" -> "runtime.reflectOffsUnlock"
  "(runtime.rtype).textOff" -> "(*runtime.moduledata).textAddr"
  "(runtime.rtype).textOff" -> "runtime.throw"
  "(*runtime.itab).init" -> "(runtime.rtype).textOff"
  "runtime.getitab" -> "(*runtime.itab).init"
  "runtime.itabAdd" -> "runtime.getg"
  "runtime.itabAdd" -> "runtime.throw"
  "runtime.mallocgc" -> "runtime.throw"
  "runtime.lockRankMayQueueFinalizer" -> "runtime.getLockRank"
  "runtime.lockRankMayQueueFinalizer" -> "runtime.lockWithRankMayAcquire"
  "runtime.mallocgc" -> "runtime.lockRankMayQueueFinalizer"
  "runtime.mallocgc" -> "runtime.computeRZlog"
  "runtime.deductAssistCredit" -> "runtime.getg"
  "runtime.gcAssistAlloc" -> "runtime.getg"
  "runtime.gcAssistAlloc" -> "runtime.getg"
  "(*runtime.gcCPULimiterState).limiting" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.gcAssistAlloc" -> "(*runtime.gcCPULimiterState).limiting"
  "(*runtime/internal/atomic.Uint64).Load" -> "runtime/internal/atomic.Load64"
  "(*runtime/internal/atomic.Float64).Load" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcAssistAlloc" -> "(*runtime/internal/atomic.Float64).Load"
  "runtime.gcAssistAlloc" -> "(*runtime/internal/atomic.Float64).Load"
  "runtime.gcAssistAlloc" -> "runtime.traceAcquire"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).eventWriter" -> "(runtime.traceLocker).writer"
  "(runtime.traceLocker).eventWriter" -> "(runtime.puintptr).ptr"
  "(runtime.traceWriter).writeProcStatus" -> "runtime.throw"
  "(runtime.traceWriter).ensure" -> "(*runtime.traceBuf).available"
  "(runtime.traceWriter).refill" -> "runtime.systemstack"
  "runtime.traceClockNow" -> "runtime.cputicks"
  "runtime.traceClockNow" -> "runtime.nanotime"
  "(runtime.traceWriter).refill" -> "runtime.traceClockNow"
  "(runtime.traceWriter).refill" -> "(*runtime.traceBuf).byte"
  "(runtime.traceWriter).refill" -> "(*runtime.traceBuf).varint"
  "(runtime.traceWriter).refill" -> "(*runtime.traceBuf).varint"
  "(runtime.traceWriter).refill" -> "(*runtime.traceBuf).varint"
  "(runtime.traceWriter).refill" -> "(*runtime.traceBuf).varintReserve"
  "(runtime.traceWriter).ensure" -> "(runtime.traceWriter).refill"
  "(runtime.traceWriter).event" -> "(runtime.traceWriter).ensure"
  "(runtime.traceWriter).event" -> "runtime.traceClockNow"
  "(runtime.traceWriter).event" -> "(*runtime.traceBuf).byte"
  "(runtime.traceWriter).event" -> "(*runtime.traceBuf).varint"
  "(runtime.traceWriter).event" -> "(*runtime.traceBuf).varint"
  "(runtime.traceWriter).writeProcStatus" -> "(runtime.traceWriter).event"
  "(runtime.traceWriter).writeProcStatus" -> "(runtime.traceWriter).event"
  "(runtime.traceLocker).eventWriter" -> "(runtime.traceWriter).writeProcStatus"
  "(*runtime.traceSchedResourceState).acquireStatus" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "(*runtime.traceSchedResourceState).readyNextGen" -> "runtime.traceNextGen"
  "(*runtime/internal/atomic.Uint32).Store" -> "runtime/internal/atomic.Store"
  "(*runtime.traceSchedResourceState).readyNextGen" -> "(*runtime/internal/atomic.Uint32).Store"
  "(*runtime.traceSchedResourceState).acquireStatus" -> "(*runtime.traceSchedResourceState).readyNextGen"
  "(runtime.traceLocker).eventWriter" -> "(*runtime.traceSchedResourceState).acquireStatus"
  "(*runtime.traceSchedResourceState).statusWasTraced" -> "(*runtime/internal/atomic.Uint32).Load"
  "(runtime.traceLocker).eventWriter" -> "(*runtime.traceSchedResourceState).statusWasTraced"
  "(runtime.traceWriter).writeGoStatus" -> "runtime.throw"
  "(runtime.traceWriter).writeGoStatus" -> "(runtime.traceWriter).event"
  "(runtime.traceWriter).writeGoStatus" -> "(runtime.traceWriter).event"
  "(runtime.traceLocker).eventWriter" -> "(runtime.traceWriter).writeGoStatus"
  "(runtime.traceLocker).eventWriter" -> "(*runtime.traceSchedResourceState).acquireStatus"
  "(runtime.traceLocker).eventWriter" -> "(*runtime.traceSchedResourceState).statusWasTraced"
  "(runtime.traceLocker).GCMarkAssistDone" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceEventWriter).write" -> "(runtime.traceWriter).event"
  "(runtime.traceEventWriter).commit" -> "(runtime.traceEventWriter).write"
  "(runtime.traceEventWriter).end" -> "(runtime.traceWriter).end"
  "(runtime.traceEventWriter).commit" -> "(runtime.traceEventWriter).end"
  "(runtime.traceLocker).GCMarkAssistDone" -> "(runtime.traceEventWriter).commit"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).GCMarkAssistDone"
  "runtime.gcAssistAlloc" -> "runtime.traceRelease"
  "(*runtime/internal/atomic.Int64).Load" -> "runtime/internal/atomic.Loadint64"
  "runtime.gcAssistAlloc" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.gcAssistAlloc" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcAssistAlloc" -> "runtime.traceAcquire"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).ok"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).GCMarkAssistDone"
  "runtime.gcAssistAlloc" -> "runtime.traceRelease"
  "runtime.gcAssistAlloc" -> "runtime.traceAcquire"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).ok"
  "runtime.gcAssistAlloc" -> "runtime.systemstack"
  "(runtime.traceLocker).GCMarkAssistStart" -> "(runtime.traceLocker).eventWriter"
  "runtime.traceStack" -> "runtime.getg"
  "runtime.traceStack" -> "runtime.tracefpunwindoff"
  "runtime.traceStack" -> "(*runtime.m).hasCgoOnStack"
  "runtime.traceStack" -> "runtime.callers"
  "runtime.traceStack" -> "runtime.gcallers"
  "runtime.traceStack" -> "runtime.getfp"
  "runtime.traceStack" -> "runtime.fpTracebackPCs"
  "runtime.traceStack" -> "runtime.fpTracebackPCs"
  "(*runtime.traceStackTable).put" -> "runtime.noescape"
  "(*runtime.traceMap).put" -> "runtime.memhash"
  "(*runtime.traceMap).bucket" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.traceMap).find" -> "(*runtime.traceMap).bucket"
  "(*runtime.traceMap).find" -> "runtime.memequal"
  "(*runtime.traceMapNode).next" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.traceMap).find" -> "(*runtime.traceMapNode).next"
  "(*runtime.traceMap).put" -> "(*runtime.traceMap).find"
  "(*runtime.traceMap).put" -> "runtime.systemstack"
  "(*runtime.traceStackTable).put" -> "(*runtime.traceMap).put"
  "runtime.traceStack" -> "(*runtime.traceStackTable).put"
  "(runtime.traceLocker).stack" -> "runtime.traceStack"
  "(runtime.traceLocker).GCMarkAssistStart" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).GCMarkAssistStart" -> "(runtime.traceEventWriter).commit"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).GCMarkAssistStart"
  "runtime.gcAssistAlloc" -> "runtime.traceRelease"
  "runtime.gcMarkDone" -> "runtime.semacquire"
  "runtime.gcMarkDone" -> "runtime.semrelease"
  "runtime.gcMarkDone" -> "runtime.semacquire"
  "runtime.forEachP" -> "runtime.systemstack"
  "runtime.gcMarkDone" -> "runtime.forEachP"
  "(*runtime.lfstack).empty" -> "runtime/internal/atomic.Load64"
  "runtime.gcMarkWorkAvailable" -> "(*runtime.lfstack).empty"
  "runtime.gcMarkWorkAvailable" -> "(*runtime.gcWork).empty"
  "runtime.gcMarkDone" -> "runtime.gcMarkWorkAvailable"
  "runtime.gcMarkDone" -> "runtime.semrelease"
  "runtime.gcMarkDone" -> "runtime.nanotime"
  "runtime.gcMarkDone" -> "runtime.getg"
  "runtime.gcMarkDone" -> "runtime.systemstack"
  "runtime.gcMarkDone" -> "runtime.systemstack"
  "runtime.gcMarkDone" -> "runtime.getg"
  "runtime.gcMarkDone" -> "runtime.systemstack"
  "runtime.gcMarkDone" -> "runtime.semrelease"
  "runtime.gcComputeStartingStackSize" -> "runtime.round2"
  "runtime.gcMarkDone" -> "runtime.gcComputeStartingStackSize"
  "runtime.gcMarkDone" -> "runtime/internal/atomic.Store"
  "(*runtime.gcCPULimiterState).tryLock" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "(*runtime.gcCPULimiterState).startGCTransition" -> "(*runtime.gcCPULimiterState).tryLock"
  "(*runtime.gcCPULimiterState).startGCTransition" -> "runtime.throw"
  "(*runtime.gcCPULimiterState).startGCTransition" -> "runtime.throw"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime/internal/atomic.Int64).Store" -> "runtime/internal/atomic.Storeint64"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcCPULimiterState).updateLocked" -> "runtime.acquirem"
  "(*runtime.limiterEvent).consume" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.limiterEvent).consume" -> "(runtime.limiterEventStamp).typ"
  "(*runtime.limiterEvent).consume" -> "(runtime.limiterEventStamp).duration"
  "(*runtime.limiterEvent).consume" -> "runtime.makeLimiterEventStamp"
  "(*runtime/internal/atomic.Uint64).CompareAndSwap" -> "runtime/internal/atomic.Cas64"
  "(*runtime.limiterEvent).consume" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime.limiterEvent).consume"
  "(*runtime.gcCPULimiterState).updateLocked" -> "runtime.releasem"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcCPULimiterState).updateLocked" -> "runtime.throw"
  "(*runtime/internal/atomic.Uint8).Store" -> "runtime/internal/atomic.Store8"
  "(*runtime/internal/atomic.Bool).Store" -> "(*runtime/internal/atomic.Uint8).Store"
  "(*runtime.gcCPULimiterState).accumulate" -> "(*runtime/internal/atomic.Bool).Store"
  "(*runtime.gcCPULimiterState).accumulate" -> "(*runtime/internal/atomic.Uint32).Store"
  "(*runtime.gcCPULimiterState).accumulate" -> "(*runtime/internal/atomic.Bool).Store"
  "(*runtime.gcCPULimiterState).updateLocked" -> "(*runtime.gcCPULimiterState).accumulate"
  "(*runtime.gcCPULimiterState).startGCTransition" -> "(*runtime.gcCPULimiterState).updateLocked"
  "runtime.gcMarkDone" -> "(*runtime.gcCPULimiterState).startGCTransition"
  "runtime.gcWakeAllAssists" -> "runtime.lock"
  "runtime.gcWakeAllAssists" -> "(*runtime.gQueue).popList"
  "runtime.injectglist" -> "(*runtime.gList).empty"
  "runtime.injectglist" -> "runtime.traceAcquire"
  "runtime.injectglist" -> "(runtime.traceLocker).ok"
  "runtime.injectglist" -> "(runtime.guintptr).ptr"
  "runtime.injectglist" -> "(runtime.guintptr).ptr"
  "(runtime.traceLocker).GoUnpark" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GoUnpark" -> "(*runtime.traceSchedResourceState).statusWasTraced"
  "(runtime.traceLocker).GoUnpark" -> "(runtime.traceWriter).writeGoStatus"
  "(runtime.traceLocker).GoUnpark" -> "(*runtime.traceSchedResourceState).nextSeq"
  "(runtime.traceLocker).GoUnpark" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).GoUnpark" -> "(runtime.traceEventWriter).commit"
  "(runtime.traceLocker).GoUnpark" -> "(*runtime.traceSchedResourceState).acquireStatus"
  "runtime.injectglist" -> "(runtime.traceLocker).GoUnpark"
  "runtime.injectglist" -> "(runtime.guintptr).ptr"
  "runtime.injectglist" -> "runtime.traceRelease"
  "runtime.injectglist" -> "runtime.casgstatus"
  "runtime.injectglist" -> "(runtime.guintptr).ptr"
  "runtime.injectglist" -> "(*runtime.guintptr).set"
  "runtime.injectglist" -> "(*runtime.guintptr).set"
  "runtime.injectglist" -> "runtime.getg"
  "runtime.injectglist" -> "(runtime.puintptr).ptr"
  "runtime.injectglist" -> "runtime.lock"
  "runtime.globrunqputbatch" -> "runtime.assertLockHeld"
  "(*runtime.gQueue).pushBackAll" -> "(runtime.guintptr).ptr"
  "(*runtime.gQueue).pushBackAll" -> "(runtime.guintptr).ptr"
  "runtime.globrunqputbatch" -> "(*runtime.gQueue).pushBackAll"
  "runtime.injectglist" -> "runtime.globrunqputbatch"
  "runtime.injectglist" -> "runtime.unlock"
  "runtime.injectglist$1" -> "runtime.acquirem"
  "runtime.injectglist$1" -> "runtime.lock"
  "runtime.pidlegetSpinning" -> "runtime.assertLockHeld"
  "runtime.pidleget" -> "runtime.assertLockHeld"
  "runtime.pidleget" -> "(runtime.puintptr).ptr"
  "runtime.pidleget" -> "runtime.nanotime"
  "(runtime.pMask).set" -> "runtime/internal/atomic.Or"
  "runtime.pidleget" -> "(runtime.pMask).set"
  "(runtime.pMask).clear" -> "runtime/internal/atomic.And"
  "runtime.pidleget" -> "(runtime.pMask).clear"
  "(*runtime/internal/atomic.Int32).Add" -> "runtime/internal/atomic.Xaddint32"
  "runtime.pidleget" -> "(*runtime/internal/atomic.Int32).Add"
  "(*runtime.limiterEvent).stop" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.limiterEvent).stop" -> "(runtime.limiterEventStamp).typ"
  "(*runtime.limiterEvent).stop" -> "(runtime.limiterEventStamp).typ"
  "(*runtime.limiterEvent).stop" -> "runtime.throw"
  "(*runtime.limiterEvent).stop" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "(*runtime.limiterEvent).stop" -> "(runtime.limiterEventStamp).duration"
  "(*runtime.gcCPULimiterState).addIdleTime" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.limiterEvent).stop" -> "(*runtime.gcCPULimiterState).addIdleTime"
  "(*runtime.limiterEvent).stop" -> "(*runtime.gcCPULimiterState).addIdleTime"
  "(*runtime.limiterEvent).stop" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcCPULimiterState).addAssistTime" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.limiterEvent).stop" -> "(*runtime.gcCPULimiterState).addAssistTime"
  "(*runtime.limiterEvent).stop" -> "runtime.throw"
  "runtime.pidleget" -> "(*runtime.limiterEvent).stop"
  "runtime.pidlegetSpinning" -> "runtime.pidleget"
  "runtime.pidlegetSpinning" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.injectglist$1" -> "runtime.pidlegetSpinning"
  "runtime.injectglist$1" -> "runtime.unlock"
  "runtime.injectglist$1" -> "runtime.releasem"
  "runtime.startm" -> "runtime.acquirem"
  "runtime.startm" -> "runtime.lock"
  "runtime.mget" -> "runtime.assertLockHeld"
  "runtime.mget" -> "(runtime.muintptr).ptr"
  "runtime.startm" -> "runtime.mget"
  "runtime.startm" -> "runtime.throw"
  "runtime.startm" -> "runtime.pidleget"
  "runtime.startm" -> "runtime.unlock"
  "runtime.startm" -> "runtime.releasem"
  "runtime.mReserveID" -> "runtime.assertLockHeld"
  "runtime.mReserveID" -> "runtime.throw"
  "runtime.checkmcount" -> "runtime.assertLockHeld"
  "runtime.checkmcount" -> "runtime.mcount"
  "runtime.checkmcount" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.checkmcount" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.checkmcount" -> "runtime.throw"
  "runtime.mReserveID" -> "runtime.checkmcount"
  "runtime.startm" -> "runtime.mReserveID"
  "runtime.startm" -> "runtime.unlock"
  "runtime.newm" -> "runtime.acquirem"
  "(*runtime.rwmutex).rlock" -> "runtime.acquirem"
  "(*runtime.rwmutex).rlock" -> "runtime.acquireLockRank"
  "(*runtime.rwmutex).rlock" -> "runtime.getLockRank"
  "(*runtime.rwmutex).rlock" -> "runtime.lockWithRankMayAcquire"
  "(*runtime.rwmutex).rlock" -> "(*runtime/internal/atomic.Int32).Add"
  "(*runtime.rwmutex).rlock" -> "runtime.systemstack"
  "runtime.allocm" -> "(*runtime.rwmutex).rlock"
  "runtime.allocm" -> "runtime.acquirem"
  "runtime.allocm" -> "runtime.getg"
  "runtime.acquirep" -> "runtime.wirep"
  "(*runtime.mcache).prepareForSweep" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.mcache).prepareForSweep" -> "runtime.throw"
  "(*runtime.consistentHeapStats).acquire" -> "runtime.getg"
  "(*runtime.consistentHeapStats).acquire" -> "(runtime.puintptr).ptr"
  "(*runtime.consistentHeapStats).acquire" -> "(*runtime/internal/atomic.Uint32).Add"
  "(*runtime.consistentHeapStats).acquire" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.consistentHeapStats).acquire" -> "runtime.lock"
  "(*runtime.consistentHeapStats).acquire" -> "runtime.throw"
  "(*runtime.mcache).releaseAll" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mcache).releaseAll" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.consistentHeapStats).release" -> "runtime.getg"
  "(*runtime.consistentHeapStats).release" -> "(runtime.puintptr).ptr"
  "(*runtime.consistentHeapStats).release" -> "(*runtime/internal/atomic.Uint32).Add"
  "(*runtime.consistentHeapStats).release" -> "runtime.unlock"
  "(*runtime.consistentHeapStats).release" -> "runtime.throw"
  "(*runtime.mcache).releaseAll" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.gcControllerState).update" -> "runtime.traceAcquire"
  "(*runtime.gcControllerState).update" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.gcControllerState).update" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).HeapAlloc" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).HeapAlloc" -> "(runtime.traceEventWriter).commit"
  "(*runtime.gcControllerState).update" -> "(runtime.traceLocker).HeapAlloc"
  "(*runtime.gcControllerState).update" -> "runtime.traceRelease"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Int32).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).heapGoalInternal" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.sysMemStat).load" -> "runtime/internal/atomic.Load64"
  "(*runtime.gcControllerState).memoryLimitHeapGoal" -> "(*runtime.sysMemStat).load"
  "(*runtime.gcControllerState).memoryLimitHeapGoal" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).memoryLimitHeapGoal" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).memoryLimitHeapGoal" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).memoryLimitHeapGoal" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).heapGoalInternal" -> "(*runtime.gcControllerState).memoryLimitHeapGoal"
  "(*runtime.gcControllerState).heapGoalInternal" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).heapGoal" -> "(*runtime.gcControllerState).heapGoalInternal"
  "(*runtime.gcControllerState).revise" -> "(*runtime.gcControllerState).heapGoal"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime/internal/atomic.Uint64).Store" -> "runtime/internal/atomic.Store64"
  "(*runtime/internal/atomic.Float64).Store" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Float64).Store"
  "(*runtime.gcControllerState).revise" -> "(*runtime/internal/atomic.Float64).Store"
  "(*runtime.gcControllerState).update" -> "(*runtime.gcControllerState).revise"
  "(*runtime.gcControllerState).update" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mcache).releaseAll" -> "(*runtime.gcControllerState).update"
  "(*runtime.mcache).releaseAll" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mcache).releaseAll" -> "(runtime.spanClass).sizeclass"
  "(*runtime.mcache).releaseAll" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.mcache).releaseAll" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.mcache).releaseAll" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mcentral).uncacheSpan" -> "runtime.throw"
  "(*runtime.mcentral).uncacheSpan" -> "runtime/internal/atomic.Store"
  "(*runtime.mcentral).uncacheSpan" -> "runtime/internal/atomic.Store"
  "(*runtime.sweepLocked).sweep" -> "runtime.getg"
  "(*runtime.sweepLocked).sweep" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mSpanStateBox).get"
  "(*runtime.sweepLocked).sweep" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime.traceAcquire"
  "(*runtime.sweepLocked).sweep" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).GCSweepSpan" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).GCSweepSpan" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GCSweepSpan" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).GCSweepSpan" -> "(runtime.traceEventWriter).commit"
  "(*runtime.sweepLocked).sweep" -> "(runtime.traceLocker).GCSweepSpan"
  "(*runtime.sweepLocked).sweep" -> "runtime.traceRelease"
  "(*runtime.sweepLocked).sweep" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.sweepLocked).sweep" -> "runtime.newSpecialsIter"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).base"
  "(*runtime.mspan).markBitsForIndex" -> "(*runtime.gcBits).bitp"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).markBitsForIndex"
  "(*runtime.sweepLocked).sweep" -> "(runtime.markBits).isMarked"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.specialsIter).valid"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).base"
  "(*runtime.sweepLocked).sweep" -> "(runtime.markBits).setMarkedNonAtomic"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).base"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.specialsIter).valid"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.specialsIter).unlinkAndNext"
  "runtime.queuefinalizer" -> "runtime.throw"
  "runtime.queuefinalizer" -> "runtime.lock"
  "runtime.queuefinalizer" -> "runtime/internal/atomic.Xadd"
  "runtime.queuefinalizer" -> "runtime.unlock"
  "(*runtime/internal/atomic.Uint32).Or" -> "runtime/internal/atomic.Or"
  "runtime.queuefinalizer" -> "(*runtime/internal/atomic.Uint32).Or"
  "runtime.queuefinalizer" -> "runtime.persistentalloc"
  "runtime.queuefinalizer" -> "runtime.throw"
  "runtime.freeSpecial" -> "runtime.queuefinalizer"
  "runtime.freeSpecial" -> "runtime.lock"
  "runtime.freeSpecial" -> "(*runtime.fixalloc).free"
  "runtime.freeSpecial" -> "runtime.unlock"
  "(*runtime.mProfCycleHolder).read" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.mProf_Free" -> "(*runtime.mProfCycleHolder).read"
  "(*runtime.bucket).mp" -> "runtime.throw"
  "(*runtime.bucket).mp" -> "runtime.add"
  "runtime.mProf_Free" -> "(*runtime.bucket).mp"
  "runtime.mProf_Free" -> "runtime.lock"
  "runtime.mProf_Free" -> "runtime.unlock"
  "runtime.freeSpecial" -> "runtime.mProf_Free"
  "runtime.freeSpecial" -> "runtime.lock"
  "runtime.freeSpecial" -> "(*runtime.fixalloc).free"
  "runtime.freeSpecial" -> "runtime.unlock"
  "runtime.freeSpecial" -> "runtime.lock"
  "runtime.freeSpecial" -> "(*runtime.fixalloc).free"
  "runtime.freeSpecial" -> "runtime.unlock"
  "runtime.freeSpecial" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime.freeSpecial"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.specialsIter).next"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.specialsIter).unlinkAndNext"
  "(*runtime.sweepLocked).sweep" -> "runtime.freeSpecial"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.specialsIter).next"
  "runtime.spanHasNoSpecials" -> "(*runtime.mspan).base"
  "runtime.spanHasNoSpecials" -> "(*runtime.mspan).base"
  "runtime.spanHasNoSpecials" -> "runtime.arenaIndex"
  "runtime.spanHasNoSpecials" -> "(runtime.arenaIdx).l1"
  "runtime.spanHasNoSpecials" -> "(runtime.arenaIdx).l2"
  "runtime.spanHasNoSpecials" -> "runtime/internal/atomic.And8"
  "(*runtime.sweepLocked).sweep" -> "runtime.spanHasNoSpecials"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).markBitsForBase"
  "(*runtime.mspan).allocBitsForIndex" -> "(*runtime.gcBits).bitp"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).allocBitsForIndex"
  "(*runtime.sweepLocked).sweep" -> "(runtime.markBits).isMarked"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).base"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.markBits).advance"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.markBits).advance"
  "(*runtime.sweepLocked).sweep" -> "(runtime.markBits).isMarked"
  "runtime.tracefree" -> "runtime.lock"
  "runtime.tracefree" -> "runtime.getg"
  "runtime.gotraceback" -> "runtime.getg"
  "runtime.gotraceback" -> "runtime/internal/atomic.Load"
  "runtime.goroutineheader" -> "runtime.gotraceback"
  "runtime.goroutineheader" -> "runtime.readgstatus"
  "runtime.goroutineheader" -> "(runtime.waitReason).String"
  "runtime.goroutineheader" -> "runtime.nanotime"
  "runtime.tracefree" -> "runtime.goroutineheader"
  "runtime.tracefree" -> "runtime.getcallerpc"
  "runtime.tracefree" -> "runtime.getcallersp"
  "runtime.tracefree" -> "runtime.systemstack"
  "runtime.tracefree" -> "runtime.unlock"
  "(*runtime.sweepLocked).sweep" -> "runtime.tracefree"
  "runtime.clobberfree" -> "runtime.add"
  "(*runtime.sweepLocked).sweep" -> "runtime.clobberfree"
  "runtime.racefree" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime.racefree"
  "runtime.msanfree" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime.msanfree"
  "runtime.asanpoison" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime.asanpoison"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.gcBits).bytep"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.gcBits).bytep"
  "(*runtime.mspan).countAlloc" -> "runtime.divRoundUp"
  "(*runtime.mspan).countAlloc" -> "(*runtime.gcBits).bytep"
  "(*runtime.mspan).countAlloc" -> "runtime/internal/sys.OnesCount64"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).countAlloc"
  "(*runtime.mspan).reportZombies" -> "runtime.printlock"
  "(*runtime.mspan).reportZombies" -> "(*runtime.mspan).markBitsForBase"
  "(*runtime.mspan).reportZombies" -> "(*runtime.mspan).allocBitsForIndex"
  "(*runtime.mspan).reportZombies" -> "(*runtime.mspan).base"
  "(*runtime.mspan).reportZombies" -> "runtime.throw"
  "(*runtime.mspan).reportZombies" -> "(runtime.markBits).isMarked"
  "(*runtime.mspan).reportZombies" -> "(runtime.markBits).isMarked"
  "(*runtime.mspan).reportZombies" -> "(runtime.markBits).isMarked"
  "(*runtime.mspan).reportZombies" -> "(*runtime.markBits).advance"
  "(*runtime.mspan).reportZombies" -> "(*runtime.markBits).advance"
  "(*runtime.mspan).reportZombies" -> "runtime.hexdumpWords"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).reportZombies"
  "(*runtime.sweepLocked).sweep" -> "runtime.divRoundUp"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.gcBits).bytep"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.gcBits).bytep"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).reportZombies"
  "(*runtime.sweepLocked).sweep" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime.traceEnabled"
  "(*runtime.sweepLocked).sweep" -> "runtime.getg"
  "(*runtime.sweepLocked).sweep" -> "(runtime.puintptr).ptr"
  "runtime.newMarkBits" -> "runtime/internal/atomic.Loadp"
  "(*runtime.gcBitsArena).tryAlloc" -> "runtime/internal/atomic.Xadduintptr"
  "(*runtime.gcBitsArena).tryAlloc" -> "runtime/internal/atomic.Loaduintptr"
  "runtime.newMarkBits" -> "(*runtime.gcBitsArena).tryAlloc"
  "runtime.newMarkBits" -> "runtime.lock"
  "runtime.newMarkBits" -> "(*runtime.gcBitsArena).tryAlloc"
  "runtime.newMarkBits" -> "runtime.unlock"
  "runtime.newArenaMayUnlock" -> "runtime.unlock"
  "runtime.newArenaMayUnlock" -> "runtime.sysAlloc"
  "runtime.newArenaMayUnlock" -> "runtime.memclrNoHeapPointers"
  "runtime.newArenaMayUnlock" -> "runtime.throw"
  "runtime.newArenaMayUnlock" -> "runtime.lock"
  "runtime.newMarkBits" -> "runtime.newArenaMayUnlock"
  "runtime.newMarkBits" -> "(*runtime.gcBitsArena).tryAlloc"
  "runtime.newMarkBits" -> "runtime.unlock"
  "runtime.newMarkBits" -> "(*runtime.gcBitsArena).tryAlloc"
  "runtime.newMarkBits" -> "runtime.throw"
  "runtime.newMarkBits" -> "runtime/internal/atomic.StorepNoWB"
  "runtime.newMarkBits" -> "runtime.unlock"
  "(*runtime.sweepLocked).sweep" -> "runtime.newMarkBits"
  "(*runtime.mspan).getPinnerBits" -> "runtime/internal/atomic.Loadp"
  "(*runtime.mspan).refreshPinnerBits" -> "(*runtime.mspan).getPinnerBits"
  "(*runtime.mspan).pinnerBitSize" -> "runtime.divRoundUp"
  "(*runtime.mspan).refreshPinnerBits" -> "(*runtime.mspan).pinnerBitSize"
  "(*runtime.mspan).refreshPinnerBits" -> "runtime.alignUp"
  "(*runtime.mspan).newPinnerBits" -> "runtime.newMarkBits"
  "(*runtime.mspan).refreshPinnerBits" -> "(*runtime.mspan).newPinnerBits"
  "(*runtime.mspan).refreshPinnerBits" -> "runtime.memmove"
  "runtime.atomicwb" -> "runtime.getg"
  "runtime.atomicwb" -> "(runtime.puintptr).ptr"
  "runtime.atomicwb" -> "(*runtime.wbBuf).get2"
  "runtime.atomicstorep" -> "runtime.atomicwb"
  "runtime.inHeapOrStack" -> "runtime.spanOf"
  "runtime.inHeapOrStack" -> "(*runtime.mSpanStateBox).get"
  "runtime.inHeapOrStack" -> "(*runtime.mspan).base"
  "runtime.cgoIsGoPointer" -> "runtime.inHeapOrStack"
  "runtime.activeModules" -> "runtime/internal/atomic.Loadp"
  "runtime.cgoIsGoPointer" -> "runtime.activeModules"
  "runtime.cgoIsGoPointer" -> "runtime.cgoInRange"
  "runtime.cgoIsGoPointer" -> "runtime.cgoInRange"
  "runtime.cgoCheckPtrWrite" -> "runtime.cgoIsGoPointer"
  "runtime.cgoCheckPtrWrite" -> "runtime.cgoIsGoPointer"
  "runtime.cgoCheckPtrWrite" -> "runtime.getg"
  "runtime.isPinned" -> "runtime.spanOfHeap"
  "runtime.isPinned" -> "(*runtime.mspan).getPinnerBits"
  "runtime.isPinned" -> "(*runtime.mspan).objIndex"
  "(*runtime.pinnerBits).ofObject" -> "(*runtime.gcBits).bitp"
  "(*runtime.pinnerBits).ofObject" -> "runtime/internal/atomic.Load8"
  "runtime.isPinned" -> "(*runtime.pinnerBits).ofObject"
  "runtime.isPinned" -> "runtime.KeepAlive"
  "runtime.isPinned" -> "(*runtime.pinState).isPinned"
  "runtime.cgoCheckPtrWrite" -> "runtime.isPinned"
  "runtime.inPersistentAlloc" -> "runtime/internal/atomic.Loaduintptr"
  "runtime.cgoCheckPtrWrite" -> "runtime.inPersistentAlloc"
  "runtime.cgoCheckPtrWrite" -> "runtime.systemstack"
  "runtime.atomicstorep" -> "runtime.cgoCheckPtrWrite"
  "runtime.atomicstorep" -> "runtime.noescape"
  "runtime.atomicstorep" -> "runtime/internal/atomic.StorepNoWB"
  "(*runtime.mspan).setPinnerBits" -> "runtime.atomicstorep"
  "(*runtime.mspan).refreshPinnerBits" -> "(*runtime.mspan).setPinnerBits"
  "(*runtime.mspan).refreshPinnerBits" -> "(*runtime.mspan).setPinnerBits"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).refreshPinnerBits"
  "(*runtime.mspan).refillAllocCache" -> "(*runtime.gcBits).bytep"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).refillAllocCache"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mSpanStateBox).get"
  "(*runtime.sweepLocked).sweep" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "runtime/internal/atomic.Store"
  "(*runtime.sweepLocked).sweep" -> "(runtime.spanClass).sizeclass"
  "(*runtime.sweepLocked).sweep" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mcentral).fullSwept"
  "(*runtime.atomicHeadTailIndex).incTail" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.atomicHeadTailIndex).incTail" -> "(runtime.headTailIndex).tail"
  "(*runtime.atomicHeadTailIndex).incTail" -> "(runtime.headTailIndex).head"
  "(*runtime.atomicHeadTailIndex).incTail" -> "(runtime.headTailIndex).tail"
  "(*runtime.atomicHeadTailIndex).incTail" -> "runtime.throw"
  "(*runtime.spanSet).push" -> "(*runtime.atomicHeadTailIndex).incTail"
  "(*runtime.spanSet).push" -> "(runtime.headTailIndex).tail"
  "(*runtime.spanSet).push" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.atomicSpanSetSpinePointer).Load" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.spanSet).push" -> "(*runtime.atomicSpanSetSpinePointer).Load"
  "(runtime.spanSetSpinePointer).lookup" -> "runtime.add"
  "(*runtime.spanSet).push" -> "(runtime.spanSetSpinePointer).lookup"
  "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.spanSet).push" -> "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]"
  "(*runtime.atomicMSpanPointer).StoreNoWB" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "(*runtime.spanSet).push" -> "(*runtime.atomicMSpanPointer).StoreNoWB"
  "(*runtime.spanSet).push" -> "runtime.lock"
  "(*runtime.spanSet).push" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.spanSet).push" -> "runtime.unlock"
  "(*runtime.spanSet).push" -> "(*runtime.atomicSpanSetSpinePointer).Load"
  "(*runtime.lfstack).pop" -> "runtime/internal/atomic.Load64"
  "runtime.lfstackUnpack" -> "(runtime.taggedPointer).pointer"
  "(*runtime.lfstack).pop" -> "runtime.lfstackUnpack"
  "(*runtime.lfstack).pop" -> "runtime/internal/atomic.Load64"
  "(*runtime.lfstack).pop" -> "runtime/internal/atomic.Cas64"
  "(*runtime.spanSetBlockAlloc).alloc" -> "(*runtime.lfstack).pop"
  "(*runtime.spanSetBlockAlloc).alloc" -> "runtime.persistentalloc"
  "(*runtime.spanSet).push" -> "(*runtime.spanSetBlockAlloc).alloc"
  "(*runtime.spanSet).push" -> "(runtime.spanSetSpinePointer).lookup"
  "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "(*runtime.spanSet).push" -> "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]"
  "(*runtime/internal/atomic.Uintptr).Store" -> "runtime/internal/atomic.Storeuintptr"
  "(*runtime.spanSet).push" -> "(*runtime/internal/atomic.Uintptr).Store"
  "(*runtime.spanSet).push" -> "runtime.unlock"
  "(*runtime.spanSet).push" -> "runtime.persistentalloc"
  "(*runtime.spanSet).push" -> "runtime.memmove"
  "(*runtime.atomicSpanSetSpinePointer).StoreNoWB" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "(*runtime.spanSet).push" -> "(*runtime.atomicSpanSetSpinePointer).StoreNoWB"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.spanSet).push"
  "(*runtime.sweepLocked).sweep" -> "(*runtime/internal/atomic.Uintptr).Add"
  "(*runtime.mSpanStateBox).set" -> "(*runtime/internal/atomic.Uint8).Store"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mSpanStateBox).set"
  "(*runtime.sweepLocked).sweep" -> "runtime.systemstack"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.sweepLocked).sweep" -> "(runtime.spanClass).sizeclass"
  "(*runtime.sweepLocked).sweep" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.sweepLocked).sweep" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mheap).freeSpan" -> "runtime.systemstack"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mheap).freeSpan"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mcentral).fullSwept"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.spanSet).push"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mcentral).partialSwept"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.spanSet).push"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mcentral).fullSwept"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.spanSet).push"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mspan).base"
  "runtime.sysFault" -> "(*runtime/internal/atomic.Uint64).Add"
  "runtime.sysFaultOS" -> "runtime.mmap"
  "runtime.sysFault" -> "runtime.sysFaultOS"
  "(*runtime.sweepLocked).sweep" -> "runtime.sysFault"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.mheap).freeSpan"
  "(*runtime.sweepLocked).sweep" -> "runtime.systemstack"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.sweepLocked).sweep" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.sweepLocked).sweep" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.sweepLocked).sweep" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.sweepLocked).sweep" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mcentral).uncacheSpan" -> "(*runtime.sweepLocked).sweep"
  "(*runtime.mcentral).uncacheSpan" -> "(*runtime.mcentral).partialSwept"
  "(*runtime.mcentral).uncacheSpan" -> "(*runtime.spanSet).push"
  "(*runtime.mcentral).uncacheSpan" -> "(*runtime.mcentral).fullSwept"
  "(*runtime.mcentral).uncacheSpan" -> "(*runtime.spanSet).push"
  "(*runtime.mcache).releaseAll" -> "(*runtime.mcentral).uncacheSpan"
  "(*runtime.mcache).prepareForSweep" -> "(*runtime.mcache).releaseAll"
  "runtime.stackcache_clear" -> "runtime.lock"
  "runtime.stackcache_clear" -> "(runtime.gclinkptr).ptr"
  "runtime.spanOfUnchecked" -> "runtime.arenaIndex"
  "runtime.spanOfUnchecked" -> "(runtime.arenaIdx).l1"
  "runtime.spanOfUnchecked" -> "(runtime.arenaIdx).l2"
  "runtime.stackpoolfree" -> "runtime.spanOfUnchecked"
  "runtime.stackpoolfree" -> "(*runtime.mSpanStateBox).get"
  "runtime.stackpoolfree" -> "runtime.throw"
  "runtime.stackpoolfree" -> "(runtime.gclinkptr).ptr"
  "(*runtime.mSpanList).insert" -> "runtime.throw"
  "runtime.stackpoolfree" -> "(*runtime.mSpanList).insert"
  "runtime.stackpoolfree" -> "(runtime.gclinkptr).ptr"
  "(*runtime.mSpanList).remove" -> "runtime.throw"
  "runtime.stackpoolfree" -> "(*runtime.mSpanList).remove"
  "runtime.stackpoolfree" -> "runtime.osStackFree"
  "(*runtime.mheap).freeManual" -> "runtime.getg"
  "(*runtime.mheap).freeManual" -> "(runtime.puintptr).ptr"
  "(*runtime.mheap).freeManual" -> "(*runtime.mspan).base"
  "(*runtime.mheap).freeManual" -> "runtime.pageTraceFree"
  "(*runtime.mheap).freeManual" -> "runtime.lock"
  "(*runtime.mheap).freeSpanLocked" -> "runtime.assertLockHeld"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.mSpanStateBox).get"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.sysMemStat).add"
  "(*runtime.mheap).freeSpanLocked" -> "runtime.throw"
  "(*runtime.mheap).freeSpanLocked" -> "runtime.throw"
  "(*runtime.mheap).freeSpanLocked" -> "runtime.throw"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.mspan).base"
  "(*runtime.mheap).freeSpanLocked" -> "runtime.throw"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime/internal/atomic.Uintptr).Add"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.mspan).base"
  "runtime.pageIndexOf" -> "runtime.arenaIndex"
  "runtime.pageIndexOf" -> "(runtime.arenaIdx).l1"
  "runtime.pageIndexOf" -> "(runtime.arenaIdx).l2"
  "(*runtime.mheap).freeSpanLocked" -> "runtime.pageIndexOf"
  "(*runtime.mheap).freeSpanLocked" -> "runtime/internal/atomic.And8"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.sysMemStat).add"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.mspan).base"
  "(*runtime.pageAlloc).free" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).free" -> "(runtime.offAddr).lessThan"
  "(*runtime.pageAlloc).free" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).free" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).chunkOf" -> "(runtime.chunkIdx).l1"
  "(*runtime.pageAlloc).chunkOf" -> "(runtime.chunkIdx).l2"
  "(*runtime.pageAlloc).free" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pallocBits).free1" -> "(*runtime.pageBits).clear"
  "(*runtime.pageAlloc).free" -> "(*runtime.pallocBits).free1"
  "(*runtime.atomicScavChunkData).load" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.atomicScavChunkData).load" -> "runtime.unpackScavChunkData"
  "(*runtime.scavengeIndex).free" -> "(*runtime.atomicScavChunkData).load"
  "(*runtime.scavChunkData).free" -> "runtime.throw"
  "(*runtime.scavChunkData).free" -> "(*runtime.scavChunkFlags).setNonEmpty"
  "(*runtime.scavengeIndex).free" -> "(*runtime.scavChunkData).free"
  "(*runtime.atomicScavChunkData).store" -> "(runtime.scavChunkData).pack"
  "(*runtime.atomicScavChunkData).store" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.scavengeIndex).free" -> "(*runtime.atomicScavChunkData).store"
  "(*runtime.scavengeIndex).free" -> "runtime.chunkBase"
  "(*runtime.scavengeIndex).free" -> "(runtime.offAddr).lessThan"
  "(*runtime.atomicOffAddr).Load" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.scavengeIndex).free" -> "(*runtime.atomicOffAddr).Load"
  "(*runtime.scavengeIndex).free" -> "(runtime.offAddr).lessThan"
  "(*runtime.atomicOffAddr).StoreMarked" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.scavengeIndex).free" -> "(*runtime.atomicOffAddr).StoreMarked"
  "(*runtime.pageAlloc).free" -> "(*runtime.scavengeIndex).free"
  "(*runtime.pageAlloc).update" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).update" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).update" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).update" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pallocBits).summarize" -> "runtime/internal/sys.TrailingZeros64"
  "runtime/internal/sys.LeadingZeros64" -> "runtime/internal/sys.Len64"
  "(*runtime.pallocBits).summarize" -> "runtime/internal/sys.LeadingZeros64"
  "(*runtime.pallocBits).summarize" -> "runtime.packPallocSum"
  "(*runtime.pallocBits).summarize" -> "runtime.packPallocSum"
  "(*runtime.pallocBits).summarize" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pallocBits).summarize" -> "runtime.packPallocSum"
  "(*runtime.pallocBits).summarize" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pallocBits).summarize" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pageAlloc).update" -> "(*runtime.pallocBits).summarize"
  "(*runtime.pageAlloc).update" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).update" -> "(*runtime.pallocBits).summarize"
  "(*runtime.pageAlloc).update" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).update" -> "(*runtime.pallocBits).summarize"
  "(*runtime.pageAlloc).update" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).update" -> "(*runtime.pallocBits).summarize"
  "(*runtime.pageAlloc).update" -> "runtime.addrsToSummaryRange"
  "runtime.mergeSummaries" -> "(runtime.pallocSum).unpack"
  "runtime.mergeSummaries" -> "(runtime.pallocSum).unpack"
  "runtime.mergeSummaries" -> "runtime.packPallocSum"
  "(*runtime.pageAlloc).update" -> "runtime.mergeSummaries"
  "(*runtime.pageAlloc).free" -> "(*runtime.pageAlloc).update"
  "(*runtime.pageAlloc).free" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).free" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).free" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).free" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).free" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageBits).clearRange" -> "(*runtime.pageBits).clear"
  "(*runtime.pallocBits).free" -> "(*runtime.pageBits).clearRange"
  "(*runtime.pageAlloc).free" -> "(*runtime.pallocBits).free"
  "(*runtime.pageAlloc).free" -> "(*runtime.scavengeIndex).free"
  "(*runtime.pageAlloc).free" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).free" -> "(*runtime.pallocBits).free"
  "(*runtime.pageAlloc).free" -> "(*runtime.scavengeIndex).free"
  "(*runtime.pageAlloc).free" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pallocBits).freeAll" -> "(*runtime.pageBits).clearAll"
  "(*runtime.pageAlloc).free" -> "(*runtime.pallocBits).freeAll"
  "(*runtime.pageAlloc).free" -> "(*runtime.scavengeIndex).free"
  "(*runtime.pageAlloc).free" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).free" -> "(*runtime.pallocBits).free"
  "(*runtime.pageAlloc).free" -> "(*runtime.scavengeIndex).free"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.pageAlloc).free"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.mSpanStateBox).set"
  "(*runtime.mheap).freeMSpanLocked" -> "runtime.assertLockHeld"
  "(*runtime.mheap).freeMSpanLocked" -> "runtime.getg"
  "(*runtime.mheap).freeMSpanLocked" -> "(runtime.puintptr).ptr"
  "(*runtime.mheap).freeMSpanLocked" -> "(*runtime.fixalloc).free"
  "(*runtime.mheap).freeSpanLocked" -> "(*runtime.mheap).freeMSpanLocked"
  "(*runtime.mheap).freeSpanLocked" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).freeSpanLocked" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).freeSpanLocked" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).freeSpanLocked" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).freeManual" -> "(*runtime.mheap).freeSpanLocked"
  "(*runtime.mheap).freeManual" -> "runtime.unlock"
  "runtime.stackpoolfree" -> "(*runtime.mheap).freeManual"
  "runtime.stackcache_clear" -> "runtime.stackpoolfree"
  "runtime.stackcache_clear" -> "runtime.unlock"
  "runtime.stackcache_clear" -> "(runtime.gclinkptr).ptr"
  "(*runtime.mcache).prepareForSweep" -> "runtime.stackcache_clear"
  "(*runtime.mcache).prepareForSweep" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.acquirep" -> "(*runtime.mcache).prepareForSweep"
  "runtime.acquirep" -> "runtime.traceAcquire"
  "runtime.acquirep" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).ProcStart" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).ProcStart" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).ProcStart" -> "(*runtime.traceSchedResourceState).nextSeq"
  "(runtime.traceLocker).ProcStart" -> "(runtime.traceEventWriter).commit"
  "runtime.acquirep" -> "(runtime.traceLocker).ProcStart"
  "runtime.acquirep" -> "runtime.traceRelease"
  "runtime.allocm" -> "runtime.acquirep"
  "runtime.allocm" -> "runtime.lock"
  "runtime.mcommoninit" -> "runtime.getg"
  "runtime.mcommoninit" -> "runtime.callers"
  "runtime.mcommoninit" -> "runtime.lock"
  "runtime.bootstrapRand" -> "runtime.lock"
  "runtime.fatal" -> "runtime.systemstack"
  "runtime.fatal" -> "runtime.fatalthrow"
  "runtime.bootstrapRand" -> "runtime.fatal"
  "runtime.bootstrapRand" -> "(*internal/chacha8rand.State).Next"
  "runtime.bootstrapRand" -> "runtime.unlock"
  "(*internal/chacha8rand.State).Refill" -> "internal/chacha8rand.block"
  "runtime.bootstrapRand" -> "(*internal/chacha8rand.State).Refill"
  "runtime.mrandinit" -> "runtime.bootstrapRand"
  "runtime.bootstrapRandReseed" -> "runtime.lock"
  "runtime.bootstrapRandReseed" -> "runtime.fatal"
  "(*internal/chacha8rand.State).Init64" -> "internal/chacha8rand.block"
  "(*internal/chacha8rand.State).Reseed" -> "(*internal/chacha8rand.State).Init64"
  "(*internal/chacha8rand.State).Reseed" -> "(*internal/chacha8rand.State).Next"
  "(*internal/chacha8rand.State).Reseed" -> "(*internal/chacha8rand.State).Refill"
  "runtime.bootstrapRandReseed" -> "(*internal/chacha8rand.State).Reseed"
  "runtime.bootstrapRandReseed" -> "runtime.unlock"
  "runtime.mrandinit" -> "runtime.bootstrapRandReseed"
  "runtime.mrandinit" -> "(*internal/chacha8rand.State).Init64"
  "runtime.rand" -> "runtime.getg"
  "runtime.rand" -> "(*internal/chacha8rand.State).Next"
  "runtime.rand" -> "(*internal/chacha8rand.State).Refill"
  "runtime.mrandinit" -> "runtime.rand"
  "runtime.mcommoninit" -> "runtime.mrandinit"
  "runtime.malg" -> "runtime.round2"
  "runtime.malg" -> "runtime.systemstack"
  "runtime.mpreinit" -> "runtime.malg"
  "runtime.mcommoninit" -> "runtime.mpreinit"
  "runtime.mcommoninit" -> "runtime.mReserveID"
  "runtime.mcommoninit" -> "runtime.atomicstorep"
  "runtime.mcommoninit" -> "runtime.unlock"
  "runtime.allocm" -> "runtime.mcommoninit"
  "runtime.allocm" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.allocm" -> "runtime.unlock"
  "runtime.allocm" -> "runtime.traceEnabled"
  "runtime.traceThreadDestroy" -> "runtime.assertLockHeld"
  "runtime.traceThreadDestroy" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.traceThreadDestroy" -> "runtime.throw"
  "runtime.traceThreadDestroy" -> "runtime.systemstack"
  "runtime.traceThreadDestroy" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.traceThreadDestroy" -> "runtime.throw"
  "runtime.allocm" -> "runtime.traceThreadDestroy"
  "runtime.traceShuttingDown" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.allocm" -> "runtime.traceShuttingDown"
  "runtime.allocm" -> "runtime.systemstack"
  "runtime.allocm" -> "runtime.malg"
  "runtime.allocm" -> "(runtime.puintptr).ptr"
  "runtime.allocm" -> "runtime.malg"
  "runtime.allocm" -> "runtime.mStackIsSystemAllocated"
  "runtime.releasep" -> "runtime.traceAcquire"
  "runtime.releasep" -> "(runtime.traceLocker).ok"
  "runtime.releasep" -> "runtime.getg"
  "runtime.releasep" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).ProcStop" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).ProcStop" -> "(runtime.traceEventWriter).commit"
  "runtime.releasep" -> "(runtime.traceLocker).ProcStop"
  "runtime.releasep" -> "runtime.traceRelease"
  "runtime.releasepNoTrace" -> "runtime.getg"
  "runtime.releasepNoTrace" -> "runtime.throw"
  "runtime.releasepNoTrace" -> "(runtime.puintptr).ptr"
  "runtime.releasepNoTrace" -> "(runtime.muintptr).ptr"
  "runtime.releasepNoTrace" -> "(runtime.puintptr).ptr"
  "runtime.releasepNoTrace" -> "runtime.throw"
  "runtime.releasep" -> "runtime.releasepNoTrace"
  "runtime.allocm" -> "runtime.releasep"
  "runtime.allocm" -> "runtime.releasem"
  "(*runtime.rwmutex).runlock" -> "(*runtime/internal/atomic.Int32).Add"
  "(*runtime.rwmutex).runlock" -> "runtime.releaseLockRank"
  "(*runtime.rwmutex).runlock" -> "runtime.getg"
  "(*runtime.rwmutex).runlock" -> "runtime.releasem"
  "(*runtime.rwmutex).runlock" -> "runtime.throw"
  "(*runtime.rwmutex).runlock" -> "(*runtime/internal/atomic.Int32).Add"
  "(*runtime.rwmutex).runlock" -> "runtime.lock"
  "(*runtime.rwmutex).runlock" -> "(runtime.muintptr).ptr"
  "runtime.notewakeup" -> "runtime.key32"
  "runtime.notewakeup" -> "runtime/internal/atomic.Xchg"
  "runtime.notewakeup" -> "runtime.throw"
  "runtime.notewakeup" -> "runtime.key32"
  "runtime.notewakeup" -> "runtime.futexwakeup"
  "(*runtime.rwmutex).runlock" -> "runtime.notewakeup"
  "(*runtime.rwmutex).runlock" -> "runtime.unlock"
  "runtime.allocm" -> "(*runtime.rwmutex).runlock"
  "runtime.newm" -> "runtime.allocm"
  "runtime.newm" -> "(*runtime.puintptr).set"
  "runtime.newm" -> "runtime.getg"
  "runtime.newm" -> "runtime.lock"
  "runtime.newm1" -> "(*runtime.rwmutex).rlock"
  "runtime.newosproc" -> "internal/abi.FuncPCABI0"
  "runtime.sigprocmask" -> "runtime.rtsigprocmask"
  "runtime.newosproc" -> "runtime.sigprocmask"
  "runtime.newosproc$1" -> "internal/abi.FuncPCABI0"
  "runtime.newosproc$1" -> "runtime.clone"
  "runtime.retryOnEAGAIN" -> "runtime.newosproc$1"
  "runtime.usleep_no_g" -> "runtime.usleep"
  "runtime.retryOnEAGAIN" -> "runtime.usleep_no_g"
  "runtime.newosproc" -> "runtime.retryOnEAGAIN"
  "runtime.newosproc" -> "runtime.sigprocmask"
  "runtime.newosproc" -> "runtime.mcount"
  "runtime.newosproc" -> "runtime.throw"
  "runtime.newm1" -> "runtime.newosproc"
  "runtime.newm1" -> "(*runtime.rwmutex).runlock"
  "runtime.newm1" -> "runtime.throw"
  "runtime.newm1" -> "(*runtime.guintptr).set"
  "runtime.newm1" -> "internal/abi.FuncPCABI0"
  "runtime.newm1" -> "runtime.msanwrite"
  "runtime.newm1" -> "runtime.asanwrite"
  "runtime.newm1" -> "(*runtime.rwmutex).rlock"
  "runtime.newm1" -> "runtime.asmcgocall"
  "runtime.newm1" -> "(*runtime.rwmutex).runlock"
  "runtime.newm" -> "runtime.newm1"
  "runtime.newm" -> "runtime.getg"
  "runtime.newm" -> "runtime.releasem"
  "runtime.newm" -> "runtime.throw"
  "runtime.newm" -> "(*runtime.muintptr).set"
  "runtime.newm" -> "runtime.notewakeup"
  "runtime.newm" -> "runtime.unlock"
  "runtime.newm" -> "runtime.getg"
  "runtime.newm" -> "runtime.releasem"
  "runtime.startm" -> "runtime.newm"
  "runtime.startm" -> "runtime.lock"
  "runtime.startm" -> "runtime.releasem"
  "runtime.startm" -> "runtime.unlock"
  "runtime.startm" -> "runtime.throw"
  "runtime.startm" -> "runtime.throw"
  "runtime.startm" -> "runtime.throw"
  "runtime.startm" -> "(*runtime.puintptr).set"
  "runtime.startm" -> "runtime.notewakeup"
  "runtime.startm" -> "runtime.releasem"
  "runtime.runqempty" -> "runtime/internal/atomic.Load"
  "runtime.runqempty" -> "runtime/internal/atomic.Load"
  "runtime.runqempty" -> "runtime/internal/atomic.Loaduintptr"
  "runtime.runqempty" -> "runtime/internal/atomic.Load"
  "runtime.startm" -> "runtime.runqempty"
  "runtime.injectglist$1" -> "runtime.startm"
  "runtime.injectglist$1" -> "runtime.unlock"
  "runtime.injectglist$1" -> "runtime.releasem"
  "runtime.injectglist" -> "runtime.injectglist$1"
  "runtime.injectglist" -> "(*runtime/internal/atomic.Int32).Load"
  "(*runtime.gQueue).pop" -> "(runtime.guintptr).ptr"
  "runtime.injectglist" -> "(*runtime.gQueue).pop"
  "(*runtime.gQueue).pushBack" -> "(runtime.guintptr).ptr"
  "(*runtime.gQueue).pushBack" -> "(*runtime.guintptr).set"
  "(*runtime.gQueue).pushBack" -> "(*runtime.guintptr).set"
  "(*runtime.gQueue).pushBack" -> "(*runtime.guintptr).set"
  "runtime.injectglist" -> "(*runtime.gQueue).pushBack"
  "runtime.injectglist" -> "(*runtime.gQueue).empty"
  "runtime.injectglist" -> "runtime.lock"
  "runtime.injectglist" -> "runtime.globrunqputbatch"
  "runtime.injectglist" -> "runtime.unlock"
  "runtime.injectglist" -> "runtime.injectglist$1"
  "runtime.injectglist" -> "(*runtime.gQueue).empty"
  "runtime.runqputbatch" -> "runtime/internal/atomic.LoadAcq"
  "runtime.runqputbatch" -> "(*runtime.gQueue).pop"
  "runtime.runqputbatch" -> "(*runtime.guintptr).set"
  "runtime.runqputbatch" -> "(*runtime.gQueue).empty"
  "runtime.runqputbatch" -> "runtime/internal/atomic.StoreRel"
  "runtime.runqputbatch" -> "(*runtime.gQueue).empty"
  "runtime.runqputbatch" -> "runtime.cheaprandn"
  "runtime.runqputbatch" -> "runtime.runqputbatch$1"
  "runtime.runqputbatch" -> "runtime.runqputbatch$1"
  "runtime.runqputbatch" -> "runtime.runqputbatch$1"
  "runtime.runqputbatch" -> "runtime.runqputbatch$1"
  "runtime.runqputbatch" -> "runtime.lock"
  "runtime.runqputbatch" -> "runtime.globrunqputbatch"
  "runtime.runqputbatch" -> "runtime.unlock"
  "runtime.injectglist" -> "runtime.runqputbatch"
  "runtime.gcWakeAllAssists" -> "runtime.injectglist"
  "runtime.gcWakeAllAssists" -> "runtime.unlock"
  "runtime.gcMarkDone" -> "runtime.gcWakeAllAssists"
  "runtime.gcMarkDone" -> "runtime.semrelease"
  "runtime.schedEnableUser" -> "runtime.lock"
  "runtime.schedEnableUser" -> "runtime.unlock"
  "runtime.schedEnableUser" -> "runtime.globrunqputbatch"
  "runtime.schedEnableUser" -> "runtime.unlock"
  "runtime.schedEnableUser" -> "runtime.unlock"
  "runtime.schedEnableUser" -> "runtime.startm"
  "runtime.schedEnableUser" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.gcMarkDone" -> "runtime.schedEnableUser"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime.gcControllerState).heapGoal"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).endCycle" -> "runtime.printlock"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).endCycle" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).endCycle" -> "runtime.printunlock"
  "runtime.gcMarkDone" -> "(*runtime.gcControllerState).endCycle"
  "runtime.setGCPhase" -> "runtime/internal/atomic.Store"
  "runtime.gcMarkTermination" -> "runtime.setGCPhase"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcMarkTermination" -> "runtime.nanotime"
  "runtime.gcMarkTermination" -> "runtime.acquirem"
  "runtime.casGToWaiting" -> "runtime.casgstatus"
  "runtime.gcMarkTermination" -> "runtime.casGToWaiting"
  "runtime.gcMarkTermination" -> "runtime.systemstack"
  "runtime.gcMarkTermination" -> "runtime.systemstack"
  "runtime.gcMarkTermination" -> "runtime.casgstatus"
  "runtime.gcMarkTermination" -> "runtime.traceAcquire"
  "runtime.gcMarkTermination" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).GCDone" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GCDone" -> "(runtime.traceEventWriter).commit"
  "runtime.gcMarkTermination" -> "(runtime.traceLocker).GCDone"
  "runtime.gcMarkTermination" -> "runtime.traceRelease"
  "runtime.gcMarkTermination" -> "runtime.throw"
  "runtime.gcMarkTermination" -> "(*runtime.sysMemStat).load"
  "runtime.gcMarkTermination" -> "runtime.systemstack"
  "runtime.gcMarkTermination" -> "runtime.nanotime"
  "runtime.time_now" -> "runtime.walltime"
  "runtime.time_now" -> "runtime.nanotime"
  "runtime.gcMarkTermination" -> "runtime.time_now"
  "runtime.gcMarkTermination" -> "runtime/internal/atomic.Store64"
  "runtime.gcMarkTermination" -> "runtime/internal/atomic.Store64"
  "(*runtime.cpuStats).accumulate" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.cpuStats).accumulate" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.cpuStats).accumulate" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.cpuStats).accumulate" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.cpuStats).accumulate" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.cpuStats).accumulate" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.cpuStats).accumulate" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.gcMarkTermination" -> "(*runtime.cpuStats).accumulate"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.gcMarkTermination" -> "runtime.lock"
  "runtime.gcMarkTermination" -> "runtime.injectglist"
  "runtime.gcMarkTermination" -> "runtime.unlock"
  "(*runtime.scavengeIndex).nextGen" -> "(*runtime.atomicOffAddr).Load"
  "(*runtime.scavengeIndex).nextGen" -> "(runtime.offAddr).lessThan"
  "(*runtime.scavengeIndex).nextGen" -> "(runtime.offAddr).addr"
  "(*runtime.scavengeIndex).nextGen" -> "(*runtime.atomicOffAddr).StoreMarked"
  "runtime.gcMarkTermination" -> "(*runtime.scavengeIndex).nextGen"
  "(*runtime.gcCPULimiterState).finishGCTransition" -> "runtime.throw"
  "(*runtime.gcCPULimiterState).finishGCTransition" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcCPULimiterState).finishGCTransition" -> "(*runtime.gcCPULimiterState).accumulate"
  "(*runtime.gcCPULimiterState).finishGCTransition" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime/internal/atomic.Uint32).Swap" -> "runtime/internal/atomic.Xchg"
  "(*runtime.gcCPULimiterState).unlock" -> "(*runtime/internal/atomic.Uint32).Swap"
  "(*runtime.gcCPULimiterState).unlock" -> "runtime.throw"
  "(*runtime.gcCPULimiterState).finishGCTransition" -> "(*runtime.gcCPULimiterState).unlock"
  "runtime.gcMarkTermination" -> "(*runtime.gcCPULimiterState).finishGCTransition"
  "(*runtime.mProfCycleHolder).increment" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.mProfCycleHolder).increment" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.mProf_NextCycle" -> "(*runtime.mProfCycleHolder).increment"
  "runtime.gcMarkTermination" -> "runtime.mProf_NextCycle"
  "(*runtime.activeSweep).begin" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.activeSweep).begin" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.gcMarkTermination" -> "(*runtime.activeSweep).begin"
  "runtime.gcMarkTermination" -> "runtime.throw"
  "runtime.gcMarkTermination" -> "runtime.systemstack"
  "(*runtime.mProfCycleHolder).setFlushed" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.mProfCycleHolder).setFlushed" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.mProf_Flush" -> "(*runtime.mProfCycleHolder).setFlushed"
  "runtime.mProf_Flush" -> "runtime.lock"
  "runtime.mProf_Flush" -> "runtime.lock"
  "runtime.mProf_FlushLocked" -> "runtime.assertLockHeld"
  "runtime.mProf_FlushLocked" -> "runtime.assertLockHeld"
  "runtime.mProf_FlushLocked" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.mProf_FlushLocked" -> "(*runtime.bucket).mp"
  "runtime.mProf_FlushLocked" -> "(*runtime.memRecordCycle).add"
  "runtime.mProf_Flush" -> "runtime.mProf_FlushLocked"
  "runtime.mProf_Flush" -> "runtime.unlock"
  "runtime.mProf_Flush" -> "runtime.unlock"
  "runtime.gcMarkTermination" -> "runtime.mProf_Flush"
  "runtime.prepareFreeWorkbufs" -> "runtime.lock"
  "runtime.prepareFreeWorkbufs" -> "runtime.throw"
  "(*runtime.mSpanList).takeAll" -> "(*runtime.mSpanList).isEmpty"
  "(*runtime.mSpanList).takeAll" -> "(*runtime.mSpanList).isEmpty"
  "runtime.prepareFreeWorkbufs" -> "(*runtime.mSpanList).takeAll"
  "runtime.prepareFreeWorkbufs" -> "runtime.unlock"
  "runtime.gcMarkTermination" -> "runtime.prepareFreeWorkbufs"
  "runtime.gcMarkTermination" -> "runtime.systemstack"
  "runtime.gcMarkTermination" -> "runtime.forEachP"
  "runtime.gcMarkTermination" -> "runtime.throw"
  "(*runtime.activeSweep).end" -> "runtime.throw"
  "(*runtime.activeSweep).end" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.activeSweep).end" -> "runtime.throw"
  "(*runtime.activeSweep).end" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "(*runtime.activeSweep).end" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.activeSweep).end" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcMarkTermination" -> "(*runtime.activeSweep).end"
  "runtime.gcMarkTermination" -> "runtime.printlock"
  "runtime.gcMarkTermination" -> "runtime.itoaDiv"
  "runtime.gcMarkTermination" -> "runtime.lock"
  "runtime.gcMarkTermination" -> "runtime.unlock"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.fmtNSAsMS" -> "runtime.itoaDiv"
  "runtime.fmtNSAsMS" -> "runtime.itoaDiv"
  "runtime.gcMarkTermination" -> "runtime.fmtNSAsMS"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcMarkTermination" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcMarkTermination" -> "runtime.fmtNSAsMS"
  "runtime.gcMarkTermination" -> "runtime.printunlock"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime.throw"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime.throw"
  "runtime.makeSpanClass" -> "runtime.bool2int"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime.makeSpanClass"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "(*runtime.mspan).base"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime.sysFault"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "(*runtime.sysMemStat).add"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "(*runtime.gcControllerState).update"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "(*runtime.mspan).base"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime.racefree"
  "(*runtime.mspan).setUserArenaChunkToFault" -> "runtime.systemstack"
  "runtime.gcMarkTermination" -> "(*runtime.mspan).setUserArenaChunkToFault"
  "runtime.gcMarkTermination" -> "(*runtime.gcControllerState).heapGoal"
  "runtime.gcMarkTermination" -> "runtime.systemstack"
  "runtime.gcMarkTermination" -> "runtime.semrelease"
  "runtime.gcMarkTermination" -> "runtime.semrelease"
  "runtime.gcMarkTermination" -> "runtime.releasem"
  "runtime.gcMarkTermination" -> "runtime.Gosched"
  "runtime.gcMarkDone" -> "runtime.gcMarkTermination"
  "runtime.gcAssistAlloc" -> "runtime.gcMarkDone"
  "runtime.gcAssistAlloc" -> "runtime.Gosched"
  "runtime.gcParkAssist" -> "runtime.lock"
  "runtime.gcParkAssist" -> "runtime/internal/atomic.Load"
  "runtime.gcParkAssist" -> "runtime.unlock"
  "runtime.gcParkAssist" -> "runtime.getg"
  "runtime.gcParkAssist" -> "(*runtime.gQueue).pushBack"
  "runtime.gcParkAssist" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.gcParkAssist" -> "runtime.goparkunlock"
  "runtime.gcParkAssist" -> "(runtime.guintptr).ptr"
  "runtime.gcParkAssist" -> "(*runtime.guintptr).set"
  "runtime.gcParkAssist" -> "runtime.unlock"
  "runtime.gcAssistAlloc" -> "runtime.gcParkAssist"
  "runtime.gcAssistAlloc" -> "runtime.traceAcquire"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).ok"
  "runtime.gcAssistAlloc" -> "(runtime.traceLocker).GCMarkAssistDone"
  "runtime.gcAssistAlloc" -> "runtime.traceRelease"
  "runtime.deductAssistCredit" -> "runtime.gcAssistAlloc"
  "runtime.mallocgc" -> "runtime.deductAssistCredit"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.persistentalloc"
  "runtime.mallocgc" -> "runtime.getg"
  "runtime.mallocgc" -> "runtime.throw"
  "runtime.mallocgc" -> "runtime.getg"
  "runtime.mallocgc" -> "runtime.throw"
  "runtime.getMCache" -> "(runtime.puintptr).ptr"
  "runtime.mallocgc" -> "runtime.getMCache"
  "runtime.mallocgc" -> "runtime.throw"
  "(*runtime.mcache).allocLarge" -> "runtime.throw"
  "runtime.deductSweepCredit" -> "runtime.traceAcquire"
  "runtime.deductSweepCredit" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).GCSweepStart" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).GCSweepStart" -> "runtime.throw"
  "runtime.deductSweepCredit" -> "(runtime.traceLocker).GCSweepStart"
  "runtime.deductSweepCredit" -> "runtime.traceRelease"
  "runtime.deductSweepCredit" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.deductSweepCredit" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.sweepone" -> "runtime.getg"
  "runtime.sweepone" -> "(*runtime.activeSweep).begin"
  "(*runtime.sweepClass).load" -> "runtime/internal/atomic.Load"
  "(*runtime.mheap).nextSpanForSweep" -> "(*runtime.sweepClass).load"
  "(*runtime.mheap).nextSpanForSweep" -> "(runtime.sweepClass).split"
  "(*runtime.sweepClass).update" -> "(*runtime.sweepClass).load"
  "(*runtime.sweepClass).update" -> "(*runtime.sweepClass).load"
  "(*runtime.sweepClass).update" -> "runtime/internal/atomic.Cas"
  "(*runtime.mheap).nextSpanForSweep" -> "(*runtime.sweepClass).update"
  "(*runtime.mheap).nextSpanForSweep" -> "(*runtime.mcentral).fullUnswept"
  "(*runtime.atomicHeadTailIndex).load" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.spanSet).pop" -> "(*runtime.atomicHeadTailIndex).load"
  "(runtime.headTailIndex).split" -> "(runtime.headTailIndex).head"
  "(runtime.headTailIndex).split" -> "(runtime.headTailIndex).tail"
  "(*runtime.spanSet).pop" -> "(runtime.headTailIndex).split"
  "(*runtime.spanSet).pop" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.spanSet).pop" -> "runtime.makeHeadTailIndex"
  "(*runtime.atomicHeadTailIndex).cas" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "(*runtime.spanSet).pop" -> "(*runtime.atomicHeadTailIndex).cas"
  "(*runtime.spanSet).pop" -> "(*runtime.atomicSpanSetSpinePointer).Load"
  "(*runtime.spanSet).pop" -> "(runtime.spanSetSpinePointer).lookup"
  "(*runtime.spanSet).pop" -> "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]"
  "(*runtime.atomicMSpanPointer).Load" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.spanSet).pop" -> "(*runtime.atomicMSpanPointer).Load"
  "(*runtime.spanSet).pop" -> "(*runtime.atomicHeadTailIndex).load"
  "(*runtime.spanSet).pop" -> "(runtime.headTailIndex).split"
  "(*runtime.spanSet).pop" -> "(*runtime.atomicMSpanPointer).Load"
  "(*runtime.spanSet).pop" -> "(*runtime.atomicMSpanPointer).StoreNoWB"
  "(*runtime.spanSet).pop" -> "(*runtime/internal/atomic.Uint32).Add"
  "(*runtime.spanSet).pop" -> "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]"
  "(*runtime.spanSetBlockAlloc).free" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.taggedPointerPack" -> "runtime.throw"
  "runtime.lfstackPack" -> "runtime.taggedPointerPack"
  "(*runtime.lfstack).push" -> "runtime.lfstackPack"
  "(*runtime.lfstack).push" -> "runtime.lfstackUnpack"
  "(*runtime.lfstack).push" -> "runtime.throw"
  "(*runtime.lfstack).push" -> "runtime/internal/atomic.Load64"
  "(*runtime.lfstack).push" -> "runtime/internal/atomic.Cas64"
  "(*runtime.spanSetBlockAlloc).free" -> "(*runtime.lfstack).push"
  "(*runtime.spanSet).pop" -> "(*runtime.spanSetBlockAlloc).free"
  "(*runtime.mheap).nextSpanForSweep" -> "(*runtime.spanSet).pop"
  "(*runtime.mheap).nextSpanForSweep" -> "(*runtime.mcentral).partialUnswept"
  "(*runtime.mheap).nextSpanForSweep" -> "(*runtime.spanSet).pop"
  "(*runtime.mheap).nextSpanForSweep" -> "(*runtime.sweepClass).update"
  "runtime.sweepone" -> "(*runtime.mheap).nextSpanForSweep"
  "runtime.sweepone" -> "(*runtime.activeSweep).end"
  "(*runtime.activeSweep).markDrained" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.activeSweep).markDrained" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.sweepone" -> "(*runtime.activeSweep).markDrained"
  "runtime.sweepone" -> "(*runtime.mSpanStateBox).get"
  "(*runtime.sweepLocker).tryAcquire" -> "runtime.throw"
  "(*runtime.sweepLocker).tryAcquire" -> "runtime/internal/atomic.Load"
  "(*runtime.sweepLocker).tryAcquire" -> "runtime/internal/atomic.Cas"
  "runtime.sweepone" -> "(*runtime.sweepLocker).tryAcquire"
  "runtime.sweepone" -> "runtime.throw"
  "runtime.sweepone" -> "(*runtime.sweepLocked).sweep"
  "runtime.sweepone" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.sweepone" -> "runtime.systemstack"
  "(*runtime.scavengerState).ready" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.sweepone" -> "(*runtime.scavengerState).ready"
  "runtime.deductSweepCredit" -> "runtime.sweepone"
  "runtime.deductSweepCredit" -> "runtime.traceAcquire"
  "runtime.deductSweepCredit" -> "(runtime.traceLocker).ok"
  "runtime.deductSweepCredit" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.deductSweepCredit" -> "(*runtime/internal/atomic.Uint64).Load"
  "(runtime.traceLocker).GCSweepDone" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).GCSweepDone" -> "runtime.throw"
  "(runtime.traceLocker).GCSweepDone" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GCSweepDone" -> "(runtime.traceEventWriter).commit"
  "runtime.deductSweepCredit" -> "(runtime.traceLocker).GCSweepDone"
  "runtime.deductSweepCredit" -> "runtime.traceRelease"
  "(*runtime.mcache).allocLarge" -> "runtime.deductSweepCredit"
  "(*runtime.mcache).allocLarge" -> "runtime.makeSpanClass"
  "(*runtime.mheap).alloc" -> "runtime.systemstack"
  "(*runtime.mcache).allocLarge" -> "(*runtime.mheap).alloc"
  "(*runtime.mcache).allocLarge" -> "runtime.throw"
  "(*runtime.mcache).allocLarge" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mcache).allocLarge" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.mcache).allocLarge" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.mcache).allocLarge" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.mcache).allocLarge" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mcache).allocLarge" -> "(*runtime.gcControllerState).update"
  "(*runtime.mcache).allocLarge" -> "(*runtime.mcentral).fullSwept"
  "(*runtime.mcache).allocLarge" -> "(*runtime.spanSet).push"
  "(*runtime.mcache).allocLarge" -> "(*runtime.mspan).base"
  "(*runtime.mspan).initHeapBits" -> "(runtime.spanClass).noscan"
  "(*runtime.mspan).heapBits" -> "(runtime.spanClass).noscan"
  "(*runtime.mspan).heapBits" -> "runtime.throw"
  "(*runtime.mspan).heapBits" -> "runtime.throw"
  "(*runtime.mspan).heapBits" -> "(*runtime.mspan).base"
  "(*runtime.mspan).heapBits" -> "runtime.heapBitsSlice"
  "(*runtime.mspan).heapBits" -> "(*runtime.mspan).base"
  "(*runtime.mspan).heapBits" -> "runtime.heapBitsSlice"
  "(*runtime.mspan).initHeapBits" -> "(*runtime.mspan).heapBits"
  "(*runtime.mspan).initHeapBits" -> "runtime.heapBitsInSpan"
  "(*runtime.mcache).allocLarge" -> "(*runtime.mspan).initHeapBits"
  "runtime.mallocgc" -> "(*runtime.mcache).allocLarge"
  "runtime.mallocgc" -> "(*runtime.mspan).base"
  "runtime.mallocgc" -> "runtime.alignUp"
  "runtime.mallocgc" -> "runtime.alignUp"
  "runtime.mallocgc" -> "runtime.alignUp"
  "runtime.mallocgc" -> "runtime.alignUp"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.nextFreeFast" -> "runtime/internal/sys.TrailingZeros64"
  "runtime.nextFreeFast" -> "(*runtime.mspan).base"
  "runtime.mallocgc" -> "runtime.nextFreeFast"
  "(*runtime.mspan).nextFreeIndex" -> "runtime.throw"
  "(*runtime.mspan).nextFreeIndex" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.mspan).nextFreeIndex" -> "(*runtime.mspan).refillAllocCache"
  "(*runtime.mspan).nextFreeIndex" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.mspan).nextFreeIndex" -> "(*runtime.mspan).refillAllocCache"
  "(*runtime.mcache).nextFree" -> "(*runtime.mspan).nextFreeIndex"
  "(*runtime.mcache).nextFree" -> "runtime.throw"
  "(*runtime.mcache).refill" -> "runtime.throw"
  "(*runtime.mcentral).cacheSpan" -> "(runtime.spanClass).sizeclass"
  "(*runtime.mcentral).cacheSpan" -> "runtime.deductSweepCredit"
  "(*runtime.mcentral).cacheSpan" -> "runtime.traceAcquire"
  "(*runtime.mcentral).cacheSpan" -> "(runtime.traceLocker).ok"
  "(*runtime.mcentral).cacheSpan" -> "(runtime.traceLocker).GCSweepStart"
  "(*runtime.mcentral).cacheSpan" -> "runtime.traceRelease"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.mcentral).partialSwept"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.spanSet).pop"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.activeSweep).begin"
  "(*runtime.mcentral).cacheSpan" -> "runtime.traceAcquire"
  "(*runtime.mcentral).cacheSpan" -> "(runtime.traceLocker).ok"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.mcentral).partialUnswept"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.spanSet).pop"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.sweepLocker).tryAcquire"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.sweepLocked).sweep"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.activeSweep).end"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.mcentral).fullUnswept"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.spanSet).pop"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.activeSweep).end"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.sweepLocker).tryAcquire"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.sweepLocked).sweep"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.mspan).nextFreeIndex"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.activeSweep).end"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.mcentral).fullSwept"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.spanSet).push"
  "(*runtime.mcentral).cacheSpan" -> "(runtime.traceLocker).GCSweepDone"
  "(*runtime.mcentral).cacheSpan" -> "runtime.traceRelease"
  "(*runtime.mcentral).grow" -> "(runtime.spanClass).sizeclass"
  "(*runtime.mcentral).grow" -> "(runtime.spanClass).sizeclass"
  "(*runtime.mcentral).grow" -> "(*runtime.mheap).alloc"
  "(*runtime.mcentral).grow" -> "(*runtime.mspan).divideByElemSize"
  "(*runtime.mcentral).grow" -> "(*runtime.mspan).base"
  "(*runtime.mcentral).grow" -> "(*runtime.mspan).initHeapBits"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.mcentral).grow"
  "(*runtime.mcentral).cacheSpan" -> "runtime.traceAcquire"
  "(*runtime.mcentral).cacheSpan" -> "(runtime.traceLocker).ok"
  "(*runtime.mcentral).cacheSpan" -> "(runtime.traceLocker).GCSweepDone"
  "(*runtime.mcentral).cacheSpan" -> "runtime.traceRelease"
  "(*runtime.mcentral).cacheSpan" -> "runtime.throw"
  "(*runtime.mcentral).cacheSpan" -> "(*runtime.mspan).refillAllocCache"
  "(*runtime.mcache).refill" -> "(*runtime.mcentral).cacheSpan"
  "(*runtime.mcache).refill" -> "runtime.throw"
  "(*runtime.mcache).refill" -> "(*runtime.mcentral).uncacheSpan"
  "(*runtime.mcache).refill" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mcache).refill" -> "(runtime.spanClass).sizeclass"
  "(*runtime.mcache).refill" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.mcache).refill" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.mcache).refill" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.mcache).refill" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mcache).refill" -> "runtime.throw"
  "(*runtime.mcache).refill" -> "runtime.throw"
  "(*runtime.mcache).refill" -> "(*runtime.gcControllerState).update"
  "(*runtime.mcache).nextFree" -> "(*runtime.mcache).refill"
  "(*runtime.mcache).nextFree" -> "(*runtime.mspan).nextFreeIndex"
  "(*runtime.mcache).nextFree" -> "runtime.throw"
  "(*runtime.mcache).nextFree" -> "(*runtime.mspan).base"
  "(*runtime.mcache).nextFree" -> "runtime.throw"
  "runtime.mallocgc" -> "(*runtime.mcache).nextFree"
  "runtime.mallocgc" -> "runtime.heapBitsInSpan"
  "runtime.mallocgc" -> "runtime.divRoundUp"
  "runtime.mallocgc" -> "runtime.makeSpanClass"
  "runtime.mallocgc" -> "runtime.nextFreeFast"
  "runtime.mallocgc" -> "runtime.divRoundUp"
  "runtime.mallocgc" -> "(*runtime.mcache).nextFree"
  "runtime.mallocgc" -> "runtime.memclrNoHeapPointers"
  "runtime.mallocgc" -> "runtime.add"
  "runtime.mallocgc" -> "runtime.memclrNoHeapPointers"
  "runtime.mallocgc" -> "runtime.publicationBarrier"
  "runtime.heapSetType" -> "runtime.throw"
  "runtime.readUintptr" -> "runtime/internal/sys.Bswap64"
  "runtime.readUintptr" -> "runtime/internal/sys.Bswap32"
  "(*runtime.mspan).writeHeapBitsSmall" -> "runtime.readUintptr"
  "(*runtime.mspan).writeHeapBitsSmall" -> "(*runtime.mspan).heapBits"
  "(*runtime.mspan).writeHeapBitsSmall" -> "(*runtime.mspan).base"
  "(*runtime.mspan).heapBitsSmallForAddr" -> "(*runtime.mspan).base"
  "(*runtime.mspan).heapBitsSmallForAddr" -> "(*runtime.mspan).base"
  "(*runtime.mspan).heapBitsSmallForAddr" -> "(*runtime.mspan).base"
  "(*runtime.mspan).heapBitsSmallForAddr" -> "runtime.addb"
  "(*runtime.mspan).heapBitsSmallForAddr" -> "runtime.addb"
  "(*runtime.mspan).writeHeapBitsSmall" -> "(*runtime.mspan).heapBitsSmallForAddr"
  "(*runtime.mspan).writeHeapBitsSmall" -> "runtime.throw"
  "runtime.heapSetType" -> "(*runtime.mspan).writeHeapBitsSmall"
  "runtime.heapSetType" -> "runtime.heapBitsInSpan"
  "runtime.heapSetType" -> "runtime.heapBitsInSpan"
  "runtime.heapSetType" -> "(runtime.spanClass).sizeclass"
  "runtime.heapSetType" -> "runtime.throw"
  "runtime.heapSetType" -> "runtime.alignUp"
  "runtime.heapSetType" -> "runtime.alignUp"
  "runtime.heapSetType" -> "runtime.alignUp"
  "runtime.heapSetType" -> "runtime.systemstack"
  "runtime.heapSetType" -> "(*runtime.mspan).base"
  "runtime.heapSetType" -> "(*runtime.mspan).base"
  "runtime.heapSetType" -> "runtime.add"
  "runtime.heapSetType" -> "runtime.addb"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.subtract1"
  "runtime.runGCProg" -> "runtime.subtractb"
  "runtime.runGCProg" -> "runtime.subtract1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.runGCProg" -> "runtime.add1"
  "runtime.heapSetType" -> "runtime.runGCProg"
  "(*runtime.mspan).objBase" -> "(*runtime.mspan).base"
  "(*runtime.mspan).objBase" -> "(*runtime.mspan).objIndex"
  "runtime.doubleCheckHeapPointers" -> "(*runtime.mspan).objBase"
  "(*runtime.mspan).typePointersOfUnchecked" -> "(*runtime.mspan).objBase"
  "(*runtime.mspan).typePointersOfUnchecked" -> "runtime.throw"
  "(*runtime.mspan).typePointersOfUnchecked" -> "(runtime.spanClass).noscan"
  "(*runtime.mspan).typePointersOfUnchecked" -> "(*runtime.mspan).objBase"
  "(*runtime.mspan).typePointersOfUnchecked" -> "runtime.heapBitsInSpan"
  "(*runtime.mspan).typePointersOfUnchecked" -> "(*runtime.mspan).heapBitsSmallForAddr"
  "(*runtime.mspan).typePointersOfUnchecked" -> "(runtime.spanClass).sizeclass"
  "(*runtime.mspan).typePointersOfUnchecked" -> "runtime.readUintptr"
  "runtime.doubleCheckHeapPointers" -> "(*runtime.mspan).typePointersOfUnchecked"
  "runtime.doubleCheckHeapPointers" -> "runtime.addb"
  "(runtime.typePointers).nextFast" -> "runtime/internal/sys.TrailingZeros64"
  "(runtime.typePointers).nextFast" -> "runtime/internal/sys.TrailingZeros32"
  "(runtime.typePointers).next" -> "(runtime.typePointers).nextFast"
  "(runtime.typePointers).next" -> "runtime.addb"
  "(runtime.typePointers).next" -> "runtime.readUintptr"
  "runtime.doubleCheckHeapPointers" -> "(runtime.typePointers).next"
  "runtime.doubleCheckHeapPointers" -> "(runtime.typePointers).next"
  "runtime.doubleCheckHeapPointers" -> "(*runtime.mspan).typePointersOfUnchecked"
  "runtime.doubleCheckHeapPointers" -> "runtime.dumpTypePointers"
  "runtime.doubleCheckHeapPointers" -> "(runtime.typePointers).next"
  "runtime.doubleCheckHeapPointers" -> "runtime.dumpTypePointers"
  "runtime.doubleCheckHeapPointers" -> "runtime.throw"
  "runtime.doubleCheckHeapPointers" -> "runtime.dumpTypePointers"
  "runtime.heapSetType" -> "runtime.doubleCheckHeapPointers"
  "runtime.heapSetType" -> "runtime.cheaprand"
  "runtime.heapSetType" -> "runtime.alignUp"
  "runtime.heapSetType" -> "runtime.cheaprand"
  "runtime.heapSetType" -> "runtime.alignDown"
  "runtime.doubleCheckHeapPointersInterior" -> "runtime.throw"
  "(*runtime.mspan).typePointersOf" -> "(*runtime.mspan).objBase"
  "(*runtime.mspan).typePointersOf" -> "(*runtime.mspan).typePointersOfUnchecked"
  "(runtime.typePointers).fastForward" -> "runtime.alignDown"
  "(runtime.typePointers).fastForward" -> "runtime.alignDown"
  "(runtime.typePointers).fastForward" -> "runtime.readUintptr"
  "(runtime.typePointers).fastForward" -> "runtime.addb"
  "(runtime.typePointers).fastForward" -> "runtime.readUintptr"
  "(*runtime.mspan).typePointersOf" -> "(runtime.typePointers).fastForward"
  "runtime.doubleCheckHeapPointersInterior" -> "(*runtime.mspan).typePointersOf"
  "runtime.doubleCheckHeapPointersInterior" -> "runtime.addb"
  "runtime.doubleCheckHeapPointersInterior" -> "(runtime.typePointers).next"
  "runtime.doubleCheckHeapPointersInterior" -> "(runtime.typePointers).next"
  "runtime.doubleCheckHeapPointersInterior" -> "(*runtime.mspan).typePointersOf"
  "runtime.doubleCheckHeapPointersInterior" -> "runtime.dumpTypePointers"
  "runtime.doubleCheckHeapPointersInterior" -> "(runtime.typePointers).next"
  "runtime.doubleCheckHeapPointersInterior" -> "runtime.dumpTypePointers"
  "runtime.doubleCheckHeapPointersInterior" -> "runtime.dumpTypePointers"
  "runtime.doubleCheckHeapPointersInterior" -> "runtime.throw"
  "runtime.doubleCheckHeapPointersInterior" -> "runtime.addb"
  "runtime.heapSetType" -> "runtime.doubleCheckHeapPointersInterior"
  "runtime.mallocgc" -> "runtime.heapSetType"
  "runtime.mallocgc" -> "runtime.heapBitsSetType"
  "runtime.gcmarknewobject" -> "runtime.throw"
  "runtime.gcmarknewobject" -> "(*runtime.mspan).objIndex"
  "runtime.gcmarknewobject" -> "(*runtime.mspan).markBitsForIndex"
  "(runtime.markBits).setMarked" -> "runtime/internal/atomic.Or8"
  "runtime.gcmarknewobject" -> "(runtime.markBits).setMarked"
  "runtime.gcmarknewobject" -> "(*runtime.mspan).base"
  "runtime.gcmarknewobject" -> "runtime.pageIndexOf"
  "runtime.gcmarknewobject" -> "runtime/internal/atomic.Or8"
  "runtime.gcmarknewobject" -> "runtime.getg"
  "runtime.gcmarknewobject" -> "(runtime.puintptr).ptr"
  "runtime.mallocgc" -> "runtime.gcmarknewobject"
  "runtime.racemalloc" -> "runtime.throw"
  "runtime.mallocgc" -> "runtime.racemalloc"
  "runtime.msanmalloc" -> "runtime.throw"
  "runtime.mallocgc" -> "runtime.msanmalloc"
  "runtime.mallocgc" -> "runtime.asanpoison"
  "runtime.asanunpoison" -> "runtime.throw"
  "runtime.mallocgc" -> "runtime.asanunpoison"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.profilealloc" -> "runtime.getMCache"
  "runtime.profilealloc" -> "runtime.throw"
  "runtime.nextSample" -> "runtime.getg"
  "runtime.fastexprand" -> "runtime.cheaprandn"
  "runtime.fastlog2" -> "runtime.float64bits"
  "runtime.fastexprand" -> "runtime.fastlog2"
  "runtime.nextSample" -> "runtime.fastexprand"
  "runtime.nextSampleNoFP" -> "runtime.cheaprandn"
  "runtime.nextSample" -> "runtime.nextSampleNoFP"
  "runtime.profilealloc" -> "runtime.nextSample"
  "runtime.mProf_Malloc" -> "runtime.callers"
  "runtime.mProf_Malloc" -> "(*runtime.mProfCycleHolder).read"
  "runtime.mProf_Malloc" -> "runtime.stkbucket"
  "runtime.mProf_Malloc" -> "(*runtime.bucket).mp"
  "runtime.mProf_Malloc" -> "runtime.lock"
  "runtime.mProf_Malloc" -> "runtime.unlock"
  "runtime.mProf_Malloc" -> "runtime.systemstack"
  "runtime.profilealloc" -> "runtime.mProf_Malloc"
  "runtime.mallocgc" -> "runtime.profilealloc"
  "runtime.mallocgc" -> "runtime.throw"
  "runtime.mallocgc" -> "runtime.throw"
  "runtime.memclrNoHeapPointersChunked" -> "runtime.getg"
  "runtime.goschedguarded" -> "runtime.mcall"
  "runtime.memclrNoHeapPointersChunked" -> "runtime.goschedguarded"
  "runtime.memclrNoHeapPointersChunked" -> "runtime.memclrNoHeapPointers"
  "runtime.mallocgc" -> "runtime.memclrNoHeapPointersChunked"
  "runtime.tracealloc" -> "runtime.lock"
  "runtime.tracealloc" -> "runtime.getg"
  "runtime.tracealloc" -> "runtime.toRType"
  "runtime.tracealloc" -> "(runtime.rtype).string"
  "runtime.tracealloc" -> "runtime.goroutineheader"
  "runtime.tracealloc" -> "runtime.getcallerpc"
  "runtime.tracealloc" -> "runtime.getcallersp"
  "runtime.tracealloc" -> "runtime.systemstack"
  "runtime.tracealloc" -> "runtime.unlock"
  "runtime.tracealloc" -> "runtime.goroutineheader"
  "runtime.traceback1" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.traceback1" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.callCgoSymbolizer" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.callCgoSymbolizer" -> "runtime.getg"
  "runtime.callCgoSymbolizer" -> "runtime.getg"
  "runtime.callCgoSymbolizer" -> "runtime.msanwrite"
  "runtime.callCgoSymbolizer" -> "runtime.asanwrite"
  "runtime.callCgoSymbolizer" -> "runtime.noescape"
  "runtime.callCgoSymbolizer" -> "runtime.cgocall"
  "runtime.callCgoSymbolizer" -> "runtime.asmcgocall"
  "runtime.printCgoTraceback" -> "runtime.callCgoSymbolizer"
  "runtime.printOneCgoTraceback" -> "runtime.printCgoTraceback$1"
  "runtime.printOneCgoTraceback" -> "runtime.callCgoSymbolizer"
  "runtime.printOneCgoTraceback" -> "runtime.gostringnocopy"
  "runtime.printOneCgoTraceback" -> "runtime.gostringnocopy"
  "runtime.printOneCgoTraceback" -> "runtime.traceback2$1"
  "runtime.printCgoTraceback" -> "runtime.printOneCgoTraceback"
  "runtime.traceback1" -> "runtime.printCgoTraceback"
  "runtime.traceback1" -> "runtime.readgstatus"
  "runtime.traceback1$1" -> "(*runtime.unwinder).initAt"
  "runtime.traceback2" -> "(runtime.guintptr).ptr"
  "runtime.traceback2" -> "runtime.gotraceback"
  "runtime.traceback2" -> "(*runtime.unwinder).symPC"
  "runtime.traceback2" -> "runtime.newInlineUnwinder"
  "runtime.traceback2" -> "(*runtime.unwinder).valid"
  "runtime.traceback2" -> "(runtime.inlineFrame).valid"
  "runtime.traceback2" -> "(*runtime.inlineUnwinder).srcFunc"
  "runtime.traceback2" -> "(*runtime.inlineUnwinder).next"
  "runtime.traceback2" -> "(*runtime.unwinder).cgoCallers"
  "runtime.traceback2" -> "runtime.traceback2$1"
  "runtime.showframe" -> "runtime.getg"
  "runtime.showfuncinfo" -> "runtime.gotraceback"
  "(runtime.srcFunc).name" -> "(*runtime.moduledata).funcName"
  "runtime.showfuncinfo" -> "(runtime.srcFunc).name"
  "runtime.showfuncinfo" -> "runtime.elideWrapperCalling"
  "runtime.showfuncinfo" -> "internal/bytealg.IndexByteString"
  "runtime.showfuncinfo" -> "runtime.hasPrefix"
  "runtime.showfuncinfo" -> "runtime.isExportedRuntime"
  "runtime.showframe" -> "runtime.showfuncinfo"
  "runtime.showframe" -> "(runtime.guintptr).ptr"
  "runtime.traceback2" -> "runtime.showframe"
  "runtime.traceback2" -> "(runtime.srcFunc).name"
  "runtime.funcline1" -> "(runtime.funcInfo).valid"
  "runtime.funcline1" -> "runtime.pcvalue"
  "runtime.funcline1" -> "runtime.pcvalue"
  "runtime.funcfile" -> "(runtime.funcInfo).valid"
  "runtime.funcfile" -> "runtime.gostringnocopy"
  "runtime.funcline1" -> "runtime.funcfile"
  "(*runtime.inlineUnwinder).fileLine" -> "runtime.funcline1"
  "runtime.traceback2" -> "(*runtime.inlineUnwinder).fileLine"
  "runtime.funcNamePiecesForPrint" -> "internal/bytealg.IndexByteString"
  "runtime.printFuncName" -> "runtime.funcNamePiecesForPrint"
  "runtime.traceback2" -> "runtime.printFuncName"
  "runtime.traceback2" -> "(*runtime.inlineUnwinder).isInlined"
  "runtime.traceback2" -> "(*runtime.inlineUnwinder).isInlined"
  "runtime.traceback2" -> "(*runtime.unwinder).symPC"
  "runtime.printArgs" -> "runtime.funcdata"
  "runtime.printArgs" -> "runtime.funcdata"
  "runtime.pcdatavalue" -> "runtime.pcdatastart"
  "runtime.pcdatavalue" -> "runtime.pcvalue"
  "runtime.printArgs" -> "runtime.pcdatavalue"
  "runtime.printArgs" -> "runtime.printArgs$3"
  "runtime.printArgs" -> "runtime.printArgs$3"
  "runtime.printArgs" -> "runtime.printArgs$3"
  "runtime.printArgs" -> "runtime.printArgs$3"
  "runtime.printArgs$2" -> "runtime.add"
  "runtime.printArgs$2" -> "runtime.readUnaligned64"
  "runtime.printArgs$1" -> "runtime.add"
  "runtime.printArgs$2" -> "runtime.printArgs$1"
  "runtime.printArgs" -> "runtime.printArgs$2"
  "runtime.traceback2" -> "runtime.printArgs"
  "runtime.traceback2" -> "(runtime.funcInfo).entry"
  "runtime.traceback2" -> "(runtime.funcInfo).entry"
  "runtime.traceback2" -> "(*runtime.unwinder).next"
  "runtime.traceback2" -> "runtime.traceback2$1"
  "runtime.traceback2" -> "runtime.printOneCgoTraceback"
  "runtime.traceback2" -> "runtime.callCgoSymbolizer"
  "runtime.traceback1$1" -> "runtime.traceback2"
  "runtime.traceback1$1" -> "runtime.traceback2"
  "runtime.traceback1$1" -> "runtime.traceback2"
  "runtime.traceback1$1" -> "runtime.traceback2"
  "runtime.traceback1" -> "runtime.traceback1$1"
  "runtime.traceback1" -> "runtime.traceback1$1"
  "runtime.printcreatedby" -> "runtime.findfunc"
  "runtime.printcreatedby" -> "(runtime.funcInfo).valid"
  "runtime.printcreatedby1" -> "runtime.funcname"
  "runtime.printcreatedby1" -> "runtime.printFuncName"
  "runtime.printcreatedby1" -> "(runtime.funcInfo).entry"
  "runtime.funcline" -> "runtime.funcline1"
  "runtime.printcreatedby1" -> "runtime.funcline"
  "runtime.printcreatedby1" -> "(runtime.funcInfo).entry"
  "runtime.printcreatedby1" -> "(runtime.funcInfo).entry"
  "runtime.printcreatedby" -> "runtime.printcreatedby1"
  "runtime.printcreatedby" -> "(runtime.funcInfo).srcFunc"
  "runtime.printcreatedby" -> "runtime.showframe"
  "runtime.traceback1" -> "runtime.printcreatedby"
  "runtime.printAncestorTraceback" -> "runtime.findfunc"
  "runtime.printAncestorTraceback" -> "(runtime.funcInfo).srcFunc"
  "runtime.printAncestorTraceback" -> "runtime.showfuncinfo"
  "runtime.printAncestorTracebackFuncInfo" -> "runtime.newInlineUnwinder"
  "runtime.printAncestorTracebackFuncInfo" -> "(*runtime.inlineUnwinder).fileLine"
  "runtime.printAncestorTracebackFuncInfo" -> "(*runtime.inlineUnwinder).srcFunc"
  "runtime.printAncestorTracebackFuncInfo" -> "(runtime.srcFunc).name"
  "runtime.printAncestorTracebackFuncInfo" -> "runtime.printFuncName"
  "runtime.printAncestorTracebackFuncInfo" -> "(runtime.funcInfo).entry"
  "runtime.printAncestorTracebackFuncInfo" -> "(runtime.funcInfo).entry"
  "runtime.printAncestorTraceback" -> "runtime.printAncestorTracebackFuncInfo"
  "runtime.printAncestorTraceback" -> "runtime.findfunc"
  "runtime.printAncestorTraceback" -> "(runtime.funcInfo).valid"
  "runtime.printAncestorTraceback" -> "runtime.printcreatedby1"
  "runtime.printAncestorTraceback" -> "(runtime.funcInfo).srcFunc"
  "runtime.printAncestorTraceback" -> "runtime.showfuncinfo"
  "runtime.traceback1" -> "runtime.printAncestorTraceback"
  "runtime.traceback" -> "runtime.traceback1"
  "runtime.tracealloc" -> "runtime.traceback"
  "runtime.mallocgc" -> "runtime.tracealloc"
  "runtime.mallocgc" -> "runtime.getg"
  "(runtime.gcTrigger).test" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.gcControllerState).trigger" -> "(*runtime.gcControllerState).heapGoalInternal"
  "(*runtime.gcControllerState).trigger" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).trigger" -> "runtime.throw"
  "(runtime.gcTrigger).test" -> "(*runtime.gcControllerState).trigger"
  "(runtime.gcTrigger).test" -> "(*runtime/internal/atomic.Uint64).Load"
  "(runtime.gcTrigger).test" -> "(*runtime/internal/atomic.Int32).Load"
  "(runtime.gcTrigger).test" -> "(*runtime/internal/atomic.Uint32).Load"
  "(runtime.gcTrigger).test" -> "runtime/internal/atomic.Load64"
  "runtime.mallocgc" -> "(runtime.gcTrigger).test"
  "runtime.gcStart" -> "runtime.acquirem"
  "runtime.gcStart" -> "runtime.getg"
  "runtime.gcStart" -> "runtime.releasem"
  "runtime.gcStart" -> "runtime.releasem"
  "runtime.gcStart" -> "runtime.semacquire"
  "runtime.gcStart" -> "(runtime.gcTrigger).test"
  "runtime.gcStart" -> "(runtime.gcTrigger).test"
  "runtime.gcStart" -> "runtime.sweepone"
  "runtime.gcStart" -> "runtime.semrelease"
  "runtime.gcStart" -> "runtime.semacquire"
  "runtime.gcStart" -> "runtime.semacquire"
  "runtime.gcStart" -> "runtime.traceAcquire"
  "runtime.gcStart" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).GCStart" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GCStart" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).GCStart" -> "(runtime.traceEventWriter).commit"
  "runtime.gcStart" -> "(runtime.traceLocker).GCStart"
  "runtime.gcStart" -> "runtime.traceRelease"
  "runtime.gcStart" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.gcBgMarkWorker" -> "runtime.getg"
  "runtime.gcBgMarkWorker" -> "(*runtime.guintptr).set"
  "runtime.gcBgMarkWorker" -> "runtime.acquirem"
  "runtime.gcBgMarkWorker" -> "(*runtime.muintptr).set"
  "runtime.gcBgMarkWorker" -> "runtime.notewakeup"
  "runtime.gcBgMarkWorker" -> "runtime.gopark"
  "runtime.gcBgMarkWorker" -> "runtime.acquirem"
  "runtime.gcBgMarkWorker" -> "(*runtime.muintptr).set"
  "runtime.gcBgMarkWorker" -> "(runtime.puintptr).ptr"
  "runtime.gcBgMarkWorker" -> "runtime.throw"
  "runtime.gcBgMarkWorker" -> "runtime.throw"
  "runtime.gcBgMarkWorker" -> "runtime.nanotime"
  "(*runtime.limiterEvent).start" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.limiterEvent).start" -> "(runtime.limiterEventStamp).typ"
  "(*runtime.limiterEvent).start" -> "runtime.makeLimiterEventStamp"
  "(*runtime.limiterEvent).start" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcBgMarkWorker" -> "(*runtime.limiterEvent).start"
  "runtime.gcBgMarkWorker" -> "runtime/internal/atomic.Xadd"
  "runtime.gcBgMarkWorker" -> "runtime.throw"
  "runtime.gcBgMarkWorker" -> "runtime.systemstack"
  "runtime.gcBgMarkWorker" -> "runtime.nanotime"
  "(*runtime.gcControllerState).markWorkerStop" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcControllerState).markWorkerStop" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcControllerState).markWorkerStop" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcControllerState).markWorkerStop" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcControllerState).removeIdleMarkWorker" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).removeIdleMarkWorker" -> "runtime.throw"
  "(*runtime.gcControllerState).removeIdleMarkWorker" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "(*runtime.gcControllerState).markWorkerStop" -> "(*runtime.gcControllerState).removeIdleMarkWorker"
  "(*runtime.gcControllerState).markWorkerStop" -> "runtime.throw"
  "runtime.gcBgMarkWorker" -> "(*runtime.gcControllerState).markWorkerStop"
  "runtime.gcBgMarkWorker" -> "(*runtime.limiterEvent).stop"
  "runtime.gcBgMarkWorker" -> "runtime/internal/atomic.Xaddint64"
  "runtime.gcBgMarkWorker" -> "runtime/internal/atomic.Xadd"
  "runtime.gcBgMarkWorker" -> "runtime.throw"
  "runtime.gcBgMarkWorker" -> "(runtime.muintptr).ptr"
  "runtime.gcBgMarkWorker" -> "runtime.releasem"
  "runtime.gcBgMarkWorker" -> "(*runtime.muintptr).set"
  "runtime.gcBgMarkWorker" -> "runtime.gcMarkDone"
  "runtime.gcBgMarkWorker" -> "runtime.gcMarkWorkAvailable"
  "runtime.gcBgMarkStartWorkers" -> "runtime.gcBgMarkWorker"
  "runtime.notetsleepg" -> "runtime.getg"
  "runtime.notetsleepg" -> "runtime.throw"
  "runtime.entersyscallblock" -> "runtime.getg"
  "runtime.entersyscallblock" -> "(runtime.puintptr).ptr"
  "runtime.entersyscallblock" -> "(runtime.puintptr).ptr"
  "runtime.entersyscallblock" -> "runtime.getcallerpc"
  "runtime.entersyscallblock" -> "runtime.getcallersp"
  "runtime.entersyscallblock" -> "runtime.save"
  "runtime.entersyscallblock" -> "runtime.systemstack"
  "runtime.entersyscallblock" -> "runtime.casgstatus"
  "runtime.entersyscallblock" -> "runtime.systemstack"
  "runtime.entersyscallblock" -> "runtime.systemstack"
  "runtime.entersyscallblock" -> "runtime.getcallerpc"
  "runtime.entersyscallblock" -> "runtime.getcallersp"
  "runtime.entersyscallblock" -> "runtime.save"
  "runtime.notetsleepg" -> "runtime.entersyscallblock"
  "runtime.notetsleep_internal" -> "runtime.getg"
  "runtime.notetsleep_internal" -> "runtime.key32"
  "runtime.notetsleep_internal" -> "runtime/internal/atomic.Load"
  "runtime.notetsleep_internal" -> "runtime.key32"
  "runtime.notetsleep_internal" -> "runtime.futexsleep"
  "runtime.notetsleep_internal" -> "runtime.key32"
  "runtime.notetsleep_internal" -> "runtime/internal/atomic.Load"
  "runtime.notetsleep_internal" -> "runtime.asmcgocall"
  "runtime.notetsleep_internal" -> "runtime.nanotime"
  "runtime.notetsleep_internal" -> "runtime.key32"
  "runtime.notetsleep_internal" -> "runtime/internal/atomic.Load"
  "runtime.notetsleep_internal" -> "runtime.key32"
  "runtime.notetsleep_internal" -> "runtime.futexsleep"
  "runtime.notetsleep_internal" -> "runtime.asmcgocall"
  "runtime.notetsleep_internal" -> "runtime.key32"
  "runtime.notetsleep_internal" -> "runtime/internal/atomic.Load"
  "runtime.notetsleep_internal" -> "runtime.nanotime"
  "runtime.notetsleepg" -> "runtime.notetsleep_internal"
  "runtime.notetsleepg" -> "runtime.exitsyscall"
  "runtime.gcBgMarkStartWorkers" -> "runtime.notetsleepg"
  "runtime.gcBgMarkStartWorkers" -> "runtime.noteclear"
  "runtime.gcStart" -> "runtime.gcBgMarkStartWorkers"
  "runtime.gcStart" -> "runtime.systemstack"
  "runtime.gcStart" -> "runtime.throw"
  "runtime.gcStart" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcStart" -> "runtime.nanotime"
  "runtime.gcStart" -> "runtime.systemstack"
  "runtime.gcStart" -> "runtime.systemstack"
  "flag.commandLineUsage" -> "flag.commandLineUsage"
  "flag.commandLineUsage" -> "runtime.asyncPreempt"
  "flag.init$1" -> "(*flag.FlagSet).Output"
  "fmt.Fprintf" -> "fmt.newPrinter"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.fmt).clearflags"
  "fmt.parsenum" -> "fmt.tooLarge"
  "fmt.parseArgNumber" -> "fmt.parsenum"
  "(*fmt.pp).argNumber" -> "fmt.parseArgNumber"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).writeString"
  "(*fmt.fmt).padString" -> "unicode/utf8.RuneCountInString"
  "(*fmt.fmt).padString" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).writeString"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).writeString"
  "(*fmt.fmt).padString" -> "(*fmt.fmt).writePadding"
  "(*fmt.pp).printArg" -> "(*fmt.fmt).padString"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.buffer).writeRune" -> "unicode/utf8.AppendRune"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "reflect.TypeOf" -> "reflect.noescape"
  "reflect.toType" -> "reflect.toRType"
  "reflect.TypeOf" -> "reflect.toType"
  "(*fmt.pp).badVerb" -> "reflect.TypeOf"
  "(*fmt.pp).badVerb" -> "(*reflect.rtype).String"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).printArg"
  "(reflect.Value).Type" -> "reflect.noescape"
  "(reflect.Value).typ" -> "reflect.noescape"
  "(reflect.Value).typeSlow" -> "(reflect.Value).typ"
  "(reflect.Value).typeSlow" -> "(reflect.Value).typ"
  "(reflect.Value).typeSlow" -> "reflect.toRType"
  "(reflect.Value).typeSlow" -> "(reflect.Value).typ"
  "(reflect.Value).typeSlow" -> "(*internal/abi.Type).Kind"
  "(*internal/abi.Type).ExportedMethods" -> "(*internal/abi.Type).Uncommon"
  "(*internal/abi.UncommonType).ExportedMethods" -> "internal/abi.addChecked"
  "(*internal/abi.Type).ExportedMethods" -> "(*internal/abi.UncommonType).ExportedMethods"
  "(reflect.Value).typeSlow" -> "(*internal/abi.Type).ExportedMethods"
  "reflect.typeOffFor" -> "reflect.toRType"
  "(*reflect.rtype).typeOff" -> "reflect.resolveTypeOff"
  "reflect.typeOffFor" -> "(*reflect.rtype).typeOff"
  "(reflect.Value).typeSlow" -> "reflect.typeOffFor"
  "(reflect.Value).typeSlow" -> "reflect.toRType"
  "(reflect.Value).typeSlow" -> "reflect.typeOffFor"
  "(reflect.Value).typeSlow" -> "reflect.toRType"
  "(reflect.Value).Type" -> "(reflect.Value).typeSlow"
  "(*fmt.pp).badVerb" -> "(reflect.Value).Type"
  "(*fmt.pp).badVerb" -> "(*reflect.rtype).String"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeByte"
  "reflect.makeMethodValue" -> "(reflect.Value).typ"
  "reflect.makeMethodValue" -> "(*internal/abi.Type).Kind"
  "reflect.makeMethodValue" -> "(reflect.Value).typ"
  "reflect.makeMethodValue" -> "(reflect.Value).Type"
  "reflect.methodValueCallCodePtr" -> "internal/abi.FuncPCABI0"
  "reflect.makeMethodValue" -> "reflect.methodValueCallCodePtr"
  "reflect.funcLayout" -> "(*internal/abi.Type).Kind"
  "reflect.stringFor" -> "reflect.toRType"
  "reflect.stringFor" -> "(*reflect.rtype).String"
  "reflect.funcLayout" -> "reflect.stringFor"
  "reflect.funcLayout" -> "reflect.stringFor"
  "(*sync/atomic.Pointer[sync.readOnly]).Load[sync.readOnly]" -> "sync/atomic.LoadPointer"
  "(*sync.Map).loadReadOnly" -> "(*sync/atomic.Pointer[sync.readOnly]).Load[sync.readOnly]"
  "(*sync.Map).Load" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).Load" -> "(*sync.Mutex).Lock"
  "(*sync.Map).Load" -> "(*sync.Map).loadReadOnly"
  "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]" -> "sync/atomic.StorePointer"
  "(*sync.Map).missLocked" -> "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
  "(*sync.Map).Load" -> "(*sync.Map).missLocked"
  "(*sync.Map).Load" -> "(*sync.Mutex).Unlock"
  "(*sync/atomic.Pointer[any]).Load[any]" -> "sync/atomic.LoadPointer"
  "(*sync.entry).load" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.Map).Load" -> "(*sync.entry).load"
  "reflect.funcLayout" -> "(*sync.Map).Load"
  "reflect.funcLayout" -> "(*internal/abi.Type).Kind"
  "(*reflect.abiSeq).addRcvr" -> "reflect.ifaceIndir"
  "(*reflect.abiSeq).addRcvr" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).addRcvr" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).addRcvr" -> "(*internal/abi.Type).Pointers"
  "(*reflect.abiSeq).stackAssign" -> "reflect.align"
  "(*reflect.abiSeq).addRcvr" -> "(*reflect.abiSeq).stackAssign"
  "reflect.newAbiDesc" -> "(*reflect.abiSeq).addRcvr"
  "reflect.newAbiDesc" -> "(*internal/abi.FuncType).InSlice"
  "reflect.newAbiDesc" -> "(*reflect.bitVector).append"
  "reflect.newAbiDesc" -> "(*reflect.bitVector).append"
  "(*reflect.abiSeq).addArg" -> "(*internal/abi.Type).Size"
  "(*reflect.abiSeq).addArg" -> "(*internal/abi.Type).Align"
  "(*reflect.abiSeq).addArg" -> "reflect.align"
  "(*reflect.abiSeq).regAssign" -> "(*internal/abi.Type).Kind"
  "(*reflect.abiSeq).regAssign" -> "(*internal/abi.Type).Size"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).regAssign" -> "(*internal/abi.Type).Size"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).regAssign" -> "(*internal/abi.Type).Size"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignFloatN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignFloatN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignFloatN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).assignIntN"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).regAssign"
  "(*reflect.abiSeq).regAssign" -> "(*internal/abi.Type).Kind"
  "(*reflect.abiSeq).regAssign" -> "(*reflect.abiSeq).regAssign"
  "(*reflect.abiSeq).addArg" -> "(*reflect.abiSeq).regAssign"
  "(*reflect.abiSeq).addArg" -> "(*internal/abi.Type).Size"
  "(*reflect.abiSeq).addArg" -> "(*internal/abi.Type).Align"
  "(*reflect.abiSeq).addArg" -> "(*reflect.abiSeq).stackAssign"
  "reflect.newAbiDesc" -> "(*reflect.abiSeq).addArg"
  "reflect.newAbiDesc" -> "reflect.align"
  "reflect.newAbiDesc" -> "reflect.align"
  "reflect.newAbiDesc" -> "(*internal/abi.FuncType).OutSlice"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append"
  "reflect.addTypeBits" -> "reflect.addTypeBits"
  "reflect.addTypeBits" -> "reflect.addTypeBits"
  "reflect.newAbiDesc" -> "reflect.addTypeBits"
  "reflect.newAbiDesc" -> "(*internal/abi.Type).Align"
  "reflect.newAbiDesc" -> "reflect.align"
  "reflect.newAbiDesc" -> "(*internal/abi.Type).Size"
  "reflect.newAbiDesc" -> "(*reflect.abiSeq).stepsForValue"
  "reflect.newAbiDesc" -> "(*internal/abi.IntArgRegBitmap).Set"
  "reflect.newAbiDesc" -> "(*reflect.abiSeq).addArg"
  "reflect.newAbiDesc" -> "reflect.addTypeBits"
  "reflect.newAbiDesc" -> "(*reflect.abiSeq).stepsForValue"
  "reflect.newAbiDesc" -> "(*internal/abi.IntArgRegBitmap).Set"
  "reflect.funcLayout" -> "reflect.newAbiDesc"
  "reflect.funcLayout" -> "reflect.align"
  "reflect.funcLayout" -> "reflect.stringFor"
  "reflect.funcLayout" -> "reflect.stringFor"
  "internal/abi.NewName" -> "internal/abi.writeVarint"
  "internal/abi.NewName" -> "internal/abi.writeVarint"
  "reflect.newName" -> "internal/abi.NewName"
  "reflect.funcLayout" -> "reflect.newName"
  "reflect.resolveReflectName" -> "reflect.addReflectOff"
  "reflect.funcLayout" -> "reflect.resolveReflectName"
  "(*sync.Map).LoadOrStore" -> "(*sync.Map).loadReadOnly"
  "(*sync.entry).tryLoadOrStore" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync/atomic.Pointer[any]).CompareAndSwap[any]" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync.entry).tryLoadOrStore" -> "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
  "(*sync.entry).tryLoadOrStore" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).tryLoadOrStore"
  "(*sync.Map).LoadOrStore" -> "(*sync.Mutex).Lock"
  "(*sync.Map).LoadOrStore" -> "(*sync.Map).loadReadOnly"
  "(*sync.entry).unexpungeLocked" -> "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).unexpungeLocked"
  "(*sync.Map).LoadOrStore" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).tryLoadOrStore"
  "(*sync.Map).LoadOrStore" -> "(*sync.entry).tryLoadOrStore"
  "(*sync.Map).LoadOrStore" -> "(*sync.Map).missLocked"
  "(*sync.Map).dirtyLocked" -> "(*sync.Map).loadReadOnly"
  "(*sync.entry).tryExpungeLocked" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.entry).tryExpungeLocked" -> "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
  "(*sync.entry).tryExpungeLocked" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.Map).dirtyLocked" -> "(*sync.entry).tryExpungeLocked"
  "(*sync.Map).LoadOrStore" -> "(*sync.Map).dirtyLocked"
  "(*sync.Map).LoadOrStore" -> "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
  "(*sync/atomic.Pointer[any]).Store[any]" -> "sync/atomic.StorePointer"
  "sync.newEntry" -> "(*sync/atomic.Pointer[any]).Store[any]"
  "(*sync.Map).LoadOrStore" -> "sync.newEntry"
  "reflect.funcLayout" -> "(*sync.Map).LoadOrStore"
  "reflect.funcLayout" -> "reflect.stringFor"
  "reflect.makeMethodValue" -> "reflect.funcLayout"
  "reflect.methodReceiver" -> "(reflect.Value).typ"
  "reflect.methodReceiver" -> "(*internal/abi.Type).Kind"
  "reflect.methodReceiver" -> "(reflect.Value).typ"
  "reflect.methodReceiver" -> "(reflect.Value).typ"
  "reflect.methodReceiver" -> "(reflect.Value).typ"
  "reflect.methodReceiver" -> "(*internal/abi.Type).ExportedMethods"
  "(*reflect.interfaceType).nameOff" -> "reflect.toRType"
  "(*reflect.interfaceType).nameOff" -> "(*reflect.rtype).nameOff"
  "reflect.methodReceiver" -> "(*reflect.interfaceType).nameOff"
  "reflect.methodReceiver" -> "(internal/abi.Name).IsExported"
  "(*reflect.interfaceType).typeOff" -> "reflect.toRType"
  "(*reflect.interfaceType).typeOff" -> "(*reflect.rtype).typeOff"
  "reflect.methodReceiver" -> "(*reflect.interfaceType).typeOff"
  "reflect.methodReceiver" -> "(reflect.Value).typ"
  "reflect.nameOffFor" -> "reflect.toRType"
  "reflect.nameOffFor" -> "(*reflect.rtype).nameOff"
  "reflect.methodReceiver" -> "reflect.nameOffFor"
  "reflect.methodReceiver" -> "(internal/abi.Name).IsExported"
  "reflect.methodReceiver" -> "(reflect.Value).typ"
  "reflect.textOffFor" -> "reflect.toRType"
  "(*reflect.rtype).textOff" -> "reflect.resolveTextOff"
  "reflect.textOffFor" -> "(*reflect.rtype).textOff"
  "reflect.methodReceiver" -> "reflect.textOffFor"
  "reflect.methodReceiver" -> "(reflect.Value).typ"
  "reflect.methodReceiver" -> "reflect.typeOffFor"
  "reflect.makeMethodValue" -> "reflect.methodReceiver"
  "reflect.makeMethodValue" -> "(*internal/abi.Type).Common"
  "reflect.valueInterface" -> "reflect.makeMethodValue"
  "reflect.valueInterface" -> "(reflect.flag).kind"
  "(reflect.Value).NumMethod" -> "(reflect.Value).typ"
  "(reflect.Value).NumMethod" -> "(reflect.Value).typ"
  "(reflect.Value).NumMethod" -> "reflect.toRType"
  "(*reflect.rtype).NumMethod" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).NumMethod" -> "(*reflect.interfaceType).NumMethod"
  "(*reflect.rtype).uncommon" -> "(*internal/abi.Type).Uncommon"
  "(*reflect.rtype).exportedMethods" -> "(*reflect.rtype).uncommon"
  "(*reflect.rtype).exportedMethods" -> "(*internal/abi.UncommonType).ExportedMethods"
  "(*reflect.rtype).NumMethod" -> "(*reflect.rtype).exportedMethods"
  "(reflect.Value).NumMethod" -> "(*reflect.rtype).NumMethod"
  "reflect.valueInterface" -> "(reflect.Value).NumMethod"
  "reflect.packEface" -> "(reflect.Value).typ"
  "reflect.packEface" -> "(*internal/abi.Type).IfaceIndir"
  "reflect.packEface" -> "reflect.unsafe_New"
  "reflect.packEface" -> "reflect.typedmemmove"
  "reflect.valueInterface" -> "reflect.packEface"
  "(reflect.Value).Interface" -> "reflect.valueInterface"
  "(*fmt.pp).printValue" -> "(reflect.Value).Interface"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).badVerb"
  "reflect.unpackEface" -> "(*internal/abi.Type).Kind"
  "reflect.unpackEface" -> "(*internal/abi.Type).IfaceIndir"
  "reflect.ValueOf" -> "reflect.unpackEface"
  "(*fmt.pp).catchPanic" -> "reflect.ValueOf"
  "(reflect.Value).Kind" -> "(reflect.flag).kind"
  "(*fmt.pp).catchPanic" -> "(reflect.Value).Kind"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(reflect.Value).IsNil" -> "(reflect.flag).kind"
  "(reflect.Value).IsNil" -> "(reflect.flag).kind"
  "(*fmt.pp).catchPanic" -> "(reflect.Value).IsNil"
  "(*fmt.pp).catchPanic" -> "(*fmt.fmt).clearflags"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).catchPanic" -> "(*fmt.pp).printArg"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "fmt.Sprintf" -> "fmt.newPrinter"
  "fmt.Sprintf" -> "(*fmt.pp).doPrintf"
  "(*sync.Pool).Put" -> "sync.runtime_randn"
  "(*sync.Pool).Put" -> "(*sync.Pool).pin"
  "(*sync.Pool).Put" -> "sync.poolRaceAddr"
  "(*sync.Pool).Put" -> "internal/race.ReleaseMerge"
  "(*sync.Pool).Put" -> "internal/race.Disable"
  "(*sync.Pool).Put" -> "sync.runtime_procUnpin"
  "(*sync.poolChain).pushHead" -> "sync.storePoolChainElt"
  "(*sync.poolDequeue).pushHead" -> "(*sync/atomic.Uint64).Load"
  "(*sync.poolDequeue).pushHead" -> "(*sync.poolDequeue).unpack"
  "(*sync.poolDequeue).pushHead" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Uint64).Add" -> "sync/atomic.AddUint64"
  "(*sync.poolDequeue).pushHead" -> "(*sync/atomic.Uint64).Add"
  "(*sync.poolChain).pushHead" -> "(*sync.poolDequeue).pushHead"
  "(*sync.poolChain).pushHead" -> "sync.storePoolChainElt"
  "(*sync.poolChain).pushHead" -> "(*sync.poolDequeue).pushHead"
  "(*sync.Pool).Put" -> "(*sync.poolChain).pushHead"
  "(*sync.Pool).Put" -> "internal/race.Enable"
  "(*fmt.pp).free" -> "(*sync.Pool).Put"
  "fmt.Sprintf" -> "(*fmt.pp).free"
  "(*periph.io/x/host/v3/bcm283x.dmaChannel).GoString" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).GoString"
  "(*periph.io/x/host/v3/bcm283x.clockMap).GoString" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.clockMap).GoString"
  "(*sync/atomic.Uint32).Load" -> "sync/atomic.LoadUint32"
  "(*sync.Once).Do" -> "(*sync/atomic.Uint32).Load"
  "(*sync.Once).doSlow" -> "(*sync.Mutex).Lock"
  "(*sync.Once).doSlow" -> "(*sync.Mutex).Unlock"
  "(*sync.Once).doSlow" -> "(*sync/atomic.Uint32).Load"
  "(*sync/atomic.Uint32).Store" -> "sync/atomic.StoreUint32"
  "(*sync.Once).doSlow" -> "(*sync/atomic.Uint32).Store"
  "os/signal.loop" -> "os/signal.signal_recv"
  "os/signal.process" -> "os/signal.signum"
  "os/signal.process" -> "(*sync.Mutex).Lock"
  "os/signal.process" -> "(*sync.Mutex).Unlock"
  "os/signal.process" -> "(*os/signal.handler).want"
  "os/signal.process" -> "(*os/signal.handler).want"
  "os/signal.loop" -> "os/signal.process"
  "(*sync.Once).doSlow" -> "os/signal.loop"
  "time.FixedZone$1" -> "time.fixedZone"
  "(*sync.Once).doSlow" -> "time.FixedZone$1"
  "(*sync.Once).doSlow" -> "(*fmt.ss).Token$1"
  "(*sync.Once).doSlow" -> "reflect.methodValueCall"
  "runtime.removespecial" -> "runtime.spanOfHeap"
  "runtime.removespecial" -> "runtime.throw"
  "runtime.removespecial" -> "runtime.acquirem"
  "(*runtime.mspan).ensureSwept" -> "runtime.getg"
  "(*runtime.mspan).ensureSwept" -> "runtime.throw"
  "(*runtime.mspan).ensureSwept" -> "(*runtime.activeSweep).begin"
  "(*runtime.mspan).ensureSwept" -> "(*runtime.sweepLocker).tryAcquire"
  "(*runtime.mspan).ensureSwept" -> "(*runtime.sweepLocked).sweep"
  "(*runtime.mspan).ensureSwept" -> "(*runtime.activeSweep).end"
  "(*runtime.mspan).ensureSwept" -> "(*runtime.activeSweep).end"
  "(*runtime.mspan).ensureSwept" -> "runtime/internal/atomic.Load"
  "(*runtime.mspan).ensureSwept" -> "runtime.osyield"
  "runtime.removespecial" -> "(*runtime.mspan).ensureSwept"
  "runtime.removespecial" -> "(*runtime.mspan).base"
  "runtime.removespecial" -> "runtime.lock"
  "runtime.removespecial" -> "(*runtime.mspan).specialFindSplicePoint"
  "runtime.removespecial" -> "runtime.spanHasNoSpecials"
  "runtime.removespecial" -> "runtime.unlock"
  "runtime.removespecial" -> "runtime.releasem"
  "runtime.removefinalizer" -> "runtime.removespecial"
  "runtime.removefinalizer" -> "runtime.lock"
  "runtime.removefinalizer" -> "(*runtime.fixalloc).free"
  "runtime.removefinalizer" -> "runtime.unlock"
  "runtime.SetFinalizer$1" -> "runtime.removefinalizer"
  "(*sync.Once).doSlow" -> "runtime.SetFinalizer$1"
  "runtime.addfinalizer" -> "runtime.lock"
  "(*runtime.fixalloc).alloc" -> "runtime.throw"
  "(*runtime.fixalloc).alloc" -> "runtime.memclrNoHeapPointers"
  "(*runtime.fixalloc).alloc" -> "runtime.persistentalloc"
  "runtime.addfinalizer" -> "(*runtime.fixalloc).alloc"
  "runtime.addfinalizer" -> "runtime.unlock"
  "runtime.addspecial" -> "runtime.spanOfHeap"
  "runtime.addspecial" -> "runtime.throw"
  "runtime.addspecial" -> "runtime.acquirem"
  "runtime.addspecial" -> "(*runtime.mspan).ensureSwept"
  "runtime.addspecial" -> "(*runtime.mspan).base"
  "runtime.addspecial" -> "runtime.lock"
  "runtime.addspecial" -> "(*runtime.mspan).specialFindSplicePoint"
  "runtime.spanHasSpecials" -> "(*runtime.mspan).base"
  "runtime.spanHasSpecials" -> "(*runtime.mspan).base"
  "runtime.spanHasSpecials" -> "runtime.arenaIndex"
  "runtime.spanHasSpecials" -> "(runtime.arenaIdx).l1"
  "runtime.spanHasSpecials" -> "(runtime.arenaIdx).l2"
  "runtime.spanHasSpecials" -> "runtime/internal/atomic.Or8"
  "runtime.addspecial" -> "runtime.spanHasSpecials"
  "runtime.addspecial" -> "runtime.unlock"
  "runtime.addspecial" -> "runtime.releasem"
  "runtime.addfinalizer" -> "runtime.addspecial"
  "runtime.addfinalizer" -> "runtime.lock"
  "runtime.addfinalizer" -> "(*runtime.fixalloc).free"
  "runtime.addfinalizer" -> "runtime.unlock"
  "runtime.addfinalizer" -> "runtime.findObject"
  "runtime.addfinalizer" -> "runtime.acquirem"
  "runtime.addfinalizer" -> "(runtime.puintptr).ptr"
  "runtime.addfinalizer" -> "(runtime.spanClass).noscan"
  "runtime.scanobject" -> "runtime/internal/sys.Prefetch"
  "runtime.scanobject" -> "runtime.spanOfUnchecked"
  "runtime.scanobject" -> "runtime.throw"
  "runtime.scanobject" -> "(runtime.spanClass).noscan"
  "runtime.scanobject" -> "runtime.throw"
  "runtime.scanobject" -> "(*runtime.mspan).base"
  "runtime.scanobject" -> "(*runtime.mspan).base"
  "runtime.scanobject" -> "(*runtime.mspan).base"
  "runtime.scanobject" -> "(*runtime.gcWork).putFast"
  "(*runtime.gcWork).put" -> "runtime.lockWithRankMayAcquire"
  "(*runtime.gcWork).put" -> "runtime.lockWithRankMayAcquire"
  "runtime.getempty" -> "(*runtime.lfstack).pop"
  "runtime.getempty" -> "runtime.lockWithRankMayAcquire"
  "runtime.getempty" -> "runtime.lockWithRankMayAcquire"
  "(*runtime.workbuf).checkempty" -> "runtime.throw"
  "runtime.getempty" -> "(*runtime.workbuf).checkempty"
  "runtime.getempty" -> "runtime.lock"
  "runtime.getempty" -> "(*runtime.mSpanList).remove"
  "runtime.getempty" -> "(*runtime.mSpanList).insert"
  "runtime.getempty" -> "runtime.unlock"
  "runtime.getempty" -> "runtime.systemstack"
  "runtime.getempty" -> "runtime.throw"
  "runtime.getempty" -> "runtime.lock"
  "runtime.getempty" -> "(*runtime.mSpanList).insert"
  "runtime.getempty" -> "runtime.unlock"
  "runtime.getempty" -> "(*runtime.mspan).base"
  "runtime.lfnodeValidate" -> "runtime.findObject"
  "runtime.lfnodeValidate" -> "runtime.throw"
  "runtime.lfnodeValidate" -> "runtime.lfstackPack"
  "runtime.lfnodeValidate" -> "runtime.lfstackUnpack"
  "runtime.lfnodeValidate" -> "runtime.printlock"
  "runtime.lfnodeValidate" -> "runtime.throw"
  "runtime.getempty" -> "runtime.lfnodeValidate"
  "runtime.putempty" -> "(*runtime.workbuf).checkempty"
  "runtime.putempty" -> "(*runtime.lfstack).push"
  "runtime.getempty" -> "runtime.putempty"
  "(*runtime.gcWork).init" -> "runtime.getempty"
  "runtime.trygetfull" -> "(*runtime.lfstack).pop"
  "(*runtime.workbuf).checknonempty" -> "runtime.throw"
  "runtime.trygetfull" -> "(*runtime.workbuf).checknonempty"
  "(*runtime.gcWork).init" -> "runtime.trygetfull"
  "(*runtime.gcWork).init" -> "runtime.getempty"
  "(*runtime.gcWork).put" -> "(*runtime.gcWork).init"
  "runtime.putfull" -> "(*runtime.workbuf).checknonempty"
  "runtime.putfull" -> "(*runtime.lfstack).push"
  "(*runtime.gcWork).put" -> "runtime.putfull"
  "(*runtime.gcWork).put" -> "runtime.getempty"
  "(*runtime.gcControllerState).enlistWorker" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).enlistWorker" -> "runtime.getg"
  "(*runtime.gcControllerState).enlistWorker" -> "(runtime.puintptr).ptr"
  "(*runtime.gcControllerState).enlistWorker" -> "runtime.cheaprandn"
  "runtime.preemptone" -> "(runtime.muintptr).ptr"
  "runtime.preemptone" -> "runtime.getg"
  "runtime.preemptM" -> "(*runtime.rwmutex).rlock"
  "runtime.preemptM" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.preemptM" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.signalM" -> "runtime.getpid"
  "runtime.signalM" -> "runtime.tgkill"
  "runtime.preemptM" -> "runtime.signalM"
  "runtime.preemptM" -> "(*runtime.rwmutex).runlock"
  "runtime.preemptone" -> "runtime.preemptM"
  "(*runtime.gcControllerState).enlistWorker" -> "runtime.preemptone"
  "(*runtime.gcWork).put" -> "(*runtime.gcControllerState).enlistWorker"
  "runtime.scanobject" -> "(*runtime.gcWork).put"
  "runtime.scanobject" -> "(*runtime.mspan).base"
  "runtime.scanobject" -> "(*runtime.mspan).typePointersOfUnchecked"
  "runtime.scanobject" -> "(runtime.typePointers).fastForward"
  "runtime.scanobject" -> "(*runtime.mspan).typePointersOfUnchecked"
  "runtime.scanobject" -> "runtime.heapBitsForAddr"
  "runtime.scanobject" -> "(runtime.typePointers).nextFast"
  "runtime.scanobject" -> "(runtime.heapBits).nextFast"
  "runtime.scanobject" -> "(runtime.typePointers).next"
  "runtime.scanobject" -> "(runtime.heapBits).next"
  "runtime.scanobject" -> "runtime.findObject"
  "runtime.greyobject" -> "runtime.throw"
  "runtime.greyobject" -> "(*runtime.mspan).markBitsForIndex"
  "runtime.setCheckmark" -> "(runtime.markBits).isMarked"
  "runtime.setCheckmark" -> "runtime.printlock"
  "runtime.setCheckmark" -> "runtime.gcDumpObject"
  "runtime.setCheckmark" -> "runtime.gcDumpObject"
  "runtime.setCheckmark" -> "runtime.getg"
  "runtime.setCheckmark" -> "runtime.throw"
  "runtime.setCheckmark" -> "runtime.arenaIndex"
  "runtime.setCheckmark" -> "(runtime.arenaIdx).l1"
  "runtime.setCheckmark" -> "(runtime.arenaIdx).l2"
  "runtime.setCheckmark" -> "runtime/internal/atomic.Load8"
  "runtime.setCheckmark" -> "runtime/internal/atomic.Or8"
  "runtime.greyobject" -> "runtime.setCheckmark"
  "runtime.greyobject" -> "runtime/internal/sys.Prefetch"
  "runtime.greyobject" -> "(*runtime.gcWork).putFast"
  "runtime.greyobject" -> "runtime.gcDumpObject"
  "runtime.greyobject" -> "runtime.gcDumpObject"
  "runtime.greyobject" -> "runtime.getg"
  "runtime.greyobject" -> "runtime.throw"
  "runtime.greyobject" -> "(runtime.markBits).isMarked"
  "runtime.greyobject" -> "(*runtime.mspan).isFree"
  "runtime.greyobject" -> "(runtime.markBits).setMarked"
  "runtime.greyobject" -> "(*runtime.mspan).base"
  "runtime.greyobject" -> "runtime.pageIndexOf"
  "runtime.greyobject" -> "runtime/internal/atomic.Or8"
  "runtime.greyobject" -> "(runtime.spanClass).noscan"
  "runtime.greyobject" -> "(*runtime.gcWork).put"
  "runtime.scanobject" -> "runtime.greyobject"
  "runtime.addfinalizer" -> "runtime.scanobject"
  "runtime.scanblock" -> "runtime.addb"
  "runtime.scanblock" -> "runtime.findObject"
  "runtime.scanblock" -> "runtime.greyobject"
  "(*runtime.stackScanState).putPtr" -> "runtime.throw"
  "(*runtime.stackScanState).putPtr" -> "runtime.getempty"
  "(*runtime.stackScanState).putPtr" -> "runtime.getempty"
  "runtime.scanblock" -> "(*runtime.stackScanState).putPtr"
  "runtime.addfinalizer" -> "runtime.scanblock"
  "runtime.addfinalizer" -> "runtime.releasem"
  "runtime.SetFinalizer$2" -> "runtime.addfinalizer"
  "runtime.SetFinalizer$2" -> "runtime.throw"
  "(*sync.Once).doSlow" -> "runtime.SetFinalizer$2"
  "(*sync.Once).doSlow" -> "flag.commandLineUsage"
  "(*sync.Once).doSlow" -> "runtime.asyncPreempt"
  "(*sync.Once).doSlow" -> "flag.init$1"
  "(*sync.Once).doSlow" -> "runtime.init$1"
  "syscall.Uname" -> "syscall.RawSyscall"
  "syscall.Uname" -> "syscall.errnoErr"
  "internal/syscall/unix.KernelVersion" -> "syscall.Uname"
  "internal/poll.CopyFileRange$1" -> "internal/syscall/unix.KernelVersion"
  "(*sync.Once).doSlow" -> "internal/poll.CopyFileRange$1"
  "runtime.chansend$1" -> "runtime.unlock"
  "(*sync.Once).doSlow" -> "runtime.chansend$1"
  "time.Now" -> "time.now"
  "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge" -> "time.Now"
  "syscall.Syscall6" -> "syscall.runtime_entersyscall"
  "syscall.Syscall6" -> "syscall.RawSyscall6"
  "syscall.Syscall6" -> "syscall.runtime_exitsyscall"
  "syscall.EpollWait" -> "syscall.Syscall6"
  "syscall.EpollWait" -> "syscall.errnoErr"
  "(*periph.io/x/host/v3/fs.event).wait" -> "syscall.EpollWait"
  "(*periph.io/x/host/v3/fs.Event).Wait" -> "(*periph.io/x/host/v3/fs.event).wait"
  "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge" -> "(*periph.io/x/host/v3/fs.Event).Wait"
  "time.Since" -> "time.runtimeNano"
  "time.Since" -> "time.subMono"
  "time.Since" -> "time.Now"
  "(time.Time).Sub" -> "time.subMono"
  "(time.Time).Sub" -> "(*time.Time).sec"
  "(time.Time).Sub" -> "(*time.Time).sec"
  "(time.Time).Sub" -> "(*time.Time).nsec"
  "(time.Time).Sub" -> "(*time.Time).nsec"
  "(time.Time).Add" -> "(*time.Time).nsec"
  "(*time.Time).stripMono" -> "(*time.Time).sec"
  "(*time.Time).addSec" -> "(*time.Time).stripMono"
  "(time.Time).Add" -> "(*time.Time).addSec"
  "(time.Time).Add" -> "(*time.Time).stripMono"
  "(time.Time).Sub" -> "(time.Time).Add"
  "(time.Time).Equal" -> "(*time.Time).sec"
  "(time.Time).Equal" -> "(*time.Time).sec"
  "(time.Time).Equal" -> "(*time.Time).nsec"
  "(time.Time).Equal" -> "(*time.Time).nsec"
  "(time.Time).Sub" -> "(time.Time).Equal"
  "(time.Time).Before" -> "(*time.Time).sec"
  "(time.Time).Before" -> "(*time.Time).sec"
  "(time.Time).Before" -> "(*time.Time).nsec"
  "(time.Time).Before" -> "(*time.Time).nsec"
  "(time.Time).Sub" -> "(time.Time).Before"
  "time.Since" -> "(time.Time).Sub"
  "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge" -> "time.Since"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1" -> "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge"
  "(*periph.io/x/host/v3/bcm283x.Pin).WaitForEdge" -> "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1" -> "(*periph.io/x/host/v3/bcm283x.Pin).WaitForEdge"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1" -> "(periph.io/x/conn/v3/gpio.invalidPin).WaitForEdge"
  "(*periph.io/x/host/v3/allwinner.Pin).WaitForEdge" -> "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1" -> "(*periph.io/x/host/v3/allwinner.Pin).WaitForEdge"
  "(*periph.io/x/host/v3/allwinner.PinPL).WaitForEdge" -> "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1" -> "(*periph.io/x/host/v3/allwinner.PinPL).WaitForEdge"
  "(*periph.io/x/host/v3/sysfs.spiConn).Tx" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.spiConn).Tx" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.spiConn).Tx" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.spiConn).Tx" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.spiConn).Tx" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/fs.IOW" -> "periph.io/x/host/v3/fs.ioc"
  "periph.io/x/host/v3/sysfs.spiIOCTx" -> "periph.io/x/host/v3/fs.IOW"
  "(*periph.io/x/host/v3/sysfs.spiConn).txPackets" -> "periph.io/x/host/v3/sysfs.spiIOCTx"
  "(*internal/poll.fdMutex).incref" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).incref" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.FD).incref" -> "(*internal/poll.fdMutex).incref"
  "(*internal/poll.FD).incref" -> "internal/poll.errClosing"
  "(*internal/poll.FD).SetBlocking" -> "(*internal/poll.FD).incref"
  "(*internal/poll.fdMutex).decref" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).decref" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.FD).decref" -> "(*internal/poll.fdMutex).decref"
  "(*internal/poll.FD).decref" -> "(*internal/poll.FD).destroy"
  "(*internal/poll.FD).SetBlocking" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetBlocking" -> "sync/atomic.StoreUint32"
  "syscall.fcntl" -> "syscall.Syscall"
  "syscall.fcntl" -> "syscall.errnoErr"
  "syscall.SetNonblock" -> "syscall.fcntl"
  "syscall.SetNonblock" -> "syscall.fcntl"
  "(*internal/poll.FD).SetBlocking" -> "syscall.SetNonblock"
  "(*os.File).Fd" -> "(*internal/poll.FD).SetBlocking"
  "(*periph.io/x/host/v3/fs.File).Ioctl" -> "(*os.File).Fd"
  "periph.io/x/host/v3/fs.ioctl" -> "syscall.Syscall"
  "(*periph.io/x/host/v3/fs.File).Ioctl" -> "periph.io/x/host/v3/fs.ioctl"
  "(*periph.io/x/host/v3/sysfs.spiConn).txPackets" -> "(*periph.io/x/host/v3/fs.File).Ioctl"
  "(*periph.io/x/host/v3/sysfs.spiConn).txPackets" -> "(*periph.io/x/host/v3/sysfs.spiIOCTransfer).reset"
  "(*periph.io/x/host/v3/sysfs.spiConn).Tx" -> "(*periph.io/x/host/v3/sysfs.spiConn).txPackets"
  "(*periph.io/x/host/v3/sysfs.spiConn).Tx" -> "fmt.Errorf"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).WriteReg8"
  "math.NaN" -> "math.Float64frombits"
  "math.sqrt" -> "math.NaN"
  "math.sqrt" -> "math.IsInf"
  "math.sqrt" -> "math.IsNaN"
  "math.sqrt" -> "math.Float64bits"
  "math.sqrt" -> "math.Float64frombits"
  "math.Sqrt" -> "math.sqrt"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).Transform" -> "math.Sqrt"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).Transform" -> "math.Sqrt"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).Transform" -> "errors.New"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).Transform" -> "errors.New"
  "(*github.com/stefan-muehlebach/adatft.Touch).newPenEvent" -> "(*github.com/stefan-muehlebach/adatft.DistortedPlane).Transform"
  "(*github.com/stefan-muehlebach/adatft.Touch).newPenEvent" -> "time.Now"
  "(*github.com/stefan-muehlebach/adatft.Touch).newPenEvent" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8"
  "(*github.com/stefan-muehlebach/adatft.Touch).newPenEvent" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft.Touch).newPenEvent"
  "(*sync/atomic.Bool).Load" -> "sync/atomic.LoadUint32"
  "(*log.Logger).output" -> "(*sync/atomic.Bool).Load"
  "(*log.Logger).output" -> "time.Now"
  "(*sync/atomic.Pointer[string]).Load[string]" -> "sync/atomic.LoadPointer"
  "(*log.Logger).Prefix" -> "(*sync/atomic.Pointer[string]).Load[string]"
  "(*log.Logger).output" -> "(*log.Logger).Prefix"
  "(*sync/atomic.Int32).Load" -> "sync/atomic.LoadInt32"
  "(*log.Logger).Flags" -> "(*sync/atomic.Int32).Load"
  "(*log.Logger).output" -> "(*log.Logger).Flags"
  "log.getBuffer" -> "(*sync.Pool).Get"
  "(*log.Logger).output" -> "log.getBuffer"
  "log.putBuffer" -> "(*sync.Pool).Put"
  "(*log.Logger).output" -> "log.putBuffer"
  "(*time.Time).setLoc" -> "(*time.Time).stripMono"
  "(time.Time).UTC" -> "(*time.Time).setLoc"
  "log.formatHeader" -> "(time.Time).UTC"
  "(time.Time).date" -> "(time.Time).abs"
  "time.absDate" -> "time.isLeap"
  "(time.Time).date" -> "time.absDate"
  "(time.Time).Date" -> "(time.Time).date"
  "log.formatHeader" -> "(time.Time).Date"
  "log.formatHeader" -> "log.itoa"
  "log.formatHeader" -> "log.itoa"
  "log.formatHeader" -> "log.itoa"
  "(time.Time).Clock" -> "(time.Time).abs"
  "(time.Time).Clock" -> "time.absClock"
  "log.formatHeader" -> "(time.Time).Clock"
  "log.formatHeader" -> "log.itoa"
  "log.formatHeader" -> "log.itoa"
  "log.formatHeader" -> "log.itoa"
  "(time.Time).Nanosecond" -> "(*time.Time).nsec"
  "log.formatHeader" -> "(time.Time).Nanosecond"
  "log.formatHeader" -> "log.itoa"
  "log.formatHeader" -> "log.itoa"
  "(*log.Logger).output" -> "log.formatHeader"
  "(*log.Logger).output" -> "log.init#1$1$1"
  "(*log.Logger).output" -> "(*log.Logger).Output$1"
  "runtime.Caller" -> "runtime.callers"
  "runtime.Caller" -> "runtime.CallersFrames"
  "(*runtime.Frames).Next" -> "runtime.findfunc"
  "(*runtime.Frames).Next" -> "(runtime.funcInfo).valid"
  "(*runtime.Frames).Next" -> "(runtime.funcInfo)._Func"
  "(*runtime.Func).Entry" -> "(*runtime.Func).raw"
  "(*runtime.Func).Entry" -> "(*runtime._func).isInlined"
  "(*runtime.Func).Entry" -> "(*runtime._func).funcInfo"
  "(*runtime.Func).Entry" -> "(runtime.funcInfo).entry"
  "(*runtime.Frames).Next" -> "(*runtime.Func).Entry"
  "runtime.expandCgoFrames" -> "runtime.callCgoSymbolizer"
  "runtime.gostring" -> "runtime.findnull"
  "runtime.rawstring" -> "runtime.mallocgc"
  "runtime.gostring" -> "runtime.rawstring"
  "runtime.gostring" -> "runtime.memmove"
  "runtime.expandCgoFrames" -> "runtime.gostring"
  "runtime.expandCgoFrames" -> "runtime.gostring"
  "runtime.expandCgoFrames" -> "runtime.callCgoSymbolizer"
  "runtime.expandCgoFrames" -> "runtime.callCgoSymbolizer"
  "(*runtime.Frames).Next" -> "runtime.expandCgoFrames"
  "(*runtime.Frames).Next" -> "runtime.newInlineUnwinder"
  "(*runtime.Frames).Next" -> "(*runtime.inlineUnwinder).srcFunc"
  "(*runtime.Frames).Next" -> "(*runtime.inlineUnwinder).isInlined"
  "(*runtime.Frames).Next" -> "(runtime.srcFunc).name"
  "runtime.funcNameForPrint" -> "runtime.funcNamePiecesForPrint"
  "(*runtime.Frames).Next" -> "runtime.funcNameForPrint"
  "(*runtime.Frames).Next" -> "(runtime.funcInfo).valid"
  "(*runtime.Frames).Next" -> "runtime.funcline1"
  "runtime.Caller" -> "(*runtime.Frames).Next"
  "(*log.Logger).output" -> "runtime.Caller"
  "(*log.Logger).output" -> "runtime.CallersFrames"
  "(*log.Logger).output" -> "(*runtime.Frames).Next"
  "(*log.Logger).output" -> "(*sync.Mutex).Lock"
  "(*log.Logger).output" -> "(*sync.Mutex).Unlock"
  "(*log.Logger).output" -> "(*bytes.Buffer).Write"
  "(*log.Logger).output" -> "(*os.File).Write"
  "(*log.Logger).output" -> "(*internal/poll.FD).Write"
  "(*log.Logger).output" -> "(io.discard).Write"
  "(*hash/adler32.digest).Write" -> "hash/adler32.update"
  "(*log.Logger).output" -> "(*hash/adler32.digest).Write"
  "(*fmt.pp).Write" -> "(*fmt.buffer).write"
  "(*log.Logger).output" -> "(*fmt.pp).Write"
  "(*bufio.Writer).Write" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).Write" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).Write" -> "(*bytes.Buffer).Write"
  "(*bufio.Writer).Write" -> "(*os.File).Write"
  "(*bufio.Writer).Write" -> "(*internal/poll.FD).Write"
  "(*bufio.Writer).Write" -> "(io.discard).Write"
  "(*bufio.Writer).Write" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*bufio.Writer).Write" -> "(*fmt.pp).Write"
  "(*bufio.Writer).Write" -> "(*bufio.Writer).Write"
  "(*bufio.Writer).Flush" -> "(*bytes.Buffer).Write"
  "(*bufio.Writer).Flush" -> "(*os.File).Write"
  "(*bufio.Writer).Flush" -> "(*internal/poll.FD).Write"
  "(*bufio.Writer).Flush" -> "(io.discard).Write"
  "(*bufio.Writer).Flush" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*bufio.Writer).Flush" -> "(*fmt.pp).Write"
  "(*bufio.Writer).Flush" -> "(*bufio.Writer).Write"
  "(*compress/flate.dictWriter).Write" -> "(*bytes.Buffer).Write"
  "(*compress/flate.dictWriter).Write" -> "(*os.File).Write"
  "(*compress/flate.dictWriter).Write" -> "(*internal/poll.FD).Write"
  "(*compress/flate.dictWriter).Write" -> "(io.discard).Write"
  "(*compress/flate.dictWriter).Write" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/flate.dictWriter).Write" -> "(*fmt.pp).Write"
  "(*compress/flate.dictWriter).Write" -> "(*bufio.Writer).Write"
  "(*compress/flate.dictWriter).Write" -> "(*compress/flate.dictWriter).Write"
  "(*strings.Builder).copyCheck" -> "strings.noescape"
  "(*strings.Builder).Write" -> "(*strings.Builder).copyCheck"
  "(*compress/flate.dictWriter).Write" -> "(*strings.Builder).Write"
  "hash/crc32.update" -> "(*sync/atomic.Bool).Load"
  "hash/crc32.archUpdateIEEE" -> "hash/crc32.ieeeUpdate"
  "hash/crc32.update" -> "hash/crc32.archUpdateIEEE"
  "hash/crc32.slicingUpdate" -> "hash/crc32.simpleUpdate"
  "hash/crc32.ieeeInit$1" -> "hash/crc32.slicingUpdate"
  "hash/crc32.update" -> "hash/crc32.ieeeInit$1"
  "hash/crc32.update" -> "hash/crc32.simpleUpdate"
  "hash/crc32.update" -> "(*sync.Once).Do"
  "hash/crc32.update" -> "hash/crc32.archUpdateIEEE"
  "hash/crc32.update" -> "hash/crc32.ieeeInit$1"
  "(*hash/crc32.digest).Write" -> "hash/crc32.update"
  "(*compress/flate.dictWriter).Write" -> "(*hash/crc32.digest).Write"
  "(*text/tabwriter.Writer).reset" -> "(*text/tabwriter.Writer).addLine"
  "(*text/tabwriter.Writer).handlePanic" -> "(*text/tabwriter.Writer).reset"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).handlePanic"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).updateWidth" -> "unicode/utf8.RuneCount"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).updateWidth"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).terminateCell"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).updateWidth"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).addLine"
  "(*text/tabwriter.Writer).write0" -> "(*bytes.Buffer).Write"
  "(*text/tabwriter.Writer).write0" -> "(*os.File).Write"
  "(*text/tabwriter.Writer).write0" -> "(*internal/poll.FD).Write"
  "(*text/tabwriter.Writer).write0" -> "(io.discard).Write"
  "(*text/tabwriter.Writer).write0" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*text/tabwriter.Writer).write0" -> "(*fmt.pp).Write"
  "(*text/tabwriter.Writer).write0" -> "(*bufio.Writer).Write"
  "(*text/tabwriter.Writer).write0" -> "(*compress/flate.dictWriter).Write"
  "(*text/tabwriter.Writer).write0" -> "(*strings.Builder).Write"
  "(*text/tabwriter.Writer).write0" -> "(*hash/crc32.digest).Write"
  "(*text/tabwriter.Writer).write0" -> "(*text/tabwriter.Writer).Write"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).fillDeflate"
  "(*compress/flate.huffmanBitWriter).write" -> "(*bytes.Buffer).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*os.File).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*internal/poll.FD).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(io.discard).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*fmt.pp).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*bufio.Writer).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*compress/flate.dictWriter).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*strings.Builder).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*hash/crc32.digest).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*text/tabwriter.Writer).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*compress/flate.Writer).Write"
  "(golang.org/x/text/encoding.replacementEncoder).Transform" -> "unicode/utf8.RuneLen"
  "(golang.org/x/text/encoding.replacementEncoder).Transform" -> "unicode/utf8.DecodeRune"
  "(golang.org/x/text/encoding.replacementEncoder).Transform" -> "unicode/utf8.FullRune"
  "(golang.org/x/text/encoding.replacementEncoder).Transform" -> "unicode/utf8.EncodeRune"
  "(*golang.org/x/text/transform.Writer).Write" -> "(golang.org/x/text/encoding.replacementEncoder).Transform"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*compress/flate.dictWriter).Write"
  "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform" -> "unicode/utf8.DecodeRune"
  "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform" -> "unicode/utf8.FullRune"
  "(*golang.org/x/text/transform.Writer).Write" -> "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*hash/adler32.digest).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(golang.org/x/text/encoding/charmap.charmapDecoder).Transform"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*hash/crc32.digest).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(golang.org/x/text/transform.nop).Transform"
  "(*golang.org/x/text/transform.Writer).Write" -> "(golang.org/x/text/transform.discard).Transform"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*bytes.Buffer).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*os.File).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*internal/poll.FD).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(io.discard).Write"
  "(*image/png.encoder).writeChunk" -> "strconv.Itoa"
  "(*image/png.encoder).writeChunk" -> "(encoding/binary.bigEndian).PutUint32"
  "hash/crc32.New" -> "(*sync.Once).Do"
  "hash/crc32.NewIEEE" -> "hash/crc32.New"
  "(*image/png.encoder).writeChunk" -> "hash/crc32.NewIEEE"
  "(*image/png.encoder).writeChunk" -> "(encoding/binary.bigEndian).PutUint32"
  "(*image/png.encoder).writeChunk" -> "(*bytes.Buffer).Write"
  "(*image/png.encoder).writeChunk" -> "(*os.File).Write"
  "(*image/png.encoder).writeChunk" -> "(*internal/poll.FD).Write"
  "(*image/png.encoder).writeChunk" -> "(io.discard).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/adler32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*fmt.pp).Write"
  "(*image/png.encoder).writeChunk" -> "(*bufio.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/crc32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/crc32.digest).Sum32"
  "(*internal/godebug.runtimeStderr).Write" -> "internal/godebug.write"
  "(*image/png.encoder).writeChunk" -> "(*internal/godebug.runtimeStderr).Write"
  "(*image/png.encoder).writeChunk" -> "(*text/tabwriter.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*strings.Builder).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/flate.dictWriter).Write"
  "(*compress/zlib.Writer).Write" -> "(*compress/zlib.Writer).writeHeader"
  "(*compress/zlib.Writer).Write" -> "(*compress/flate.Writer).Write"
  "(*compress/zlib.Writer).Write" -> "(*hash/crc32.digest).Write"
  "(*compress/zlib.Writer).Write" -> "(*hash/adler32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/zlib.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/adler32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/adler32.digest).Sum32"
  "(*image/png.encoder).writeChunk" -> "(*text/tabwriter.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*image/png.encoder).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/zlib.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/flate.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*strings.Builder).Write"
  "(*image/png.encoder).writeChunk" -> "(*bytes.Buffer).Write"
  "(*image/png.encoder).writeChunk" -> "(*os.File).Write"
  "(*image/png.encoder).writeChunk" -> "(*internal/poll.FD).Write"
  "(*image/png.encoder).writeChunk" -> "(io.discard).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/adler32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*fmt.pp).Write"
  "(*image/png.encoder).writeChunk" -> "(*bufio.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/crc32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/crc32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*internal/godebug.runtimeStderr).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/flate.dictWriter).Write"
  "(*image/png.encoder).writeChunk" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/flate.dictWriter).Write"
  "(*image/png.encoder).writeChunk" -> "(*image/png.encoder).Write"
  "(*image/png.encoder).writeChunk" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*image/png.encoder).writeChunk" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/adler32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*text/tabwriter.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*image/png.encoder).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/zlib.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/flate.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*strings.Builder).Write"
  "(*image/png.encoder).writeChunk" -> "(*bytes.Buffer).Write"
  "(*image/png.encoder).writeChunk" -> "(*os.File).Write"
  "(*image/png.encoder).writeChunk" -> "(*internal/poll.FD).Write"
  "(*image/png.encoder).writeChunk" -> "(io.discard).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/adler32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*fmt.pp).Write"
  "(*image/png.encoder).writeChunk" -> "(*bufio.Writer).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/crc32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*hash/crc32.digest).Write"
  "(*image/png.encoder).writeChunk" -> "(*internal/godebug.runtimeStderr).Write"
  "(*image/png.encoder).writeChunk" -> "(*compress/flate.Writer).Write"
  "(*image/png.encoder).Write" -> "(*image/png.encoder).writeChunk"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*image/png.encoder).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*fmt.pp).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*bufio.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*compress/zlib.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*internal/godebug.runtimeStderr).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*text/tabwriter.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*strings.Builder).Write"
  "(golang.org/x/text/encoding.utf8Validator).Transform" -> "unicode/utf8.DecodeRune"
  "(golang.org/x/text/encoding.utf8Validator).Transform" -> "unicode/utf8.FullRune"
  "(*golang.org/x/text/transform.Writer).Write" -> "(golang.org/x/text/encoding.utf8Validator).Transform"
  "(*golang.org/x/text/transform.Writer).Write" -> "(*compress/flate.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Write" -> "(golang.org/x/text/encoding.replacementDecoder).Transform"
  "(*compress/flate.huffmanBitWriter).write" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*compress/zlib.Writer).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*image/png.encoder).Write"
  "(*compress/flate.huffmanBitWriter).write" -> "(*hash/adler32.digest).Write"
  "(*compress/flate.huffmanBitWriter).writeBits" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).flush" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).flush"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeStoredHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.compressor).writeStoredBlock" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBytes" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeBytes" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.compressor).writeStoredBlock" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "(*compress/flate.compressor).store" -> "(*compress/flate.compressor).writeStoredBlock"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).store"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).fillStore"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "compress/flate.histogram"
  "sort.Sort" -> "(*internal/fmtsort.SortedMap).Len"
  "sort.insertionSort" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.insertionSort" -> "(compress/flate.byFreq).Less"
  "sort.insertionSort" -> "(encoding/json.byIndex).Less"
  "sort.insertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.insertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.insertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.insertionSort" -> "(encoding/json.byIndex).Swap"
  "sort.insertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "(reflect.Value).Kind"
  "(reflect.Value).Int" -> "(reflect.flag).kind"
  "(reflect.Value).Int" -> "(reflect.flag).kind"
  "internal/fmtsort.compare" -> "(reflect.Value).Int"
  "internal/fmtsort.compare" -> "(reflect.Value).Int"
  "(reflect.Value).Uint" -> "(reflect.flag).kind"
  "(reflect.Value).Uint" -> "(reflect.flag).kind"
  "internal/fmtsort.compare" -> "(reflect.Value).Uint"
  "internal/fmtsort.compare" -> "(reflect.Value).Uint"
  "(reflect.Value).String" -> "(reflect.flag).kind"
  "(reflect.Value).stringNonString" -> "(reflect.flag).kind"
  "(reflect.Value).stringNonString" -> "(reflect.Value).Type"
  "(reflect.Value).stringNonString" -> "(*reflect.rtype).String"
  "(reflect.Value).String" -> "(reflect.Value).stringNonString"
  "internal/fmtsort.compare" -> "(reflect.Value).String"
  "internal/fmtsort.compare" -> "(reflect.Value).String"
  "(reflect.Value).Float" -> "(reflect.flag).kind"
  "(reflect.Value).Float" -> "(reflect.flag).kind"
  "internal/fmtsort.compare" -> "(reflect.Value).Float"
  "internal/fmtsort.compare" -> "(reflect.Value).Float"
  "internal/fmtsort.floatCompare" -> "internal/fmtsort.isNaN"
  "internal/fmtsort.floatCompare" -> "internal/fmtsort.isNaN"
  "internal/fmtsort.compare" -> "internal/fmtsort.floatCompare"
  "(reflect.Value).Complex" -> "(reflect.flag).kind"
  "(reflect.Value).Complex" -> "(reflect.flag).kind"
  "internal/fmtsort.compare" -> "(reflect.Value).Complex"
  "internal/fmtsort.compare" -> "(reflect.Value).Complex"
  "internal/fmtsort.compare" -> "internal/fmtsort.floatCompare"
  "(reflect.Value).Bool" -> "(reflect.flag).kind"
  "runtime.Callers" -> "runtime.callers"
  "reflect.valueMethodName" -> "runtime.Callers"
  "reflect.valueMethodName" -> "runtime.CallersFrames"
  "reflect.valueMethodName" -> "(*runtime.Frames).Next"
  "(reflect.flag).mustBe" -> "reflect.valueMethodName"
  "(reflect.flag).mustBe" -> "(reflect.flag).kind"
  "(reflect.Value).panicNotBool" -> "(reflect.flag).mustBe"
  "(reflect.Value).Bool" -> "(reflect.Value).panicNotBool"
  "internal/fmtsort.compare" -> "(reflect.Value).Bool"
  "internal/fmtsort.compare" -> "(reflect.Value).Bool"
  "internal/fmtsort.compare" -> "internal/fmtsort.floatCompare"
  "(reflect.Value).Pointer" -> "reflect.escapes"
  "(reflect.Value).Pointer" -> "(reflect.flag).kind"
  "(reflect.Value).Pointer" -> "(reflect.Value).typ"
  "(reflect.Value).pointer" -> "(reflect.Value).typ"
  "(reflect.Value).pointer" -> "(*internal/abi.Type).Size"
  "(reflect.Value).pointer" -> "(reflect.Value).typ"
  "(reflect.Value).pointer" -> "(*internal/abi.Type).Pointers"
  "(reflect.Value).Pointer" -> "(reflect.Value).pointer"
  "(reflect.Value).Pointer" -> "reflect.verifyNotInHeapPtr"
  "(reflect.Value).Pointer" -> "reflect.methodValueCallCodePtr"
  "(reflect.Value).Pointer" -> "(reflect.Value).pointer"
  "(reflect.Value).Pointer" -> "(reflect.flag).kind"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "internal/fmtsort.nilCompare" -> "(reflect.Value).IsNil"
  "internal/fmtsort.nilCompare" -> "(reflect.Value).IsNil"
  "internal/fmtsort.nilCompare" -> "(reflect.Value).IsNil"
  "internal/fmtsort.compare" -> "internal/fmtsort.nilCompare"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "internal/fmtsort.compare" -> "(reflect.Value).Pointer"
  "(reflect.Value).NumField" -> "(reflect.flag).mustBe"
  "(reflect.Value).NumField" -> "(reflect.Value).typ"
  "internal/fmtsort.compare" -> "(reflect.Value).NumField"
  "(reflect.Value).Field" -> "(reflect.flag).kind"
  "(reflect.Value).Field" -> "(reflect.flag).kind"
  "(reflect.Value).Field" -> "(reflect.Value).typ"
  "(reflect.Value).Field" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).Field" -> "(internal/abi.Name).IsExported"
  "(*internal/abi.StructField).Embedded" -> "(internal/abi.Name).IsEmbedded"
  "(reflect.Value).Field" -> "(*internal/abi.StructField).Embedded"
  "(reflect.Value).Field" -> "reflect.add"
  "internal/fmtsort.compare" -> "(reflect.Value).Field"
  "internal/fmtsort.compare" -> "(reflect.Value).Field"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "internal/fmtsort.compare" -> "internal/fmtsort.nilCompare"
  "(reflect.Value).Len" -> "(reflect.flag).kind"
  "(reflect.Value).lenNonSlice" -> "(reflect.flag).kind"
  "(reflect.Value).lenNonSlice" -> "(reflect.Value).typ"
  "(reflect.Value).lenNonSlice" -> "(reflect.Value).pointer"
  "(reflect.Value).lenNonSlice" -> "reflect.chanlen"
  "(reflect.Value).lenNonSlice" -> "(reflect.Value).pointer"
  "(reflect.Value).lenNonSlice" -> "reflect.maplen"
  "(reflect.Value).lenNonSlice" -> "(reflect.Value).typ"
  "(*internal/abi.Type).Elem" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).lenNonSlice" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).lenNonSlice" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).lenNonSlice" -> "(reflect.flag).kind"
  "(reflect.Value).lenNonSlice" -> "(reflect.Value).typ"
  "(reflect.Value).lenNonSlice" -> "(*internal/abi.Type).Elem"
  "(*internal/abi.Type).Len" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).lenNonSlice" -> "(*internal/abi.Type).Len"
  "(reflect.Value).Len" -> "(reflect.Value).lenNonSlice"
  "internal/fmtsort.compare" -> "(reflect.Value).Len"
  "(reflect.Value).Index" -> "(reflect.flag).kind"
  "(reflect.Value).Index" -> "(reflect.Value).typ"
  "(reflect.Value).Index" -> "(*internal/abi.Type).Size"
  "(reflect.Value).Index" -> "reflect.add"
  "(reflect.Value).Index" -> "(reflect.flag).ro"
  "(reflect.Value).Index" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).Index" -> "(reflect.Value).typ"
  "(reflect.Value).Index" -> "(*internal/abi.Type).Size"
  "reflect.arrayAt" -> "reflect.add"
  "(reflect.Value).Index" -> "reflect.arrayAt"
  "(reflect.Value).Index" -> "(reflect.flag).ro"
  "(reflect.Value).Index" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).Index" -> "(reflect.flag).kind"
  "(reflect.Value).Index" -> "reflect.arrayAt"
  "(reflect.Value).Index" -> "(reflect.flag).ro"
  "internal/fmtsort.compare" -> "(reflect.Value).Index"
  "internal/fmtsort.compare" -> "(reflect.Value).Index"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "internal/fmtsort.compare" -> "(*reflect.rtype).String"
  "(reflect.Value).Elem" -> "(reflect.flag).kind"
  "(reflect.Value).Elem" -> "(reflect.Value).typ"
  "(*internal/abi.Type).NumMethod" -> "(*internal/abi.Type).Kind"
  "(*internal/abi.Type).NumMethod" -> "(*internal/abi.InterfaceType).NumMethod"
  "(*internal/abi.Type).NumMethod" -> "(*internal/abi.Type).ExportedMethods"
  "(reflect.Value).Elem" -> "(*internal/abi.Type).NumMethod"
  "(reflect.Value).Elem" -> "reflect.unpackEface"
  "(reflect.Value).Elem" -> "(reflect.flag).ro"
  "(reflect.Value).Elem" -> "(reflect.flag).kind"
  "(reflect.Value).Elem" -> "(reflect.Value).typ"
  "(reflect.Value).Elem" -> "reflect.ifaceIndir"
  "(reflect.Value).Elem" -> "reflect.verifyNotInHeapPtr"
  "(reflect.Value).Elem" -> "(reflect.Value).typ"
  "(reflect.Value).Elem" -> "(*internal/abi.Type).Kind"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "reflect.ValueOf"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "(reflect.Value).Type"
  "internal/fmtsort.compare" -> "reflect.ValueOf"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "(reflect.Value).Elem"
  "internal/fmtsort.compare" -> "internal/fmtsort.compare"
  "(*internal/fmtsort.SortedMap).Less" -> "internal/fmtsort.compare"
  "sort.insertionSort" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.insertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.pdqsort" -> "sort.insertionSort"
  "sort.siftDown" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.siftDown" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.siftDown" -> "(encoding/json.byIndex).Swap"
  "sort.siftDown" -> "(compress/flate.byLiteral).Less"
  "sort.siftDown" -> "(compress/flate.byFreq).Less"
  "sort.siftDown" -> "(*runtime/pprof.keysByCount).Less"
  "sort.siftDown" -> "(encoding/json.byIndex).Less"
  "sort.siftDown" -> "(compress/flate.byFreq).Swap"
  "sort.siftDown" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.siftDown" -> "(compress/flate.byLiteral).Swap"
  "sort.siftDown" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.siftDown" -> "(compress/flate.byLiteral).Less"
  "sort.siftDown" -> "(compress/flate.byFreq).Less"
  "sort.siftDown" -> "(*runtime/pprof.keysByCount).Less"
  "sort.siftDown" -> "(encoding/json.byIndex).Less"
  "sort.heapSort" -> "sort.siftDown"
  "sort.heapSort" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.heapSort" -> "sort.siftDown"
  "sort.heapSort" -> "(encoding/json.byIndex).Swap"
  "sort.heapSort" -> "(compress/flate.byLiteral).Swap"
  "sort.heapSort" -> "(compress/flate.byFreq).Swap"
  "sort.heapSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.pdqsort" -> "sort.heapSort"
  "math/bits.Len" -> "math/bits.Len32"
  "math/bits.Len" -> "math/bits.Len64"
  "sort.nextPowerOfTwo" -> "math/bits.Len"
  "sort.breakPatterns" -> "sort.nextPowerOfTwo"
  "sort.breakPatterns" -> "(*sort.xorshift).Next"
  "sort.breakPatterns" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.breakPatterns" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.breakPatterns" -> "(encoding/json.byIndex).Swap"
  "sort.breakPatterns" -> "(compress/flate.byLiteral).Swap"
  "sort.breakPatterns" -> "(compress/flate.byFreq).Swap"
  "sort.pdqsort" -> "sort.breakPatterns"
  "sort.order2" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.order2" -> "(*runtime/pprof.keysByCount).Less"
  "sort.order2" -> "(encoding/json.byIndex).Less"
  "sort.order2" -> "(compress/flate.byLiteral).Less"
  "sort.order2" -> "(compress/flate.byFreq).Less"
  "sort.median" -> "sort.order2"
  "sort.median" -> "sort.order2"
  "sort.median" -> "sort.order2"
  "sort.medianAdjacent" -> "sort.median"
  "sort.choosePivot" -> "sort.medianAdjacent"
  "sort.choosePivot" -> "sort.medianAdjacent"
  "sort.choosePivot" -> "sort.medianAdjacent"
  "sort.choosePivot" -> "sort.median"
  "sort.pdqsort" -> "sort.choosePivot"
  "sort.reverseRange" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.reverseRange" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.reverseRange" -> "(encoding/json.byIndex).Swap"
  "sort.reverseRange" -> "(compress/flate.byLiteral).Swap"
  "sort.reverseRange" -> "(compress/flate.byFreq).Swap"
  "sort.pdqsort" -> "sort.reverseRange"
  "sort.partialInsertionSort" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partialInsertionSort" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Less"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partialInsertionSort" -> "(encoding/json.byIndex).Less"
  "sort.partialInsertionSort" -> "(encoding/json.byIndex).Less"
  "sort.partialInsertionSort" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partialInsertionSort" -> "(encoding/json.byIndex).Swap"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partialInsertionSort" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partialInsertionSort" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partialInsertionSort" -> "(encoding/json.byIndex).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Less"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Less"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partialInsertionSort" -> "(encoding/json.byIndex).Less"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partialInsertionSort" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partialInsertionSort" -> "(encoding/json.byIndex).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byLiteral).Swap"
  "sort.partialInsertionSort" -> "(compress/flate.byFreq).Swap"
  "sort.partialInsertionSort" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.pdqsort" -> "sort.partialInsertionSort"
  "sort.partitionEqual" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Swap"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Swap"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Swap"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partitionEqual" -> "(encoding/json.byIndex).Swap"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Swap"
  "sort.partitionEqual" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partitionEqual" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Less"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Less"
  "sort.partitionEqual" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partitionEqual" -> "(encoding/json.byIndex).Less"
  "sort.partitionEqual" -> "(encoding/json.byIndex).Swap"
  "sort.partitionEqual" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partitionEqual" -> "(compress/flate.byFreq).Less"
  "sort.partitionEqual" -> "(encoding/json.byIndex).Less"
  "sort.partitionEqual" -> "(compress/flate.byLiteral).Less"
  "sort.pdqsort" -> "sort.partitionEqual"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(encoding/json.byIndex).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(encoding/json.byIndex).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(encoding/json.byIndex).Less"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partition" -> "(encoding/json.byIndex).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(encoding/json.byIndex).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partition" -> "(encoding/json.byIndex).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(encoding/json.byIndex).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(compress/flate.byFreq).Swap"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.partition" -> "(encoding/json.byIndex).Swap"
  "sort.partition" -> "(compress/flate.byLiteral).Swap"
  "sort.partition" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.partition" -> "(encoding/json.byIndex).Less"
  "sort.partition" -> "(*runtime/pprof.keysByCount).Less"
  "sort.partition" -> "(compress/flate.byLiteral).Less"
  "sort.partition" -> "(compress/flate.byFreq).Less"
  "sort.pdqsort" -> "sort.partition"
  "sort.pdqsort" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.pdqsort" -> "sort.pdqsort"
  "sort.pdqsort" -> "(encoding/json.byIndex).Less"
  "sort.pdqsort" -> "(compress/flate.byLiteral).Less"
  "sort.pdqsort" -> "(compress/flate.byFreq).Less"
  "sort.pdqsort" -> "(*runtime/pprof.keysByCount).Less"
  "sort.pdqsort" -> "sort.pdqsort"
  "sort.Sort" -> "sort.pdqsort"
  "sort.Sort" -> "(encoding/json.byIndex).Len"
  "sort.Sort" -> "(compress/flate.byLiteral).Len"
  "sort.Sort" -> "(compress/flate.byFreq).Len"
  "sort.Sort" -> "(*runtime/pprof.keysByCount).Len"
  "sort.Sort" -> "math/bits.Len"
  "(*compress/flate.byFreq).sort" -> "sort.Sort"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.byFreq).sort"
  "(*compress/flate.huffmanEncoder).bitCounts" -> "compress/flate.maxNode"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.huffmanEncoder).bitCounts"
  "(*compress/flate.byLiteral).sort" -> "sort.Sort"
  "(*compress/flate.huffmanEncoder).assignEncodingAndSize" -> "(*compress/flate.byLiteral).sort"
  "compress/flate.reverseBits" -> "math/bits.Reverse16"
  "(*compress/flate.huffmanEncoder).assignEncodingAndSize" -> "compress/flate.reverseBits"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.huffmanEncoder).assignEncodingAndSize"
  "(*compress/flate.huffmanEncoder).generate" -> "(*compress/flate.hcode).set"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).generateCodegen"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).dynamicSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).dynamicSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).dynamicSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).dynamicSize"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).storedSize"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeCode" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeDynamicHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeDynamicHeader"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeBlockHuff" -> "(*compress/flate.huffmanBitWriter).write"
  "(*compress/flate.compressor).storeHuff" -> "(*compress/flate.huffmanBitWriter).writeBlockHuff"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).storeHuff"
  "(*compress/flate.compressor).deflate" -> "compress/flate.literalToken"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(compress/flate.token).literal"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(compress/flate.token).length"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(compress/flate.token).offset"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "compress/flate.lengthCode"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "compress/flate.offsetCode"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).indexTokens" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).indexTokens"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).storedSize"
  "(*compress/flate.huffmanBitWriter).fixedSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).fixedSize" -> "(*compress/flate.huffmanEncoder).bitLength"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).fixedSize"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).generateCodegen"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).dynamicSize"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "(*compress/flate.huffmanBitWriter).writeFixedHeader" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeFixedHeader"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(compress/flate.token).literal"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(compress/flate.token).length"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "compress/flate.lengthCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(compress/flate.token).offset"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "compress/flate.offsetCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeCode"
  "(*compress/flate.huffmanBitWriter).writeTokens" -> "(*compress/flate.huffmanBitWriter).writeBits"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeTokens"
  "(*compress/flate.huffmanBitWriter).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeDynamicHeader"
  "(*compress/flate.compressor).writeBlock" -> "(*compress/flate.huffmanBitWriter).writeBlock"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).writeBlock"
  "(*compress/flate.compressor).deflate" -> "compress/flate.hash4"
  "(*compress/flate.compressor).findMatch" -> "compress/flate.matchLen"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).findMatch"
  "(*compress/flate.compressor).deflate" -> "compress/flate.matchToken"
  "(*compress/flate.compressor).deflate" -> "compress/flate.matchToken"
  "(*compress/flate.compressor).deflate" -> "compress/flate.hash4"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).writeBlock"
  "(*compress/flate.compressor).deflate" -> "compress/flate.literalToken"
  "(*compress/flate.compressor).deflate" -> "(*compress/flate.compressor).writeBlock"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).deflate"
  "(*compress/flate.deflateFast).encode" -> "(*compress/flate.deflateFast).shiftOffsets"
  "compress/flate.emitLiteral" -> "compress/flate.literalToken"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.emitLiteral"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.load32"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.load32"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.emitLiteral"
  "(*compress/flate.deflateFast).encode" -> "(*compress/flate.deflateFast).matchLen"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.matchToken"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.load64"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.hash"
  "(*compress/flate.deflateFast).encode" -> "compress/flate.emitLiteral"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.deflateFast).encode"
  "(*compress/flate.deflateFast).reset" -> "(*compress/flate.deflateFast).shiftOffsets"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.deflateFast).reset"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.compressor).writeStoredBlock"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.huffmanBitWriter).writeBlockHuff"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.huffmanBitWriter).writeBlockHuff"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).indexTokens"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).generateCodegen"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanEncoder).generate"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).dynamicSize"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).storedSize"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeBytes"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeDynamicHeader"
  "(*compress/flate.huffmanBitWriter).writeBlockDynamic" -> "(*compress/flate.huffmanBitWriter).writeTokens"
  "(*compress/flate.compressor).encSpeed" -> "(*compress/flate.huffmanBitWriter).writeBlockDynamic"
  "(*compress/flate.compressor).write" -> "(*compress/flate.compressor).encSpeed"
  "(*compress/flate.Writer).Write" -> "(*compress/flate.compressor).write"
  "(*text/tabwriter.Writer).write0" -> "(*compress/flate.Writer).Write"
  "(*text/tabwriter.Writer).write0" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*text/tabwriter.Writer).write0" -> "(*compress/zlib.Writer).Write"
  "(*text/tabwriter.Writer).write0" -> "(*internal/godebug.runtimeStderr).Write"
  "(*text/tabwriter.Writer).write0" -> "(*image/png.encoder).Write"
  "(*text/tabwriter.Writer).write0" -> "(*hash/adler32.digest).Write"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeN" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeN" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writePadding" -> "(*text/tabwriter.Writer).writeN"
  "(*text/tabwriter.Writer).writePadding" -> "(*text/tabwriter.Writer).writeN"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).writePadding"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).writePadding"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).writePadding"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).writeLines" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).format" -> "(*text/tabwriter.Writer).writeLines"
  "(*text/tabwriter.Writer).format" -> "(*text/tabwriter.Writer).writeLines"
  "(*text/tabwriter.Writer).format" -> "(*text/tabwriter.Writer).format"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).format"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).reset"
  "(*text/tabwriter.Writer).endEscape" -> "(*text/tabwriter.Writer).updateWidth"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).endEscape"
  "(*text/tabwriter.Writer).flushNoDefers" -> "(*text/tabwriter.Writer).terminateCell"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).flushNoDefers"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).write0"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).startEscape"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).updateWidth"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).startEscape"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).append"
  "(*text/tabwriter.Writer).Write" -> "(*text/tabwriter.Writer).endEscape"
  "(*compress/flate.dictWriter).Write" -> "(*text/tabwriter.Writer).Write"
  "(*compress/flate.dictWriter).Write" -> "(*compress/flate.Writer).Write"
  "(*compress/flate.dictWriter).Write" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/flate.dictWriter).Write" -> "(*compress/zlib.Writer).Write"
  "(*compress/flate.dictWriter).Write" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/flate.dictWriter).Write" -> "(*image/png.encoder).Write"
  "(*compress/flate.dictWriter).Write" -> "(*hash/adler32.digest).Write"
  "(*bufio.Writer).Flush" -> "(*compress/flate.dictWriter).Write"
  "(*bufio.Writer).Flush" -> "(*strings.Builder).Write"
  "(*bufio.Writer).Flush" -> "(*hash/crc32.digest).Write"
  "(*bufio.Writer).Flush" -> "(*text/tabwriter.Writer).Write"
  "(*bufio.Writer).Flush" -> "(*compress/flate.Writer).Write"
  "(*bufio.Writer).Flush" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*bufio.Writer).Flush" -> "(*compress/zlib.Writer).Write"
  "(*bufio.Writer).Flush" -> "(*internal/godebug.runtimeStderr).Write"
  "(*bufio.Writer).Flush" -> "(*image/png.encoder).Write"
  "(*bufio.Writer).Flush" -> "(*hash/adler32.digest).Write"
  "(*bufio.Writer).Write" -> "(*bufio.Writer).Flush"
  "(*bufio.Writer).Write" -> "(*compress/flate.dictWriter).Write"
  "(*bufio.Writer).Write" -> "(*strings.Builder).Write"
  "(*bufio.Writer).Write" -> "(*hash/crc32.digest).Write"
  "(*bufio.Writer).Write" -> "(*text/tabwriter.Writer).Write"
  "(*bufio.Writer).Write" -> "(*compress/flate.Writer).Write"
  "(*bufio.Writer).Write" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*bufio.Writer).Write" -> "(*compress/zlib.Writer).Write"
  "(*bufio.Writer).Write" -> "(*internal/godebug.runtimeStderr).Write"
  "(*bufio.Writer).Write" -> "(*image/png.encoder).Write"
  "(*bufio.Writer).Write" -> "(*hash/adler32.digest).Write"
  "(*log.Logger).output" -> "(*bufio.Writer).Write"
  "(*log.Logger).output" -> "(*hash/crc32.digest).Write"
  "(*log.Logger).output" -> "(*compress/flate.dictWriter).Write"
  "(*log.Logger).output" -> "(*internal/godebug.runtimeStderr).Write"
  "(*log.Logger).output" -> "(*compress/zlib.Writer).Write"
  "(*log.Logger).output" -> "(*strings.Builder).Write"
  "fmt.Appendf" -> "fmt.newPrinter"
  "fmt.Appendf" -> "(*fmt.pp).doPrintf"
  "fmt.Appendf" -> "(*fmt.pp).free"
  "(*log.Logger).Printf$1" -> "fmt.Appendf"
  "(*log.Logger).output" -> "(*log.Logger).Printf$1"
  "(*log.Logger).output" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*log.Logger).output" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*log.Logger).output" -> "(*compress/flate.Writer).Write"
  "log.Printf$1" -> "fmt.Appendf"
  "(*log.Logger).output" -> "log.Printf$1"
  "(*log.Logger).output" -> "(*text/tabwriter.Writer).Write"
  "(*log.Logger).output" -> "(*image/png.encoder).Write"
  "(*log.Logger).Printf" -> "(*log.Logger).output"
  "(*github.com/stefan-muehlebach/adatft.Touch).enqueueEvent$1" -> "(*log.Logger).Printf"
  "(*github.com/stefan-muehlebach/adatft.Touch).enqueueEvent" -> "(*github.com/stefan-muehlebach/adatft.Touch).enqueueEvent$1"
  "(*github.com/stefan-muehlebach/adatft.Touch).enqueueEvent" -> "(*log.Logger).Printf"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft.Touch).enqueueEvent"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "time.Sleep"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadData" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "(*github.com/stefan-muehlebach/adatft.Touch).readRawPos" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadData"
  "(*github.com/stefan-muehlebach/adatft.Touch).readRawPos" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadData"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft.Touch).readRawPos"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).WriteReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadReg8"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft.Touch).newPenEvent"
  "github.com/stefan-muehlebach/adatft.eventDispatcher" -> "(*github.com/stefan-muehlebach/adatft.Touch).enqueueEvent"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1" -> "github.com/stefan-muehlebach/adatft.eventDispatcher"
  "(*sync.Once).doSlow" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "runtime.chanrecv$1" -> "runtime.unlock"
  "os/signal.Notify$1$1" -> "runtime.chanrecv$1"
  "runtime.asyncPreempt2" -> "runtime.getg"
  "runtime.asyncPreempt2" -> "runtime.mcall"
  "runtime.asyncPreempt2" -> "runtime.mcall"
  "os/signal.Notify$1$1" -> "runtime.asyncPreempt2"
  "os/signal.Notify$1$1" -> "internal/poll.runtime_pollServerInit"
  "os/signal.Notify$1$1" -> "runtime.throw$1"
  "periph.io/x/conn/v3/spi/spireg.Open$1" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/spi/spireg.Open$1" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/spi/spireg.Open$1" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Open$1" -> "periph.io/x/conn/v3/spi/spireg.getDefault"
  "strconv.syntaxError" -> "strconv.cloneString"
  "strconv.ParseInt" -> "strconv.syntaxError"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.baseError" -> "strconv.cloneString"
  "strconv.baseError" -> "strconv.Itoa"
  "strconv.baseError" -> "errors.New"
  "strconv.ParseUint" -> "strconv.baseError"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.bitSizeError" -> "strconv.cloneString"
  "strconv.bitSizeError" -> "strconv.Itoa"
  "strconv.bitSizeError" -> "errors.New"
  "strconv.ParseUint" -> "strconv.bitSizeError"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.ParseUint" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.rangeError" -> "strconv.cloneString"
  "strconv.ParseUint" -> "strconv.rangeError"
  "strconv.ParseUint" -> "strconv.rangeError"
  "strconv.ParseUint" -> "strconv.syntaxError"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.underscoreOK" -> "strconv.lower"
  "strconv.ParseUint" -> "strconv.underscoreOK"
  "strconv.ParseInt" -> "strconv.ParseUint"
  "strconv.ParseInt" -> "strconv.cloneString"
  "strconv.ParseInt" -> "strconv.rangeError"
  "strconv.ParseInt" -> "strconv.rangeError"
  "strconv.Atoi" -> "strconv.ParseInt"
  "strconv.Atoi" -> "strconv.syntaxError"
  "strconv.Atoi" -> "strconv.syntaxError"
  "periph.io/x/conn/v3/spi/spireg.Open$1" -> "strconv.Atoi"
  "os/signal.Notify$1$1" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "(*flag.FlagSet).defaultUsage" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).defaultUsage" -> "fmt.Fprintf"
  "internal/reflectlite.unpackEface" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.unpackEface" -> "internal/reflectlite.ifaceIndir"
  "internal/reflectlite.ValueOf" -> "internal/reflectlite.unpackEface"
  "sort.Slice" -> "internal/reflectlite.ValueOf"
  "internal/reflectlite.Swapper" -> "internal/reflectlite.ValueOf"
  "(internal/reflectlite.Value).Kind" -> "(internal/reflectlite.flag).kind"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Kind"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Kind"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.flag).kind"
  "(internal/reflectlite.Value).typ" -> "internal/reflectlite.noescape"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.Value).typ"
  "(internal/reflectlite.Value).pointer" -> "(internal/reflectlite.Value).typ"
  "(internal/reflectlite.Value).pointer" -> "(*internal/abi.Type).Size"
  "(internal/reflectlite.Value).pointer" -> "(internal/reflectlite.Value).typ"
  "(internal/reflectlite.Value).pointer" -> "(*internal/abi.Type).Pointers"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.Value).pointer"
  "(internal/reflectlite.Value).Len" -> "internal/reflectlite.chanlen"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.Value).pointer"
  "(internal/reflectlite.Value).Len" -> "internal/reflectlite.maplen"
  "(internal/reflectlite.Value).Len" -> "(internal/reflectlite.flag).kind"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Len"
  "(internal/reflectlite.Value).Type" -> "(internal/reflectlite.Value).typ"
  "(internal/reflectlite.Value).Type" -> "internal/reflectlite.toRType"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.Value).Type"
  "(internal/reflectlite.rtype).Elem" -> "(internal/reflectlite.rtype).common"
  "internal/reflectlite.elem" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.elem" -> "internal/reflectlite.toRType"
  "(internal/reflectlite.rtype).nameOff" -> "internal/reflectlite.resolveNameOff"
  "(internal/reflectlite.rtype).String" -> "(internal/reflectlite.rtype).nameOff"
  "(internal/reflectlite.rtype).String" -> "(internal/abi.Name).Name"
  "internal/reflectlite.elem" -> "(internal/reflectlite.rtype).String"
  "(internal/reflectlite.rtype).Elem" -> "internal/reflectlite.elem"
  "(internal/reflectlite.rtype).Elem" -> "internal/reflectlite.toType"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.rtype).Elem"
  "internal/reflectlite.Swapper" -> "internal/reflectlite.unsafe_New"
  "internal/reflectlite.Swapper" -> "(internal/reflectlite.rtype).common"
  "internal/reflectlite.Swapper" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.Swapper" -> "(*internal/abi.Type).Size"
  "sort.Slice" -> "internal/reflectlite.Swapper"
  "sort.Slice" -> "(internal/reflectlite.Value).Len"
  "sort.Slice" -> "math/bits.Len"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$5"
  "internal/reflectlite.arrayAt" -> "internal/reflectlite.add"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.arrayAt"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.arrayAt"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.typedmemmove"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.typedmemmove"
  "internal/reflectlite.Swapper$9" -> "internal/reflectlite.typedmemmove"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.insertionSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.insertionSort_func" -> "flag.sortFlags$1"
  "runtime/pprof.writeHeapInternal$1" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapInternal$1" -> "(*runtime.MemProfileRecord).InUseBytes"
  "sort.insertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.insertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "encoding/json.typeFields$1" -> "(encoding/json.byIndex).Less"
  "sort.insertionSort_func" -> "encoding/json.typeFields$1"
  "sort.pdqsort_func" -> "sort.insertionSort_func"
  "sort.siftDown_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.siftDown_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.siftDown_func" -> "flag.sortFlags$1"
  "sort.siftDown_func" -> "encoding/json.typeFields$1"
  "sort.siftDown_func" -> "encoding/json.typeFields$1"
  "sort.siftDown_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.siftDown_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.siftDown_func" -> "flag.sortFlags$1"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$3"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$5"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$7"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$8"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$6"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$1"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$2"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$9"
  "sort.siftDown_func" -> "internal/reflectlite.Swapper$4"
  "sort.heapSort_func" -> "sort.siftDown_func"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.heapSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.heapSort_func" -> "sort.siftDown_func"
  "sort.pdqsort_func" -> "sort.heapSort_func"
  "sort.breakPatterns_func" -> "sort.nextPowerOfTwo"
  "sort.breakPatterns_func" -> "(*sort.xorshift).Next"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$7"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$8"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$3"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$5"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$9"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$4"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$6"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$1"
  "sort.breakPatterns_func" -> "internal/reflectlite.Swapper$2"
  "sort.pdqsort_func" -> "sort.breakPatterns_func"
  "sort.order2_func" -> "encoding/json.typeFields$1"
  "sort.order2_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.order2_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.order2_func" -> "flag.sortFlags$1"
  "sort.median_func" -> "sort.order2_func"
  "sort.median_func" -> "sort.order2_func"
  "sort.median_func" -> "sort.order2_func"
  "sort.medianAdjacent_func" -> "sort.median_func"
  "sort.choosePivot_func" -> "sort.medianAdjacent_func"
  "sort.choosePivot_func" -> "sort.medianAdjacent_func"
  "sort.choosePivot_func" -> "sort.medianAdjacent_func"
  "sort.choosePivot_func" -> "sort.median_func"
  "sort.pdqsort_func" -> "sort.choosePivot_func"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$3"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$5"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$7"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$8"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$1"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$2"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$9"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$4"
  "sort.reverseRange_func" -> "internal/reflectlite.Swapper$6"
  "sort.pdqsort_func" -> "sort.reverseRange_func"
  "sort.partialInsertionSort_func" -> "flag.sortFlags$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.partialInsertionSort_func" -> "flag.sortFlags$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partialInsertionSort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partialInsertionSort_func" -> "flag.sortFlags$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$3"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$5"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$7"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$8"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$1"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$2"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$9"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$4"
  "sort.partialInsertionSort_func" -> "internal/reflectlite.Swapper$6"
  "sort.partialInsertionSort_func" -> "encoding/json.typeFields$1"
  "sort.partialInsertionSort_func" -> "encoding/json.typeFields$1"
  "sort.partialInsertionSort_func" -> "encoding/json.typeFields$1"
  "sort.pdqsort_func" -> "sort.partialInsertionSort_func"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$2"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$9"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$4"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$6"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$1"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$5"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$7"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$8"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$3"
  "sort.partitionEqual_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partitionEqual_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partitionEqual_func" -> "flag.sortFlags$1"
  "sort.partitionEqual_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partitionEqual_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partitionEqual_func" -> "flag.sortFlags$1"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$4"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$6"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$1"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$2"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$9"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$8"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$3"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$5"
  "sort.partitionEqual_func" -> "internal/reflectlite.Swapper$7"
  "sort.partitionEqual_func" -> "encoding/json.typeFields$1"
  "sort.partitionEqual_func" -> "encoding/json.typeFields$1"
  "sort.pdqsort_func" -> "sort.partitionEqual_func"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.partition_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.partition_func" -> "flag.sortFlags$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$2"
  "sort.partition_func" -> "internal/reflectlite.Swapper$9"
  "sort.partition_func" -> "internal/reflectlite.Swapper$4"
  "sort.partition_func" -> "internal/reflectlite.Swapper$6"
  "sort.partition_func" -> "internal/reflectlite.Swapper$1"
  "sort.partition_func" -> "internal/reflectlite.Swapper$5"
  "sort.partition_func" -> "internal/reflectlite.Swapper$7"
  "sort.partition_func" -> "internal/reflectlite.Swapper$8"
  "sort.partition_func" -> "internal/reflectlite.Swapper$3"
  "sort.partition_func" -> "encoding/json.typeFields$1"
  "sort.partition_func" -> "encoding/json.typeFields$1"
  "sort.partition_func" -> "encoding/json.typeFields$1"
  "sort.partition_func" -> "encoding/json.typeFields$1"
  "sort.pdqsort_func" -> "sort.partition_func"
  "sort.pdqsort_func" -> "runtime/pprof.writeHeapInternal$1"
  "sort.pdqsort_func" -> "runtime/pprof.writeProfileInternal$1"
  "sort.pdqsort_func" -> "flag.sortFlags$1"
  "sort.pdqsort_func" -> "sort.pdqsort_func"
  "sort.pdqsort_func" -> "sort.pdqsort_func"
  "sort.pdqsort_func" -> "encoding/json.typeFields$1"
  "sort.Slice" -> "sort.pdqsort_func"
  "flag.sortFlags" -> "sort.Slice"
  "(*flag.FlagSet).VisitAll" -> "flag.sortFlags"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprintf"
  "flag.UnquoteUsage" -> "(*flag.boolValue).IsBoolFlag"
  "(*flag.FlagSet).PrintDefaults$1" -> "flag.UnquoteUsage"
  "(*strings.Builder).WriteString" -> "(*strings.Builder).copyCheck"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).Len"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "strings.Count" -> "unicode/utf8.RuneCountInString"
  "strings.Count" -> "internal/bytealg.CountString"
  "strings.IndexByte" -> "internal/bytealg.IndexByteString"
  "strings.Index" -> "strings.IndexByte"
  "strings.Index" -> "internal/bytealg.IndexString"
  "strings.Index" -> "strings.IndexByte"
  "strings.Index" -> "internal/bytealg.Cutover"
  "strings.Index" -> "internal/bytealg.IndexString"
  "strings.Index" -> "strings.IndexByte"
  "internal/bytealg.IndexRabinKarp[string]" -> "internal/bytealg.HashStr[string]"
  "strings.Index" -> "internal/bytealg.IndexRabinKarp[string]"
  "strings.Count" -> "strings.Index"
  "strings.Replace" -> "strings.Count"
  "(*strings.Builder).Grow" -> "(*strings.Builder).copyCheck"
  "(*strings.Builder).grow" -> "internal/bytealg.MakeNoZero"
  "(*strings.Builder).Grow" -> "(*strings.Builder).grow"
  "strings.Replace" -> "(*strings.Builder).Grow"
  "strings.Replace" -> "(*strings.Builder).WriteString"
  "strings.Replace" -> "(*strings.Builder).String"
  "strings.Replace" -> "(*strings.Builder).WriteString"
  "strings.Replace" -> "(*strings.Builder).WriteString"
  "strings.Replace" -> "strings.Index"
  "strings.Replace" -> "unicode/utf8.DecodeRuneInString"
  "strings.ReplaceAll" -> "strings.Replace"
  "(*flag.FlagSet).PrintDefaults$1" -> "strings.ReplaceAll"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "flag.isZeroValue" -> "reflect.TypeOf"
  "flag.isZeroValue" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Elem" -> "(*reflect.rtype).common"
  "reflect.elem" -> "(*internal/abi.Type).Elem"
  "reflect.elem" -> "reflect.stringFor"
  "(*reflect.rtype).Elem" -> "reflect.elem"
  "(*reflect.rtype).Elem" -> "reflect.toType"
  "flag.isZeroValue" -> "(*reflect.rtype).Elem"
  "reflect.ptrTo" -> "reflect.toRType"
  "(*reflect.rtype).ptrTo" -> "(*reflect.rtype).typeOff"
  "(*reflect.rtype).ptrTo" -> "(*sync.Map).Load"
  "(*reflect.rtype).ptrTo" -> "(*reflect.rtype).String"
  "reflect.typesByString" -> "reflect.typelinks"
  "reflect.rtypeOff" -> "reflect.add"
  "reflect.typesByString" -> "reflect.rtypeOff"
  "reflect.typesByString" -> "reflect.stringFor"
  "reflect.typesByString" -> "reflect.rtypeOff"
  "reflect.typesByString" -> "reflect.stringFor"
  "(*reflect.rtype).ptrTo" -> "reflect.typesByString"
  "(*reflect.rtype).ptrTo" -> "reflect.newName"
  "(*reflect.rtype).ptrTo" -> "reflect.resolveReflectName"
  "(*reflect.rtype).ptrTo" -> "reflect.fnv1"
  "(*reflect.rtype).ptrTo" -> "(*sync.Map).LoadOrStore"
  "(*reflect.rtype).ptrTo" -> "(*sync.Map).LoadOrStore"
  "reflect.ptrTo" -> "(*reflect.rtype).ptrTo"
  "reflect.New" -> "reflect.ptrTo"
  "reflect.New" -> "reflect.ifaceIndir"
  "reflect.New" -> "reflect.unsafe_New"
  "flag.isZeroValue" -> "reflect.New"
  "flag.isZeroValue$1" -> "(*reflect.rtype).Kind"
  "flag.isZeroValue$1" -> "(*reflect.rtype).Elem"
  "flag.isZeroValue$1" -> "fmt.Errorf"
  "flag.isZeroValue" -> "flag.isZeroValue$1"
  "flag.isZeroValue" -> "(reflect.Value).Interface"
  "(github.com/stefan-muehlebach/gg/geom.Point).String" -> "fmt.Sprintf"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).String" -> "(github.com/stefan-muehlebach/gg/geom.Point).String"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).String" -> "(github.com/stefan-muehlebach/gg/geom.Point).String"
  "flag.isZeroValue" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).String"
  "periph.io/x/conn/v3/physic.microAsString" -> "strconv.Itoa"
  "periph.io/x/conn/v3/physic.microAsString" -> "strconv.Itoa"
  "periph.io/x/conn/v3/physic.prefixZeros" -> "strconv.Itoa"
  "periph.io/x/conn/v3/physic.microAsString" -> "periph.io/x/conn/v3/physic.prefixZeros"
  "(periph.io/x/conn/v3/physic.Frequency).String" -> "periph.io/x/conn/v3/physic.microAsString"
  "flag.isZeroValue" -> "(periph.io/x/conn/v3/physic.Frequency).String"
  "flag.isZeroValue" -> "(github.com/stefan-muehlebach/gg/geom.Point).String"
  "periph.io/x/conn/v3/physic.nanoAsString" -> "strconv.Itoa"
  "periph.io/x/conn/v3/physic.nanoAsString" -> "strconv.Itoa"
  "periph.io/x/conn/v3/physic.nanoAsString" -> "periph.io/x/conn/v3/physic.prefixZeros"
  "(periph.io/x/conn/v3/physic.ElectricCurrent).String" -> "periph.io/x/conn/v3/physic.nanoAsString"
  "flag.isZeroValue" -> "(periph.io/x/conn/v3/physic.ElectricCurrent).String"
  "(*flag.boolValue).String" -> "strconv.FormatBool"
  "flag.isZeroValue" -> "(*flag.boolValue).String"
  "reflect.Zero" -> "(*internal/abi.Type).Kind"
  "reflect.Zero" -> "(*internal/abi.Type).IfaceIndir"
  "reflect.Zero" -> "(*internal/abi.Type).Size"
  "reflect.Zero" -> "reflect.unsafe_New"
  "flag.isZeroValue" -> "reflect.Zero"
  "(*flag.FlagSet).PrintDefaults$1" -> "flag.isZeroValue"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).WriteString"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).PrintDefaults$1" -> "(*strings.Builder).String"
  "fmt.Fprint" -> "fmt.newPrinter"
  "(*fmt.pp).doPrint" -> "reflect.TypeOf"
  "(*fmt.pp).doPrint" -> "(*reflect.rtype).Kind"
  "(*fmt.pp).doPrint" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrint" -> "(*fmt.pp).printArg"
  "fmt.Fprint" -> "(*fmt.pp).doPrint"
  "fmt.Fprint" -> "(*bytes.Buffer).Write"
  "fmt.Fprint" -> "(*os.File).Write"
  "fmt.Fprint" -> "(*internal/poll.FD).Write"
  "fmt.Fprint" -> "(io.discard).Write"
  "fmt.Fprint" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "fmt.Fprint" -> "(*fmt.pp).Write"
  "fmt.Fprint" -> "(*bufio.Writer).Write"
  "fmt.Fprint" -> "(*compress/flate.dictWriter).Write"
  "fmt.Fprint" -> "(*fmt.pp).free"
  "fmt.Fprint" -> "(*hash/crc32.digest).Write"
  "fmt.Fprint" -> "(*image/png.encoder).Write"
  "fmt.Fprint" -> "(*golang.org/x/text/transform.Writer).Write"
  "fmt.Fprint" -> "(*strings.Builder).Write"
  "fmt.Fprint" -> "(*compress/flate.Writer).Write"
  "fmt.Fprint" -> "(*internal/godebug.runtimeStderr).Write"
  "fmt.Fprint" -> "(*compress/zlib.Writer).Write"
  "fmt.Fprint" -> "(*hash/adler32.digest).Write"
  "fmt.Fprint" -> "(*text/tabwriter.Writer).Write"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprint"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprintf"
  "(*flag.FlagSet).PrintDefaults$1" -> "fmt.Fprintf"
  "(*flag.FlagSet).VisitAll" -> "(*flag.FlagSet).PrintDefaults$1"
  "(*flag.FlagSet).PrintDefaults" -> "(*flag.FlagSet).VisitAll"
  "(*flag.FlagSet).PrintDefaults" -> "(*flag.FlagSet).Output"
  "fmt.Fprintln" -> "fmt.newPrinter"
  "(*fmt.pp).doPrintln" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintln" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintln" -> "(*fmt.pp).printArg"
  "fmt.Fprintln" -> "(*fmt.pp).doPrintln"
  "fmt.Fprintln" -> "(*bytes.Buffer).Write"
  "fmt.Fprintln" -> "(*os.File).Write"
  "fmt.Fprintln" -> "(*internal/poll.FD).Write"
  "fmt.Fprintln" -> "(io.discard).Write"
  "fmt.Fprintln" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "fmt.Fprintln" -> "(*fmt.pp).Write"
  "fmt.Fprintln" -> "(*bufio.Writer).Write"
  "fmt.Fprintln" -> "(*fmt.pp).free"
  "fmt.Fprintln" -> "(*compress/flate.dictWriter).Write"
  "fmt.Fprintln" -> "(*strings.Builder).Write"
  "fmt.Fprintln" -> "(*hash/crc32.digest).Write"
  "fmt.Fprintln" -> "(*text/tabwriter.Writer).Write"
  "fmt.Fprintln" -> "(*compress/flate.Writer).Write"
  "fmt.Fprintln" -> "(*golang.org/x/text/transform.Writer).Write"
  "fmt.Fprintln" -> "(*compress/zlib.Writer).Write"
  "fmt.Fprintln" -> "(*internal/godebug.runtimeStderr).Write"
  "fmt.Fprintln" -> "(*image/png.encoder).Write"
  "fmt.Fprintln" -> "(*hash/adler32.digest).Write"
  "(*flag.FlagSet).PrintDefaults" -> "fmt.Fprintln"
  "(*flag.FlagSet).PrintDefaults" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).PrintDefaults" -> "fmt.Fprintln"
  "(*flag.FlagSet).defaultUsage" -> "(*flag.FlagSet).PrintDefaults"
  "(*flag.FlagSet).defaultUsage" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).defaultUsage" -> "fmt.Fprintf"
  "os/signal.Notify$1$1" -> "(*flag.FlagSet).defaultUsage"
  "syscall.Getenv" -> "(*sync.Once).Do"
  "(*sync.RWMutex).RLock" -> "internal/race.Disable"
  "(*sync/atomic.Int32).Add" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).RLock" -> "(*sync/atomic.Int32).Add"
  "(*sync.RWMutex).RLock" -> "sync.runtime_SemacquireRWMutexR"
  "(*sync.RWMutex).RLock" -> "internal/race.Enable"
  "(*sync.RWMutex).RLock" -> "internal/race.Acquire"
  "syscall.Getenv" -> "(*sync.RWMutex).RLock"
  "(*sync.RWMutex).RUnlock" -> "internal/race.ReleaseMerge"
  "(*sync.RWMutex).RUnlock" -> "internal/race.Disable"
  "(*sync.RWMutex).RUnlock" -> "(*sync/atomic.Int32).Add"
  "(*sync.RWMutex).rUnlockSlow" -> "internal/race.Enable"
  "(*sync.RWMutex).rUnlockSlow" -> "sync.fatal"
  "(*sync.RWMutex).rUnlockSlow" -> "(*sync/atomic.Int32).Add"
  "(*sync.RWMutex).rUnlockSlow" -> "sync.runtime_Semrelease"
  "(*sync.RWMutex).RUnlock" -> "(*sync.RWMutex).rUnlockSlow"
  "(*sync.RWMutex).RUnlock" -> "internal/race.Enable"
  "syscall.Getenv" -> "(*sync.RWMutex).RUnlock"
  "time.initLocal" -> "syscall.Getenv"
  "syscall.ByteSliceFromString" -> "internal/bytealg.IndexByteString"
  "syscall.BytePtrFromString" -> "syscall.ByteSliceFromString"
  "syscall.openat" -> "syscall.BytePtrFromString"
  "syscall.openat" -> "syscall.Syscall6"
  "syscall.openat" -> "syscall.errnoErr"
  "syscall.Open" -> "syscall.openat"
  "time.open" -> "syscall.Open"
  "time.loadTzinfoFromZip" -> "time.open"
  "time.closefd" -> "syscall.Close"
  "time.loadTzinfoFromZip" -> "time.closefd"
  "syscall.Seek" -> "syscall.Syscall"
  "syscall.Seek" -> "syscall.errnoErr"
  "time.preadn" -> "syscall.Seek"
  "time.preadn" -> "syscall.Read"
  "time.preadn" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.preadn"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get2"
  "time.loadTzinfoFromZip" -> "time.get4"
  "time.loadTzinfoFromZip" -> "errors.New"
  "time.loadTzinfoFromDirOrZip" -> "time.loadTzinfoFromZip"
  "time.readFile" -> "time.open"
  "time.readFile" -> "time.closefd"
  "time.read" -> "syscall.Read"
  "time.readFile" -> "time.read"
  "time.loadTzinfoFromDirOrZip" -> "time.readFile"
  "time.loadTzinfo" -> "time.loadTzinfoFromDirOrZip"
  "time.loadLocation" -> "time.loadTzinfo"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "(*time.dataIO).big4" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).rest"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "(*time.dataIO).byte" -> "(*time.dataIO).read"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).byte"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).byte"
  "time.LoadLocationFromTZData" -> "time.byteString"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big4"
  "(*time.dataIO).big8" -> "(*time.dataIO).big4"
  "(*time.dataIO).big8" -> "(*time.dataIO).big4"
  "time.LoadLocationFromTZData" -> "(*time.dataIO).big8"
  "time.LoadLocationFromTZData" -> "time.now"
  "time.tzset" -> "time.tzsetName"
  "time.tzsetOffset" -> "time.tzsetNum"
  "time.tzsetOffset" -> "time.tzsetNum"
  "time.tzsetOffset" -> "time.tzsetNum"
  "time.tzset" -> "time.tzsetOffset"
  "time.tzset" -> "time.tzsetName"
  "time.tzset" -> "time.tzsetOffset"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetNum"
  "time.tzsetRule" -> "time.tzsetOffset"
  "time.tzset" -> "time.tzsetRule"
  "time.tzset" -> "time.tzsetRule"
  "time.tzset" -> "time.absDate"
  "time.tzset" -> "time.daysSinceEpoch"
  "time.tzruleTime" -> "time.isLeap"
  "time.daysIn" -> "time.isLeap"
  "time.tzruleTime" -> "time.daysIn"
  "time.tzruleTime" -> "time.isLeap"
  "time.tzset" -> "time.tzruleTime"
  "time.tzset" -> "time.tzruleTime"
  "time.LoadLocationFromTZData" -> "time.tzset"
  "time.LoadLocationFromTZData" -> "time.findZone"
  "time.loadLocation" -> "time.LoadLocationFromTZData"
  "runtime.gogetenv" -> "runtime.environ"
  "runtime.gogetenv" -> "runtime.throw"
  "runtime.envKeyEqual" -> "runtime.lowerASCII"
  "runtime.envKeyEqual" -> "runtime.lowerASCII"
  "runtime.gogetenv" -> "runtime.envKeyEqual"
  "runtime.GOROOT" -> "runtime.gogetenv"
  "time.loadLocation" -> "runtime.GOROOT"
  "time.loadLocation" -> "time.gorootZoneSource"
  "time.loadLocation" -> "time.LoadLocationFromTZData"
  "time.loadLocation" -> "time.loadTzinfo"
  "time.loadLocation" -> "time.LoadLocationFromTZData"
  "time.loadLocation" -> "errors.New"
  "time.initLocal" -> "time.loadLocation"
  "time.initLocal" -> "time.loadLocation"
  "time.initLocal" -> "time.loadLocation"
  "os/signal.Notify$1$1" -> "time.initLocal"
  "os/signal.Notify$1$1" -> "sync.poolCleanup"
  "os/signal.Notify$1$1" -> "reflect.methodValueCall"
  "os/signal.Notify$1$1" -> "runtime.SetFinalizer$1"
  "os/signal.Notify$1$1" -> "runtime.SetFinalizer$2"
  "os/signal.Notify$1$1" -> "syscall.copyenv"
  "os/signal.Notify$1$1" -> "(*encoding/json.encodeState).marshal$1"
  "os/signal.Notify$1$1" -> "os/signal.loop"
  "os/signal.Notify$1$1" -> "time.FixedZone$1"
  "os/signal.Notify$1$1" -> "(*fmt.ss).Token$1"
  "os/signal.Notify$1$1" -> "flag.commandLineUsage"
  "os/signal.Notify$1$1" -> "runtime.asyncPreempt"
  "os/signal.Notify$1$1" -> "runtime.chansend$1"
  "os/signal.Notify$1$1" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "os/signal.Notify$1$1" -> "os/signal.Notify$1$1"
  "os/signal.Notify$1$1" -> "flag.init$1"
  "os/signal.Notify$1$1" -> "runtime.init$1"
  "os/signal.Notify$1$1" -> "internal/poll.CopyFileRange$1"
  "runtime.fatalthrow$1" -> "runtime.isSecureMode"
  "runtime.fatalthrow$1" -> "runtime.exit"
  "runtime.startpanic_m" -> "runtime.getg"
  "runtime.startpanic_m" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.startpanic_m" -> "runtime.lock"
  "runtime.schedtrace" -> "runtime.nanotime"
  "runtime.schedtrace" -> "runtime.lock"
  "runtime.schedtrace" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.schedtrace" -> "runtime.mcount"
  "runtime.schedtrace" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.schedtrace" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.schedtrace" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.schedtrace" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.schedtrace" -> "(runtime.muintptr).ptr"
  "runtime.schedtrace" -> "runtime/internal/atomic.Load"
  "runtime.schedtrace" -> "runtime/internal/atomic.Load"
  "runtime.schedtrace" -> "runtime.unlock"
  "runtime.schedtrace" -> "(runtime.puintptr).ptr"
  "runtime.forEachG" -> "runtime.lock"
  "runtime.preemptPark" -> "runtime.readgstatus"
  "runtime.dumpgstatus" -> "runtime.getg"
  "runtime.dumpgstatus" -> "runtime.readgstatus"
  "runtime.dumpgstatus" -> "runtime.readgstatus"
  "runtime.preemptPark" -> "runtime.dumpgstatus"
  "runtime.preemptPark" -> "runtime.throw"
  "runtime.preemptPark" -> "runtime.findfunc"
  "runtime.preemptPark" -> "(runtime.funcInfo).valid"
  "runtime.casGToPreemptScan" -> "runtime.throw"
  "runtime.casGToPreemptScan" -> "runtime.acquireLockRank"
  "runtime.casGToPreemptScan" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.preemptPark" -> "runtime.casGToPreemptScan"
  "runtime.dropg" -> "runtime.getg"
  "runtime.setMNoWB" -> "(*runtime.muintptr).set"
  "runtime.dropg" -> "runtime.setMNoWB"
  "runtime.setGNoWB" -> "(*runtime.guintptr).set"
  "runtime.dropg" -> "runtime.setGNoWB"
  "runtime.preemptPark" -> "runtime.dropg"
  "runtime.preemptPark" -> "runtime.traceAcquire"
  "runtime.preemptPark" -> "(runtime.traceLocker).ok"
  "runtime.preemptPark" -> "runtime.throw"
  "runtime.preemptPark" -> "runtime.funcname"
  "runtime.preemptPark" -> "runtime.throw"
  "(runtime.traceLocker).GoPark" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GoPark" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).GoPark" -> "(runtime.traceEventWriter).commit"
  "runtime.preemptPark" -> "(runtime.traceLocker).GoPark"
  "runtime.casfrom_Gscanstatus" -> "runtime.dumpgstatus"
  "runtime.casfrom_Gscanstatus" -> "runtime.throw"
  "runtime.casfrom_Gscanstatus" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.casfrom_Gscanstatus" -> "runtime.dumpgstatus"
  "runtime.casfrom_Gscanstatus" -> "runtime.throw"
  "runtime.casfrom_Gscanstatus" -> "runtime.releaseLockRank"
  "runtime.preemptPark" -> "runtime.casfrom_Gscanstatus"
  "runtime.preemptPark" -> "(runtime.traceLocker).ok"
  "runtime.preemptPark" -> "runtime.traceRelease"
  "runtime.schedule" -> "runtime.getg"
  "runtime.schedule" -> "runtime.throw"
  "runtime.stoplockedm" -> "runtime.getg"
  "runtime.stoplockedm" -> "runtime.throw"
  "runtime.stoplockedm" -> "(runtime.guintptr).ptr"
  "runtime.stoplockedm" -> "(runtime.muintptr).ptr"
  "runtime.stoplockedm" -> "runtime.releasep"
  "runtime.handoffp" -> "runtime.runqempty"
  "runtime.handoffp" -> "runtime.startm"
  "runtime.handoffp" -> "runtime.traceEnabled"
  "runtime.handoffp" -> "runtime.startm"
  "runtime.traceReaderAvailable" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.traceReaderAvailable" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime/internal/atomic.Pointer[runtime.g]).Load[runtime.g]" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.traceReaderAvailable" -> "(*runtime/internal/atomic.Pointer[runtime.g]).Load[runtime.g]"
  "runtime.traceReaderAvailable" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.traceReaderAvailable" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.handoffp" -> "runtime.traceReaderAvailable"
  "runtime.handoffp" -> "runtime.traceShuttingDown"
  "runtime.handoffp" -> "runtime.startm"
  "runtime.handoffp" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.handoffp" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.handoffp" -> "runtime.gcMarkWorkAvailable"
  "runtime.handoffp" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.handoffp" -> "runtime.startm"
  "runtime.handoffp" -> "runtime.lock"
  "runtime.handoffp" -> "(*runtime/internal/atomic.Bool).Load"
  "(*runtime/internal/atomic.Int32).CompareAndSwap" -> "runtime/internal/atomic.Casint32"
  "runtime.handoffp" -> "(*runtime/internal/atomic.Int32).CompareAndSwap"
  "runtime.handoffp" -> "runtime.notewakeup"
  "runtime.handoffp" -> "runtime.unlock"
  "runtime.handoffp" -> "runtime/internal/atomic.Cas"
  "runtime.handoffp" -> "runtime.notewakeup"
  "runtime.handoffp" -> "runtime.unlock"
  "runtime.handoffp" -> "runtime.startm"
  "runtime.handoffp" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.handoffp" -> "runtime.unlock"
  "runtime.handoffp" -> "runtime.startm"
  "runtime.nobarrierWakeTime" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.nobarrierWakeTime" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.handoffp" -> "runtime.nobarrierWakeTime"
  "runtime.pidleput" -> "runtime.assertLockHeld"
  "runtime.pidleput" -> "runtime.runqempty"
  "runtime.pidleput" -> "runtime.throw"
  "runtime.pidleput" -> "runtime.nanotime"
  "runtime.updateTimerPMask" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.updateTimerPMask" -> "runtime.lock"
  "runtime.updateTimerPMask" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.updateTimerPMask" -> "(runtime.pMask).clear"
  "runtime.updateTimerPMask" -> "runtime.unlock"
  "runtime.pidleput" -> "runtime.updateTimerPMask"
  "runtime.pidleput" -> "(runtime.pMask).set"
  "runtime.pidleput" -> "(*runtime.puintptr).set"
  "runtime.pidleput" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.pidleput" -> "(*runtime.limiterEvent).start"
  "runtime.pidleput" -> "runtime.throw"
  "runtime.handoffp" -> "runtime.pidleput"
  "runtime.handoffp" -> "runtime.unlock"
  "runtime.handoffp" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.wakeNetPoller" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.wakeNetPoller" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.netpollBreak" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.netpollBreak" -> "runtime.write"
  "runtime.netpollBreak" -> "runtime.throw"
  "runtime.wakeNetPoller" -> "runtime.netpollBreak"
  "runtime.wakep" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.wakep" -> "runtime.acquirem"
  "runtime.wakep" -> "runtime.lock"
  "runtime.wakep" -> "runtime.pidlegetSpinning"
  "runtime.wakep" -> "(*runtime/internal/atomic.Int32).CompareAndSwap"
  "runtime.wakep" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.wakep" -> "runtime.unlock"
  "runtime.wakep" -> "runtime.startm"
  "runtime.wakep" -> "runtime.releasem"
  "runtime.wakep" -> "runtime.throw"
  "runtime.wakep" -> "runtime.unlock"
  "runtime.wakep" -> "runtime.releasem"
  "runtime.wakeNetPoller" -> "runtime.wakep"
  "runtime.handoffp" -> "runtime.wakeNetPoller"
  "runtime.shade" -> "runtime.findObject"
  "runtime.shade" -> "runtime.getg"
  "runtime.shade" -> "(runtime.puintptr).ptr"
  "runtime.shade" -> "runtime.greyobject"
  "runtime.wbBufFlush1" -> "runtime.shade"
  "(*runtime.wbBuf).reset" -> "runtime.throw"
  "runtime.wbBufFlush1" -> "(*runtime.wbBuf).reset"
  "(*runtime.gcWork).putBatch" -> "(*runtime.gcWork).init"
  "(*runtime.gcWork).putBatch" -> "runtime.putfull"
  "(*runtime.gcWork).putBatch" -> "runtime.getempty"
  "(*runtime.gcWork).putBatch" -> "(*runtime.gcControllerState).enlistWorker"
  "runtime.wbBufFlush1" -> "(*runtime.gcWork).putBatch"
  "runtime.wbBufFlush1" -> "(*runtime.wbBuf).reset"
  "runtime.wbBufFlush1" -> "runtime.findObject"
  "runtime.wbBufFlush1" -> "(*runtime.mspan).markBitsForIndex"
  "runtime.wbBufFlush1" -> "(runtime.markBits).isMarked"
  "runtime.wbBufFlush1" -> "(runtime.markBits).setMarked"
  "runtime.wbBufFlush1" -> "(*runtime.mspan).base"
  "runtime.wbBufFlush1" -> "runtime.pageIndexOf"
  "runtime.wbBufFlush1" -> "runtime/internal/atomic.Or8"
  "runtime.wbBufFlush1" -> "(runtime.spanClass).noscan"
  "runtime.gcMarkDone$1" -> "runtime.wbBufFlush1"
  "(*runtime.gcWork).dispose" -> "runtime.putempty"
  "(*runtime.gcWork).dispose" -> "runtime.putfull"
  "(*runtime.gcWork).dispose" -> "runtime.putempty"
  "(*runtime.gcWork).dispose" -> "runtime.putfull"
  "(*runtime.gcWork).dispose" -> "runtime/internal/atomic.Xadd64"
  "(*runtime.gcWork).dispose" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcMarkDone$1" -> "(*runtime.gcWork).dispose"
  "runtime.gcMarkDone$1" -> "runtime/internal/atomic.Xadd"
  "runtime.handoffp" -> "runtime.gcMarkDone$1"
  "runtime.gcMarkTermination$4" -> "(*runtime.mcache).prepareForSweep"
  "runtime.gcMarkTermination$4" -> "runtime.systemstack"
  "runtime.handoffp" -> "runtime.gcMarkTermination$4"
  "runtime.stoplockedm" -> "runtime.handoffp"
  "runtime.incidlelocked" -> "runtime.lock"
  "runtime.checkdead" -> "runtime.assertLockHeld"
  "runtime.checkdead" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.checkdead" -> "runtime.mcount"
  "runtime.checkdead" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.checkdead" -> "runtime.mcount"
  "runtime.checkdead" -> "runtime.unlock"
  "runtime.checkdead" -> "runtime.throw"
  "runtime.checkdead" -> "runtime.forEachG"
  "runtime.checkdead" -> "runtime.unlock"
  "runtime.checkdead" -> "runtime.fatal"
  "runtime.timeSleepUntil" -> "runtime.lock"
  "runtime.timeSleepUntil" -> "runtime.unlock"
  "runtime.timeSleepUntil" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.timeSleepUntil" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.checkdead" -> "runtime.timeSleepUntil"
  "runtime.checkdead" -> "runtime.pidleget"
  "runtime.checkdead" -> "runtime.unlock"
  "runtime.checkdead" -> "runtime.throw"
  "runtime.checkdead" -> "runtime.mget"
  "runtime.checkdead" -> "runtime.unlock"
  "runtime.checkdead" -> "runtime.throw"
  "runtime.checkdead" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.checkdead" -> "(*runtime.puintptr).set"
  "runtime.checkdead" -> "runtime.notewakeup"
  "runtime.checkdead" -> "runtime.unlock"
  "runtime.checkdead" -> "runtime.fatal"
  "runtime.incidlelocked" -> "runtime.checkdead"
  "runtime.incidlelocked" -> "runtime.unlock"
  "runtime.stoplockedm" -> "runtime.incidlelocked"
  "runtime.mPark" -> "runtime.getg"
  "runtime.notesleep" -> "runtime.getg"
  "runtime.notesleep" -> "runtime.throw"
  "runtime.notesleep" -> "runtime.key32"
  "runtime.notesleep" -> "runtime.futexsleep"
  "runtime.notesleep" -> "runtime.key32"
  "runtime.notesleep" -> "runtime/internal/atomic.Load"
  "runtime.notesleep" -> "runtime.asmcgocall"
  "runtime.mPark" -> "runtime.notesleep"
  "runtime.mPark" -> "runtime.noteclear"
  "runtime.stoplockedm" -> "runtime.mPark"
  "runtime.stoplockedm" -> "(runtime.guintptr).ptr"
  "runtime.stoplockedm" -> "runtime.readgstatus"
  "runtime.stoplockedm" -> "(runtime.guintptr).ptr"
  "runtime.stoplockedm" -> "runtime.dumpgstatus"
  "runtime.stoplockedm" -> "runtime.throw"
  "runtime.stoplockedm" -> "(runtime.puintptr).ptr"
  "runtime.stoplockedm" -> "runtime.acquirep"
  "runtime.schedule" -> "runtime.stoplockedm"
  "runtime.schedule" -> "(runtime.guintptr).ptr"
  "runtime.execute" -> "runtime.getg"
  "runtime.tryRecordGoroutineProfile" -> "runtime.readgstatus"
  "runtime.tryRecordGoroutineProfile" -> "runtime.isSystemGoroutine"
  "(*runtime.goroutineProfileStateHolder).Load" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.goroutineProfileStateHolder).Load"
  "(*sync.WaitGroup).Add" -> "(*sync/atomic.Uint64).Add"
  "(*sync.WaitGroup).Add" -> "internal/race.ReleaseMerge"
  "(*sync.WaitGroup).Add" -> "internal/race.Disable"
  "(*sync.WaitGroup).Add" -> "internal/race.Enable"
  "(*sync.WaitGroup).Add" -> "internal/race.Read"
  "(*sync.WaitGroup).Add" -> "(*sync/atomic.Uint64).Load"
  "(*sync/atomic.Uint64).Store" -> "sync/atomic.StoreUint64"
  "(*sync.WaitGroup).Add" -> "(*sync/atomic.Uint64).Store"
  "(*sync.WaitGroup).Add" -> "sync.runtime_Semrelease"
  "(*sync.WaitGroup).Done" -> "(*sync.WaitGroup).Add"
  "periph.io/x/conn/v3/driver/driverreg.initImpl$1" -> "(*sync.WaitGroup).Done"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/allwinner.driverDMA).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/pine64.driver).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/rpi.driver).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/sysfs.driverI2C).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/sysfs.driverLED).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/sysfs.driverSPI).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).String"
  "(embed.FS).readDir$2" -> "embed.split"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "(embed.FS).readDir$2"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/allwinner.driverDMA).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/pine64.driver).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/rpi.driver).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/sysfs.driverI2C).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/sysfs.driverLED).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/sysfs.driverSPI).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver$1" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).String"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "periph.io/x/conn/v3/driver/driverreg.insertDriver$1"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/allwinner.driverDMA).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/pine64.driver).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/rpi.driver).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/sysfs.driverI2C).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/sysfs.driverLED).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/sysfs.driverSPI).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).String"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*errors.errorString).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(runtime.errorString).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(time.fileSizeError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(syscall.Errno).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*internal/poll.DeadlineExceededError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(context.deadlineExceededError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(compress/flate.CorruptInputError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*time.ParseError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*io/fs.PathError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*reflect.ValueError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(runtime.plainError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*os.SyscallError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(image/png.FormatError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(compress/flate.InternalError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*fmt.wrapError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*fmt.wrapErrors).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(internal/poll.errNetClosing).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*internal/reflectlite.ValueError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*encoding/json.UnsupportedValueError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(encoding/base64.CorruptInputError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*encoding/json.MarshalerError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*internal/bisect.parseError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(image/jpeg.UnsupportedError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*strconv.NumError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*encoding/json.SyntaxError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*runtime.TypeAssertionError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(runtime.errorAddressString).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(image/jpeg.FormatError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(image/png.UnsupportedError).Error"
  "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String" -> "(*encoding/json.UnmarshalTypeError).Error"
  "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure$1" -> "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure$1"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "periph.io/x/conn/v3/driver/driverreg.insertString$1"
  "(embed.FS).lookup$1" -> "embed.split"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "(embed.FS).lookup$1"
  "(embed.FS).readDir$1" -> "embed.split"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "(embed.FS).readDir$1"
  "golang.org/x/image/font/sfnt.makeCachedCoverageList$1$1" -> "golang.org/x/image/font/sfnt.u16"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList$1$1"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1$1" -> "golang.org/x/image/font/sfnt.u16"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1$1"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1$1" -> "golang.org/x/image/font/sfnt.u16"
  "periph.io/x/conn/v3/driver/driverreg.search" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1$1"
  "periph.io/x/conn/v3/driver/driverreg.insertDriver" -> "periph.io/x/conn/v3/driver/driverreg.search"
  "periph.io/x/conn/v3/driver/driverreg.initImpl$1" -> "periph.io/x/conn/v3/driver/driverreg.insertDriver"
  "runtime.tryRecordGoroutineProfile" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "hash/crc32.ieeeInit" -> "hash/crc32.archAvailableIEEE"
  "hash/crc32.ieeeInit" -> "hash/crc32.archInitIEEE"
  "hash/crc32.slicingMakeTable" -> "hash/crc32.simplePopulateTable"
  "hash/crc32.ieeeInit" -> "hash/crc32.slicingMakeTable"
  "runtime.tryRecordGoroutineProfile" -> "hash/crc32.ieeeInit"
  "(*runtime.sweepLocked).sweep$2" -> "runtime.spanOf"
  "(*runtime.sweepLocked).sweep$2" -> "(*runtime.mheap).freeManual"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.sweepLocked).sweep$2"
  "runtime.tryRecordGoroutineProfile" -> "flag.isZeroValue$1"
  "runtime.ready" -> "runtime.readgstatus"
  "runtime.ready" -> "runtime.acquirem"
  "runtime.ready" -> "runtime.dumpgstatus"
  "runtime.ready" -> "runtime.throw"
  "runtime.ready" -> "runtime.traceAcquire"
  "runtime.ready" -> "runtime.casgstatus"
  "runtime.ready" -> "(runtime.traceLocker).ok"
  "runtime.ready" -> "(runtime.traceLocker).GoUnpark"
  "runtime.ready" -> "runtime.traceRelease"
  "runtime.ready" -> "(runtime.puintptr).ptr"
  "runtime.randn" -> "runtime.rand"
  "runtime.runqput" -> "runtime.randn"
  "(*runtime.guintptr).cas" -> "runtime/internal/atomic.Casuintptr"
  "runtime.runqput" -> "(*runtime.guintptr).cas"
  "runtime.runqput" -> "(runtime.guintptr).ptr"
  "runtime.runqput" -> "runtime/internal/atomic.LoadAcq"
  "runtime.runqput" -> "(*runtime.guintptr).set"
  "runtime.runqput" -> "runtime/internal/atomic.StoreRel"
  "runtime.runqputslow" -> "runtime.throw"
  "runtime.runqputslow" -> "(runtime.guintptr).ptr"
  "runtime.runqputslow" -> "runtime/internal/atomic.CasRel"
  "runtime.runqputslow" -> "runtime.cheaprandn"
  "runtime.runqputslow" -> "(*runtime.guintptr).set"
  "runtime.runqputslow" -> "(*runtime.guintptr).set"
  "runtime.runqputslow" -> "(*runtime.guintptr).set"
  "runtime.runqputslow" -> "runtime.lock"
  "runtime.runqputslow" -> "runtime.globrunqputbatch"
  "runtime.runqputslow" -> "runtime.unlock"
  "runtime.runqput" -> "runtime.runqputslow"
  "runtime.ready" -> "runtime.runqput"
  "runtime.ready" -> "runtime.wakep"
  "runtime.ready" -> "runtime.releasem"
  "runtime.goready$1" -> "runtime.ready"
  "runtime.tryRecordGoroutineProfile" -> "runtime.goready$1"
  "runtime/pprof.printCountProfile$2" -> "(*runtime/pprof.runtimeProfile).Label"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.protobuf).uint64" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).uint64" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).int64" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.protobuf).int64Opt" -> "(*runtime/pprof.protobuf).int64"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.protobuf).length" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).length" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).endMessage" -> "(*runtime/pprof.protobuf).length"
  "(*runtime/pprof.profileBuilder).pbLabel" -> "(*runtime/pprof.protobuf).endMessage"
  "runtime/pprof.printCountProfile$2" -> "(*runtime/pprof.profileBuilder).pbLabel"
  "runtime.tryRecordGoroutineProfile" -> "runtime/pprof.printCountProfile$2"
  "runtime.sweepone$1" -> "runtime.lock"
  "runtime.sweepone$1" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.sweepone$1" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.printScavTrace" -> "runtime.assertLockHeld"
  "runtime.printScavTrace" -> "runtime.printlock"
  "runtime.printScavTrace" -> "(*runtime.sysMemStat).load"
  "runtime.printScavTrace" -> "(*runtime.sysMemStat).load"
  "runtime.heapRetained" -> "(*runtime.sysMemStat).load"
  "runtime.heapRetained" -> "(*runtime.sysMemStat).load"
  "runtime.printScavTrace" -> "runtime.heapRetained"
  "runtime.printScavTrace" -> "runtime.printunlock"
  "runtime.sweepone$1" -> "runtime.printScavTrace"
  "runtime.sweepone$1" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.sweepone$1" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.sweepone$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "runtime.sweepone$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.init$1"
  "runtime.stopTheWorldWithSema" -> "runtime.traceAcquire"
  "runtime.stopTheWorldWithSema" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).STWStart" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).STWStart" -> "(runtime.stwReason).String"
  "(*runtime.traceStringTable).put" -> "runtime.stringStructOf"
  "(*runtime.traceStringTable).put" -> "(*runtime.traceMap).put"
  "(*runtime.traceStringTable).put" -> "runtime.systemstack"
  "(runtime.traceLocker).string" -> "(*runtime.traceStringTable).put"
  "(runtime.traceLocker).STWStart" -> "(runtime.traceLocker).string"
  "(runtime.traceLocker).STWStart" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).STWStart" -> "(runtime.traceEventWriter).commit"
  "runtime.stopTheWorldWithSema" -> "(runtime.traceLocker).STWStart"
  "runtime.stopTheWorldWithSema" -> "runtime.traceRelease"
  "runtime.stopTheWorldWithSema" -> "runtime.getg"
  "runtime.stopTheWorldWithSema" -> "runtime.throw"
  "runtime.stopTheWorldWithSema" -> "runtime.lock"
  "runtime.stopTheWorldWithSema" -> "runtime.nanotime"
  "runtime.stopTheWorldWithSema" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.preemptall" -> "runtime.preemptone"
  "runtime.stopTheWorldWithSema" -> "runtime.preemptall"
  "runtime.stopTheWorldWithSema" -> "(runtime.puintptr).ptr"
  "runtime.stopTheWorldWithSema" -> "runtime.traceAcquire"
  "runtime.stopTheWorldWithSema" -> "(runtime.traceLocker).ok"
  "runtime.stopTheWorldWithSema" -> "(runtime.traceLocker).ok"
  "runtime.stopTheWorldWithSema" -> "runtime/internal/atomic.Cas"
  "runtime.stopTheWorldWithSema" -> "(runtime.traceLocker).GoSysBlock"
  "(runtime.traceLocker).ProcSteal" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).ProcSteal" -> "(*runtime.traceSchedResourceState).statusWasTraced"
  "(runtime.traceLocker).ProcSteal" -> "(runtime.traceWriter).writeProcStatus"
  "(runtime.traceLocker).ProcSteal" -> "(*runtime.traceSchedResourceState).nextSeq"
  "(runtime.traceLocker).ProcSteal" -> "(runtime.traceEventWriter).commit"
  "(runtime.traceLocker).ProcSteal" -> "(*runtime.traceSchedResourceState).acquireStatus"
  "runtime.stopTheWorldWithSema" -> "(runtime.traceLocker).ProcSteal"
  "runtime.stopTheWorldWithSema" -> "runtime.traceRelease"
  "runtime.stopTheWorldWithSema" -> "runtime.nanotime"
  "runtime.stopTheWorldWithSema" -> "runtime.pidleget"
  "runtime.stopTheWorldWithSema" -> "runtime.unlock"
  "runtime.stopTheWorldWithSema" -> "runtime.nanotime"
  "runtime.stopTheWorldWithSema" -> "(runtime.stwReason).isGC"
  "runtime.notetsleep" -> "runtime.getg"
  "runtime.notetsleep" -> "runtime.throw"
  "runtime.notetsleep" -> "runtime.notetsleep_internal"
  "runtime.stopTheWorldWithSema" -> "runtime.notetsleep"
  "runtime.stopTheWorldWithSema" -> "runtime.noteclear"
  "runtime.stopTheWorldWithSema" -> "runtime.preemptall"
  "runtime.stopTheWorldWithSema" -> "(*runtime.timeHistogram).record"
  "runtime.stopTheWorldWithSema" -> "(*runtime.timeHistogram).record"
  "runtime.stopTheWorldWithSema" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.stopTheWorldWithSema" -> "runtime.lock"
  "runtime.stopTheWorldWithSema" -> "runtime.lock"
  "runtime.stopTheWorldWithSema" -> "runtime.throw"
  "runtime.stopTheWorldWithSema" -> "runtime.worldStopped"
  "runtime.gcStart$1" -> "runtime.stopTheWorldWithSema"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcStart$1"
  "runtime.cgoCheckBits" -> "runtime.addb"
  "runtime.cgoCheckBits" -> "runtime.add"
  "runtime.cgoCheckBits" -> "runtime.addb"
  "runtime.cgoCheckBits" -> "runtime.add"
  "runtime.cgoCheckBits" -> "runtime.cgoIsGoPointer"
  "runtime.cgoCheckBits" -> "runtime.throw"
  "runtime.cgoCheckBits" -> "runtime.isPinned"
  "runtime.cgoCheckUsingType" -> "runtime.cgoCheckBits"
  "runtime.cgoCheckUsingType" -> "runtime.cgoCheckUsingType"
  "runtime.cgoCheckUsingType" -> "runtime.add"
  "runtime.cgoCheckUsingType" -> "runtime.throw"
  "runtime.cgoCheckUsingType" -> "runtime.cgoCheckUsingType"
  "runtime.cgoCheckUsingType" -> "runtime.add"
  "runtime.cgoCheckTypedBlock$1" -> "runtime.cgoCheckUsingType"
  "runtime.tryRecordGoroutineProfile" -> "runtime.cgoCheckTypedBlock$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.chanrecv$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.throw$1"
  "runtime.callers$1" -> "(*runtime.unwinder).initAt"
  "runtime.callers$1" -> "runtime.tracebackPCs"
  "runtime.tryRecordGoroutineProfile" -> "runtime.callers$1"
  "(*runtime/pprof.profileBuilder).build$1" -> "(*runtime/pprof.profileBuilder).pbLabel"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime/pprof.profileBuilder).build$1"
  "runtime.tryRecordGoroutineProfile" -> "(*fmt.ss).Token$1"
  "runtime.tryRecordGoroutineProfile" -> "reflect.methodValueCall"
  "runtime.tryRecordGoroutineProfile" -> "runtime.SetFinalizer$2"
  "runtime.tryRecordGoroutineProfile" -> "syscall.copyenv"
  "runtime.casgstatus$1" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.casgstatus$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.osyield"
  "runtime.tryRecordGoroutineProfile" -> "reflect.embeddedIfaceMethStub"
  "runtime.tryRecordGoroutineProfile" -> "flag.init$1"
  "runtime.tryRecordGoroutineProfile" -> "internal/poll.CopyFileRange$1"
  "runtime.tryRecordGoroutineProfile" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "runtime.finishsweep_m" -> "runtime.assertWorldStopped"
  "(*runtime.activeSweep).sweepers" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.finishsweep_m" -> "(*runtime.activeSweep).sweepers"
  "runtime.finishsweep_m" -> "runtime.sweepone"
  "runtime.finishsweep_m" -> "runtime.throw"
  "runtime.finishsweep_m" -> "(*runtime.mcentral).partialUnswept"
  "(*runtime.spanSet).reset" -> "(*runtime.atomicHeadTailIndex).load"
  "(*runtime.spanSet).reset" -> "(runtime.headTailIndex).split"
  "(*runtime.spanSet).reset" -> "runtime.throw"
  "(*runtime.spanSet).reset" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.spanSet).reset" -> "(*runtime.atomicSpanSetSpinePointer).Load"
  "(*runtime.spanSet).reset" -> "(runtime.spanSetSpinePointer).lookup"
  "(*runtime.spanSet).reset" -> "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]"
  "(*runtime.atomicHeadTailIndex).reset" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.spanSet).reset" -> "(*runtime.atomicHeadTailIndex).reset"
  "(*runtime.spanSet).reset" -> "(*runtime/internal/atomic.Uintptr).Store"
  "(*runtime.spanSet).reset" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.spanSet).reset" -> "runtime.throw"
  "(*runtime.spanSet).reset" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.spanSet).reset" -> "runtime.throw"
  "(*runtime.spanSet).reset" -> "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]"
  "(*runtime.spanSet).reset" -> "(*runtime.spanSetBlockAlloc).free"
  "runtime.finishsweep_m" -> "(*runtime.spanSet).reset"
  "runtime.finishsweep_m" -> "(*runtime.mcentral).fullUnswept"
  "runtime.finishsweep_m" -> "(*runtime.spanSet).reset"
  "(*runtime.scavengerState).wake" -> "runtime.lock"
  "(*runtime.scavengerState).wake" -> "(*runtime/internal/atomic.Uint32).Store"
  "(*runtime.gList).push" -> "(*runtime.guintptr).set"
  "(*runtime.scavengerState).wake" -> "(*runtime.gList).push"
  "(*runtime.scavengerState).wake" -> "runtime.injectglist"
  "(*runtime.scavengerState).wake" -> "runtime.unlock"
  "runtime.finishsweep_m" -> "(*runtime.scavengerState).wake"
  "runtime.nextMarkBitArenaEpoch" -> "runtime.lock"
  "runtime.nextMarkBitArenaEpoch" -> "runtime/internal/atomic.StorepNoWB"
  "runtime.nextMarkBitArenaEpoch" -> "runtime.unlock"
  "runtime.finishsweep_m" -> "runtime.nextMarkBitArenaEpoch"
  "runtime.gcStart$2" -> "runtime.finishsweep_m"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcStart$2"
  "runtime.tryRecordGoroutineProfile" -> "internal/poll.runtime_pollServerInit"
  "runtime.tryRecordGoroutineProfile" -> "(*flag.FlagSet).defaultUsage"
  "runtime.tryRecordGoroutineProfile" -> "time.initLocal"
  "periph.io/x/conn/v3/driver/driverreg.initImpl$2" -> "(*sync.WaitGroup).Done"
  "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure" -> "(periph.io/x/conn/v3/driver/driverreg.DriverFailure).String"
  "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure" -> "periph.io/x/conn/v3/driver/driverreg.search"
  "periph.io/x/conn/v3/driver/driverreg.initImpl$2" -> "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure"
  "runtime.tryRecordGoroutineProfile" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "(*internal/godebug.Setting).IncNonDefault" -> "(*sync.Once).Do"
  "(*internal/godebug.Setting).IncNonDefault" -> "(*sync/atomic.Uint64).Add"
  "runtime.tryRecordGoroutineProfile" -> "(*internal/godebug.Setting).IncNonDefault"
  "runtime.tryRecordGoroutineProfile" -> "os/signal.loop"
  "runtime.tryRecordGoroutineProfile" -> "time.FixedZone$1"
  "runtime.tryRecordGoroutineProfile" -> "(*encoding/json.encodeState).marshal$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.fatalthrow$1"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/allwinner.driverDMA).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/pine64.driver).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/rpi.driver).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/sysfs.driverI2C).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/sysfs.driverLED).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/sysfs.driverSPI).Prerequisites"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).Prerequisites"
  "(*sync.WaitGroup).Wait" -> "internal/race.Disable"
  "(*sync.WaitGroup).Wait" -> "(*sync/atomic.Uint64).Load"
  "(*sync.WaitGroup).Wait" -> "(*sync/atomic.Uint64).CompareAndSwap"
  "(*sync.WaitGroup).Wait" -> "internal/race.Enable"
  "(*sync.WaitGroup).Wait" -> "internal/race.Acquire"
  "(*sync.WaitGroup).Wait" -> "internal/race.Write"
  "(*sync.WaitGroup).Wait" -> "sync.runtime_Semacquire"
  "(*sync.WaitGroup).Wait" -> "(*sync/atomic.Uint64).Load"
  "(*sync.WaitGroup).Wait" -> "internal/race.Enable"
  "(*sync.WaitGroup).Wait" -> "internal/race.Acquire"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*sync.WaitGroup).Wait"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*sync.Map).Load"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*sync.WaitGroup).Add"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*sync.WaitGroup).Done"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/distro.DTCompatible" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/distro.DTCompatible" -> "(*sync.Mutex).Unlock"
  "(*sync/atomic.Value).Load" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Value).Load" -> "sync/atomic.LoadPointer"
  "internal/testlog.Logger" -> "(*sync/atomic.Value).Load"
  "internal/testlog.Open" -> "internal/testlog.Logger"
  "os.OpenFile" -> "internal/testlog.Open"
  "internal/testlog.Stat" -> "internal/testlog.Logger"
  "os.Stat" -> "internal/testlog.Stat"
  "syscall.Fstat" -> "syscall.Syscall"
  "syscall.Fstat" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fstat$1" -> "syscall.Fstat"
  "os.ignoringEINTR" -> "(*internal/poll.FD).Fstat$1"
  "syscall.Fsync" -> "syscall.Syscall"
  "syscall.Fsync" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fsync$1" -> "syscall.Fsync"
  "os.ignoringEINTR" -> "(*internal/poll.FD).Fsync$1"
  "syscall.Ftruncate" -> "syscall.Syscall"
  "syscall.Ftruncate" -> "syscall.errnoErr"
  "(*internal/poll.FD).Ftruncate$1" -> "syscall.Ftruncate"
  "os.ignoringEINTR" -> "(*internal/poll.FD).Ftruncate$1"
  "os.newFile$1" -> "syscall.Fstat"
  "os.ignoringEINTR" -> "os.newFile$1"
  "syscall.fstatat" -> "syscall.BytePtrFromString"
  "syscall.fstatat" -> "syscall.Syscall6"
  "syscall.fstatat" -> "syscall.errnoErr"
  "syscall.Lstat" -> "syscall.fstatat"
  "os.lstatNolog$1" -> "syscall.Lstat"
  "os.ignoringEINTR" -> "os.lstatNolog$1"
  "os.syscallMode" -> "(io/fs.FileMode).Perm"
  "os.Mkdir$1" -> "os.syscallMode"
  "syscall.Mkdirat" -> "syscall.BytePtrFromString"
  "syscall.Mkdirat" -> "syscall.Syscall"
  "syscall.Mkdirat" -> "syscall.errnoErr"
  "syscall.Mkdir" -> "syscall.Mkdirat"
  "os.Mkdir$1" -> "syscall.Mkdir"
  "os.ignoringEINTR" -> "os.Mkdir$1"
  "syscall.Fchmod" -> "syscall.Syscall"
  "syscall.Fchmod" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fchmod$1" -> "syscall.Fchmod"
  "os.ignoringEINTR" -> "(*internal/poll.FD).Fchmod$1"
  "syscall.Fchown" -> "syscall.Syscall"
  "syscall.Fchown" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fchown$1" -> "syscall.Fchown"
  "os.ignoringEINTR" -> "(*internal/poll.FD).Fchown$1"
  "syscall.Stat" -> "syscall.fstatat"
  "os.statNolog$1" -> "syscall.Stat"
  "os.ignoringEINTR" -> "os.statNolog$1"
  "syscall.unlinkat" -> "syscall.BytePtrFromString"
  "syscall.unlinkat" -> "syscall.Syscall"
  "syscall.unlinkat" -> "syscall.errnoErr"
  "syscall.Unlink" -> "syscall.unlinkat"
  "os.Remove$1" -> "syscall.Unlink"
  "os.ignoringEINTR" -> "os.Remove$1"
  "syscall.Rmdir" -> "syscall.unlinkat"
  "os.Remove$2" -> "syscall.Rmdir"
  "os.ignoringEINTR" -> "os.Remove$2"
  "os.chmod$1" -> "os.syscallMode"
  "syscall.fchmodat2" -> "syscall.BytePtrFromString"
  "syscall.fchmodat2" -> "syscall.Syscall6"
  "syscall.fchmodat2" -> "syscall.errnoErr"
  "syscall.Fchmodat" -> "syscall.fchmodat2"
  "syscall.fchmodat" -> "syscall.BytePtrFromString"
  "syscall.fchmodat" -> "syscall.Syscall"
  "syscall.fchmodat" -> "syscall.errnoErr"
  "syscall.Fchmodat" -> "syscall.fchmodat"
  "syscall.Chmod" -> "syscall.Fchmodat"
  "os.chmod$1" -> "syscall.Chmod"
  "os.ignoringEINTR" -> "os.chmod$1"
  "os.statNolog" -> "os.ignoringEINTR"
  "os.fillFileStatFromSys" -> "os.basename"
  "os.fillFileStatFromSys" -> "(*syscall.Timespec).Unix"
  "time.Unix" -> "time.unixTime"
  "os.fillFileStatFromSys" -> "time.Unix"
  "os.statNolog" -> "os.fillFileStatFromSys"
  "os.Stat" -> "os.statNolog"
  "os.openFileNolog" -> "os.Stat"
  "os.underlyingErrorIs" -> "os.underlyingError"
  "os.underlyingErrorIs" -> "(syscall.Errno).Is"
  "os.IsNotExist" -> "os.underlyingErrorIs"
  "os.openFileNolog" -> "os.IsNotExist"
  "os.openFileNolog" -> "os.syscallMode"
  "os.open" -> "syscall.Open"
  "os.openFileNolog" -> "os.open"
  "os.setStickyBit" -> "os.Stat"
  "os.setStickyBit" -> "(*os.fileStat).Mode"
  "(*embed.file).IsDir" -> "embed.split"
  "(*embed.file).Mode" -> "(*embed.file).IsDir"
  "os.setStickyBit" -> "(*embed.file).Mode"
  "os.chmod" -> "os.fixLongPath"
  "os.chmod" -> "os.ignoringEINTR"
  "os.Chmod" -> "os.chmod"
  "os.setStickyBit" -> "os.Chmod"
  "os.openFileNolog" -> "os.setStickyBit"
  "syscall.CloseOnExec" -> "syscall.fcntl"
  "os.openFileNolog" -> "syscall.CloseOnExec"
  "os.openFileNolog" -> "internal/syscall/unix.HasNonblockFlag"
  "os.newFile" -> "os.ignoringEINTR"
  "(*internal/poll.FD).Init" -> "(*internal/poll.SysFile).init"
  "(*internal/poll.pollDesc).init" -> "(*sync.Once).Do"
  "(*internal/poll.pollDesc).init" -> "internal/poll.runtime_pollOpen"
  "(*internal/poll.pollDesc).init" -> "internal/poll.errnoErr"
  "(*internal/poll.FD).Init" -> "(*internal/poll.pollDesc).init"
  "os.newFile" -> "(*internal/poll.FD).Init"
  "os.newFile" -> "syscall.SetNonblock"
  "os.newFile" -> "syscall.SetNonblock"
  "os.newFile" -> "runtime.SetFinalizer"
  "os.openFileNolog" -> "os.newFile"
  "os.OpenFile" -> "os.openFileNolog"
  "os.Open" -> "os.OpenFile"
  "os.ReadFile" -> "os.Open"
  "(*os.dirInfo).close" -> "(*sync.Pool).Put"
  "(*os.file).close" -> "(*os.dirInfo).close"
  "(*internal/poll.fdMutex).increfAndClose" -> "sync/atomic.LoadUint64"
  "(*internal/poll.fdMutex).increfAndClose" -> "sync/atomic.CompareAndSwapUint64"
  "(*internal/poll.fdMutex).increfAndClose" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.fdMutex).increfAndClose" -> "internal/poll.runtime_Semrelease"
  "(*internal/poll.FD).Close" -> "(*internal/poll.fdMutex).increfAndClose"
  "(*internal/poll.FD).Close" -> "internal/poll.errClosing"
  "(*internal/poll.pollDesc).evict" -> "internal/poll.runtime_pollUnblock"
  "(*internal/poll.FD).Close" -> "(*internal/poll.pollDesc).evict"
  "(*internal/poll.FD).Close" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Close" -> "internal/poll.runtime_Semacquire"
  "(*os.file).close" -> "(*internal/poll.FD).Close"
  "(*os.file).close" -> "runtime.SetFinalizer"
  "(*os.File).Close" -> "(*os.file).close"
  "os.ReadFile" -> "(*os.File).Close"
  "(*internal/poll.FD).Fstat" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fstat" -> "(*internal/poll.FD).decref"
  "internal/poll.ignoringEINTR" -> "os.lstatNolog$1"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fchmod$1"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fchown$1"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fstat$1"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Fsync$1"
  "internal/poll.ignoringEINTR" -> "(*internal/poll.FD).Ftruncate$1"
  "internal/poll.ignoringEINTR" -> "os.newFile$1"
  "internal/poll.ignoringEINTR" -> "os.Mkdir$1"
  "internal/poll.ignoringEINTR" -> "os.statNolog$1"
  "internal/poll.ignoringEINTR" -> "os.Remove$1"
  "internal/poll.ignoringEINTR" -> "os.Remove$2"
  "internal/poll.ignoringEINTR" -> "os.chmod$1"
  "(*internal/poll.FD).Fstat" -> "internal/poll.ignoringEINTR"
  "(*os.File).Stat" -> "(*internal/poll.FD).Fstat"
  "(*os.File).Stat" -> "os.fillFileStatFromSys"
  "os.ReadFile" -> "(*os.File).Stat"
  "(*os.File).Read" -> "(*os.File).checkValid"
  "(*internal/poll.FD).readLock" -> "(*internal/poll.fdMutex).rwlock"
  "(*internal/poll.FD).readLock" -> "internal/poll.errClosing"
  "(*internal/poll.FD).Read" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).readUnlock" -> "(*internal/poll.fdMutex).rwunlock"
  "(*internal/poll.FD).readUnlock" -> "(*internal/poll.FD).destroy"
  "(*internal/poll.FD).Read" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.pollDesc).prepareRead" -> "(*internal/poll.pollDesc).prepare"
  "(*internal/poll.FD).Read" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).Read" -> "internal/poll.ignoringEINTRIO"
  "(*internal/poll.FD).Read" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.pollDesc).waitRead" -> "(*internal/poll.pollDesc).wait"
  "(*internal/poll.FD).Read" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).Read" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).read" -> "(*internal/poll.FD).Read"
  "(*os.File).read" -> "runtime.KeepAlive"
  "(*os.File).Read" -> "(*os.File).read"
  "(*os.File).Read" -> "(*os.File).wrapErr"
  "os.ReadFile" -> "(*os.File).Read"
  "os.ReadFile" -> "(*os.fileStat).Size"
  "os.ReadFile" -> "(*embed.file).Size"
  "periph.io/x/host/v3/distro.makeDTCompatible" -> "os.ReadFile"
  "strings.explode" -> "unicode/utf8.RuneCountInString"
  "strings.explode" -> "unicode/utf8.DecodeRuneInString"
  "strings.genSplit" -> "strings.explode"
  "strings.genSplit" -> "strings.Count"
  "strings.genSplit" -> "strings.Index"
  "strings.Split" -> "strings.genSplit"
  "periph.io/x/host/v3/distro.splitNull" -> "strings.Split"
  "periph.io/x/host/v3/distro.makeDTCompatible" -> "periph.io/x/host/v3/distro.splitNull"
  "periph.io/x/host/v3/distro.DTCompatible" -> "periph.io/x/host/v3/distro.makeDTCompatible"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "periph.io/x/host/v3/distro.DTCompatible"
  "strings.Contains" -> "strings.Index"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "strings.Contains"
  "periph.io/x/host/v3/distro.makeCPUInfoLinux" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/distro.makeCPUInfoLinux" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/distro.makeCPUInfoLinux" -> "os.ReadFile"
  "periph.io/x/host/v3/distro.splitSemiColon" -> "strings.Split"
  "strings.SplitN" -> "strings.genSplit"
  "periph.io/x/host/v3/distro.splitSemiColon" -> "strings.SplitN"
  "unicode/utf8.DecodeLastRuneInString" -> "unicode/utf8.RuneStart"
  "unicode/utf8.DecodeLastRuneInString" -> "unicode/utf8.DecodeRuneInString"
  "strings.lastIndexFunc" -> "unicode/utf8.DecodeLastRuneInString"
  "strings.lastIndexFunc" -> "periph.io/x/conn/v3/pin.isNum"
  "fmt.notSpace" -> "fmt.isSpace"
  "strings.lastIndexFunc" -> "fmt.notSpace"
  "unicode.isExcludingLatin" -> "unicode.is16"
  "unicode.isExcludingLatin" -> "unicode.is32"
  "unicode.IsSpace" -> "unicode.isExcludingLatin"
  "strings.lastIndexFunc" -> "unicode.IsSpace"
  "strings.TrimRightFunc" -> "strings.lastIndexFunc"
  "strings.TrimRightFunc" -> "unicode/utf8.DecodeRuneInString"
  "periph.io/x/host/v3/distro.splitSemiColon" -> "strings.TrimRightFunc"
  "strings.indexFunc" -> "fmt.notSpace"
  "strings.indexFunc" -> "unicode.IsSpace"
  "strings.indexFunc" -> "periph.io/x/conn/v3/pin.isNum"
  "strings.TrimLeftFunc" -> "strings.indexFunc"
  "strings.TrimFunc" -> "strings.TrimLeftFunc"
  "strings.TrimFunc" -> "strings.TrimRightFunc"
  "periph.io/x/host/v3/distro.splitSemiColon" -> "strings.TrimFunc"
  "periph.io/x/host/v3/distro.makeCPUInfoLinux" -> "periph.io/x/host/v3/distro.splitSemiColon"
  "periph.io/x/host/v3/distro.CPUInfo" -> "periph.io/x/host/v3/distro.makeCPUInfoLinux"
  "(*periph.io/x/host/v3/allwinner.detectionS).do" -> "periph.io/x/host/v3/distro.CPUInfo"
  "periph.io/x/host/v3/allwinner.IsA64" -> "(*periph.io/x/host/v3/allwinner.detectionS).do"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/allwinner.IsA64"
  "periph.io/x/host/v3/pmem.wrapf" -> "fmt.Errorf"
  "periph.io/x/host/v3/pmem.MapAsPOD" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.MapAsPOD" -> "reflect.ValueOf"
  "periph.io/x/host/v3/pmem.isPP" -> "(reflect.Value).Kind"
  "periph.io/x/host/v3/pmem.isPP" -> "(reflect.Value).Type"
  "(*reflect.rtype).Name" -> "(*internal/abi.Type).HasName"
  "(*reflect.rtype).Name" -> "(*reflect.rtype).String"
  "periph.io/x/host/v3/pmem.isPP" -> "(*reflect.rtype).Name"
  "periph.io/x/host/v3/pmem.isPP" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.isPP" -> "(reflect.Value).Elem"
  "periph.io/x/host/v3/pmem.isPP" -> "(reflect.Value).Kind"
  "periph.io/x/host/v3/pmem.isPP" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.isPP" -> "(reflect.Value).IsNil"
  "periph.io/x/host/v3/pmem.isPP" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.isPP" -> "(reflect.Value).Type"
  "periph.io/x/host/v3/pmem.isPP" -> "(*reflect.rtype).Elem"
  "periph.io/x/host/v3/pmem.isAcceptableInner" -> "(*reflect.rtype).Kind"
  "periph.io/x/host/v3/pmem.isAcceptableInner" -> "(*reflect.rtype).Elem"
  "periph.io/x/host/v3/pmem.isAcceptableInner" -> "periph.io/x/host/v3/pmem.isAcceptableInner"
  "periph.io/x/host/v3/pmem.isAcceptableInner" -> "periph.io/x/host/v3/pmem.wrapf"
  "(*reflect.rtype).NumField" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).NumField" -> "(*reflect.rtype).String"
  "periph.io/x/host/v3/pmem.isAcceptableInner" -> "(*reflect.rtype).NumField"
  "(*reflect.rtype).Field" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Field" -> "(*reflect.rtype).String"
  "(*reflect.structType).Field" -> "reflect.toType"
  "(*reflect.structType).Field" -> "(internal/abi.Name).Name"
  "(*reflect.structType).Field" -> "(*internal/abi.StructField).Embedded"
  "(*reflect.structType).Field" -> "(internal/abi.Name).IsExported"
  "(*reflect.structType).Field" -> "(internal/abi.Name).Name"
  "(internal/abi.Name).Tag" -> "(internal/abi.Name).HasTag"
  "(internal/abi.Name).Tag" -> "(internal/abi.Name).ReadVarint"
  "(internal/abi.Name).Tag" -> "(internal/abi.Name).ReadVarint"
  "(internal/abi.Name).Tag" -> "(internal/abi.Name).DataChecked"
  "(*reflect.structType).Field" -> "(internal/abi.Name).Tag"
  "(*reflect.rtype).Field" -> "(*reflect.structType).Field"
  "periph.io/x/host/v3/pmem.isAcceptableInner" -> "(*reflect.rtype).Field"
  "periph.io/x/host/v3/pmem.isAcceptableInner" -> "periph.io/x/host/v3/pmem.isAcceptableInner"
  "periph.io/x/host/v3/pmem.isPP" -> "periph.io/x/host/v3/pmem.isAcceptableInner"
  "(*reflect.rtype).Size" -> "(*internal/abi.Type).Size"
  "periph.io/x/host/v3/pmem.isPP" -> "(*reflect.rtype).Size"
  "periph.io/x/host/v3/pmem.MapAsPOD" -> "periph.io/x/host/v3/pmem.isPP"
  "periph.io/x/host/v3/pmem.openDevMemLinux" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/pmem.openDevMemLinux" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/fs.Open" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/fs.Open" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/fs.Open" -> "errors.New"
  "periph.io/x/host/v3/fs.Open" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/fs.Open" -> "os.OpenFile"
  "periph.io/x/host/v3/pmem.openFileOrig" -> "periph.io/x/host/v3/fs.Open"
  "periph.io/x/host/v3/pmem.openDevMemLinux" -> "periph.io/x/host/v3/pmem.openFileOrig"
  "periph.io/x/host/v3/pmem.openDevMemLinux" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.mapLinux" -> "periph.io/x/host/v3/pmem.openDevMemLinux"
  "periph.io/x/host/v3/pmem.mapLinux" -> "periph.io/x/host/v3/pmem.wrapf"
  "syscall.mmap" -> "syscall.Syscall6"
  "syscall.mmap" -> "syscall.errnoErr"
  "(*syscall.mmapper).Mmap" -> "syscall.mmap"
  "(*syscall.mmapper).Mmap" -> "(*sync.Mutex).Lock"
  "(*syscall.mmapper).Mmap" -> "(*sync.Mutex).Unlock"
  "syscall.Mmap" -> "(*syscall.mmapper).Mmap"
  "periph.io/x/host/v3/pmem.mmap" -> "syscall.Mmap"
  "periph.io/x/host/v3/pmem.mmap" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.mapLinux" -> "periph.io/x/host/v3/pmem.mmap"
  "periph.io/x/host/v3/pmem.mapLinux" -> "(*os.File).Fd"
  "periph.io/x/host/v3/pmem.Map" -> "periph.io/x/host/v3/pmem.mapLinux"
  "periph.io/x/host/v3/pmem.Map" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.MapAsPOD" -> "periph.io/x/host/v3/pmem.Map"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "periph.io/x/host/v3/pmem.wrapf"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "reflect.ValueOf"
  "periph.io/x/host/v3/pmem.isPS" -> "(reflect.Value).Kind"
  "periph.io/x/host/v3/pmem.isPS" -> "(reflect.Value).Type"
  "periph.io/x/host/v3/pmem.isPS" -> "(*reflect.rtype).Name"
  "periph.io/x/host/v3/pmem.isPS" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.isPS" -> "(reflect.Value).Elem"
  "periph.io/x/host/v3/pmem.isPS" -> "(reflect.Value).Kind"
  "periph.io/x/host/v3/pmem.isPS" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.isPS" -> "(reflect.Value).IsNil"
  "periph.io/x/host/v3/pmem.isPS" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.isPS" -> "(reflect.Value).Type"
  "periph.io/x/host/v3/pmem.isPS" -> "(*reflect.rtype).Elem"
  "periph.io/x/host/v3/pmem.isPS" -> "periph.io/x/host/v3/pmem.isAcceptableInner"
  "periph.io/x/host/v3/pmem.isPS" -> "(*reflect.rtype).Size"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "periph.io/x/host/v3/pmem.isPS"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(reflect.Value).Elem"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(reflect.Value).Type"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(*reflect.rtype).Elem"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "periph.io/x/host/v3/pmem.isPP"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "periph.io/x/host/v3/pmem.wrapf"
  "(reflect.Value).UnsafeAddr" -> "(reflect.Value).typ"
  "(reflect.Value).UnsafeAddr" -> "reflect.escapes"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(reflect.Value).UnsafeAddr"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(reflect.Value).Elem"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(reflect.Value).Type"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(*reflect.rtype).Elem"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "periph.io/x/host/v3/pmem.wrapf"
  "reflect.NewAt" -> "(*reflect.rtype).ptrTo"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "reflect.NewAt"
  "(reflect.flag).mustBeAssignableSlow" -> "reflect.valueMethodName"
  "(reflect.flag).mustBeAssignableSlow" -> "reflect.valueMethodName"
  "(reflect.flag).mustBeAssignableSlow" -> "reflect.valueMethodName"
  "(reflect.flag).mustBeAssignable" -> "(reflect.flag).mustBeAssignableSlow"
  "(reflect.Value).Set" -> "(reflect.flag).mustBeAssignable"
  "(reflect.flag).mustBeExportedSlow" -> "reflect.valueMethodName"
  "(reflect.flag).mustBeExportedSlow" -> "reflect.valueMethodName"
  "(reflect.flag).mustBeExported" -> "(reflect.flag).mustBeExportedSlow"
  "(reflect.Value).Set" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).Set" -> "(reflect.flag).kind"
  "(reflect.Value).Set" -> "(reflect.Value).typ"
  "(reflect.Value).assignTo" -> "reflect.makeMethodValue"
  "(reflect.Value).assignTo" -> "(reflect.Value).typ"
  "reflect.directlyAssignable" -> "(*internal/abi.Type).HasName"
  "reflect.directlyAssignable" -> "(*internal/abi.Type).Kind"
  "reflect.directlyAssignable" -> "(*internal/abi.Type).Kind"
  "reflect.directlyAssignable" -> "(*internal/abi.Type).Kind"
  "reflect.directlyAssignable" -> "(*internal/abi.Type).HasName"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Len"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Len"
  "(*internal/abi.Type).ChanDir" -> "(*internal/abi.Type).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).ChanDir"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).ChanDir"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.nameFor" -> "reflect.toRType"
  "reflect.nameFor" -> "(*reflect.rtype).Name"
  "reflect.haveIdenticalType" -> "reflect.nameFor"
  "reflect.haveIdenticalType" -> "reflect.nameFor"
  "reflect.haveIdenticalType" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.pkgPathFor" -> "reflect.toRType"
  "(*reflect.rtype).PkgPath" -> "(*reflect.rtype).uncommon"
  "(*reflect.rtype).PkgPath" -> "(*reflect.rtype).nameOff"
  "(*reflect.rtype).PkgPath" -> "(internal/abi.Name).Name"
  "reflect.pkgPathFor" -> "(*reflect.rtype).PkgPath"
  "reflect.haveIdenticalType" -> "reflect.pkgPathFor"
  "reflect.haveIdenticalType" -> "reflect.pkgPathFor"
  "reflect.haveIdenticalType" -> "(*internal/abi.Type).Kind"
  "reflect.haveIdenticalType" -> "(*internal/abi.Type).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).NumIn"
  "(*internal/abi.FuncType).In" -> "(*internal/abi.FuncType).InSlice"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).In"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).In"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).NumOut"
  "(*internal/abi.FuncType).Out" -> "(*internal/abi.FuncType).OutSlice"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).Out"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).Out"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "(*internal/abi.Type).Key" -> "(*internal/abi.Type).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Key"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Key"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "reflect.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "reflect.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "reflect.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "reflect.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "reflect.haveIdenticalUnderlyingType" -> "reflect.haveIdenticalType"
  "reflect.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Tag"
  "reflect.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Tag"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.StructField).Embedded"
  "reflect.haveIdenticalUnderlyingType" -> "(*internal/abi.StructField).Embedded"
  "reflect.directlyAssignable" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.specialChannelAssignability" -> "(*internal/abi.Type).ChanDir"
  "reflect.specialChannelAssignability" -> "(*internal/abi.Type).Elem"
  "reflect.specialChannelAssignability" -> "(*internal/abi.Type).Elem"
  "reflect.specialChannelAssignability" -> "reflect.haveIdenticalType"
  "reflect.specialChannelAssignability" -> "reflect.nameFor"
  "reflect.specialChannelAssignability" -> "reflect.nameFor"
  "reflect.directlyAssignable" -> "reflect.specialChannelAssignability"
  "(reflect.Value).assignTo" -> "reflect.directlyAssignable"
  "(reflect.Value).assignTo" -> "(reflect.flag).ro"
  "(reflect.Value).assignTo" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).assignTo" -> "(reflect.Value).Kind"
  "(reflect.Value).assignTo" -> "(reflect.Value).typ"
  "reflect.implements" -> "(*internal/abi.Type).Kind"
  "reflect.implements" -> "(*internal/abi.Type).Kind"
  "reflect.implements" -> "(*internal/abi.Type).Uncommon"
  "reflect.implements" -> "(*reflect.interfaceType).nameOff"
  "reflect.implements" -> "reflect.nameOffFor"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "reflect.implements" -> "(internal/abi.Name).IsExported"
  "reflect.implements" -> "reflect.typeOffFor"
  "reflect.implements" -> "(*reflect.interfaceType).typeOff"
  "reflect.pkgPath" -> "(internal/abi.Name).ReadVarint"
  "reflect.pkgPath" -> "(internal/abi.Name).HasTag"
  "reflect.pkgPath" -> "(internal/abi.Name).DataChecked"
  "reflect.pkgPath" -> "(internal/abi.Name).ReadVarint"
  "reflect.pkgPath" -> "(internal/abi.Name).DataChecked"
  "reflect.pkgPath" -> "reflect.resolveTypeOff"
  "reflect.pkgPath" -> "(internal/abi.Name).Name"
  "reflect.implements" -> "reflect.pkgPath"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "reflect.implements" -> "reflect.pkgPath"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "(*internal/abi.UncommonType).Methods" -> "internal/abi.addChecked"
  "reflect.implements" -> "(*internal/abi.UncommonType).Methods"
  "reflect.implements" -> "(*reflect.interfaceType).nameOff"
  "reflect.implements" -> "reflect.nameOffFor"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "reflect.implements" -> "(internal/abi.Name).IsExported"
  "reflect.implements" -> "reflect.typeOffFor"
  "reflect.implements" -> "(*reflect.interfaceType).typeOff"
  "reflect.implements" -> "reflect.pkgPath"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "reflect.implements" -> "reflect.pkgPath"
  "reflect.implements" -> "reflect.nameOffFor"
  "reflect.implements" -> "(internal/abi.Name).Name"
  "(reflect.Value).assignTo" -> "reflect.implements"
  "(reflect.Value).assignTo" -> "(reflect.Value).typ"
  "(reflect.Value).assignTo" -> "reflect.stringFor"
  "(reflect.Value).assignTo" -> "reflect.stringFor"
  "(reflect.Value).assignTo" -> "reflect.valueInterface"
  "(reflect.Value).assignTo" -> "(reflect.Value).IsNil"
  "(reflect.Value).assignTo" -> "reflect.unsafe_New"
  "(reflect.Value).assignTo" -> "(*internal/abi.Type).NumMethod"
  "(reflect.Value).assignTo" -> "reflect.ifaceE2I"
  "(reflect.Value).Set" -> "(reflect.Value).assignTo"
  "(reflect.Value).Set" -> "(reflect.Value).typ"
  "(reflect.Value).Set" -> "reflect.typedmemclr"
  "(reflect.Value).Set" -> "(reflect.Value).typ"
  "(reflect.Value).Set" -> "reflect.typedmemmove"
  "(*periph.io/x/host/v3/pmem.Slice).AsPOD" -> "(reflect.Value).Set"
  "periph.io/x/host/v3/pmem.MapAsPOD" -> "(*periph.io/x/host/v3/pmem.Slice).AsPOD"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "periph.io/x/host/v3/allwinner.IsR8" -> "(*periph.io/x/host/v3/allwinner.detectionS).do"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/allwinner.IsR8"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "errors.New"
  "os.IsPermission" -> "os.underlyingErrorIs"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "os.IsPermission"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "periph.io/x/host/v3/pmem.Alloc" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.allocLinux" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.uallocMem" -> "syscall.Mmap"
  "periph.io/x/host/v3/pmem.uallocMem" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.uallocMemLocked" -> "periph.io/x/host/v3/pmem.uallocMem"
  "syscall.Mlock" -> "syscall.Syscall"
  "syscall.Mlock" -> "syscall.errnoErr"
  "periph.io/x/host/v3/pmem.mlock" -> "syscall.Mlock"
  "periph.io/x/host/v3/pmem.mlock" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.uallocMemLocked" -> "periph.io/x/host/v3/pmem.mlock"
  "(*syscall.mmapper).Munmap" -> "(*sync.Mutex).Lock"
  "(*syscall.mmapper).Munmap" -> "(*sync.Mutex).Unlock"
  "syscall.munmap" -> "syscall.Syscall"
  "syscall.munmap" -> "syscall.errnoErr"
  "(*syscall.mmapper).Munmap" -> "syscall.munmap"
  "syscall.Munmap" -> "(*syscall.mmapper).Munmap"
  "periph.io/x/host/v3/pmem.munmap" -> "syscall.Munmap"
  "periph.io/x/host/v3/pmem.munmap" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.uallocMemLocked" -> "periph.io/x/host/v3/pmem.munmap"
  "periph.io/x/host/v3/pmem.uallocMemLocked" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.allocLinux" -> "periph.io/x/host/v3/pmem.uallocMemLocked"
  "periph.io/x/host/v3/pmem.allocLinux" -> "periph.io/x/host/v3/pmem.toRaw"
  "periph.io/x/host/v3/pmem.ReadPageMap" -> "errors.New"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "periph.io/x/host/v3/pmem.openFileOrig"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "fmt.Errorf"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "(encoding/binary.littleEndian).Uint64"
  "(*os.File).Seek" -> "(*os.File).checkValid"
  "(*os.File).seek" -> "(*os.dirInfo).close"
  "(*internal/poll.FD).Seek" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Seek" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Seek" -> "syscall.Seek"
  "(*os.File).seek" -> "(*internal/poll.FD).Seek"
  "(*os.File).seek" -> "runtime.KeepAlive"
  "(*os.File).Seek" -> "(*os.File).seek"
  "(*os.File).Seek" -> "(*os.File).wrapErr"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "(*os.File).Seek"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "fmt.Errorf"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "(*os.File).Read"
  "periph.io/x/host/v3/pmem.readPageMapLinux" -> "fmt.Errorf"
  "periph.io/x/host/v3/pmem.ReadPageMap" -> "periph.io/x/host/v3/pmem.readPageMapLinux"
  "periph.io/x/host/v3/pmem.isWSL" -> "(*sync.Once).Do"
  "periph.io/x/host/v3/pmem.ReadPageMap" -> "periph.io/x/host/v3/pmem.isWSL"
  "periph.io/x/host/v3/pmem.virtToPhys" -> "periph.io/x/host/v3/pmem.ReadPageMap"
  "periph.io/x/host/v3/pmem.virtToPhys" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.allocLinux" -> "periph.io/x/host/v3/pmem.virtToPhys"
  "periph.io/x/host/v3/pmem.allocLinux" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.allocLinux" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.Alloc" -> "periph.io/x/host/v3/pmem.allocLinux"
  "periph.io/x/host/v3/pmem.Alloc" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.Alloc" -> "periph.io/x/host/v3/pmem.isWSL"
  "periph.io/x/host/v3/allwinner.smokeTest$1" -> "periph.io/x/host/v3/pmem.Alloc"
  "periph.io/x/host/v3/pmem.TestCopy" -> "periph.io/x/host/v3/allwinner.smokeTest$1"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "(*periph.io/x/host/v3/pmem.View).Close" -> "periph.io/x/host/v3/pmem.munmap"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.View).Close"
  "(*periph.io/x/host/v3/videocore.Mem).Close" -> "(*periph.io/x/host/v3/pmem.View).Close"
  "periph.io/x/host/v3/videocore.wrapf" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/videocore.Mem).Close" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.mailboxTx32" -> "periph.io/x/host/v3/videocore.genPacket"
  "periph.io/x/host/v3/videocore.sendPacket" -> "fmt.Errorf"
  "periph.io/x/host/v3/videocore.sendPacket" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/videocore.messageBox).sendMessage" -> "(*periph.io/x/host/v3/fs.File).Ioctl"
  "periph.io/x/host/v3/videocore.sendPacket" -> "(*periph.io/x/host/v3/videocore.messageBox).sendMessage"
  "periph.io/x/host/v3/videocore.mailboxTx32" -> "periph.io/x/host/v3/videocore.sendPacket"
  "periph.io/x/host/v3/videocore.mailboxTx32" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/videocore.Mem).Close" -> "periph.io/x/host/v3/videocore.mailboxTx32"
  "(*periph.io/x/host/v3/videocore.Mem).Close" -> "periph.io/x/host/v3/videocore.wrapf"
  "(*periph.io/x/host/v3/videocore.Mem).Close" -> "periph.io/x/host/v3/videocore.mailboxTx32"
  "(*periph.io/x/host/v3/videocore.Mem).Close" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/pmem.TestCopy" -> "periph.io/x/host/v3/allwinner.smokeTest$1"
  "(*periph.io/x/host/v3/allwinner.dmaMap).getDedicated" -> "(*periph.io/x/host/v3/allwinner.dmaDedicatedGroup).isAvailable"
  "periph.io/x/host/v3/allwinner.smokeTest$2" -> "(*periph.io/x/host/v3/allwinner.dmaMap).getDedicated"
  "periph.io/x/host/v3/allwinner.smokeTest$2" -> "errors.New"
  "periph.io/x/host/v3/allwinner.smokeTest$2$1" -> "(*periph.io/x/host/v3/allwinner.dmaDedicatedGroup).release"
  "periph.io/x/host/v3/allwinner.smokeTest$2" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "log.Printf" -> "(*log.Logger).output"
  "(*periph.io/x/host/v3/allwinner.dmaDedicatedGroup).set" -> "log.Printf"
  "periph.io/x/host/v3/allwinner.smokeTest$2" -> "(*periph.io/x/host/v3/allwinner.dmaDedicatedGroup).set"
  "periph.io/x/host/v3/pmem.TestCopy" -> "periph.io/x/host/v3/allwinner.smokeTest$2"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.View).Close"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/pmem.TestCopy" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.Slice).Bytes"
  "periph.io/x/host/v3/pmem.TestCopy" -> "periph.io/x/host/v3/pmem.wrapf"
  "(*sync/atomic.Pointer[math/rand.Rand]).Load[math/rand.Rand]" -> "sync/atomic.LoadPointer"
  "math/rand.globalRand" -> "(*sync/atomic.Pointer[math/rand.Rand]).Load[math/rand.Rand]"
  "(*internal/godebug.Setting).Value" -> "(*sync.Once).Do"
  "(*sync/atomic.Pointer[internal/godebug.value]).Load[internal/godebug.value]" -> "sync/atomic.LoadPointer"
  "(*internal/godebug.Setting).Value" -> "(*sync/atomic.Pointer[internal/godebug.value]).Load[internal/godebug.value]"
  "(*internal/bisect.Matcher).stack" -> "runtime.Callers"
  "internal/bisect.Hash" -> "internal/bisect.fnvString"
  "internal/bisect.Hash" -> "internal/bisect.fnv"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint32"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint32"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvString"
  "internal/bisect.Hash" -> "internal/bisect.fnv"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint32"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint32"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "internal/bisect.Hash" -> "internal/bisect.fnvUint64"
  "(*internal/bisect.Matcher).stack" -> "internal/bisect.Hash"
  "(*internal/bisect.Matcher).ShouldPrint" -> "(*internal/bisect.Matcher).matchResult"
  "(*internal/bisect.Matcher).stack" -> "(*internal/bisect.Matcher).ShouldPrint"
  "(*internal/bisect.Matcher).ShouldEnable" -> "(*internal/bisect.Matcher).matchResult"
  "(*internal/bisect.Matcher).stack" -> "(*internal/bisect.Matcher).ShouldEnable"
  "(*internal/bisect.atomicPointerDedup).Load" -> "sync/atomic.LoadPointer"
  "(*internal/bisect.Matcher).stack" -> "(*internal/bisect.atomicPointerDedup).Load"
  "(*internal/bisect.Matcher).stack" -> "(*internal/bisect.Matcher).MarkerOnly"
  "(*internal/bisect.atomicPointerDedup).CompareAndSwap" -> "sync/atomic.CompareAndSwapPointer"
  "(*internal/bisect.Matcher).stack" -> "(*internal/bisect.atomicPointerDedup).CompareAndSwap"
  "(*internal/bisect.dedup).seenLossy" -> "sync/atomic.LoadUint64"
  "(*internal/bisect.dedup).seenLossy" -> "internal/bisect.fnvUint64"
  "(*internal/bisect.dedup).seenLossy" -> "sync/atomic.StoreUint64"
  "(*internal/bisect.Matcher).stack" -> "(*internal/bisect.dedup).seenLossy"
  "(*internal/bisect.dedup).seen" -> "(*sync.Mutex).Lock"
  "(*internal/bisect.dedup).seen" -> "(*sync.Mutex).Unlock"
  "(*internal/bisect.Matcher).stack" -> "(*internal/bisect.dedup).seen"
  "internal/bisect.PrintMarker" -> "internal/bisect.AppendMarker"
  "internal/bisect.PrintMarker" -> "(*bytes.Buffer).Write"
  "internal/bisect.PrintMarker" -> "(*os.File).Write"
  "internal/bisect.PrintMarker" -> "(*internal/poll.FD).Write"
  "internal/bisect.PrintMarker" -> "(io.discard).Write"
  "internal/bisect.PrintMarker" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "internal/bisect.PrintMarker" -> "(*fmt.pp).Write"
  "internal/bisect.PrintMarker" -> "(*bufio.Writer).Write"
  "internal/bisect.PrintMarker" -> "(*compress/flate.dictWriter).Write"
  "internal/bisect.PrintMarker" -> "(*strings.Builder).Write"
  "internal/bisect.PrintMarker" -> "(*hash/crc32.digest).Write"
  "internal/bisect.PrintMarker" -> "(*text/tabwriter.Writer).Write"
  "internal/bisect.PrintMarker" -> "(*compress/flate.Writer).Write"
  "internal/bisect.PrintMarker" -> "(*golang.org/x/text/transform.Writer).Write"
  "internal/bisect.PrintMarker" -> "(*compress/zlib.Writer).Write"
  "internal/bisect.PrintMarker" -> "(*internal/godebug.runtimeStderr).Write"
  "internal/bisect.PrintMarker" -> "(*image/png.encoder).Write"
  "internal/bisect.PrintMarker" -> "(*hash/adler32.digest).Write"
  "(*internal/bisect.Matcher).stack" -> "internal/bisect.PrintMarker"
  "internal/bisect.printStack" -> "internal/bisect.AppendMarker"
  "internal/bisect.printStack" -> "runtime.CallersFrames"
  "internal/bisect.printStack" -> "(*runtime.Frames).Next"
  "(*runtime.Func).Name" -> "(*runtime.Func).raw"
  "(*runtime.Func).Name" -> "(*runtime._func).isInlined"
  "(*runtime.Func).Name" -> "runtime.funcNameForPrint"
  "(*runtime.Func).funcInfo" -> "(*runtime.Func).raw"
  "(*runtime.Func).funcInfo" -> "(*runtime._func).funcInfo"
  "(*runtime.Func).Name" -> "(*runtime.Func).funcInfo"
  "(*runtime.Func).Name" -> "runtime.funcname"
  "(*runtime.Func).Name" -> "runtime.funcNameForPrint"
  "internal/bisect.printStack" -> "(*runtime.Func).Name"
  "internal/bisect.printStack" -> "internal/bisect.appendFileLine"
  "internal/bisect.printStack" -> "(*bytes.Buffer).Write"
  "internal/bisect.printStack" -> "(*os.File).Write"
  "internal/bisect.printStack" -> "(*internal/poll.FD).Write"
  "internal/bisect.printStack" -> "(io.discard).Write"
  "internal/bisect.printStack" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "internal/bisect.printStack" -> "(*fmt.pp).Write"
  "internal/bisect.printStack" -> "(*bufio.Writer).Write"
  "internal/bisect.printStack" -> "(*compress/flate.dictWriter).Write"
  "internal/bisect.printStack" -> "(*strings.Builder).Write"
  "internal/bisect.printStack" -> "(*hash/crc32.digest).Write"
  "internal/bisect.printStack" -> "(*text/tabwriter.Writer).Write"
  "internal/bisect.printStack" -> "(*compress/flate.Writer).Write"
  "internal/bisect.printStack" -> "(*golang.org/x/text/transform.Writer).Write"
  "internal/bisect.printStack" -> "(*compress/zlib.Writer).Write"
  "internal/bisect.printStack" -> "(*internal/godebug.runtimeStderr).Write"
  "internal/bisect.printStack" -> "(*image/png.encoder).Write"
  "internal/bisect.printStack" -> "(*hash/adler32.digest).Write"
  "(*internal/bisect.Matcher).stack" -> "internal/bisect.printStack"
  "(*internal/bisect.Matcher).Stack" -> "(*internal/bisect.Matcher).stack"
  "(*internal/godebug.Setting).Value" -> "(*internal/bisect.Matcher).Stack"
  "math/rand.globalRand" -> "(*internal/godebug.Setting).Value"
  "math/rand.globalRand" -> "(*internal/godebug.Setting).IncNonDefault"
  "math/rand.globalRand" -> "math/rand.New"
  "(*math/rand.lockedSource).seedPos" -> "(*sync.Mutex).Lock"
  "(*math/rand.rngSource).Seed" -> "math/rand.seedrand"
  "(*math/rand.rngSource).Seed" -> "math/rand.seedrand"
  "(*math/rand.rngSource).Seed" -> "math/rand.seedrand"
  "math/rand.newSource" -> "(*math/rand.rngSource).Seed"
  "(*math/rand.lockedSource).seed" -> "math/rand.newSource"
  "(*math/rand.lockedSource).seed" -> "(*math/rand.rngSource).Seed"
  "(*math/rand.lockedSource).seedPos" -> "(*math/rand.lockedSource).seed"
  "(*math/rand.lockedSource).seedPos" -> "(*sync.Mutex).Unlock"
  "(*math/rand.Rand).Seed" -> "(*math/rand.lockedSource).seedPos"
  "(*math/rand.Rand).Seed" -> "(*math/rand.rngSource).Seed"
  "(*math/rand.lockedSource).Seed" -> "(*sync.Mutex).Lock"
  "(*math/rand.lockedSource).Seed" -> "(*math/rand.lockedSource).seed"
  "(*math/rand.lockedSource).Seed" -> "(*sync.Mutex).Unlock"
  "(*math/rand.Rand).Seed" -> "(*math/rand.lockedSource).Seed"
  "(*math/rand.Rand).Seed" -> "(*math/rand.runtimeSource).Seed"
  "math/rand.globalRand" -> "(*math/rand.Rand).Seed"
  "(*sync/atomic.Pointer[math/rand.Rand]).CompareAndSwap[math/rand.Rand]" -> "sync/atomic.CompareAndSwapPointer"
  "math/rand.globalRand" -> "(*sync/atomic.Pointer[math/rand.Rand]).CompareAndSwap[math/rand.Rand]"
  "math/rand.globalRand" -> "(*sync/atomic.Pointer[math/rand.Rand]).Load[math/rand.Rand]"
  "math/rand.Int31" -> "math/rand.globalRand"
  "(*math/rand.rngSource).Int63" -> "(*math/rand.rngSource).Uint64"
  "(*math/rand.Rand).Int63" -> "(*math/rand.rngSource).Int63"
  "(*math/rand.lockedSource).Int63" -> "(*sync.Mutex).Lock"
  "(*math/rand.lockedSource).Int63" -> "(*math/rand.rngSource).Int63"
  "(*math/rand.lockedSource).Int63" -> "(*sync.Mutex).Unlock"
  "(*math/rand.Rand).Int63" -> "(*math/rand.lockedSource).Int63"
  "(*math/rand.runtimeSource).Int63" -> "math/rand.runtime_rand"
  "(*math/rand.Rand).Int63" -> "(*math/rand.runtimeSource).Int63"
  "(*math/rand.Rand).Int31" -> "(*math/rand.Rand).Int63"
  "math/rand.Int31" -> "(*math/rand.Rand).Int31"
  "periph.io/x/host/v3/pmem.TestCopy" -> "math/rand.Int31"
  "periph.io/x/host/v3/pmem.TestCopy" -> "bytes.Equal"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.Slice).Bytes"
  "periph.io/x/host/v3/pmem.TestCopy" -> "periph.io/x/host/v3/pmem.wrapf"
  "syscall.Munlock" -> "syscall.Syscall"
  "syscall.Munlock" -> "syscall.errnoErr"
  "periph.io/x/host/v3/pmem.munlock" -> "syscall.Munlock"
  "periph.io/x/host/v3/pmem.munlock" -> "periph.io/x/host/v3/pmem.wrapf"
  "(*periph.io/x/host/v3/pmem.MemAlloc).Close" -> "periph.io/x/host/v3/pmem.munlock"
  "(*periph.io/x/host/v3/pmem.MemAlloc).Close" -> "periph.io/x/host/v3/pmem.munmap"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.MemAlloc).Close"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "periph.io/x/host/v3/pmem.TestCopy" -> "(*periph.io/x/host/v3/pmem.MemAlloc).Close"
  "periph.io/x/host/v3/allwinner.smokeTest" -> "periph.io/x/host/v3/pmem.TestCopy"
  "(*periph.io/x/host/v3/allwinner.driverDMA).Init" -> "periph.io/x/host/v3/allwinner.smokeTest"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/allwinner.driverDMA).Init"
  "periph.io/x/host/v3/allwinner.Present" -> "(*periph.io/x/host/v3/allwinner.detectionS).do"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.Present"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.IsA64"
  "syscall.readlinkat" -> "syscall.BytePtrFromString"
  "syscall.readlinkat" -> "syscall.Syscall6"
  "syscall.readlinkat" -> "syscall.errnoErr"
  "syscall.Readlink" -> "syscall.readlinkat"
  "os.readlink" -> "syscall.Readlink"
  "os.readlink" -> "os.fixCount"
  "os.Readlink" -> "os.readlink"
  "periph.io/x/host/v3/allwinner.getBaseAddress" -> "os.Readlink"
  "path.Base" -> "internal/bytealg.LastIndexByteString"
  "periph.io/x/host/v3/allwinner.getBaseAddress" -> "path.Base"
  "periph.io/x/host/v3/allwinner.getBaseAddress" -> "strings.SplitN"
  "periph.io/x/host/v3/allwinner.getBaseAddress" -> "strconv.ParseUint"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.getBaseAddress"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "periph.io/x/host/v3/allwinner.mapA64Pins" -> "strings.Contains"
  "periph.io/x/host/v3/allwinner.mapA64Pins" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.mapA64Pins"
  "periph.io/x/host/v3/allwinner.mapR8Pins" -> "strings.Contains"
  "periph.io/x/host/v3/allwinner.mapR8Pins" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.mapR8Pins"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.IsR8"
  "periph.io/x/host/v3/allwinner.mapA20Pins" -> "strings.Contains"
  "periph.io/x/host/v3/allwinner.mapA20Pins" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "periph.io/x/host/v3/allwinner.mapA20Pins" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.mapA20Pins"
  "periph.io/x/host/v3/allwinner.IsA20" -> "(*periph.io/x/host/v3/allwinner.detectionS).do"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.IsA20"
  "periph.io/x/host/v3/allwinner.mapH3Pins" -> "strings.HasPrefix"
  "periph.io/x/host/v3/allwinner.mapH3Pins" -> "strconv.Atoi"
  "periph.io/x/host/v3/allwinner.mapH3Pins" -> "strings.Contains"
  "periph.io/x/host/v3/allwinner.mapH3Pins" -> "(*periph.io/x/host/v3/allwinner.PinPL).Number"
  "periph.io/x/host/v3/allwinner.mapH3Pins" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "periph.io/x/host/v3/allwinner.mapH3Pins" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.mapH3Pins"
  "periph.io/x/host/v3/allwinner.IsH3" -> "(*periph.io/x/host/v3/allwinner.detectionS).do"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.IsH3"
  "periph.io/x/host/v3/allwinner.mapH5Pins" -> "strings.Contains"
  "periph.io/x/host/v3/allwinner.mapH5Pins" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.mapH5Pins"
  "periph.io/x/host/v3/allwinner.IsH5" -> "(*periph.io/x/host/v3/allwinner.detectionS).do"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.IsH5"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "os.IsPermission"
  "periph.io/x/host/v3/allwinner.initPins" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "periph.io/x/host/v3/allwinner.initPins" -> "strconv.Itoa"
  "periph.io/x/conn/v3/gpio/gpioreg.Unregister" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/gpio/gpioreg.Unregister" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/gpio/gpioreg.Unregister" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.Unregister" -> "errors.New"
  "periph.io/x/host/v3/allwinner.initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.Unregister"
  "periph.io/x/host/v3/allwinner.initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.Unregister"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/bcm283x.Pin).Name"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/sysfs.Pin).Name"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(periph.io/x/conn/v3/gpio.invalidPin).Name"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).Name"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/allwinner.PinPL).Name"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/allwinner.Pin).Name"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).Real"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/bcm283x.Pin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/sysfs.Pin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(periph.io/x/conn/v3/gpio.invalidPin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "errors.New"
  "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String" -> "(*periph.io/x/host/v3/bcm283x.Pin).Name"
  "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String" -> "(*periph.io/x/host/v3/sysfs.Pin).Name"
  "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String" -> "(periph.io/x/conn/v3/gpio.invalidPin).Name"
  "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String" -> "(*periph.io/x/host/v3/allwinner.Pin).Name"
  "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).Name"
  "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String" -> "(*periph.io/x/host/v3/allwinner.PinPL).Name"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "strconv.Quote"
  "(*periph.io/x/host/v3/allwinner.PinPL).String" -> "(*periph.io/x/host/v3/allwinner.PinPL).Number"
  "(*periph.io/x/host/v3/allwinner.PinPL).String" -> "fmt.Sprintf"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/allwinner.PinPL).String"
  "(*periph.io/x/host/v3/allwinner.Pin).String" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "(*periph.io/x/host/v3/allwinner.Pin).String" -> "fmt.Sprintf"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/allwinner.Pin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/bcm283x.Pin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/sysfs.Pin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(periph.io/x/conn/v3/gpio.invalidPin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/allwinner.Pin).String"
  "periph.io/x/conn/v3/gpio/gpioreg.Register" -> "(*periph.io/x/host/v3/allwinner.PinPL).String"
  "periph.io/x/host/v3/allwinner.initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.Register"
  "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias" -> "errors.New"
  "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias" -> "errors.New"
  "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias" -> "strconv.Quote"
  "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias" -> "errors.New"
  "periph.io/x/host/v3/allwinner.initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "periph.io/x/host/v3/allwinner.initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "(*periph.io/x/host/v3/allwinner.Pin).function"
  "(*periph.io/x/host/v3/sysfs.Pin).Func" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.Pin).Func" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "errors.New"
  "periph.io/x/host/v3/sysfs.fileIOOpenDefault" -> "periph.io/x/host/v3/fs.Open"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "periph.io/x/host/v3/sysfs.fileIOOpenDefault"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "os.IsNotExist"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "periph.io/x/host/v3/sysfs.fileIOOpenDefault"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "strconv.Itoa"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*bytes.Buffer).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*os.File).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*internal/poll.FD).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(io.discard).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*fmt.pp).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*bufio.Writer).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*compress/flate.dictWriter).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*os.File).Close"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*hash/crc32.digest).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "periph.io/x/host/v3/sysfs.isErrBusy"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "periph.io/x/host/v3/sysfs.fileIOOpenDefault"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "os.IsPermission"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "time.Since"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*internal/godebug.runtimeStderr).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*hash/adler32.digest).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*text/tabwriter.Writer).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*image/png.encoder).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*compress/zlib.Writer).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*compress/flate.Writer).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "(*strings.Builder).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "os.IsPermission"
  "(*periph.io/x/host/v3/sysfs.Pin).open" -> "time.Now"
  "(*periph.io/x/host/v3/sysfs.Pin).Func" -> "(*periph.io/x/host/v3/sysfs.Pin).open"
  "periph.io/x/host/v3/sysfs.seekRead" -> "(*os.File).Seek"
  "periph.io/x/host/v3/sysfs.seekRead" -> "(*os.File).Read"
  "(*periph.io/x/host/v3/sysfs.Pin).Func" -> "periph.io/x/host/v3/sysfs.seekRead"
  "(*periph.io/x/host/v3/sysfs.Pin).Read" -> "periph.io/x/host/v3/sysfs.seekRead"
  "(*periph.io/x/host/v3/sysfs.Pin).Func" -> "(*periph.io/x/host/v3/sysfs.Pin).Read"
  "(*periph.io/x/host/v3/sysfs.Pin).Func" -> "(*periph.io/x/host/v3/sysfs.Pin).Read"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "(*periph.io/x/host/v3/sysfs.Pin).Func"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "(*periph.io/x/host/v3/allwinner.Pin).FastRead"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "(*periph.io/x/host/v3/allwinner.Pin).FastRead"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "(*periph.io/x/host/v3/allwinner.Pin).FastRead"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.Pin).Func" -> "(*periph.io/x/host/v3/allwinner.Pin).FastRead"
  "periph.io/x/host/v3/allwinner.initPins" -> "(*periph.io/x/host/v3/allwinner.Pin).Func"
  "periph.io/x/host/v3/allwinner.initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/allwinner.Pin).SupportedFuncs" -> "strings.Contains"
  "periph.io/x/host/v3/allwinner.initPins" -> "(*periph.io/x/host/v3/allwinner.Pin).SupportedFuncs"
  "periph.io/x/host/v3/allwinner.initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "periph.io/x/host/v3/allwinner.initPins"
  "(*periph.io/x/host/v3/allwinner.driverGPIO).Init" -> "fmt.Errorf"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).Init"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/host/v3/allwinner.IsA64"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "(*periph.io/x/host/v3/allwinner.PinPL).Name"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "(*periph.io/x/host/v3/allwinner.PinPL).Number"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "strconv.Itoa"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.Unregister"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.Unregister"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.Register"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/allwinner.PinPL).Func" -> "(*periph.io/x/host/v3/allwinner.PinPL).function"
  "(*periph.io/x/host/v3/allwinner.PinPL).Func" -> "(*periph.io/x/host/v3/sysfs.Pin).Func"
  "(*periph.io/x/host/v3/allwinner.PinPL).Func" -> "(*periph.io/x/host/v3/allwinner.PinPL).FastRead"
  "(*periph.io/x/host/v3/allwinner.PinPL).Func" -> "(*periph.io/x/host/v3/allwinner.PinPL).FastRead"
  "(*periph.io/x/host/v3/allwinner.PinPL).Func" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.PinPL).Func" -> "(*periph.io/x/host/v3/allwinner.PinPL).FastRead"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "(*periph.io/x/host/v3/allwinner.PinPL).Func"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/allwinner.PinPL).SupportedFuncs" -> "strings.Contains"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "(*periph.io/x/host/v3/allwinner.PinPL).SupportedFuncs"
  "periph.io/x/host/v3/allwinner.getBaseAddressPL" -> "os.Readlink"
  "periph.io/x/host/v3/allwinner.getBaseAddressPL" -> "path.Base"
  "periph.io/x/host/v3/allwinner.getBaseAddressPL" -> "strings.SplitN"
  "periph.io/x/host/v3/allwinner.getBaseAddressPL" -> "strconv.ParseUint"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/host/v3/allwinner.getBaseAddressPL"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/host/v3/pmem.Map"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "os.IsPermission"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "(*periph.io/x/host/v3/pmem.Slice).AsPOD"
  "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init" -> "fmt.Errorf"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Init"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "os.IsPermission"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/host/v3/bcm283x.driverDMA).Init" -> "periph.io/x/host/v3/pmem.MapAsPOD"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).Init"
  "periph.io/x/host/v3/bcm283x.Present" -> "periph.io/x/host/v3/distro.DTCompatible"
  "periph.io/x/host/v3/bcm283x.Present" -> "strings.HasPrefix"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/host/v3/bcm283x.Present"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/host/v3/distro.DTCompatible"
  "strings.Join" -> "(*strings.Builder).Grow"
  "strings.Join" -> "(*strings.Builder).WriteString"
  "strings.Join" -> "(*strings.Builder).WriteString"
  "strings.Join" -> "(*strings.Builder).WriteString"
  "strings.Join" -> "(*strings.Builder).String"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strings.Join"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strings.Contains"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strings.Contains"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strings.Contains"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strings.Contains"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strings.Contains"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strings.Contains"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "strconv.Itoa"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.Unregister"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.Unregister"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.Register"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/bcm283x.Pin).Func" -> "(*periph.io/x/host/v3/bcm283x.Pin).function"
  "(*periph.io/x/host/v3/bcm283x.Pin).Func" -> "(*periph.io/x/host/v3/sysfs.Pin).Func"
  "(*periph.io/x/host/v3/bcm283x.Pin).Func" -> "(*periph.io/x/host/v3/bcm283x.Pin).FastRead"
  "(*periph.io/x/host/v3/bcm283x.Pin).Func" -> "(*periph.io/x/host/v3/bcm283x.Pin).FastRead"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "(*periph.io/x/host/v3/bcm283x.Pin).Func"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "(*periph.io/x/host/v3/bcm283x.Pin).SupportedFuncs"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "periph.io/x/host/v3/pmem.openFileOrig"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "periph.io/x/host/v3/pmem.mmap"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "(*os.File).Close"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "periph.io/x/host/v3/pmem.wrapf"
  "periph.io/x/host/v3/pmem.mapGPIOLinux" -> "(*os.File).Fd"
  "periph.io/x/host/v3/pmem.MapGPIO" -> "periph.io/x/host/v3/pmem.mapGPIOLinux"
  "periph.io/x/host/v3/pmem.MapGPIO" -> "periph.io/x/host/v3/pmem.wrapf"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/host/v3/pmem.MapGPIO"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/host/v3/pmem.Map"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "(*periph.io/x/host/v3/pmem.Slice).AsPOD"
  "periph.io/x/host/v3/distro.makeOSReleaseLinux" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/distro.makeOSReleaseLinux" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/distro.makeOSReleaseLinux" -> "os.ReadFile"
  "periph.io/x/host/v3/distro.splitStrict" -> "strings.Split"
  "periph.io/x/host/v3/distro.splitStrict" -> "strings.SplitN"
  "strconv.index" -> "internal/bytealg.IndexByteString"
  "strconv.unquote" -> "strconv.index"
  "strconv.contains" -> "strconv.index"
  "strconv.unquote" -> "strconv.contains"
  "strconv.unquote" -> "strconv.contains"
  "strconv.unquote" -> "strconv.contains"
  "strconv.unquote" -> "unicode/utf8.ValidString"
  "strconv.unquote" -> "unicode/utf8.DecodeRuneInString"
  "strconv.UnquoteChar" -> "unicode/utf8.DecodeRuneInString"
  "strconv.UnquoteChar" -> "strconv.unhex"
  "strconv.UnquoteChar" -> "unicode/utf8.ValidRune"
  "strconv.unquote" -> "strconv.UnquoteChar"
  "strconv.unquote" -> "unicode/utf8.AppendRune"
  "strconv.Unquote" -> "strconv.unquote"
  "periph.io/x/host/v3/distro.splitStrict" -> "strconv.Unquote"
  "periph.io/x/host/v3/distro.makeOSReleaseLinux" -> "periph.io/x/host/v3/distro.splitStrict"
  "periph.io/x/host/v3/distro.OSRelease" -> "periph.io/x/host/v3/distro.makeOSReleaseLinux"
  "periph.io/x/host/v3/distro.IsRaspbian" -> "periph.io/x/host/v3/distro.OSRelease"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/host/v3/distro.IsRaspbian"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "os.IsNotExist"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "os.IsPermission"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "os.IsPermission"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "fmt.Errorf"
  "periph.io/x/host/v3/sysfs.I2CSetSpeedHook" -> "errors.New"
  "periph.io/x/host/v3/sysfs.I2CSetSpeedHook" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/sysfs.I2CSetSpeedHook" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/sysfs.I2CSetSpeedHook" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init" -> "periph.io/x/host/v3/sysfs.I2CSetSpeedHook"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).Init"
  "periph.io/x/host/v3/distro.DTModel" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/distro.DTModel" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/distro.makeDTModelLinux" -> "os.ReadFile"
  "periph.io/x/host/v3/distro.makeDTModelLinux" -> "periph.io/x/host/v3/distro.splitNull"
  "periph.io/x/host/v3/distro.DTModel" -> "periph.io/x/host/v3/distro.makeDTModelLinux"
  "periph.io/x/host/v3/pine64.Present" -> "periph.io/x/host/v3/distro.DTModel"
  "periph.io/x/host/v3/pine64.Present" -> "strings.HasPrefix"
  "(*periph.io/x/host/v3/pine64.driver).Init" -> "periph.io/x/host/v3/pine64.Present"
  "(*periph.io/x/host/v3/pine64.driver).Init" -> "errors.New"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "strconv.Itoa"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "strconv.Itoa"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(periph.io/x/conn/v3/gpio.invalidPin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/sysfs.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/allwinner.PinPL).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/allwinner.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*os.SyscallError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(time.fileSizeError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/bcm283x.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/conn/v3/pin.BasicPin).Name"
  "periph.io/x/conn/v3/pin/pinreg.realPin" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).Real"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "periph.io/x/conn/v3/pin/pinreg.realPin"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(periph.io/x/conn/v3/gpio.invalidPin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/sysfs.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/allwinner.PinPL).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/allwinner.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*internal/reflectlite.ValueError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*internal/bisect.parseError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/bcm283x.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/conn/v3/pin.BasicPin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "strconv.Itoa"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(periph.io/x/conn/v3/gpio.invalidPin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/sysfs.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/allwinner.PinPL).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/allwinner.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*runtime.TypeAssertionError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/host/v3/bcm283x.Pin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*periph.io/x/conn/v3/pin.BasicPin).Name"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "strconv.Quote"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "errors.New"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "strconv.Itoa"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "periph.io/x/conn/v3/gpio/gpioreg.Unregister"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*errors.errorString).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(runtime.errorString).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*internal/reflectlite.ValueError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(syscall.Errno).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*encoding/json.UnsupportedTypeError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*internal/poll.DeadlineExceededError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(context.deadlineExceededError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(compress/flate.CorruptInputError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*time.ParseError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*io/fs.PathError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*reflect.ValueError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(runtime.plainError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*encoding/json.UnmarshalTypeError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(image/png.FormatError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*fmt.wrapError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*fmt.wrapErrors).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(internal/poll.errNetClosing).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*runtime.TypeAssertionError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*encoding/json.UnsupportedValueError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(encoding/base64.CorruptInputError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*encoding/json.MarshalerError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*os.SyscallError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(time.fileSizeError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*strconv.NumError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*encoding/json.SyntaxError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "errors.New"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(runtime.errorAddressString).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(compress/flate.InternalError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(image/jpeg.FormatError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(*internal/bisect.parseError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(image/png.UnsupportedError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(image/jpeg.UnsupportedError).Error"
  "periph.io/x/conn/v3/pin/pinreg.unregister" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "periph.io/x/conn/v3/pin/pinreg.unregister"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*errors.errorString).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(runtime.errorString).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*encoding/json.UnmarshalTypeError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(syscall.Errno).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*encoding/json.UnsupportedTypeError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*internal/poll.DeadlineExceededError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(context.deadlineExceededError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(compress/flate.CorruptInputError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*time.ParseError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*io/fs.PathError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*reflect.ValueError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(runtime.plainError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(image/png.FormatError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(image/jpeg.FormatError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*fmt.wrapError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*fmt.wrapErrors).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(internal/poll.errNetClosing).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*encoding/json.UnsupportedValueError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(encoding/base64.CorruptInputError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*encoding/json.MarshalerError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(image/png.UnsupportedError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(compress/flate.InternalError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*strconv.NumError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(*encoding/json.SyntaxError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(image/jpeg.UnsupportedError).Error"
  "periph.io/x/conn/v3/pin/pinreg.Register" -> "(runtime.errorAddressString).Error"
  "(*periph.io/x/host/v3/pine64.driver).Init" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/pine64.driver).Init" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/pine64.driver).Init" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/pine64.driver).Init" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/pine64.driver).Init" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/pine64.driver).Init"
  "periph.io/x/host/v3/rpi.Present" -> "os.Stat"
  "(*periph.io/x/host/v3/rpi.driver).Init" -> "periph.io/x/host/v3/rpi.Present"
  "(*periph.io/x/host/v3/rpi.driver).Init" -> "errors.New"
  "periph.io/x/host/v3/distro.DTRevision" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/distro.DTRevision" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/distro.DTRevision" -> "os.ReadFile"
  "periph.io/x/host/v3/distro.DTRevision" -> "(encoding/binary.bigEndian).Uint32"
  "(*periph.io/x/host/v3/rpi.driver).Init" -> "periph.io/x/host/v3/distro.DTRevision"
  "(*periph.io/x/host/v3/rpi.driver).Init" -> "fmt.Errorf"
  "periph.io/x/host/v3/rpi.parseRevision" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/rpi.features).init" -> "periph.io/x/host/v3/rpi.parseRevision"
  "(*periph.io/x/host/v3/rpi.features).init" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/rpi.driver).Init" -> "(*periph.io/x/host/v3/rpi.features).init"
  "(*periph.io/x/host/v3/rpi.features).registerHeaders" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/rpi.features).registerHeaders" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/rpi.features).registerHeaders" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/rpi.features).registerHeaders" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/rpi.features).registerHeaders" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/rpi.features).registerHeaders" -> "periph.io/x/conn/v3/pin/pinreg.Register"
  "(*periph.io/x/host/v3/rpi.driver).Init" -> "(*periph.io/x/host/v3/rpi.features).registerHeaders"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/rpi.driver).Init"
  "path/filepath.Match" -> "path/filepath.scanChunk"
  "path/filepath.Match" -> "strings.Contains"
  "path/filepath.matchChunk" -> "unicode/utf8.DecodeRuneInString"
  "path/filepath.getEsc" -> "unicode/utf8.DecodeRuneInString"
  "path/filepath.matchChunk" -> "path/filepath.getEsc"
  "path/filepath.matchChunk" -> "path/filepath.getEsc"
  "path/filepath.matchChunk" -> "unicode/utf8.DecodeRuneInString"
  "path/filepath.Match" -> "path/filepath.matchChunk"
  "path/filepath.Match" -> "path/filepath.matchChunk"
  "path/filepath.globWithLimit" -> "path/filepath.Match"
  "strings.IndexRune" -> "strings.IndexByte"
  "strings.IndexRune" -> "unicode/utf8.ValidRune"
  "strings.IndexRune" -> "strings.Index"
  "strings.IndexAny" -> "strings.IndexRune"
  "strings.IndexAny" -> "strings.makeASCIISet"
  "strings.IndexAny" -> "(*strings.asciiSet).contains"
  "strings.IndexAny" -> "strings.IndexRune"
  "strings.ContainsAny" -> "strings.IndexAny"
  "path/filepath.hasMeta" -> "strings.ContainsAny"
  "path/filepath.globWithLimit" -> "path/filepath.hasMeta"
  "os.Lstat" -> "internal/testlog.Stat"
  "os.lstatNolog" -> "os.ignoringEINTR"
  "os.lstatNolog" -> "os.fillFileStatFromSys"
  "os.Lstat" -> "os.lstatNolog"
  "path/filepath.globWithLimit" -> "os.Lstat"
  "path/filepath.VolumeName" -> "path/filepath.volumeNameLen"
  "path/filepath.FromSlash" -> "strings.ReplaceAll"
  "path/filepath.VolumeName" -> "path/filepath.FromSlash"
  "path/filepath.Split" -> "path/filepath.VolumeName"
  "path/filepath.Split" -> "os.IsPathSeparator"
  "path/filepath.globWithLimit" -> "path/filepath.Split"
  "path/filepath.cleanGlobPathWindows" -> "path/filepath.volumeNameLen"
  "path/filepath.cleanGlobPathWindows" -> "os.IsPathSeparator"
  "path/filepath.globWithLimit" -> "path/filepath.cleanGlobPathWindows"
  "path/filepath.globWithLimit" -> "path/filepath.hasMeta"
  "path/filepath.globWithLimit" -> "path/filepath.cleanGlobPath"
  "path/filepath.glob" -> "os.Stat"
  "(*os.fileStat).IsDir" -> "(*os.fileStat).Mode"
  "(*os.fileStat).IsDir" -> "(io/fs.FileMode).IsDir"
  "path/filepath.glob" -> "(*os.fileStat).IsDir"
  "path/filepath.glob" -> "(*embed.file).IsDir"
  "path/filepath.glob" -> "os.Open"
  "path/filepath.glob" -> "(*os.File).Close"
  "(*os.File).readdir" -> "(*sync.Pool).Get"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).ReadDirent" -> "internal/poll.ignoringEINTRIO"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadDirent" -> "(*internal/poll.pollDesc).pollable"
  "(*os.File).readdir" -> "(*internal/poll.FD).ReadDirent"
  "(*os.File).readdir" -> "runtime.KeepAlive"
  "os.readInt" -> "os.readIntBE"
  "os.readInt" -> "os.readIntLE"
  "os.direntReclen" -> "os.readInt"
  "(*os.File).readdir" -> "os.direntReclen"
  "os.direntIno" -> "os.readInt"
  "(*os.File).readdir" -> "os.direntIno"
  "os.direntNamlen" -> "os.direntReclen"
  "(*os.File).readdir" -> "os.direntNamlen"
  "(*os.File).readdir" -> "os.direntType"
  "os.newUnixDirent" -> "os.Lstat"
  "os.newUnixDirent" -> "(*os.fileStat).Mode"
  "os.newUnixDirent" -> "(*embed.file).Mode"
  "os.newUnixDirent" -> "(io/fs.FileMode).Type"
  "(*os.File).readdir" -> "os.newUnixDirent"
  "(*os.File).readdir" -> "os.IsNotExist"
  "(*os.File).readdir" -> "os.Lstat"
  "(*os.File).readdir" -> "os.IsNotExist"
  "(*os.File).Readdirnames" -> "(*os.File).readdir"
  "path/filepath.glob" -> "(*os.File).Readdirnames"
  "slices.Sort[[]string string]" -> "math/bits.Len"
  "cmp.Less[string]" -> "cmp.isNaN[string]"
  "cmp.Less[string]" -> "cmp.isNaN[string]"
  "slices.insertionSortOrdered[string]" -> "cmp.Less[string]"
  "slices.pdqsortOrdered[string]" -> "slices.insertionSortOrdered[string]"
  "slices.siftDownOrdered[string]" -> "cmp.Less[string]"
  "slices.siftDownOrdered[string]" -> "cmp.Less[string]"
  "slices.heapSortOrdered[string]" -> "slices.siftDownOrdered[string]"
  "slices.heapSortOrdered[string]" -> "slices.siftDownOrdered[string]"
  "slices.pdqsortOrdered[string]" -> "slices.heapSortOrdered[string]"
  "slices.nextPowerOfTwo" -> "math/bits.Len"
  "slices.breakPatternsOrdered[string]" -> "slices.nextPowerOfTwo"
  "slices.breakPatternsOrdered[string]" -> "(*slices.xorshift).Next"
  "slices.pdqsortOrdered[string]" -> "slices.breakPatternsOrdered[string]"
  "slices.order2Ordered[string]" -> "cmp.Less[string]"
  "slices.medianOrdered[string]" -> "slices.order2Ordered[string]"
  "slices.medianOrdered[string]" -> "slices.order2Ordered[string]"
  "slices.medianOrdered[string]" -> "slices.order2Ordered[string]"
  "slices.medianAdjacentOrdered[string]" -> "slices.medianOrdered[string]"
  "slices.choosePivotOrdered[string]" -> "slices.medianAdjacentOrdered[string]"
  "slices.choosePivotOrdered[string]" -> "slices.medianAdjacentOrdered[string]"
  "slices.choosePivotOrdered[string]" -> "slices.medianAdjacentOrdered[string]"
  "slices.choosePivotOrdered[string]" -> "slices.medianOrdered[string]"
  "slices.pdqsortOrdered[string]" -> "slices.choosePivotOrdered[string]"
  "slices.pdqsortOrdered[string]" -> "slices.reverseRangeOrdered[string]"
  "slices.partialInsertionSortOrdered[string]" -> "cmp.Less[string]"
  "slices.partialInsertionSortOrdered[string]" -> "cmp.Less[string]"
  "slices.partialInsertionSortOrdered[string]" -> "cmp.Less[string]"
  "slices.pdqsortOrdered[string]" -> "slices.partialInsertionSortOrdered[string]"
  "slices.partitionEqualOrdered[string]" -> "cmp.Less[string]"
  "slices.partitionEqualOrdered[string]" -> "cmp.Less[string]"
  "slices.pdqsortOrdered[string]" -> "slices.partitionEqualOrdered[string]"
  "slices.partitionOrdered[string]" -> "cmp.Less[string]"
  "slices.partitionOrdered[string]" -> "cmp.Less[string]"
  "slices.partitionOrdered[string]" -> "cmp.Less[string]"
  "slices.partitionOrdered[string]" -> "cmp.Less[string]"
  "slices.pdqsortOrdered[string]" -> "slices.partitionOrdered[string]"
  "slices.pdqsortOrdered[string]" -> "cmp.Less[string]"
  "slices.pdqsortOrdered[string]" -> "slices.pdqsortOrdered[string]"
  "slices.pdqsortOrdered[string]" -> "slices.pdqsortOrdered[string]"
  "slices.Sort[[]string string]" -> "slices.pdqsortOrdered[string]"
  "sort.stringsImpl" -> "slices.Sort[[]string string]"
  "sort.Strings" -> "sort.stringsImpl"
  "path/filepath.glob" -> "sort.Strings"
  "path/filepath.glob" -> "path/filepath.Match"
  "path/filepath.join" -> "strings.Join"
  "path/filepath.Clean" -> "path/filepath.volumeNameLen"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "path/filepath.FromSlash"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).append"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).index"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).append"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).append"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).append"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).append"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).append"
  "path/filepath.Clean" -> "os.IsPathSeparator"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).append"
  "path/filepath.Clean" -> "path/filepath.postClean"
  "path/filepath.Clean" -> "(*path/filepath.lazybuf).string"
  "path/filepath.Clean" -> "path/filepath.FromSlash"
  "path/filepath.join" -> "path/filepath.Clean"
  "path/filepath.Join" -> "path/filepath.join"
  "path/filepath.glob" -> "path/filepath.Join"
  "path/filepath.globWithLimit" -> "path/filepath.glob"
  "path/filepath.globWithLimit" -> "path/filepath.globWithLimit"
  "path/filepath.globWithLimit" -> "path/filepath.glob"
  "path/filepath.Glob" -> "path/filepath.globWithLimit"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).Init" -> "path/filepath.Glob"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).Init" -> "errors.New"
  "periph.io/x/host/v3/sysfs.readInt" -> "periph.io/x/host/v3/sysfs.fileIOOpenDefault"
  "periph.io/x/host/v3/sysfs.readInt" -> "(*os.File).Close"
  "periph.io/x/host/v3/sysfs.readInt" -> "(*os.File).Read"
  "periph.io/x/host/v3/sysfs.readInt" -> "errors.New"
  "periph.io/x/host/v3/sysfs.readInt" -> "strconv.Atoi"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "periph.io/x/host/v3/sysfs.readInt"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "periph.io/x/host/v3/sysfs.readInt"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "periph.io/x/conn/v3/gpio/gpioreg.Register"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "strconv.Itoa"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip" -> "periph.io/x/conn/v3/gpio/gpioreg.RegisterAlias"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).Init" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).parseGPIOChip"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).Init" -> "periph.io/x/host/v3/sysfs.fileIOOpenDefault"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).Init" -> "os.IsPermission"
  "(*periph.io/x/host/v3/sysfs.driverGPIO).Init" -> "fmt.Errorf"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).Init"
  "(*periph.io/x/host/v3/sysfs.driverI2C).Init" -> "path/filepath.Glob"
  "(*periph.io/x/host/v3/sysfs.driverI2C).Init" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.driverI2C).Init" -> "sort.Strings"
  "(*periph.io/x/host/v3/sysfs.driverI2C).Init" -> "strconv.Atoi"
  "(*periph.io/x/host/v3/sysfs.driverI2C).Init" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.driverI2C).Init" -> "fmt.Sprintf"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Itoa"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Atoi"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strings.Contains"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Atoi"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strings.Contains"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Itoa"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/i2c/i2creg.Register" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.driverI2C).Init" -> "periph.io/x/conn/v3/i2c/i2creg.Register"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/sysfs.driverI2C).Init"
  "(*periph.io/x/host/v3/sysfs.driverLED).Init" -> "path/filepath.Glob"
  "(*periph.io/x/host/v3/sysfs.driverLED).Init" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.driverLED).Init" -> "sort.Strings"
  "path/filepath.Base" -> "path/filepath.VolumeName"
  "path/filepath.Base" -> "os.IsPathSeparator"
  "path/filepath.Base" -> "os.IsPathSeparator"
  "(*periph.io/x/host/v3/sysfs.driverLED).Init" -> "path/filepath.Base"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/sysfs.driverLED).Init"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "path/filepath.Glob"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "sort.Strings"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "strings.Split"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "periph.io/x/host/v3/fs.Open"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "strconv.Atoi"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "strconv.Atoi"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "fmt.Sprintf"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Itoa"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Atoi"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strings.Contains"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Atoi"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strings.Contains"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Itoa"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Register" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "periph.io/x/conn/v3/spi/spireg.Register"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "(*os.File).Close"
  "io.ReadAll" -> "(*fmt.stringReader).Read"
  "(*fmt.ss).Read" -> "errors.New"
  "io.ReadAll" -> "(*fmt.ss).Read"
  "(*bytes.Buffer).Read" -> "(*bytes.Buffer).empty"
  "(*bytes.Buffer).Read" -> "(*bytes.Buffer).Reset"
  "io.ReadAll" -> "(*bytes.Buffer).Read"
  "io.ReadAll" -> "(*internal/poll.FD).Read"
  "io.ReadAll" -> "(*os.File).Read"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).writeSlice"
  "io.ReadAtLeast" -> "(*fmt.stringReader).Read"
  "io.ReadAtLeast" -> "(*fmt.ss).Read"
  "io.ReadAtLeast" -> "(*bytes.Buffer).Read"
  "io.ReadAtLeast" -> "(*internal/poll.FD).Read"
  "io.ReadAtLeast" -> "(*os.File).Read"
  "io.ReadAtLeast" -> "(*compress/flate.decompressor).Read"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).Read" -> "(*fmt.stringReader).Read"
  "(*bufio.Reader).Read" -> "(*fmt.ss).Read"
  "(*bufio.Reader).Read" -> "(*bytes.Buffer).Read"
  "(*bufio.Reader).Read" -> "(*internal/poll.FD).Read"
  "(*bufio.Reader).Read" -> "(*os.File).Read"
  "(*bufio.Reader).Read" -> "(*compress/flate.decompressor).Read"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).Read" -> "(*embed.openFile).Read"
  "(*embed.openDir).Read" -> "errors.New"
  "(*bufio.Reader).Read" -> "(*embed.openDir).Read"
  "(*compress/zlib.reader).Read" -> "io.ReadFull"
  "(*compress/zlib.reader).Read" -> "(*compress/zlib.reader).Read"
  "(*compress/zlib.reader).Read" -> "(*hash/crc32.digest).Write"
  "(*compress/zlib.reader).Read" -> "(*embed.openDir).Read"
  "(*compress/zlib.reader).Read" -> "(*hash/adler32.digest).Sum32"
  "(*compress/zlib.reader).Read" -> "(*hash/adler32.digest).Write"
  "(*compress/zlib.reader).Read" -> "(encoding/binary.bigEndian).Uint32"
  "(*compress/zlib.reader).Read" -> "(*internal/poll.FD).Read"
  "(*compress/zlib.reader).Read" -> "(*embed.openFile).Read"
  "(*compress/zlib.reader).Read" -> "(*os.File).Read"
  "(*compress/zlib.reader).Read" -> "(*compress/flate.decompressor).Read"
  "(*compress/zlib.reader).Read" -> "(*hash/crc32.digest).Sum32"
  "(*bufio.Reader).Read" -> "(*compress/zlib.reader).Read"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).readErr"
  "(*image/png.decoder).verifyChecksum" -> "io.ReadFull"
  "(*image/png.decoder).verifyChecksum" -> "(encoding/binary.bigEndian).Uint32"
  "(*image/png.decoder).verifyChecksum" -> "(*hash/crc32.digest).Sum32"
  "(*image/png.decoder).verifyChecksum" -> "(*hash/adler32.digest).Sum32"
  "(*image/png.decoder).Read" -> "(*image/png.decoder).verifyChecksum"
  "(*image/png.decoder).Read" -> "io.ReadFull"
  "(*image/png.decoder).Read" -> "(encoding/binary.bigEndian).Uint32"
  "(*image/png.decoder).Read" -> "(*hash/crc32.digest).Reset"
  "(*image/png.decoder).Read" -> "(*hash/adler32.digest).Reset"
  "(*image/png.decoder).Read" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).Read" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).Read" -> "(*fmt.stringReader).Read"
  "(*image/png.decoder).Read" -> "(*fmt.ss).Read"
  "(*image/png.decoder).Read" -> "(*bytes.Buffer).Read"
  "(*image/png.decoder).Read" -> "(*internal/poll.FD).Read"
  "(*image/png.decoder).Read" -> "(*os.File).Read"
  "(*image/png.decoder).Read" -> "(*compress/flate.decompressor).Read"
  "(*image/png.decoder).Read" -> "(*bufio.Reader).Read"
  "(*image/png.decoder).Read" -> "(*image/png.decoder).Read"
  "(*periph.io/x/host/v3/sysfs.spiConn).Read" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.spiConn).Read" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.spiConn).Read" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.spiConn).Read" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.spiConn).Read" -> "(*periph.io/x/host/v3/sysfs.spiConn).txPackets"
  "(*periph.io/x/host/v3/sysfs.spiConn).Read" -> "fmt.Errorf"
  "(*image/png.decoder).Read" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*image/png.decoder).Read" -> "(*embed.openFile).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*compress/zlib.reader).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(golang.org/x/text/encoding.replacementDecoder).Transform"
  "(*golang.org/x/text/transform.Reader).Read" -> "(golang.org/x/text/transform.discard).Transform"
  "(*golang.org/x/text/transform.Reader).Read" -> "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform"
  "(*golang.org/x/text/transform.Reader).Read" -> "(golang.org/x/text/encoding.utf8Validator).Transform"
  "(*golang.org/x/text/transform.Reader).Read" -> "(golang.org/x/text/encoding/charmap.charmapDecoder).Transform"
  "(*golang.org/x/text/transform.Reader).Read" -> "(golang.org/x/text/transform.nop).Transform"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*bufio.Reader).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*fmt.stringReader).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*fmt.ss).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*bytes.Buffer).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*internal/poll.FD).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*os.File).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*compress/flate.decompressor).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(golang.org/x/text/encoding.replacementEncoder).Transform"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*embed.openDir).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*image/png.decoder).Read"
  "(*golang.org/x/text/transform.Reader).Read" -> "(*embed.openFile).Read"
  "(*image/png.decoder).Read" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*image/png.decoder).Read" -> "(*embed.openDir).Read"
  "(*image/png.decoder).Read" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).Read" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).Read" -> "(*compress/zlib.reader).Read"
  "(*bufio.Reader).Read" -> "(*image/png.decoder).Read"
  "(*bufio.Reader).Read" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*bufio.Reader).Read" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).Read"
  "(*bufio.Reader).Read" -> "(*embed.openDir).Read"
  "(*bufio.Reader).Read" -> "(*embed.openFile).Read"
  "(*bufio.Reader).Read" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*bufio.Reader).Read" -> "(*image/png.decoder).Read"
  "(*bufio.Reader).Read" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*bufio.Reader).Read" -> "(*compress/zlib.reader).Read"
  "(*bufio.Reader).Read" -> "(*bufio.Reader).Read"
  "(*bufio.Reader).Read" -> "(*fmt.stringReader).Read"
  "(*bufio.Reader).Read" -> "(*fmt.ss).Read"
  "(*bufio.Reader).Read" -> "(*bytes.Buffer).Read"
  "(*bufio.Reader).Read" -> "(*internal/poll.FD).Read"
  "(*bufio.Reader).Read" -> "(*os.File).Read"
  "(*bufio.Reader).Read" -> "(*compress/flate.decompressor).Read"
  "io.ReadAtLeast" -> "(*bufio.Reader).Read"
  "io.ReadAtLeast" -> "(*embed.openFile).Read"
  "io.ReadAtLeast" -> "(*golang.org/x/text/transform.Reader).Read"
  "io.ReadAtLeast" -> "(*compress/zlib.reader).Read"
  "io.ReadAtLeast" -> "(*embed.openDir).Read"
  "io.ReadAtLeast" -> "(*image/png.decoder).Read"
  "io.ReadAtLeast" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "io.ReadFull" -> "io.ReadAtLeast"
  "(*compress/flate.decompressor).copyData" -> "io.ReadFull"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).writeMark"
  "(*compress/flate.decompressor).copyData" -> "compress/flate.noEOF"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).availWrite"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).finishBlock" -> "(*compress/flate.dictDecoder).availRead"
  "(*compress/flate.decompressor).finishBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).copyData" -> "(*compress/flate.decompressor).finishBlock"
  "(*compress/flate.decompressor).Read" -> "(*compress/flate.decompressor).copyData"
  "(*bytes.Buffer).ReadByte" -> "(*bytes.Buffer).empty"
  "(*bytes.Buffer).ReadByte" -> "(*bytes.Buffer).Reset"
  "(*compress/flate.decompressor).moreBits" -> "(*bytes.Buffer).ReadByte"
  "(*compress/flate.decompressor).moreBits" -> "compress/flate.noEOF"
  "(*bufio.Reader).ReadByte" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).fill" -> "(*fmt.stringReader).Read"
  "(*bufio.Reader).fill" -> "(*fmt.ss).Read"
  "(*bufio.Reader).fill" -> "(*bytes.Buffer).Read"
  "(*bufio.Reader).fill" -> "(*internal/poll.FD).Read"
  "(*bufio.Reader).fill" -> "(*os.File).Read"
  "(*bufio.Reader).fill" -> "(*compress/flate.decompressor).Read"
  "(*bufio.Reader).fill" -> "(*bufio.Reader).Read"
  "(*bufio.Reader).fill" -> "(*embed.openFile).Read"
  "(*bufio.Reader).fill" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*bufio.Reader).fill" -> "(*compress/zlib.reader).Read"
  "(*bufio.Reader).fill" -> "(*embed.openDir).Read"
  "(*bufio.Reader).fill" -> "(*image/png.decoder).Read"
  "(*bufio.Reader).fill" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*bufio.Reader).ReadByte" -> "(*bufio.Reader).fill"
  "(*compress/flate.decompressor).moreBits" -> "(*bufio.Reader).ReadByte"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).dataBlock" -> "io.ReadFull"
  "(*compress/flate.decompressor).dataBlock" -> "compress/flate.noEOF"
  "(*compress/flate.decompressor).dataBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).dataBlock" -> "(*compress/flate.decompressor).finishBlock"
  "(*compress/flate.decompressor).dataBlock" -> "(*compress/flate.decompressor).copyData"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).dataBlock"
  "(*compress/flate.decompressor).huffSym" -> "(*bytes.Buffer).ReadByte"
  "(*compress/flate.decompressor).huffSym" -> "compress/flate.noEOF"
  "(*compress/flate.decompressor).huffSym" -> "(*bufio.Reader).ReadByte"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).huffSym"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).tryWriteCopy"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).writeByte"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).availWrite"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).finishBlock"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).huffSym"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).huffmanBlock" -> "math/bits.Reverse8"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).histSize"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).writeCopy"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).availWrite"
  "(*compress/flate.decompressor).huffmanBlock" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).huffmanBlock"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.huffmanDecoder).init" -> "math/bits.Reverse16"
  "(*compress/flate.huffmanDecoder).init" -> "math/bits.Reverse16"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.huffmanDecoder).init"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).huffSym"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.huffmanDecoder).init"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.decompressor).moreBits"
  "(*compress/flate.decompressor).readHuffman" -> "(*compress/flate.huffmanDecoder).init"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).readHuffman"
  "(*compress/flate.decompressor).nextBlock" -> "(*compress/flate.decompressor).huffmanBlock"
  "(*compress/flate.decompressor).Read" -> "(*compress/flate.decompressor).nextBlock"
  "(*compress/flate.decompressor).Read" -> "(*compress/flate.dictDecoder).readFlush"
  "(*compress/flate.decompressor).Read" -> "(*compress/flate.decompressor).huffmanBlock"
  "io.ReadAll" -> "(*compress/flate.decompressor).Read"
  "io.ReadAll" -> "(*bufio.Reader).Read"
  "io.ReadAll" -> "(*embed.openFile).Read"
  "io.ReadAll" -> "(*golang.org/x/text/transform.Reader).Read"
  "io.ReadAll" -> "(*compress/zlib.reader).Read"
  "io.ReadAll" -> "(*embed.openDir).Read"
  "io.ReadAll" -> "(*image/png.decoder).Read"
  "io.ReadAll" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "io.ReadAll"
  "strings.TrimSpace" -> "strings.TrimFunc"
  "strings.TrimSpace" -> "strings.TrimRightFunc"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "strings.TrimSpace"
  "(*periph.io/x/host/v3/sysfs.driverSPI).Init" -> "strconv.Atoi"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/sysfs.driverSPI).Init"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).discoverDevices" -> "path/filepath.Glob"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).discoverDevices" -> "sort.Strings"
  "path/filepath.Dir" -> "path/filepath.VolumeName"
  "path/filepath.Dir" -> "path/filepath.Clean"
  "path/filepath.Dir" -> "os.IsPathSeparator"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).discoverDevices" -> "path/filepath.Dir"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).discoverDevices" -> "path/filepath.Base"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).discoverDevices" -> "path/filepath.Base"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).Init" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).discoverDevices"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).Init" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).discoverDevices"
  "(*periph.io/x/host/v3/sysfs.driverThermalSensor).Init" -> "errors.New"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).Init"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "strconv.Quote"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1" -> "errors.New"
  "runtime.tryRecordGoroutineProfile" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "runtime.stopTheWorld$1" -> "runtime.casGToWaiting"
  "runtime.stopTheWorld$1" -> "runtime.stopTheWorldWithSema"
  "runtime.stopTheWorld$1" -> "runtime.casgstatus"
  "runtime.tryRecordGoroutineProfile" -> "runtime.stopTheWorld$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.asyncPreempt"
  "(*internal/godebug.Setting).Value$1" -> "(*internal/godebug.Setting).Name"
  "internal/godebug.lookup" -> "(*sync.Map).Load"
  "internal/godebug.lookup" -> "internal/godebugs.Lookup"
  "(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]" -> "sync/atomic.StorePointer"
  "internal/godebug.lookup" -> "(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]"
  "internal/godebug.lookup" -> "(*sync.Map).LoadOrStore"
  "(*internal/godebug.Setting).Value$1" -> "internal/godebug.lookup"
  "(*internal/godebug.Setting).Value$1" -> "(*internal/godebug.Setting).Undocumented"
  "runtime.tryRecordGoroutineProfile" -> "(*internal/godebug.Setting).Value$1"
  "runtime.startTheWorldWithSema" -> "runtime.assertWorldStopped"
  "runtime.startTheWorldWithSema" -> "runtime.acquirem"
  "runtime.netpollinited" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.startTheWorldWithSema" -> "runtime.netpollinited"
  "runtime/internal/syscall.EpollWait" -> "runtime/internal/syscall.Syscall6"
  "runtime.netpoll" -> "runtime/internal/syscall.EpollWait"
  "runtime.netpoll" -> "runtime.throw"
  "runtime.netpoll" -> "runtime.throw"
  "runtime.netpoll" -> "runtime.noescape"
  "runtime.netpoll" -> "runtime.read"
  "runtime.netpoll" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.netpoll" -> "(runtime.taggedPointer).pointer"
  "runtime.netpoll" -> "(runtime.taggedPointer).tag"
  "runtime.netpoll" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.pollDesc).setEventErr" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.pollDesc).setEventErr" -> "(*runtime/internal/atomic.Uint32).Load"
  "(*runtime.pollDesc).setEventErr" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.netpoll" -> "(*runtime.pollDesc).setEventErr"
  "runtime.netpollunblock" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime/internal/atomic.Uintptr).CompareAndSwap" -> "runtime/internal/atomic.Casuintptr"
  "runtime.netpollunblock" -> "(*runtime/internal/atomic.Uintptr).CompareAndSwap"
  "runtime.netpollready" -> "runtime.netpollunblock"
  "runtime.netpollready" -> "runtime.netpollunblock"
  "runtime.netpollready" -> "(*runtime.gList).push"
  "runtime.netpollready" -> "(*runtime.gList).push"
  "runtime.netpoll" -> "runtime.netpollready"
  "runtime.startTheWorldWithSema" -> "runtime.netpoll"
  "runtime.startTheWorldWithSema" -> "runtime.injectglist"
  "runtime.netpollAdjustWaiters" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.startTheWorldWithSema" -> "runtime.netpollAdjustWaiters"
  "runtime.startTheWorldWithSema" -> "runtime.lock"
  "runtime.procresize" -> "runtime.assertLockHeld"
  "runtime.procresize" -> "runtime.assertWorldStopped"
  "runtime.procresize" -> "runtime.throw"
  "runtime.procresize" -> "runtime.traceAcquire"
  "runtime.procresize" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).Gomaxprocs" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).Gomaxprocs" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).Gomaxprocs" -> "(runtime.traceEventWriter).commit"
  "runtime.procresize" -> "(runtime.traceLocker).Gomaxprocs"
  "runtime.procresize" -> "runtime.traceRelease"
  "runtime.procresize" -> "runtime.nanotime"
  "runtime.procresize" -> "runtime.lock"
  "runtime.procresize" -> "runtime.unlock"
  "runtime.procresize" -> "runtime.getg"
  "(*runtime.p).init" -> "(*runtime.wbBuf).reset"
  "runtime.allocmcache" -> "runtime.systemstack"
  "runtime.allocmcache" -> "runtime.nextSample"
  "(*runtime.p).init" -> "runtime.allocmcache"
  "(*runtime.p).init" -> "runtime.throw"
  "(*runtime.p).init" -> "runtime.lockInit"
  "(*runtime.p).init" -> "(runtime.pMask).set"
  "(*runtime.p).init" -> "(runtime.pMask).clear"
  "runtime.raceproccreate" -> "runtime.throw"
  "(*runtime.p).init" -> "runtime.raceproccreate"
  "runtime.procresize" -> "(*runtime.p).init"
  "runtime.procresize" -> "runtime.atomicstorep"
  "runtime.procresize" -> "(runtime.puintptr).ptr"
  "runtime.procresize" -> "(runtime.puintptr).ptr"
  "runtime.procresize" -> "(*runtime.mcache).prepareForSweep"
  "runtime.procresize" -> "(runtime.puintptr).ptr"
  "runtime.procresize" -> "runtime.traceAcquire"
  "runtime.procresize" -> "(runtime.traceLocker).ok"
  "runtime.procresize" -> "runtime.acquirep"
  "runtime.procresize" -> "runtime.traceAcquire"
  "runtime.procresize" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).GoStop" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GoStop" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).GoStop" -> "(runtime.traceEventWriter).commit"
  "(runtime.traceLocker).GoSched" -> "(runtime.traceLocker).GoStop"
  "runtime.procresize" -> "(runtime.traceLocker).GoSched"
  "runtime.procresize" -> "(runtime.puintptr).ptr"
  "runtime.procresize" -> "(runtime.traceLocker).ProcStop"
  "runtime.procresize" -> "runtime.traceRelease"
  "runtime.procresize" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).GoStart" -> "runtime.getg"
  "(runtime.traceLocker).GoStart" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GoStart" -> "(*runtime.traceSchedResourceState).nextSeq"
  "(runtime.traceLocker).GoStart" -> "(runtime.traceEventWriter).write"
  "(runtime.traceLocker).GoStart" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).GoStart" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).GoStart" -> "(runtime.traceEventWriter).write"
  "(runtime.traceLocker).GoStart" -> "(runtime.traceEventWriter).end"
  "runtime.procresize" -> "(runtime.traceLocker).GoStart"
  "runtime.procresize" -> "runtime.traceRelease"
  "(*runtime.p).destroy" -> "runtime.assertLockHeld"
  "(*runtime.p).destroy" -> "runtime.assertWorldStopped"
  "(*runtime.p).destroy" -> "(runtime.guintptr).ptr"
  "runtime.globrunqputhead" -> "runtime.assertLockHeld"
  "(*runtime.gQueue).push" -> "(*runtime.guintptr).set"
  "(*runtime.gQueue).push" -> "(*runtime.guintptr).set"
  "runtime.globrunqputhead" -> "(*runtime.gQueue).push"
  "(*runtime.p).destroy" -> "runtime.globrunqputhead"
  "(*runtime.p).destroy" -> "(runtime.guintptr).ptr"
  "(*runtime.p).destroy" -> "runtime.globrunqputhead"
  "(*runtime.p).destroy" -> "runtime.getg"
  "(*runtime.p).destroy" -> "(runtime.puintptr).ptr"
  "(*runtime.p).destroy" -> "runtime.lock"
  "(*runtime.p).destroy" -> "runtime.lock"
  "runtime.moveTimers" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.moveTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.moveTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.doaddtimer" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.netpollGenericInit" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.netpollGenericInit" -> "runtime.lockInit"
  "runtime.netpollGenericInit" -> "runtime.lock"
  "runtime.netpollGenericInit" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime/internal/syscall.EpollCreate1" -> "runtime/internal/syscall.Syscall6"
  "runtime.netpollinit" -> "runtime/internal/syscall.EpollCreate1"
  "runtime.netpollinit" -> "runtime.throw"
  "runtime.nonblockingPipe" -> "runtime.pipe2"
  "runtime.netpollinit" -> "runtime.nonblockingPipe"
  "runtime.netpollinit" -> "runtime.throw"
  "runtime/internal/syscall.EpollCtl" -> "runtime/internal/syscall.Syscall6"
  "runtime.netpollinit" -> "runtime/internal/syscall.EpollCtl"
  "runtime.netpollinit" -> "runtime.throw"
  "runtime.netpollGenericInit" -> "runtime.netpollinit"
  "runtime.netpollGenericInit" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.netpollGenericInit" -> "runtime.unlock"
  "runtime.doaddtimer" -> "runtime.netpollGenericInit"
  "runtime.doaddtimer" -> "runtime.throw"
  "runtime.doaddtimer" -> "(*runtime.puintptr).set"
  "runtime.badTimer" -> "runtime.throw"
  "runtime.siftupTimer" -> "runtime.badTimer"
  "runtime.siftupTimer" -> "runtime.badTimer"
  "runtime.doaddtimer" -> "runtime.siftupTimer"
  "runtime.doaddtimer" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.doaddtimer" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.moveTimers" -> "runtime.doaddtimer"
  "runtime.moveTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.moveTimers" -> "runtime.badTimer"
  "runtime.moveTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.moveTimers" -> "runtime.doaddtimer"
  "runtime.moveTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.moveTimers" -> "runtime.badTimer"
  "runtime.moveTimers" -> "runtime.osyield"
  "runtime.moveTimers" -> "runtime.badTimer"
  "runtime.moveTimers" -> "runtime.badTimer"
  "runtime.moveTimers" -> "runtime.badTimer"
  "(*runtime.p).destroy" -> "runtime.moveTimers"
  "(*runtime.p).destroy" -> "(*runtime/internal/atomic.Uint32).Store"
  "(*runtime.p).destroy" -> "(*runtime/internal/atomic.Uint32).Store"
  "(*runtime.p).destroy" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.p).destroy" -> "runtime.unlock"
  "(*runtime.p).destroy" -> "runtime.unlock"
  "(*runtime.p).destroy" -> "runtime.wbBufFlush1"
  "(*runtime.p).destroy" -> "(*runtime.gcWork).dispose"
  "(*runtime.p).destroy" -> "runtime.systemstack"
  "runtime.freemcache" -> "runtime.systemstack"
  "(*runtime.p).destroy" -> "runtime.freemcache"
  "(*runtime.gList).pop" -> "(runtime.guintptr).ptr"
  "runtime.gfpurge" -> "(*runtime.gList).pop"
  "runtime.gfpurge" -> "runtime.lock"
  "(*runtime.gList).pushAll" -> "(*runtime.gQueue).empty"
  "(*runtime.gList).pushAll" -> "(runtime.guintptr).ptr"
  "runtime.gfpurge" -> "(*runtime.gList).pushAll"
  "runtime.gfpurge" -> "(*runtime.gList).pushAll"
  "runtime.gfpurge" -> "runtime.unlock"
  "runtime.gfpurge" -> "(*runtime.gList).empty"
  "runtime.gfpurge" -> "(*runtime.gQueue).push"
  "runtime.gfpurge" -> "(*runtime.gQueue).push"
  "(*runtime.p).destroy" -> "runtime.gfpurge"
  "(*runtime.p).destroy" -> "runtime.traceProcFree"
  "(*runtime.p).destroy" -> "runtime.getg"
  "(*runtime.p).destroy" -> "(runtime.puintptr).ptr"
  "(*runtime.p).destroy" -> "(*runtime.puintptr).set"
  "runtime.racectxend" -> "runtime.throw"
  "(*runtime.p).destroy" -> "runtime.racectxend"
  "(*runtime.p).destroy" -> "(*runtime.puintptr).set"
  "runtime.raceprocdestroy" -> "runtime.throw"
  "(*runtime.p).destroy" -> "runtime.raceprocdestroy"
  "runtime.procresize" -> "(*runtime.p).destroy"
  "runtime.procresize" -> "runtime.lock"
  "runtime.procresize" -> "runtime.unlock"
  "runtime.procresize" -> "(runtime.puintptr).ptr"
  "(*runtime.randomOrder).reset" -> "runtime.gcd"
  "runtime.procresize" -> "(*runtime.randomOrder).reset"
  "runtime.procresize" -> "runtime/internal/atomic.Store"
  "runtime.procresize" -> "runtime.runqempty"
  "runtime.procresize" -> "runtime.pidleput"
  "runtime.procresize" -> "runtime.mget"
  "runtime.procresize" -> "(*runtime.muintptr).set"
  "runtime.procresize" -> "(*runtime.puintptr).set"
  "(*runtime.gcCPULimiterState).resetCapacity" -> "(*runtime.gcCPULimiterState).tryLock"
  "(*runtime.gcCPULimiterState).resetCapacity" -> "runtime.throw"
  "(*runtime.gcCPULimiterState).resetCapacity" -> "(*runtime.gcCPULimiterState).updateLocked"
  "(*runtime.gcCPULimiterState).resetCapacity" -> "(*runtime/internal/atomic.Bool).Store"
  "(*runtime.gcCPULimiterState).resetCapacity" -> "(*runtime/internal/atomic.Uint32).Store"
  "(*runtime.gcCPULimiterState).resetCapacity" -> "(*runtime.gcCPULimiterState).unlock"
  "(*runtime.gcCPULimiterState).resetCapacity" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.procresize" -> "(*runtime.gcCPULimiterState).resetCapacity"
  "runtime.startTheWorldWithSema" -> "runtime.procresize"
  "runtime.startTheWorldWithSema" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.startTheWorldWithSema" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.startTheWorldWithSema" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.startTheWorldWithSema" -> "runtime.notewakeup"
  "runtime.startTheWorldWithSema" -> "runtime.unlock"
  "runtime.startTheWorldWithSema" -> "runtime.worldStarted"
  "runtime.startTheWorldWithSema" -> "(runtime.puintptr).ptr"
  "runtime.startTheWorldWithSema" -> "(runtime.muintptr).ptr"
  "runtime.startTheWorldWithSema" -> "runtime.newm"
  "runtime.startTheWorldWithSema" -> "runtime.throw"
  "runtime.startTheWorldWithSema" -> "(*runtime.puintptr).set"
  "runtime.startTheWorldWithSema" -> "runtime.notewakeup"
  "runtime.startTheWorldWithSema" -> "runtime.nanotime"
  "runtime.startTheWorldWithSema" -> "(runtime.stwReason).isGC"
  "runtime.startTheWorldWithSema" -> "(*runtime.timeHistogram).record"
  "runtime.startTheWorldWithSema" -> "runtime.traceAcquire"
  "runtime.startTheWorldWithSema" -> "(runtime.traceLocker).ok"
  "runtime.startTheWorldWithSema" -> "(*runtime.timeHistogram).record"
  "(runtime.traceLocker).STWDone" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).STWDone" -> "(runtime.traceEventWriter).commit"
  "runtime.startTheWorldWithSema" -> "(runtime.traceLocker).STWDone"
  "runtime.startTheWorldWithSema" -> "runtime.traceRelease"
  "runtime.startTheWorldWithSema" -> "runtime.wakep"
  "runtime.startTheWorldWithSema" -> "runtime.releasem"
  "runtime.startTheWorld$1" -> "runtime.startTheWorldWithSema"
  "runtime.tryRecordGoroutineProfile" -> "runtime.startTheWorld$1"
  "runtime.tryRecordGoroutineProfile" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "runtime.readmemstats_m" -> "runtime.assertWorldStopped"
  "runtime.readmemstats_m" -> "runtime.systemstack"
  "(*runtime.consistentHeapStats).unsafeRead" -> "runtime.assertWorldStopped"
  "(*runtime.consistentHeapStats).unsafeRead" -> "(*runtime.heapStatsDelta).merge"
  "runtime.readmemstats_m" -> "(*runtime.consistentHeapStats).unsafeRead"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.gcControllerState).heapGoal"
  "runtime.readmemstats_m" -> "runtime.lock"
  "runtime.readmemstats_m" -> "runtime.lock"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "runtime.throw"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "runtime.throw"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "(*runtime.sysMemStat).load"
  "runtime.readmemstats_m" -> "runtime.throw"
  "runtime.readmemstats_m" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.readmemstats_m" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.readmemstats_m" -> "runtime.throw"
  "runtime.readmemstats_m" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.readmemstats_m" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.readmemstats_m" -> "runtime.throw"
  "runtime.readmemstats_m" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.readmemstats_m" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.readmemstats_m" -> "runtime.throw"
  "runtime.readmemstats_m" -> "runtime.unlock"
  "runtime.readmemstats_m" -> "runtime.unlock"
  "runtime.ReadMemStats$1" -> "runtime.readmemstats_m"
  "runtime.tryRecordGoroutineProfile" -> "runtime.ReadMemStats$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.SetFinalizer$1"
  "runtime.gcResetMarkState" -> "runtime.forEachG"
  "runtime.gcResetMarkState" -> "runtime.lock"
  "runtime.gcResetMarkState" -> "runtime.unlock"
  "runtime.gcResetMarkState" -> "(runtime.arenaIdx).l1"
  "runtime.gcResetMarkState" -> "(runtime.arenaIdx).l2"
  "runtime.gcResetMarkState" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcResetMarkState"
  "runtime.gcStart$3" -> "runtime.startTheWorldWithSema"
  "runtime.gcStart$3" -> "(*runtime.gcCPULimiterState).finishGCTransition"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcStart$3"
  "(*runtime.sweepLocked).sweep$1" -> "runtime.throw"
  "(*runtime.sweepLocked).sweep$1" -> "runtime.lock"
  "(*runtime.sweepLocked).sweep$1" -> "(*runtime.mSpanList).remove"
  "(*runtime.sweepLocked).sweep$1" -> "(*runtime.mSpanList).insert"
  "(*runtime.sweepLocked).sweep$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.sweepLocked).sweep$1"
  "runtime.tryRecordGoroutineProfile" -> "flag.commandLineUsage"
  "runtime/pprof.writeHeapProto$1" -> "(*runtime/pprof.profileBuilder).pbLabel"
  "runtime.tryRecordGoroutineProfile" -> "runtime/pprof.writeHeapProto$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.chansend$1"
  "runtime.tryRecordGoroutineProfile" -> "os/signal.Notify$1$1"
  "periph.io/x/conn/v3/driver/driverreg.initImpl$3" -> "(*sync.WaitGroup).Done"
  "periph.io/x/conn/v3/driver/driverreg.initImpl$3" -> "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure"
  "runtime.tryRecordGoroutineProfile" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "runtime.Stack$1" -> "runtime.getg"
  "runtime.Stack$1" -> "runtime.goroutineheader"
  "runtime.Stack$1" -> "runtime.traceback"
  "runtime.tracebackothers" -> "runtime.gotraceback"
  "runtime.tracebackothers" -> "runtime.getg"
  "runtime.tracebackothers" -> "runtime.goroutineheader"
  "runtime.tracebackothers" -> "runtime.traceback"
  "runtime.atomicAllG" -> "runtime/internal/atomic.Loaduintptr"
  "runtime.atomicAllG" -> "runtime/internal/atomic.Loadp"
  "runtime.forEachGRace" -> "runtime.atomicAllG"
  "runtime.atomicAllGIndex" -> "runtime.add"
  "runtime.forEachGRace" -> "runtime.atomicAllGIndex"
  "runtime.goschedImpl" -> "runtime.traceAcquire"
  "runtime.goschedImpl" -> "runtime.readgstatus"
  "runtime.goschedImpl" -> "runtime.dumpgstatus"
  "runtime.goschedImpl" -> "runtime.throw"
  "runtime.goschedImpl" -> "runtime.casgstatus"
  "runtime.goschedImpl" -> "(runtime.traceLocker).ok"
  "runtime.goschedImpl" -> "runtime.dropg"
  "runtime.goschedImpl" -> "runtime.lock"
  "runtime.globrunqput" -> "runtime.assertLockHeld"
  "runtime.globrunqput" -> "(*runtime.gQueue).pushBack"
  "runtime.goschedImpl" -> "runtime.globrunqput"
  "runtime.goschedImpl" -> "runtime.unlock"
  "(runtime.traceLocker).GoPreempt" -> "(runtime.traceLocker).GoStop"
  "runtime.goschedImpl" -> "(runtime.traceLocker).GoPreempt"
  "runtime.goschedImpl" -> "runtime.traceRelease"
  "runtime.goschedImpl" -> "(runtime.traceLocker).GoSched"
  "runtime.goschedImpl" -> "runtime.wakep"
  "runtime.goschedImpl" -> "runtime.schedule"
  "runtime.gopreempt_m" -> "runtime.goschedImpl"
  "runtime.forEachGRace" -> "runtime.gopreempt_m"
  "runtime.gosched_m" -> "runtime.goschedImpl"
  "runtime.forEachGRace" -> "runtime.gosched_m"
  "runtime.goyield_m" -> "runtime.traceAcquire"
  "runtime.goyield_m" -> "(runtime.puintptr).ptr"
  "runtime.goyield_m" -> "runtime.casgstatus"
  "runtime.goyield_m" -> "(runtime.traceLocker).ok"
  "runtime.goyield_m" -> "(runtime.traceLocker).GoPreempt"
  "runtime.goyield_m" -> "runtime.traceRelease"
  "runtime.goyield_m" -> "runtime.dropg"
  "runtime.goyield_m" -> "runtime.runqput"
  "runtime.goyield_m" -> "runtime.schedule"
  "runtime.forEachGRace" -> "runtime.goyield_m"
  "runtime.traceExitingSyscall" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.exitsyscall0" -> "runtime.traceExitingSyscall"
  "runtime.exitsyscall0" -> "runtime.traceAcquire"
  "runtime.exitsyscall0" -> "runtime.casgstatus"
  "runtime.traceExitedSyscall" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.exitsyscall0" -> "runtime.traceExitedSyscall"
  "runtime.exitsyscall0" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscall0" -> "runtime.dropg"
  "runtime.exitsyscall0" -> "runtime.lock"
  "runtime.exitsyscall0" -> "runtime.schedEnabled"
  "(runtime.traceLocker).GoSysExit" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GoSysExit" -> "(runtime.traceEventWriter).commit"
  "(runtime.traceLocker).GoSysExit" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscall0" -> "(runtime.traceLocker).GoSysExit"
  "runtime.exitsyscall0" -> "runtime.traceRelease"
  "runtime.exitsyscall0" -> "runtime.pidleget"
  "runtime.exitsyscall0" -> "runtime.globrunqput"
  "runtime.exitsyscall0" -> "runtime.unlock"
  "runtime.exitsyscall0" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.exitsyscall0" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.exitsyscall0" -> "runtime.notewakeup"
  "runtime.exitsyscall0" -> "runtime.acquirep"
  "runtime.exitsyscall0" -> "runtime.execute"
  "runtime.exitsyscall0" -> "runtime.stoplockedm"
  "runtime.exitsyscall0" -> "runtime.execute"
  "runtime.stopm" -> "runtime.getg"
  "runtime.stopm" -> "runtime.throw"
  "runtime.stopm" -> "runtime.throw"
  "runtime.stopm" -> "runtime.throw"
  "runtime.stopm" -> "runtime.lock"
  "runtime.mput" -> "runtime.assertLockHeld"
  "runtime.mput" -> "(*runtime.muintptr).set"
  "runtime.mput" -> "runtime.checkdead"
  "runtime.stopm" -> "runtime.mput"
  "runtime.stopm" -> "runtime.unlock"
  "runtime.stopm" -> "runtime.mPark"
  "runtime.stopm" -> "(runtime.puintptr).ptr"
  "runtime.stopm" -> "runtime.acquirep"
  "runtime.exitsyscall0" -> "runtime.stopm"
  "runtime.exitsyscall0" -> "runtime.schedule"
  "runtime.forEachGRace" -> "runtime.exitsyscall0"
  "runtime.park_m" -> "runtime.getg"
  "runtime.park_m" -> "runtime.traceAcquire"
  "runtime.park_m" -> "runtime.casgstatus"
  "runtime.park_m" -> "(runtime.traceLocker).ok"
  "runtime.park_m" -> "(runtime.traceLocker).GoPark"
  "runtime.park_m" -> "runtime.traceRelease"
  "runtime.park_m" -> "runtime.dropg"
  "runtime.chanparkcommit" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.chanparkcommit" -> "runtime.unlock"
  "runtime.park_m" -> "runtime.chanparkcommit"
  "runtime.park_m" -> "runtime.schedule"
  "runtime.park_m" -> "runtime.traceAcquire"
  "runtime.park_m" -> "runtime.casgstatus"
  "runtime.park_m" -> "(runtime.traceLocker).ok"
  "runtime.park_m" -> "(runtime.traceLocker).GoUnpark"
  "runtime.park_m" -> "runtime.traceRelease"
  "runtime.park_m" -> "runtime.execute"
  "runtime.parkunlock_c" -> "runtime.unlock"
  "runtime.park_m" -> "runtime.parkunlock_c"
  "runtime.finalizercommit" -> "runtime.unlock"
  "runtime.finalizercommit" -> "(*runtime/internal/atomic.Uint32).Or"
  "runtime.park_m" -> "runtime.finalizercommit"
  "runtime.gcBgMarkWorker$1" -> "(runtime.muintptr).ptr"
  "runtime.gcBgMarkWorker$1" -> "runtime.releasem"
  "runtime.gcBgMarkWorker$1" -> "(*runtime.lfstack).push"
  "runtime.park_m" -> "runtime.gcBgMarkWorker$1"
  "runtime.forEachGRace" -> "runtime.park_m"
  "runtime.forEachGRace" -> "runtime.gcResetMarkState$1"
  "runtime.tracebackothers$1" -> "runtime.goroutineheader"
  "runtime.tracebackothers$1" -> "runtime.getg"
  "runtime.tracebackothers$1" -> "runtime.isSystemGoroutine"
  "runtime.tracebackothers$1" -> "runtime.readgstatus"
  "runtime.tracebackothers$1" -> "runtime.printcreatedby"
  "runtime.tracebackothers$1" -> "runtime.traceback"
  "runtime.tracebackothers$1" -> "runtime.readgstatus"
  "runtime.forEachGRace" -> "runtime.tracebackothers$1"
  "runtime.schedtrace$1" -> "runtime.readgstatus"
  "runtime.schedtrace$1" -> "(runtime.waitReason).String"
  "runtime.schedtrace$1" -> "(runtime.muintptr).ptr"
  "runtime.forEachGRace" -> "runtime.schedtrace$1"
  "runtime.forEachGRace" -> "runtime.preemptPark"
  "runtime.checkdead$1" -> "runtime.isSystemGoroutine"
  "runtime.checkdead$1" -> "runtime.readgstatus"
  "runtime.checkdead$1" -> "runtime.unlock"
  "runtime.checkdead$1" -> "runtime.throw"
  "runtime.forEachGRace" -> "runtime.checkdead$1"
  "runtime.canPreemptM" -> "(runtime.puintptr).ptr"
  "runtime.goschedguarded_m" -> "runtime.canPreemptM"
  "runtime.goschedguarded_m" -> "runtime.gogo"
  "runtime.goschedguarded_m" -> "runtime.goschedImpl"
  "runtime.forEachGRace" -> "runtime.goschedguarded_m"
  "runtime.gcMarkRootCheck$1" -> "runtime.readgstatus"
  "runtime.gcMarkRootCheck$1" -> "runtime.throw"
  "runtime.forEachGRace" -> "runtime.gcMarkRootCheck$1"
  "runtime.tracebackothers" -> "runtime.forEachGRace"
  "runtime.Stack$1" -> "runtime.tracebackothers"
  "runtime.tryRecordGoroutineProfile" -> "runtime.Stack$1"
  "runtime.tryRecordGoroutineProfile" -> "sync.poolCleanup"
  "runtime.tryRecordGoroutineProfile" -> "runtime.asyncPreempt2"
  "runtime.tryRecordGoroutineProfile" -> "runtime.acquirem"
  "(*runtime.goroutineProfileStateHolder).CompareAndSwap" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.goroutineProfileStateHolder).CompareAndSwap"
  "runtime.doRecordGoroutineProfile" -> "runtime.readgstatus"
  "runtime.doRecordGoroutineProfile" -> "runtime.throw"
  "runtime.doRecordGoroutineProfile" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.doRecordGoroutineProfile" -> "runtime.systemstack"
  "runtime.tryRecordGoroutineProfile" -> "runtime.doRecordGoroutineProfile"
  "(*runtime.goroutineProfileStateHolder).Store" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.goroutineProfileStateHolder).Store"
  "runtime.tryRecordGoroutineProfile" -> "runtime.releasem"
  "runtime.tryRecordGoroutineProfile" -> "runtime.futexwakeup$1"
  "runtime.wbBufFlush$1" -> "runtime.getg"
  "runtime.wbBufFlush$1" -> "(runtime.puintptr).ptr"
  "runtime.wbBufFlush$1" -> "runtime.wbBufFlush1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.wbBufFlush$1"
  "runtime.gcBgMarkWorker$2" -> "runtime.casGToWaiting"
  "runtime.gcBgMarkWorker$2" -> "runtime.casgstatus"
  "runtime.gcDrain" -> "runtime.throw"
  "runtime.gcDrain" -> "runtime.getg"
  "runtime.gcDrain" -> "(runtime.puintptr).ptr"
  "runtime.gcDrain" -> "runtime/internal/atomic.Xadd"
  "runtime.gcDrain" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.markroot" -> "runtime.activeModules"
  "runtime.markroot" -> "runtime.activeModules"
  "runtime.markrootBlock" -> "runtime.throw"
  "runtime.markrootBlock" -> "runtime.add"
  "runtime.markrootBlock" -> "runtime.scanblock"
  "runtime.markroot" -> "runtime.markrootBlock"
  "runtime.markroot" -> "runtime.markrootBlock"
  "runtime.markroot" -> "runtime.systemstack"
  "runtime.markroot" -> "runtime/internal/atomic.Load"
  "runtime.markroot" -> "runtime.scanblock"
  "runtime.markrootSpans" -> "(runtime.arenaIdx).l1"
  "runtime.markrootSpans" -> "(runtime.arenaIdx).l2"
  "runtime.markrootSpans" -> "runtime/internal/atomic.Load8"
  "runtime.markrootSpans" -> "(*runtime.mSpanStateBox).get"
  "runtime.markrootSpans" -> "runtime.throw"
  "runtime.markrootSpans" -> "runtime.throw"
  "runtime.markrootSpans" -> "runtime.lock"
  "runtime.markrootSpans" -> "runtime.unlock"
  "runtime.markrootSpans" -> "(*runtime.mspan).base"
  "runtime.markrootSpans" -> "(runtime.spanClass).noscan"
  "runtime.markrootSpans" -> "runtime.scanobject"
  "runtime.markrootSpans" -> "runtime.scanblock"
  "runtime.markroot" -> "runtime.markrootSpans"
  "runtime.markroot" -> "runtime.printlock"
  "runtime.markroot" -> "runtime.throw"
  "runtime.markroot" -> "runtime.readgstatus"
  "runtime.markroot" -> "runtime.systemstack"
  "runtime.markroot" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcFlushBgCredit" -> "(*runtime.gQueue).empty"
  "runtime.gcFlushBgCredit" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcFlushBgCredit" -> "(*runtime/internal/atomic.Float64).Load"
  "runtime.gcFlushBgCredit" -> "runtime.lock"
  "runtime.gcFlushBgCredit" -> "(*runtime.gQueue).pop"
  "runtime.gcFlushBgCredit" -> "(*runtime.gQueue).empty"
  "runtime.gcFlushBgCredit" -> "runtime.ready"
  "runtime.gcFlushBgCredit" -> "(*runtime.gQueue).pushBack"
  "runtime.gcFlushBgCredit" -> "(*runtime/internal/atomic.Float64).Load"
  "runtime.gcFlushBgCredit" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcFlushBgCredit" -> "runtime.unlock"
  "runtime.markroot" -> "runtime.gcFlushBgCredit"
  "runtime.gcDrain" -> "runtime.markroot"
  "runtime.pollWork" -> "runtime.getg"
  "runtime.pollWork" -> "(runtime.puintptr).ptr"
  "runtime.pollWork" -> "runtime.runqempty"
  "runtime.pollWork" -> "runtime.netpollinited"
  "runtime.pollWork" -> "runtime.netpoll"
  "runtime.pollWork" -> "(*runtime.gList).empty"
  "runtime.pollWork" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.netpollAnyWaiters" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.pollWork" -> "runtime.netpollAnyWaiters"
  "runtime.pollWork" -> "runtime.injectglist"
  "runtime.pollWork" -> "runtime.netpollAdjustWaiters"
  "runtime.gcDrain" -> "runtime.pollWork"
  "runtime.pollFractionalWorkerExit" -> "runtime.nanotime"
  "runtime.pollFractionalWorkerExit" -> "runtime.getg"
  "runtime.pollFractionalWorkerExit" -> "(runtime.puintptr).ptr"
  "runtime.gcDrain" -> "runtime.pollFractionalWorkerExit"
  "runtime.gcDrain" -> "(*runtime/internal/atomic.Bool).Load"
  "(*runtime.gcWork).balance" -> "runtime.putfull"
  "(*runtime.gcWork).balance" -> "runtime.getempty"
  "runtime.handoff" -> "runtime.getempty"
  "runtime.handoff" -> "runtime.memmove"
  "runtime.handoff" -> "runtime.putfull"
  "(*runtime.gcWork).balance" -> "runtime.handoff"
  "(*runtime.gcWork).balance" -> "(*runtime.gcControllerState).enlistWorker"
  "runtime.gcDrain" -> "(*runtime.gcWork).balance"
  "runtime.gcDrain" -> "(*runtime.gcWork).tryGetFast"
  "(*runtime.gcWork).tryGet" -> "(*runtime.gcWork).init"
  "(*runtime.gcWork).tryGet" -> "runtime.trygetfull"
  "(*runtime.gcWork).tryGet" -> "runtime.putempty"
  "runtime.gcDrain" -> "(*runtime.gcWork).tryGet"
  "runtime.gcDrain" -> "runtime.wbBufFlush"
  "runtime.gcDrain" -> "(*runtime.gcWork).tryGet"
  "runtime.gcDrain" -> "runtime.scanobject"
  "runtime.gcDrain" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcDrain" -> "runtime.gcFlushBgCredit"
  "runtime.gcDrain" -> "runtime.pollWork"
  "runtime.gcDrain" -> "runtime.pollFractionalWorkerExit"
  "runtime.gcDrain" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcDrain" -> "runtime.gcFlushBgCredit"
  "(*runtime.mheap).allocSpan$1" -> "(*runtime.gcCPULimiterState).limiting"
  "runtime.gcDrain" -> "(*runtime.mheap).allocSpan$1"
  "runtime.gcDrain" -> "(*runtime.mheap).allocSpan$1"
  "runtime.gcDrainMarkWorkerDedicated" -> "runtime.gcDrain"
  "runtime.gcBgMarkWorker$2" -> "runtime.gcDrainMarkWorkerDedicated"
  "runtime.gcDrainMarkWorkerFractional" -> "runtime.gcDrain"
  "runtime.gcBgMarkWorker$2" -> "runtime.gcDrainMarkWorkerFractional"
  "runtime.runqdrain" -> "(runtime.guintptr).ptr"
  "runtime.runqdrain" -> "(*runtime.gQueue).pushBack"
  "runtime.runqdrain" -> "(*runtime.guintptr).cas"
  "runtime.runqdrain" -> "runtime/internal/atomic.LoadAcq"
  "runtime.runqdrain" -> "runtime/internal/atomic.CasRel"
  "runtime.runqdrain" -> "(runtime.guintptr).ptr"
  "runtime.runqdrain" -> "(*runtime.gQueue).pushBack"
  "runtime.gcBgMarkWorker$2" -> "runtime.runqdrain"
  "runtime.gcBgMarkWorker$2" -> "runtime.gcDrainMarkWorkerDedicated"
  "runtime.gcBgMarkWorker$2" -> "runtime.lock"
  "runtime.gcBgMarkWorker$2" -> "runtime.globrunqputbatch"
  "runtime.gcBgMarkWorker$2" -> "runtime.unlock"
  "runtime.gcDrainMarkWorkerIdle" -> "runtime.gcDrain"
  "runtime.gcBgMarkWorker$2" -> "runtime.gcDrainMarkWorkerIdle"
  "runtime.gcBgMarkWorker$2" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcBgMarkWorker$2"
  "runtime.mspinning" -> "runtime.getg"
  "runtime.tryRecordGoroutineProfile" -> "runtime.mspinning"
  "runtime.tryRecordGoroutineProfile" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "runtime.flushallmcaches" -> "runtime.assertWorldStopped"
  "runtime.flushmcache" -> "runtime.assertWorldStopped"
  "runtime.flushmcache" -> "(*runtime.mcache).releaseAll"
  "runtime.flushmcache" -> "runtime.stackcache_clear"
  "runtime.flushallmcaches" -> "runtime.flushmcache"
  "runtime.tryRecordGoroutineProfile" -> "runtime.flushallmcaches"
  "(*internal/godebug.Setting).register" -> "(*internal/godebug.Setting).Name"
  "(*internal/godebug.Setting).register" -> "internal/godebug.registerMetric"
  "runtime.tryRecordGoroutineProfile" -> "(*internal/godebug.Setting).register"
  "runtime.persistentalloc1" -> "runtime.throw"
  "runtime.persistentalloc1" -> "runtime.throw"
  "runtime.persistentalloc1" -> "runtime.throw"
  "runtime.persistentalloc1" -> "runtime.sysAlloc"
  "runtime.persistentalloc1" -> "runtime.acquirem"
  "runtime.persistentalloc1" -> "(runtime.puintptr).ptr"
  "runtime.persistentalloc1" -> "runtime.alignUp"
  "runtime.persistentalloc1" -> "runtime.lock"
  "runtime.persistentalloc1" -> "runtime.sysAlloc"
  "runtime.persistentalloc1" -> "(*runtime.notInHeap).add"
  "runtime.persistentalloc1" -> "runtime.releasem"
  "runtime.persistentalloc1" -> "runtime.unlock"
  "runtime.persistentalloc1" -> "runtime.throw"
  "runtime.persistentalloc1" -> "runtime/internal/atomic.Casuintptr"
  "runtime.persistentalloc1" -> "runtime.alignUp"
  "runtime.persistentalloc1" -> "runtime.unlock"
  "runtime.persistentalloc1" -> "(*runtime.sysMemStat).add"
  "runtime.persistentalloc1" -> "(*runtime.sysMemStat).add"
  "runtime.persistentalloc$1" -> "runtime.persistentalloc1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.persistentalloc$1"
  "runtime.tracefree$1" -> "runtime.traceback"
  "runtime.tryRecordGoroutineProfile" -> "runtime.tracefree$1"
  "(*runtime.mheap).freeSpan$1" -> "runtime.getg"
  "(*runtime.mheap).freeSpan$1" -> "(runtime.puintptr).ptr"
  "(*runtime.mheap).freeSpan$1" -> "(*runtime.mspan).base"
  "(*runtime.mheap).freeSpan$1" -> "runtime.pageTraceFree"
  "(*runtime.mheap).freeSpan$1" -> "runtime.lock"
  "(*runtime.mheap).freeSpan$1" -> "(*runtime.mspan).base"
  "(*runtime.mheap).freeSpan$1" -> "runtime.msanfree"
  "(*runtime.mheap).freeSpan$1" -> "(*runtime.mspan).base"
  "(*runtime.mheap).freeSpan$1" -> "runtime.asanpoison"
  "(*runtime.mheap).freeSpan$1" -> "(*runtime.mheap).freeSpanLocked"
  "(*runtime.mheap).freeSpan$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.mheap).freeSpan$1"
  "runtime.saveg" -> "(*runtime.unwinder).initAt"
  "runtime.saveg" -> "runtime.tracebackPCs"
  "runtime.doRecordGoroutineProfile$1" -> "runtime.saveg"
  "runtime.tryRecordGoroutineProfile" -> "runtime.doRecordGoroutineProfile$1"
  "runtime._LostContendedRuntimeLock" -> "runtime._LostContendedRuntimeLock"
  "runtime.tryRecordGoroutineProfile" -> "runtime._LostContendedRuntimeLock"
  "(*runtime.mLockProfile).captureStack$1" -> "(*runtime.unwinder).initAt"
  "(*runtime.mLockProfile).captureStack$1" -> "runtime.tracebackPCs"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.mLockProfile).captureStack$1"
  "runtime.gcMarkDone$2" -> "runtime.stopTheWorldWithSema"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkDone$2"
  "runtime.gcMarkDone$3" -> "runtime.wbBufFlush1"
  "runtime.gcMarkDone$3" -> "(*runtime.gcWork).empty"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkDone$3"
  "runtime.gcMarkDone$4" -> "runtime.startTheWorldWithSema"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkDone$4"
  "runtime.entersyscallblock$1" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.entersyscallblock$1"
  "runtime.entersyscallblock$2" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.entersyscallblock$2"
  "runtime.entersyscallblock_handoff" -> "runtime.traceAcquire"
  "runtime.entersyscallblock_handoff" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).GoSysCall" -> "runtime.tracefpunwindoff"
  "(runtime.traceLocker).GoSysCall" -> "(runtime.puintptr).ptr"
  "(runtime.traceLocker).GoSysCall" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).GoSysCall" -> "(*runtime.traceSchedResourceState).nextSeq"
  "(runtime.traceLocker).GoSysCall" -> "(runtime.traceLocker).stack"
  "(runtime.traceLocker).GoSysCall" -> "(runtime.traceEventWriter).commit"
  "runtime.entersyscallblock_handoff" -> "(runtime.traceLocker).GoSysCall"
  "runtime.entersyscallblock_handoff" -> "runtime.getg"
  "runtime.entersyscallblock_handoff" -> "(runtime.puintptr).ptr"
  "runtime.entersyscallblock_handoff" -> "(runtime.traceLocker).GoSysBlock"
  "runtime.entersyscallblock_handoff" -> "runtime.traceRelease"
  "runtime.entersyscallblock_handoff" -> "runtime.releasep"
  "runtime.entersyscallblock_handoff" -> "runtime.handoffp"
  "runtime.tryRecordGoroutineProfile" -> "runtime.entersyscallblock_handoff"
  "runtime.tryRecordGoroutineProfileWB" -> "runtime.getg"
  "runtime.tryRecordGoroutineProfileWB" -> "(runtime.puintptr).ptr"
  "runtime.tryRecordGoroutineProfileWB" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfileWB" -> "runtime.tryRecordGoroutineProfile"
  "runtime.exitsyscall$1" -> "runtime.tryRecordGoroutineProfileWB"
  "runtime.tryRecordGoroutineProfile" -> "runtime.exitsyscall$1"
  "runtime.exitsyscall$2" -> "(runtime.traceLocker).GoSysExit"
  "runtime.exitsyscall$2" -> "(runtime.traceLocker).GoStart"
  "runtime.tryRecordGoroutineProfile" -> "runtime.exitsyscall$2"
  "runtime.cgoCheckPtrWrite$1" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.cgoCheckPtrWrite$1"
  "runtime.unreachableMethod" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.unreachableMethod"
  "(*runtime.mheap).allocManual" -> "(runtime.spanAllocType).manual"
  "(*runtime.mheap).allocManual" -> "runtime.throw"
  "(*runtime.mheap).allocSpan" -> "runtime.getg"
  "(*runtime.mheap).allocSpan" -> "(runtime.puintptr).ptr"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageCache).empty"
  "(*runtime.mheap).allocSpan" -> "runtime.lock"
  "(*runtime.mheap).allocSpan" -> "runtime.lock"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).allocToCache" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).allocToCache" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).allocToCache" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkPageIndex"
  "(*runtime.pallocBits).find1" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pallocBits).find" -> "(*runtime.pallocBits).find1"
  "(*runtime.pallocBits).findSmallN" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pallocBits).findSmallN" -> "runtime/internal/sys.TrailingZeros64"
  "runtime.findBitRange64" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pallocBits).findSmallN" -> "runtime.findBitRange64"
  "(*runtime.pallocBits).findSmallN" -> "runtime/internal/sys.LeadingZeros64"
  "(*runtime.pallocBits).find" -> "(*runtime.pallocBits).findSmallN"
  "(*runtime.pallocBits).findLargeN" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pallocBits).findLargeN" -> "runtime/internal/sys.LeadingZeros64"
  "(*runtime.pallocBits).findLargeN" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pallocBits).findLargeN" -> "runtime/internal/sys.LeadingZeros64"
  "(*runtime.pallocBits).find" -> "(*runtime.pallocBits).findLargeN"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pallocBits).find"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkPageIndex"
  "(*runtime.pallocBits).allocPages64" -> "(*runtime.pageBits).setBlock64"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pallocBits).allocPages64"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pageBits).clearBlock64"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pageAlloc).update"
  "(*runtime.pageAlloc).allocToCache" -> "runtime/internal/sys.OnesCount64"
  "(*runtime.scavengeIndex).alloc" -> "(*runtime.atomicScavChunkData).load"
  "(*runtime.scavChunkData).alloc" -> "runtime.throw"
  "(*runtime.scavChunkData).alloc" -> "(*runtime.scavChunkFlags).setEmpty"
  "(*runtime.scavengeIndex).alloc" -> "(*runtime.scavChunkData).alloc"
  "(*runtime.scavengeIndex).alloc" -> "(*runtime.atomicScavChunkData).store"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.scavengeIndex).alloc"
  "(*runtime.pageAlloc).find" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).find" -> "runtime.packPallocSum"
  "(*runtime.pageAlloc).find" -> "runtime.offAddrToLevelIndex"
  "(*runtime.pageAlloc).find" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).find" -> "(*runtime.pallocBits).find"
  "(*runtime.pageAlloc).find" -> "runtime.levelIndexToOffAddr"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).lessEqual"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).add"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).add"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).lessThan"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).add"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).lessEqual"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).find$1" -> "runtime.throw"
  "(*runtime.pageAlloc).find$1" -> "(runtime.offAddr).lessThan"
  "(*runtime.pageAlloc).find" -> "(*runtime.pageAlloc).find$1"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).start"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).max"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).end"
  "(*runtime.pageAlloc).find" -> "runtime.levelIndexToOffAddr"
  "(*runtime.pageAlloc).find" -> "(runtime.offAddr).add"
  "(*runtime.pageAlloc).find" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).findMappedAddr" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).findMappedAddr" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).findMappedAddr" -> "runtime.arenaIndex"
  "(*runtime.pageAlloc).findMappedAddr" -> "(runtime.offAddr).addr"
  "(*runtime.addrRanges).findSucc" -> "(runtime.offAddr).addr"
  "(runtime.addrRange).contains" -> "(runtime.offAddr).lessEqual"
  "(runtime.addrRange).contains" -> "(runtime.offAddr).lessThan"
  "(*runtime.addrRanges).findSucc" -> "(runtime.addrRange).contains"
  "(*runtime.addrRanges).findSucc" -> "(runtime.offAddr).lessThan"
  "(*runtime.addrRanges).findSucc" -> "(runtime.offAddr).lessThan"
  "(*runtime.addrRanges).findAddrGreaterEqual" -> "(*runtime.addrRanges).findSucc"
  "(*runtime.addrRanges).findAddrGreaterEqual" -> "(runtime.offAddr).addr"
  "(*runtime.addrRanges).findAddrGreaterEqual" -> "(runtime.addrRange).contains"
  "(*runtime.addrRanges).findAddrGreaterEqual" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).findMappedAddr" -> "(*runtime.addrRanges).findAddrGreaterEqual"
  "(*runtime.pageAlloc).findMappedAddr" -> "(runtime.arenaIdx).l1"
  "(*runtime.pageAlloc).findMappedAddr" -> "(runtime.arenaIdx).l2"
  "(*runtime.pageAlloc).findMappedAddr" -> "(runtime.arenaIdx).l1"
  "(*runtime.pageAlloc).find" -> "(*runtime.pageAlloc).findMappedAddr"
  "(*runtime.pageAlloc).find" -> "runtime.maxSearchAddr"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).start"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).max"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).end"
  "(*runtime.pageAlloc).find" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).start"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).max"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).end"
  "(*runtime.pageAlloc).find" -> "runtime.throw"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).start"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).max"
  "(*runtime.pageAlloc).find" -> "(runtime.pallocSum).end"
  "(*runtime.pageAlloc).find" -> "runtime.throw"
  "(*runtime.pageAlloc).find" -> "runtime.chunkBase"
  "(*runtime.pageAlloc).find" -> "runtime.chunkBase"
  "(*runtime.pageAlloc).find" -> "runtime.chunkBase"
  "(*runtime.pageAlloc).find" -> "(*runtime.pageAlloc).find$1"
  "(*runtime.pageAlloc).find" -> "(*runtime.pageAlloc).findMappedAddr"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pageAlloc).find"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.throw"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkBase"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.alignDown"
  "(*runtime.pallocBits).pages64" -> "(*runtime.pageBits).block64"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pallocBits).pages64"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pageBits).block64"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.maxSearchAddr"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.alignDown"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pallocBits).pages64"
  "(*runtime.pageAlloc).allocToCache" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).allocToCache" -> "(*runtime.pageBits).block64"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageAlloc).allocToCache"
  "(*runtime.mheap).allocSpan" -> "runtime.unlock"
  "(*runtime.pageCache).alloc" -> "runtime/internal/sys.TrailingZeros64"
  "(*runtime.pageCache).allocN" -> "runtime.findBitRange64"
  "(*runtime.pageCache).allocN" -> "runtime/internal/sys.OnesCount64"
  "(*runtime.pageCache).alloc" -> "(*runtime.pageCache).allocN"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageCache).alloc"
  "(*runtime.mheap).tryAllocMSpan" -> "runtime.getg"
  "(*runtime.mheap).tryAllocMSpan" -> "(runtime.puintptr).ptr"
  "(*runtime.mheap).allocSpan" -> "(*runtime.mheap).tryAllocMSpan"
  "(*runtime.mheap).allocSpan" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.mheap).allocSpan" -> "(*runtime.gcCPULimiterState).limiting"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageAlloc).find"
  "(*runtime.mheap).grow" -> "runtime.assertLockHeld"
  "(*runtime.mheap).grow" -> "runtime.alignUp"
  "(*runtime.mheap).grow" -> "runtime.alignUp"
  "(*runtime.mheap).sysAlloc" -> "runtime.assertLockHeld"
  "(*runtime.mheap).sysAlloc" -> "runtime.alignUp"
  "(*runtime.linearAlloc).alloc" -> "runtime.alignUp"
  "(*runtime.linearAlloc).alloc" -> "runtime.alignUp"
  "runtime.sysMap" -> "(*runtime.sysMemStat).add"
  "runtime.sysMapOS" -> "runtime.mmap"
  "runtime.sysMapOS" -> "runtime.throw"
  "runtime.sysMapOS" -> "runtime.throw"
  "runtime.sysNoHugePageOS" -> "runtime.throw"
  "runtime.sysNoHugePageOS" -> "runtime.madvise"
  "runtime.sysMapOS" -> "runtime.sysNoHugePageOS"
  "runtime.sysMap" -> "runtime.sysMapOS"
  "(*runtime.linearAlloc).alloc" -> "runtime.sysMap"
  "runtime.sysUsed" -> "(*runtime/internal/atomic.Uint64).Add"
  "runtime.sysUsedOS" -> "runtime.mmap"
  "runtime.sysUsedOS" -> "runtime.throw"
  "runtime.sysUsedOS" -> "runtime.throw"
  "runtime.sysUsed" -> "runtime.sysUsedOS"
  "(*runtime.linearAlloc).alloc" -> "runtime.sysUsed"
  "(*runtime.mheap).sysAlloc" -> "(*runtime.linearAlloc).alloc"
  "(*runtime.mheap).sysAlloc" -> "runtime.arenaIndex"
  "(*runtime.mheap).sysAlloc" -> "runtime.arenaIndex"
  "runtime.sysReserveOS" -> "runtime.mmap"
  "runtime.sysReserve" -> "runtime.sysReserveOS"
  "(*runtime.mheap).sysAlloc" -> "runtime.sysReserve"
  "runtime.munmap" -> "runtime.systemstack"
  "runtime.munmap" -> "runtime.sysMunmap"
  "runtime.sysFreeOS" -> "runtime.munmap"
  "(*runtime.mheap).sysAlloc" -> "runtime.sysFreeOS"
  "(*runtime.mheap).sysAlloc" -> "(*runtime.fixalloc).free"
  "(*runtime.mheap).sysAlloc" -> "runtime.throw"
  "runtime.sysReserveAligned" -> "runtime.sysReserve"
  "runtime.sysReserveAligned" -> "runtime.sysFreeOS"
  "runtime.sysReserveAligned" -> "runtime.alignUp"
  "runtime.sysReserveAligned" -> "runtime.sysReserve"
  "runtime.sysReserveAligned" -> "runtime.alignUp"
  "runtime.sysReserveAligned" -> "runtime.sysFreeOS"
  "runtime.sysReserveAligned" -> "runtime.sysFreeOS"
  "runtime.sysReserveAligned" -> "runtime.throw"
  "runtime.sysReserveAligned" -> "runtime.sysFreeOS"
  "(*runtime.mheap).sysAlloc" -> "runtime.sysReserveAligned"
  "(*runtime.mheap).sysAlloc" -> "(*runtime.fixalloc).alloc"
  "(*runtime.mheap).sysAlloc" -> "(*runtime.fixalloc).alloc"
  "(*runtime.mheap).sysAlloc" -> "runtime.arenaIndex"
  "(*runtime.mheap).sysAlloc" -> "runtime.arenaIndex"
  "(*runtime.mheap).sysAlloc" -> "runtime.throw"
  "(*runtime.mheap).sysAlloc" -> "runtime.throw"
  "(*runtime.mheap).sysAlloc" -> "runtime.arenaIndex"
  "(*runtime.mheap).sysAlloc" -> "(runtime.arenaIdx).l1"
  "(*runtime.mheap).sysAlloc" -> "runtime.sysAllocOS"
  "(*runtime.mheap).sysAlloc" -> "(runtime.arenaIdx).l2"
  "(*runtime.mheap).sysAlloc" -> "runtime.throw"
  "runtime.sysHugePageOS" -> "runtime.alignUp"
  "runtime.sysHugePageOS" -> "runtime.alignDown"
  "runtime.sysHugePageOS" -> "runtime.madvise"
  "runtime.sysHugePage" -> "runtime.sysHugePageOS"
  "(*runtime.mheap).sysAlloc" -> "runtime.sysHugePage"
  "(*runtime.mheap).sysAlloc" -> "(runtime.arenaIdx).l1"
  "(*runtime.mheap).sysAlloc" -> "runtime/internal/atomic.StorepNoWB"
  "runtime.sysNoHugePage" -> "runtime.sysNoHugePageOS"
  "(*runtime.mheap).sysAlloc" -> "runtime.sysNoHugePage"
  "(*runtime.mheap).sysAlloc" -> "runtime.throw"
  "(*runtime.mheap).sysAlloc" -> "(*runtime.linearAlloc).alloc"
  "(*runtime.mheap).sysAlloc" -> "runtime.persistentalloc"
  "(*runtime.mheap).sysAlloc" -> "runtime.throw"
  "(*runtime.mheap).sysAlloc" -> "(runtime.arenaIdx).l2"
  "(*runtime.mheap).sysAlloc" -> "runtime/internal/atomic.StorepNoWB"
  "(*runtime.mheap).sysAlloc" -> "runtime.persistentalloc"
  "(*runtime.mheap).sysAlloc" -> "runtime.throw"
  "runtime.racemapshadow" -> "runtime.throw"
  "(*runtime.mheap).sysAlloc" -> "runtime.racemapshadow"
  "(*runtime.mheap).grow" -> "(*runtime.mheap).sysAlloc"
  "(*runtime.mheap).grow" -> "runtime.sysMap"
  "(*runtime.mheap).grow" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mheap).grow" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).grow" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.pageAlloc).grow" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).grow" -> "runtime.alignUp"
  "(*runtime.pageAlloc).grow" -> "runtime.alignDown"
  "(*runtime.pageAlloc).sysGrow" -> "runtime.throw"
  "(*runtime.pageAlloc).sysGrow" -> "(*runtime.addrRanges).findSucc"
  "runtime.makeAddrRange" -> "runtime.throw"
  "(*runtime.pageAlloc).sysGrow" -> "runtime.makeAddrRange"
  "(*runtime.pageAlloc).sysGrow$1" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).sysGrow$1" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).sysGrow$1" -> "runtime.addrsToSummaryRange"
  "runtime.blockAlignSummaryRange" -> "runtime.alignDown"
  "runtime.blockAlignSummaryRange" -> "runtime.alignUp"
  "(*runtime.pageAlloc).sysGrow$1" -> "runtime.blockAlignSummaryRange"
  "(*runtime.pageAlloc).sysGrow" -> "(*runtime.pageAlloc).sysGrow$1"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.throw"
  "(*runtime.scavengeIndex).sysGrow" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.scavengeIndex).sysGrow" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.chunkIndex"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.alignDown"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.chunkIndex"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.alignUp"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.makeAddrRange"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.makeAddrRange"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessEqual"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessThan"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessEqual"
  "(runtime.addrRange).subtract" -> "runtime.throw"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessThan"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessThan"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessThan"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessThan"
  "(runtime.addrRange).subtract" -> "(runtime.offAddr).lessThan"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.addrRange).subtract"
  "(runtime.addrRange).size" -> "(runtime.offAddr).lessThan"
  "(runtime.addrRange).size" -> "(runtime.offAddr).diff"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.offAddr).addr"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.sysMap"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.offAddr).addr"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.scavengeIndex).sysGrow" -> "runtime.sysUsed"
  "(*runtime.scavengeIndex).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.scavengeIndex).sysGrow" -> "(*runtime/internal/atomic.Uintptr).Store"
  "(*runtime.scavengeIndex).sysGrow" -> "(*runtime/internal/atomic.Uintptr).Store"
  "(*runtime.pageAlloc).sysGrow" -> "(*runtime.scavengeIndex).sysGrow"
  "(*runtime.pageAlloc).sysGrow$2" -> "runtime.alignDown"
  "(*runtime.pageAlloc).sysGrow$2" -> "runtime.alignUp"
  "(*runtime.pageAlloc).sysGrow$2" -> "runtime.add"
  "(*runtime.pageAlloc).sysGrow$2" -> "runtime.add"
  "(*runtime.pageAlloc).sysGrow" -> "(*runtime.pageAlloc).sysGrow$2"
  "(*runtime.pageAlloc).sysGrow$3" -> "(*runtime.pageAlloc).sysGrow$1"
  "(*runtime.pageAlloc).sysGrow$3" -> "(*runtime.pageAlloc).sysGrow$2"
  "(*runtime.pageAlloc).sysGrow" -> "(*runtime.pageAlloc).sysGrow$3"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.addrRange).subtract"
  "(*runtime.pageAlloc).sysGrow" -> "(*runtime.pageAlloc).sysGrow$3"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.addrRange).subtract"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.pageAlloc).sysGrow" -> "runtime.sysMap"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.pageAlloc).sysGrow" -> "runtime.sysUsed"
  "(*runtime.pageAlloc).sysGrow" -> "(runtime.addrRange).size"
  "(*runtime.pageAlloc).grow" -> "(*runtime.pageAlloc).sysGrow"
  "(*runtime.scavengeIndex).grow" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.scavengeIndex).grow" -> "runtime.chunkIndex"
  "(*runtime.scavengeIndex).grow" -> "(*runtime/internal/atomic.Uintptr).Store"
  "(*runtime.scavengeIndex).grow" -> "(*runtime.scavengeIndex).sysGrow"
  "(*runtime.pageAlloc).grow" -> "(*runtime.scavengeIndex).grow"
  "(*runtime.pageAlloc).grow" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).grow" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).grow" -> "runtime.makeAddrRange"
  "(*runtime.addrRanges).add" -> "(runtime.addrRange).size"
  "(*runtime.addrRanges).add" -> "(runtime.offAddr).addr"
  "(*runtime.addrRanges).add" -> "(runtime.offAddr).addr"
  "(*runtime.addrRanges).add" -> "runtime.throw"
  "(*runtime.addrRanges).add" -> "(runtime.offAddr).addr"
  "(*runtime.addrRanges).add" -> "(*runtime.addrRanges).findSucc"
  "(*runtime.addrRanges).add" -> "(runtime.offAddr).equal"
  "(*runtime.addrRanges).add" -> "(runtime.offAddr).equal"
  "(*runtime.addrRanges).add" -> "(runtime.addrRange).size"
  "(*runtime.addrRanges).add" -> "runtime.persistentalloc"
  "(*runtime.pageAlloc).grow" -> "(*runtime.addrRanges).add"
  "(*runtime.pageAlloc).grow" -> "(runtime.offAddr).lessThan"
  "(*runtime.pageAlloc).grow" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).grow" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).grow" -> "(runtime.chunkIdx).l1"
  "(*runtime.pageAlloc).grow" -> "(*runtime.pageAlloc).update"
  "(*runtime.pageAlloc).grow" -> "runtime.sysAlloc"
  "(*runtime.pageAlloc).grow" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageBits).setRange" -> "(*runtime.pageBits).set"
  "(*runtime.pageAlloc).grow" -> "(*runtime.pageBits).setRange"
  "(*runtime.pageAlloc).grow" -> "runtime.throw"
  "(*runtime.pageAlloc).grow" -> "(runtime.chunkIdx).l1"
  "(*runtime.pageAlloc).grow" -> "runtime.sysHugePage"
  "(*runtime.pageAlloc).grow" -> "runtime.sysNoHugePage"
  "(*runtime.mheap).grow" -> "(*runtime.pageAlloc).grow"
  "(*runtime.mheap).grow" -> "(*runtime.sysMemStat).load"
  "(*runtime.mheap).grow" -> "(*runtime.sysMemStat).load"
  "(*runtime.mheap).grow" -> "(*runtime.sysMemStat).load"
  "(*runtime.mheap).grow" -> "runtime.alignUp"
  "(*runtime.mheap).grow" -> "runtime.sysMap"
  "(*runtime.mheap).grow" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mheap).grow" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).grow" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.mheap).grow" -> "(*runtime.pageAlloc).grow"
  "(*runtime.mheap).allocSpan" -> "(*runtime.mheap).grow"
  "(*runtime.mheap).allocSpan" -> "runtime.alignUp"
  "(*runtime.pageAlloc).allocRange" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).allocRange" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).allocRange" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).allocRange" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).allocRange" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageBits).popcntRange" -> "runtime/internal/sys.OnesCount64"
  "(*runtime.pageBits).popcntRange" -> "runtime/internal/sys.OnesCount64"
  "(*runtime.pageBits).popcntRange" -> "runtime/internal/sys.OnesCount64"
  "(*runtime.pageBits).popcntRange" -> "runtime/internal/sys.OnesCount64"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageBits).popcntRange"
  "(*runtime.pallocBits).allocRange" -> "(*runtime.pageBits).setRange"
  "(*runtime.pallocData).allocRange" -> "(*runtime.pallocBits).allocRange"
  "(*runtime.pallocData).allocRange" -> "(*runtime.pageBits).clearRange"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pallocData).allocRange"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.scavengeIndex).alloc"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageAlloc).update"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageBits).popcntRange"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pallocData).allocRange"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.scavengeIndex).alloc"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageBits).popcntRange"
  "(*runtime.pallocBits).allocAll" -> "(*runtime.pageBits).setAll"
  "(*runtime.pallocData).allocAll" -> "(*runtime.pallocBits).allocAll"
  "(*runtime.pallocData).allocAll" -> "(*runtime.pageBits).clearAll"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pallocData).allocAll"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.scavengeIndex).alloc"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pageBits).popcntRange"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.pallocData).allocRange"
  "(*runtime.pageAlloc).allocRange" -> "(*runtime.scavengeIndex).alloc"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageAlloc).allocRange"
  "(*runtime.mheap).allocSpan" -> "runtime.unlock"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageAlloc).find"
  "(*runtime.mheap).allocSpan" -> "runtime.throw"
  "(*runtime.pageAlloc).alloc" -> "runtime.assertLockHeld"
  "(*runtime.pageAlloc).alloc" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).alloc" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).alloc" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).alloc" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).alloc" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).alloc" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).alloc" -> "(runtime.pallocSum).max"
  "(*runtime.pageAlloc).alloc" -> "(*runtime.pageAlloc).find"
  "(*runtime.pageAlloc).alloc" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).alloc" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).alloc" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).alloc" -> "(*runtime.pallocBits).find"
  "(*runtime.pageAlloc).alloc" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).alloc" -> "runtime.chunkPageIndex"
  "(*runtime.pageAlloc).alloc" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).alloc" -> "runtime.throw"
  "(*runtime.pageAlloc).alloc" -> "runtime.chunkBase"
  "(*runtime.pageAlloc).alloc" -> "runtime.chunkBase"
  "(*runtime.pageAlloc).alloc" -> "(*runtime.pageAlloc).allocRange"
  "(*runtime.pageAlloc).alloc" -> "(runtime.offAddr).lessThan"
  "(*runtime.pageAlloc).alloc" -> "runtime.maxSearchAddr"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageAlloc).alloc"
  "(*runtime.mheap).allocSpan" -> "(*runtime.mheap).grow"
  "(*runtime.mheap).allocSpan" -> "runtime.unlock"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageAlloc).alloc"
  "(*runtime.mheap).allocSpan" -> "runtime.throw"
  "(*runtime.mheap).allocMSpanLocked" -> "runtime.assertLockHeld"
  "(*runtime.mheap).allocMSpanLocked" -> "runtime.getg"
  "(*runtime.mheap).allocMSpanLocked" -> "(runtime.puintptr).ptr"
  "(*runtime.mheap).allocMSpanLocked" -> "(*runtime.fixalloc).alloc"
  "(*runtime.mheap).allocMSpanLocked" -> "(*runtime.fixalloc).alloc"
  "(*runtime.mheap).allocSpan" -> "(*runtime.mheap).allocMSpanLocked"
  "(*runtime.mheap).allocSpan" -> "runtime.unlock"
  "(*runtime.mheap).allocSpan" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.mheap).allocSpan" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.mheap).allocSpan" -> "runtime.heapRetained"
  "(*runtime.mheap).allocSpan" -> "runtime.nanotime"
  "(*runtime.mheap).allocSpan" -> "(*runtime.limiterEvent).start"
  "(*runtime.scavengeIndex).find" -> "(*runtime.atomicOffAddr).Load"
  "(*runtime.scavengeIndex).find" -> "(runtime.offAddr).addr"
  "(*runtime.scavengeIndex).find" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.scavengeIndex).find" -> "runtime.chunkIndex"
  "(*runtime.scavengeIndex).find" -> "(*runtime.atomicScavChunkData).load"
  "(runtime.scavChunkData).shouldScavenge" -> "(*runtime.scavChunkFlags).isEmpty"
  "(*runtime.scavengeIndex).find" -> "(runtime.scavChunkData).shouldScavenge"
  "(*runtime.atomicOffAddr).Clear" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.atomicOffAddr).Clear" -> "(runtime.offAddr).addr"
  "(*runtime/internal/atomic.Int64).CompareAndSwap" -> "runtime/internal/atomic.Casint64"
  "(*runtime.atomicOffAddr).Clear" -> "(*runtime/internal/atomic.Int64).CompareAndSwap"
  "(*runtime.scavengeIndex).find" -> "(*runtime.atomicOffAddr).Clear"
  "(*runtime.scavengeIndex).find" -> "runtime.chunkPageIndex"
  "(*runtime.scavengeIndex).find" -> "runtime.chunkBase"
  "(*runtime.atomicOffAddr).StoreUnmark" -> "(*runtime/internal/atomic.Int64).CompareAndSwap"
  "(*runtime.scavengeIndex).find" -> "(*runtime.atomicOffAddr).StoreUnmark"
  "(*runtime.atomicOffAddr).StoreMin" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.atomicOffAddr).StoreMin" -> "(*runtime/internal/atomic.Int64).CompareAndSwap"
  "(*runtime.scavengeIndex).find" -> "(*runtime.atomicOffAddr).StoreMin"
  "(*runtime.pageAlloc).scavenge" -> "(*runtime.scavengeIndex).find"
  "(*runtime.pageAlloc).scavenge" -> "runtime.systemstack"
  "(*runtime.pageAlloc).scavenge" -> "runtime.pollWork"
  "(*runtime.pageAlloc).scavenge" -> "runtime.pollFractionalWorkerExit"
  "(*runtime.pageAlloc).scavenge" -> "(*runtime.mheap).allocSpan$1"
  "(*runtime.mheap).allocSpan" -> "(*runtime.pageAlloc).scavenge"
  "(*runtime.mheap).allocSpan" -> "(*runtime/internal/atomic.Uintptr).Add"
  "(*runtime.mheap).allocSpan" -> "runtime.nanotime"
  "(*runtime.mspan).init" -> "(*runtime.mSpanStateBox).set"
  "(*runtime.mspan).init" -> "runtime.lockInit"
  "(*runtime.mheap).initSpan" -> "(*runtime.mspan).init"
  "(*runtime.mheap).allocNeedsZero" -> "runtime.arenaIndex"
  "(*runtime.mheap).allocNeedsZero" -> "(runtime.arenaIdx).l1"
  "(*runtime.mheap).allocNeedsZero" -> "(runtime.arenaIdx).l2"
  "(*runtime.mheap).allocNeedsZero" -> "runtime/internal/atomic.Loaduintptr"
  "(*runtime.mheap).allocNeedsZero" -> "runtime/internal/atomic.Casuintptr"
  "(*runtime.mheap).allocNeedsZero" -> "runtime/internal/atomic.Loaduintptr"
  "(*runtime.mheap).allocNeedsZero" -> "runtime.throw"
  "(*runtime.mheap).initSpan" -> "(*runtime.mheap).allocNeedsZero"
  "(*runtime.mheap).initSpan" -> "(runtime.spanAllocType).manual"
  "(*runtime.mheap).initSpan" -> "(*runtime.mspan).base"
  "(*runtime.mheap).initSpan" -> "(*runtime.mSpanStateBox).set"
  "(*runtime.mheap).initSpan" -> "(*runtime.mspan).base"
  "(*runtime.mheap).setSpans" -> "runtime.arenaIndex"
  "(*runtime.mheap).setSpans" -> "(runtime.arenaIdx).l1"
  "(*runtime.mheap).setSpans" -> "(runtime.arenaIdx).l2"
  "(*runtime.mheap).setSpans" -> "runtime.arenaIndex"
  "(*runtime.mheap).setSpans" -> "(runtime.arenaIdx).l1"
  "(*runtime.mheap).setSpans" -> "(runtime.arenaIdx).l2"
  "(*runtime.mheap).initSpan" -> "(*runtime.mheap).setSpans"
  "(*runtime.mheap).initSpan" -> "(runtime.spanAllocType).manual"
  "(*runtime.mheap).initSpan" -> "(runtime.spanClass).sizeclass"
  "(*runtime.mheap).initSpan" -> "runtime.newMarkBits"
  "runtime.newAllocBits" -> "runtime.newMarkBits"
  "(*runtime.mheap).initSpan" -> "runtime.newAllocBits"
  "(*runtime.mheap).initSpan" -> "runtime/internal/atomic.Store"
  "(*runtime.mheap).initSpan" -> "(*runtime.mSpanStateBox).set"
  "(*runtime.mheap).initSpan" -> "runtime.heapBitsInSpan"
  "(*runtime.mheap).initSpan" -> "(runtime.spanClass).noscan"
  "(*runtime.mheap).initSpan" -> "(*runtime.mspan).base"
  "(*runtime.mheap).initSpan" -> "runtime.pageIndexOf"
  "(*runtime.mheap).initSpan" -> "runtime/internal/atomic.Or8"
  "(*runtime.mheap).initSpan" -> "(*runtime/internal/atomic.Uintptr).Add"
  "(*runtime.mheap).initSpan" -> "runtime.publicationBarrier"
  "(*runtime.mheap).allocSpan" -> "(*runtime.mheap).initSpan"
  "(*runtime.mheap).allocSpan" -> "(*runtime.limiterEvent).stop"
  "(*runtime.mheap).allocSpan" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.mheap).allocSpan" -> "runtime.sysUsed"
  "(*runtime.mheap).allocSpan" -> "(*runtime.sysMemStat).add"
  "(*runtime.mheap).allocSpan" -> "(*runtime.sysMemStat).add"
  "(*runtime.mheap).allocSpan" -> "(*runtime.sysMemStat).add"
  "(*runtime.mheap).allocSpan" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.mheap).allocSpan" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).allocSpan" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).allocSpan" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.mheap).allocSpan" -> "runtime.pageTraceAlloc"
  "(*runtime.mheap).allocSpan" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).allocSpan" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).allocSpan" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).allocSpan" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.mheap).allocManual" -> "(*runtime.mheap).allocSpan"
  "runtime.heapSetType$1" -> "(*runtime.mheap).allocManual"
  "runtime.heapSetType$1" -> "(*runtime.mspan).base"
  "runtime.heapSetType$1" -> "runtime.memclrNoHeapPointers"
  "runtime.tryRecordGoroutineProfile" -> "runtime.heapSetType$1"
  "runtime.tracealloc$1" -> "runtime.traceback"
  "runtime.tryRecordGoroutineProfile" -> "runtime.tracealloc$1"
  "runtime.wirep$1" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.wirep$1"
  "runtime.wirep$2" -> "(runtime.muintptr).ptr"
  "runtime.wirep$2" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.wirep$2"
  "runtime.tryRecordGoroutineProfile" -> "runtime.sigreturn__sigaction"
  "runtime.tryRecordGoroutineProfile" -> "runtime.cgoSigtramp"
  "runtime.tryRecordGoroutineProfile" -> "runtime.sigtramp"
  "runtime.forEachP$1" -> "runtime.getg"
  "runtime.forEachP$1" -> "runtime.casGToWaiting"
  "runtime.forEachPInternal" -> "runtime.acquirem"
  "runtime.forEachPInternal" -> "runtime.getg"
  "runtime.forEachPInternal" -> "(runtime.puintptr).ptr"
  "runtime.forEachPInternal" -> "runtime.lock"
  "runtime.forEachPInternal" -> "runtime.throw"
  "runtime.forEachPInternal" -> "runtime.preemptall"
  "runtime.forEachPInternal" -> "(runtime.puintptr).ptr"
  "runtime.forEachPInternal" -> "runtime/internal/atomic.Store"
  "runtime.forEachPInternal" -> "runtime/internal/atomic.Cas"
  "runtime.forEachPInternal" -> "runtime.unlock"
  "runtime.forEachPInternal" -> "runtime.gcMarkDone$1"
  "runtime.forEachPInternal" -> "runtime.gcMarkTermination$4"
  "runtime.forEachPInternal" -> "runtime.gcMarkDone$1"
  "runtime.forEachPInternal" -> "runtime.gcMarkTermination$4"
  "runtime.forEachPInternal" -> "(runtime.puintptr).ptr"
  "runtime.forEachPInternal" -> "runtime.traceAcquire"
  "runtime.forEachPInternal" -> "(runtime.traceLocker).ok"
  "runtime.forEachPInternal" -> "(runtime.traceLocker).ok"
  "runtime.forEachPInternal" -> "runtime/internal/atomic.Cas"
  "runtime.forEachPInternal" -> "(runtime.traceLocker).GoSysBlock"
  "runtime.forEachPInternal" -> "(runtime.traceLocker).ProcSteal"
  "runtime.forEachPInternal" -> "runtime.traceRelease"
  "runtime.forEachPInternal" -> "runtime.handoffp"
  "runtime.forEachPInternal" -> "runtime.traceRelease"
  "runtime.forEachPInternal" -> "runtime.notetsleep"
  "runtime.forEachPInternal" -> "runtime.noteclear"
  "runtime.forEachPInternal" -> "runtime.preemptall"
  "runtime.forEachPInternal" -> "runtime.throw"
  "runtime.forEachPInternal" -> "runtime.lock"
  "runtime.forEachPInternal" -> "runtime.unlock"
  "runtime.forEachPInternal" -> "runtime.releasem"
  "runtime.forEachPInternal" -> "runtime.throw"
  "runtime.forEachP$1" -> "runtime.forEachPInternal"
  "runtime.forEachP$1" -> "runtime.casgstatus"
  "runtime.tryRecordGoroutineProfile" -> "runtime.forEachP$1"
  "runtime.tracegc" -> "runtime.lock"
  "runtime.tracegc" -> "runtime.getg"
  "runtime.tracegc" -> "runtime.tracebackothers"
  "runtime.tracegc" -> "runtime.unlock"
  "runtime.gcMark" -> "runtime.tracegc"
  "runtime.gcMark" -> "runtime.throw"
  "runtime.gcMarkRootCheck" -> "runtime.throw"
  "runtime.gcMarkRootCheck" -> "runtime.forEachGRace"
  "runtime.gcMark" -> "runtime.gcMarkRootCheck"
  "runtime.gcMark" -> "runtime.wbBufFlush1"
  "runtime.gcMark" -> "(*runtime.gcWork).empty"
  "runtime.gcMark" -> "(*runtime.wbBuf).reset"
  "runtime.gcMark" -> "runtime.printlock"
  "runtime.gcMark" -> "(*runtime.gcWork).dispose"
  "runtime.gcMark" -> "runtime.throw"
  "(*runtime.gcControllerState).resetLive" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.gcControllerState).resetLive" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).resetLive" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.gcControllerState).resetLive" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).resetLive" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).resetLive" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.gcControllerState).resetLive" -> "runtime.traceAcquire"
  "(*runtime.gcControllerState).resetLive" -> "(runtime.traceLocker).ok"
  "(*runtime.gcControllerState).resetLive" -> "(runtime.traceLocker).HeapAlloc"
  "(*runtime.gcControllerState).resetLive" -> "runtime.traceRelease"
  "runtime.gcMark" -> "(*runtime.gcControllerState).resetLive"
  "runtime.gcMarkTermination$1" -> "runtime.gcMark"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkTermination$1"
  "runtime.startCheckmarks" -> "runtime.assertWorldStopped"
  "runtime.startCheckmarks" -> "(runtime.arenaIdx).l1"
  "runtime.startCheckmarks" -> "(runtime.arenaIdx).l2"
  "runtime.startCheckmarks" -> "runtime.persistentalloc"
  "runtime.startCheckmarks" -> "runtime.throw"
  "runtime.gcMarkTermination$2" -> "runtime.startCheckmarks"
  "runtime.gcMarkTermination$2" -> "runtime.gcResetMarkState"
  "runtime.gcMarkTermination$2" -> "runtime.getg"
  "runtime.gcMarkTermination$2" -> "(runtime.puintptr).ptr"
  "runtime.gcMarkTermination$2" -> "runtime.gcDrain"
  "runtime.gcMarkTermination$2" -> "runtime.getg"
  "runtime.gcMarkTermination$2" -> "(runtime.puintptr).ptr"
  "runtime.gcMarkTermination$2" -> "runtime.wbBufFlush1"
  "runtime.gcMarkTermination$2" -> "(*runtime.gcWork).dispose"
  "runtime.endCheckmarks" -> "runtime.gcMarkWorkAvailable"
  "runtime.endCheckmarks" -> "runtime.throw"
  "runtime.gcMarkTermination$2" -> "runtime.endCheckmarks"
  "runtime.gcMarkTermination$2" -> "runtime.setGCPhase"
  "runtime.gcSweep" -> "runtime.assertWorldStopped"
  "runtime.gcSweep" -> "runtime.throw"
  "runtime.gcSweep" -> "runtime.lock"
  "(*runtime.activeSweep).reset" -> "runtime.assertWorldStopped"
  "(*runtime.activeSweep).reset" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.gcSweep" -> "(*runtime.activeSweep).reset"
  "runtime.gcSweep" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcSweep" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcSweep" -> "(*runtime/internal/atomic.Uintptr).Store"
  "runtime.gcSweep" -> "runtime.unlock"
  "(*runtime.sweepClass).clear" -> "runtime/internal/atomic.Store"
  "runtime.gcSweep" -> "(*runtime.sweepClass).clear"
  "runtime.gcSweep" -> "runtime.lock"
  "runtime.gcSweep" -> "runtime.unlock"
  "runtime.gcSweep" -> "runtime.lock"
  "runtime.gcSweep" -> "(*runtime.mcache).prepareForSweep"
  "runtime.gcSweep" -> "runtime.prepareFreeWorkbufs"
  "runtime.gcSweep" -> "runtime.sweepone"
  "runtime.gcSweep" -> "runtime.mProf_NextCycle"
  "runtime.gcSweep" -> "runtime.mProf_Flush"
  "runtime.freeSomeWbufs" -> "runtime.lock"
  "runtime.freeSomeWbufs" -> "runtime.unlock"
  "runtime.freeSomeWbufs" -> "runtime.systemstack"
  "runtime.freeSomeWbufs" -> "(*runtime.mSpanList).isEmpty"
  "runtime.freeSomeWbufs" -> "runtime.unlock"
  "runtime.freeSomeWbufs" -> "(*runtime.mSpanList).isEmpty"
  "runtime.gcSweep" -> "runtime.freeSomeWbufs"
  "runtime.gcSweep" -> "runtime.ready"
  "runtime.gcSweep" -> "runtime.unlock"
  "runtime.gcMarkTermination$2" -> "runtime.gcSweep"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkTermination$2"
  "runtime.gcControllerCommit" -> "runtime.assertWorldStoppedOrLockHeld"
  "(*runtime.activeSweep).isDone" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.isSweepDone" -> "(*runtime.activeSweep).isDone"
  "runtime.gcControllerCommit" -> "runtime.isSweepDone"
  "(*runtime.gcControllerState).commit" -> "runtime.assertWorldStoppedOrLockHeld"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Int32).Load"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).commit" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcControllerCommit" -> "(*runtime.gcControllerState).commit"
  "runtime.gcControllerCommit" -> "(*runtime.gcControllerState).revise"
  "runtime.gcControllerCommit" -> "runtime.traceAcquire"
  "runtime.gcControllerCommit" -> "(runtime.traceLocker).ok"
  "(runtime.traceLocker).HeapGoal" -> "(*runtime.gcControllerState).heapGoal"
  "(runtime.traceLocker).HeapGoal" -> "(runtime.traceLocker).eventWriter"
  "(runtime.traceLocker).HeapGoal" -> "(runtime.traceEventWriter).commit"
  "runtime.gcControllerCommit" -> "(runtime.traceLocker).HeapGoal"
  "runtime.gcControllerCommit" -> "runtime.traceRelease"
  "runtime.gcControllerCommit" -> "(*runtime.gcControllerState).trigger"
  "runtime.gcPaceSweeper" -> "runtime.assertWorldStoppedOrLockHeld"
  "runtime.gcPaceSweeper" -> "runtime.isSweepDone"
  "runtime.gcPaceSweeper" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcPaceSweeper" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcPaceSweeper" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.gcPaceSweeper" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcControllerCommit" -> "runtime.gcPaceSweeper"
  "runtime.gcControllerCommit" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.gcPaceScavenger" -> "runtime.assertWorldStoppedOrLockHeld"
  "runtime.gcPaceScavenger" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcPaceScavenger" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcPaceScavenger" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcPaceScavenger" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcPaceScavenger" -> "runtime.heapRetained"
  "runtime.gcPaceScavenger" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcPaceScavenger" -> "(*runtime/internal/atomic.Uint64).Store"
  "runtime.gcControllerCommit" -> "runtime.gcPaceScavenger"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcControllerCommit"
  "runtime.gcMarkTermination$3" -> "runtime.startTheWorldWithSema"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkTermination$3"
  "runtime.freeStackSpans" -> "runtime.lock"
  "runtime.freeStackSpans" -> "runtime.lock"
  "runtime.freeStackSpans" -> "runtime.unlock"
  "runtime.freeStackSpans" -> "(*runtime.mSpanList).remove"
  "runtime.freeStackSpans" -> "runtime.osStackFree"
  "runtime.freeStackSpans" -> "(*runtime.mheap).freeManual"
  "runtime.freeStackSpans" -> "runtime.unlock"
  "runtime.freeStackSpans" -> "(*runtime.mSpanList).remove"
  "runtime.freeStackSpans" -> "runtime.osStackFree"
  "runtime.freeStackSpans" -> "(*runtime.mheap).freeManual"
  "runtime.tryRecordGoroutineProfile" -> "runtime.freeStackSpans"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "runtime.lock"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "runtime.unlock"
  "(*runtime.addrRanges).cloneInto" -> "runtime.persistentalloc"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "(*runtime.addrRanges).cloneInto"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "runtime.unlock"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "(runtime.chunkIdx).l1"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "(runtime.offAddr).addr"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "runtime.chunkIndex"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "(runtime.chunkIdx).l1"
  "(*runtime.pageAlloc).enableChunkHugePages" -> "runtime.sysHugePage"
  "(*runtime.mheap).enableMetadataHugePages" -> "(*runtime.pageAlloc).enableChunkHugePages"
  "(*runtime.mheap).enableMetadataHugePages" -> "runtime.lock"
  "(*runtime.mheap).enableMetadataHugePages" -> "runtime.unlock"
  "(*runtime.mheap).enableMetadataHugePages" -> "runtime.unlock"
  "(*runtime.mheap).enableMetadataHugePages" -> "runtime/internal/atomic.Loadp"
  "(*runtime.mheap).enableMetadataHugePages" -> "runtime.sysHugePage"
  "runtime.gcMarkTermination$5" -> "(*runtime.mheap).enableMetadataHugePages"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkTermination$5"
  "runtime.exitsyscallfast_pidle" -> "runtime.lock"
  "runtime.exitsyscallfast_pidle" -> "runtime.pidleget"
  "runtime.exitsyscallfast_pidle" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.exitsyscallfast_pidle" -> "runtime.notewakeup"
  "runtime.exitsyscallfast_pidle" -> "runtime.unlock"
  "runtime.exitsyscallfast_pidle" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.exitsyscallfast_pidle" -> "runtime.acquirep"
  "runtime.exitsyscallfast$1" -> "runtime.exitsyscallfast_pidle"
  "runtime.exitsyscallfast$1" -> "runtime.traceAcquire"
  "runtime.exitsyscallfast$1" -> "(runtime.traceLocker).ok"
  "runtime.exitsyscallfast$1" -> "(runtime.traceLocker).GoSysExit"
  "runtime.exitsyscallfast$1" -> "runtime.traceRelease"
  "runtime.exitsyscallfast$1" -> "runtime.osyield"
  "runtime.tryRecordGoroutineProfile" -> "runtime.exitsyscallfast$1"
  "runtime.stackfree" -> "runtime.getg"
  "runtime.stackfree" -> "runtime.throw"
  "runtime.stackfree" -> "runtime.throw"
  "runtime.stackfree" -> "runtime.memclrNoHeapPointers"
  "runtime.stackfree" -> "runtime.sysFault"
  "runtime.sysFree" -> "(*runtime.sysMemStat).add"
  "runtime.sysFree" -> "(*runtime/internal/atomic.Uint64).Add"
  "runtime.sysFree" -> "runtime.sysFreeOS"
  "runtime.stackfree" -> "runtime.sysFree"
  "runtime.stackfree" -> "runtime.msanfree"
  "runtime.stackfree" -> "runtime.asanpoison"
  "runtime.stackfree" -> "runtime.spanOfUnchecked"
  "runtime.stackfree" -> "(*runtime.mSpanStateBox).get"
  "runtime.stackfree" -> "runtime.lock"
  "runtime.stackfree" -> "runtime.stackpoolfree"
  "runtime.stackfree" -> "runtime.unlock"
  "runtime.stackfree" -> "(runtime.puintptr).ptr"
  "runtime.stackcacherelease" -> "runtime.lock"
  "runtime.stackcacherelease" -> "(runtime.gclinkptr).ptr"
  "runtime.stackcacherelease" -> "runtime.stackpoolfree"
  "runtime.stackcacherelease" -> "runtime.unlock"
  "runtime.stackfree" -> "runtime.stackcacherelease"
  "runtime.stackfree" -> "(runtime.gclinkptr).ptr"
  "runtime.stackfree" -> "(*runtime.mspan).base"
  "runtime.stackfree" -> "runtime.throw"
  "runtime.stackfree" -> "runtime.osStackFree"
  "runtime.stackfree" -> "(*runtime.mheap).freeManual"
  "runtime.stackfree" -> "runtime.stacklog2"
  "runtime.stackfree" -> "runtime.lock"
  "runtime.stackfree" -> "(*runtime.mSpanList).insert"
  "runtime.stackfree" -> "runtime.unlock"
  "runtime.allocm$1" -> "runtime.stackfree"
  "runtime.tryRecordGoroutineProfile" -> "runtime.allocm$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.mstart"
  "runtime.getempty$1" -> "(*runtime.mheap).allocManual"
  "runtime.tryRecordGoroutineProfile" -> "runtime.getempty$1"
  "(*runtime.p).destroy$1" -> "(*runtime.fixalloc).free"
  "(*runtime.p).destroy$1" -> "runtime.lock"
  "(*runtime.pageCache).flush" -> "runtime.assertLockHeld"
  "(*runtime.pageCache).flush" -> "(*runtime.pageCache).empty"
  "(*runtime.pageCache).flush" -> "runtime.chunkIndex"
  "(*runtime.pageCache).flush" -> "runtime.chunkPageIndex"
  "(*runtime.pageCache).flush" -> "(runtime.offAddr).lessThan"
  "(*runtime.pageCache).flush" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageCache).flush" -> "(*runtime.pallocBits).free1"
  "(*runtime.pageCache).flush" -> "(*runtime.scavengeIndex).free"
  "(*runtime.pageCache).flush" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageCache).flush" -> "(*runtime.pageBits).setRange"
  "(*runtime.pageCache).flush" -> "(*runtime.pageAlloc).update"
  "(*runtime.p).destroy$1" -> "(*runtime.pageCache).flush"
  "(*runtime.p).destroy$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.p).destroy$1"
  "periph.io/x/host/v3/pmem.isWSL$1" -> "os.ReadFile"
  "bytes.IndexByte" -> "internal/bytealg.IndexByte"
  "bytes.Index" -> "bytes.IndexByte"
  "bytes.Index" -> "bytes.Equal"
  "bytes.Index" -> "internal/bytealg.Index"
  "bytes.Index" -> "bytes.IndexByte"
  "bytes.Index" -> "internal/bytealg.Cutover"
  "bytes.Index" -> "bytes.Equal"
  "bytes.Index" -> "internal/bytealg.Index"
  "bytes.Index" -> "bytes.IndexByte"
  "bytes.Index" -> "bytes.Equal"
  "internal/bytealg.IndexRabinKarp[[]byte]" -> "internal/bytealg.HashStr[[]byte]"
  "bytes.Index" -> "internal/bytealg.IndexRabinKarp[[]byte]"
  "bytes.Contains" -> "bytes.Index"
  "periph.io/x/host/v3/pmem.isWSL$1" -> "bytes.Contains"
  "runtime.tryRecordGoroutineProfile" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "runtime.gcAssistAlloc1" -> "runtime/internal/atomic.Load"
  "runtime.gcAssistAlloc1" -> "runtime.nanotime"
  "runtime.gcAssistAlloc1" -> "(runtime.puintptr).ptr"
  "runtime.gcAssistAlloc1" -> "(*runtime.limiterEvent).start"
  "runtime.gcAssistAlloc1" -> "runtime/internal/atomic.Xadd"
  "runtime.gcAssistAlloc1" -> "runtime.throw"
  "runtime.gcAssistAlloc1" -> "runtime.casGToWaiting"
  "runtime.gcAssistAlloc1" -> "runtime.getg"
  "runtime.gcAssistAlloc1" -> "(runtime.puintptr).ptr"
  "runtime.gcDrainN" -> "runtime.throw"
  "runtime.gcDrainN" -> "runtime.getg"
  "runtime.gcDrainN" -> "(*runtime.gcCPULimiterState).limiting"
  "runtime.gcDrainN" -> "(*runtime.gcWork).balance"
  "runtime.gcDrainN" -> "(*runtime.gcWork).tryGetFast"
  "runtime.gcDrainN" -> "(*runtime.gcWork).tryGet"
  "runtime.gcDrainN" -> "runtime.wbBufFlush"
  "runtime.gcDrainN" -> "(*runtime.gcWork).tryGet"
  "runtime.gcDrainN" -> "runtime.scanobject"
  "runtime.gcDrainN" -> "runtime/internal/atomic.Xadd"
  "runtime.gcDrainN" -> "runtime.markroot"
  "runtime.gcDrainN" -> "(*runtime/internal/atomic.Int64).Add"
  "runtime.gcAssistAlloc1" -> "runtime.gcDrainN"
  "runtime.gcAssistAlloc1" -> "runtime.casgstatus"
  "runtime.gcAssistAlloc1" -> "(*runtime/internal/atomic.Float64).Load"
  "runtime.gcAssistAlloc1" -> "runtime/internal/atomic.Xadd"
  "runtime.gcAssistAlloc1" -> "runtime.throw"
  "runtime.gcAssistAlloc1" -> "runtime.nanotime"
  "runtime.gcAssistAlloc1" -> "(runtime.puintptr).ptr"
  "runtime.gcAssistAlloc1" -> "runtime.gcMarkWorkAvailable"
  "runtime.gcAssistAlloc1" -> "(*runtime.limiterEvent).stop"
  "runtime.gcAssistAlloc1" -> "(*runtime/internal/atomic.Int64).Add"
  "(*runtime.gcCPULimiterState).update" -> "(*runtime.gcCPULimiterState).tryLock"
  "(*runtime.gcCPULimiterState).update" -> "runtime.throw"
  "(*runtime.gcCPULimiterState).update" -> "(*runtime.gcCPULimiterState).updateLocked"
  "(*runtime.gcCPULimiterState).update" -> "(*runtime.gcCPULimiterState).unlock"
  "runtime.gcAssistAlloc1" -> "(*runtime.gcCPULimiterState).update"
  "runtime.gcAssistAlloc$1" -> "runtime.gcAssistAlloc1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcAssistAlloc$1"
  "(*runtime.mheap).alloc$1" -> "runtime.isSweepDone"
  "(*runtime.mheap).reclaim" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.mheap).reclaim" -> "runtime.acquirem"
  "(*runtime.mheap).reclaim" -> "runtime.traceAcquire"
  "(*runtime.mheap).reclaim" -> "(runtime.traceLocker).ok"
  "(*runtime.mheap).reclaim" -> "(runtime.traceLocker).GCSweepStart"
  "(*runtime.mheap).reclaim" -> "runtime.traceRelease"
  "(*runtime.mheap).reclaim" -> "(*runtime/internal/atomic.Uintptr).Load"
  "(*runtime.mheap).reclaim" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.mheap).reclaim" -> "(*runtime/internal/atomic.Uintptr).CompareAndSwap"
  "(*runtime.mheap).reclaim" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.mheap).reclaim" -> "runtime.lock"
  "(*runtime.mheap).reclaimChunk" -> "runtime.assertLockHeld"
  "(*runtime.mheap).reclaimChunk" -> "(*runtime.activeSweep).begin"
  "(*runtime.mheap).reclaimChunk" -> "(runtime.arenaIdx).l1"
  "(*runtime.mheap).reclaimChunk" -> "(runtime.arenaIdx).l2"
  "(*runtime.mheap).reclaimChunk" -> "(*runtime.activeSweep).end"
  "(*runtime.mheap).reclaimChunk" -> "runtime.traceAcquire"
  "(*runtime.mheap).reclaimChunk" -> "(runtime.traceLocker).ok"
  "(*runtime.mheap).reclaimChunk" -> "runtime/internal/atomic.Load8"
  "(*runtime.mheap).reclaimChunk" -> "(*runtime.sweepLocker).tryAcquire"
  "(*runtime.mheap).reclaimChunk" -> "runtime.unlock"
  "(*runtime.mheap).reclaimChunk" -> "(*runtime.sweepLocked).sweep"
  "(*runtime.mheap).reclaimChunk" -> "runtime.lock"
  "(*runtime.mheap).reclaimChunk" -> "runtime/internal/atomic.Load8"
  "(*runtime.mheap).reclaimChunk" -> "runtime.unlock"
  "(*runtime.mheap).reclaimChunk" -> "(runtime.traceLocker).GCSweepSpan"
  "(*runtime.mheap).reclaimChunk" -> "runtime.traceRelease"
  "(*runtime.mheap).reclaimChunk" -> "runtime.lock"
  "(*runtime.mheap).reclaimChunk" -> "runtime.assertLockHeld"
  "(*runtime.mheap).reclaim" -> "(*runtime.mheap).reclaimChunk"
  "(*runtime.mheap).reclaim" -> "(*runtime/internal/atomic.Uintptr).Add"
  "(*runtime.mheap).reclaim" -> "runtime.unlock"
  "(*runtime.mheap).reclaim" -> "runtime.traceAcquire"
  "(*runtime.mheap).reclaim" -> "(runtime.traceLocker).ok"
  "(*runtime.mheap).reclaim" -> "(runtime.traceLocker).GCSweepDone"
  "(*runtime.mheap).reclaim" -> "runtime.traceRelease"
  "(*runtime.mheap).reclaim" -> "runtime.releasem"
  "(*runtime.mheap).alloc$1" -> "(*runtime.mheap).reclaim"
  "(*runtime.mheap).alloc$1" -> "(*runtime.mheap).allocSpan"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.mheap).alloc$1"
  "runtime.setprofilebucket" -> "runtime.lock"
  "runtime.setprofilebucket" -> "(*runtime.fixalloc).alloc"
  "runtime.setprofilebucket" -> "runtime.unlock"
  "runtime.setprofilebucket" -> "runtime.addspecial"
  "runtime.setprofilebucket" -> "runtime.throw"
  "runtime.mProf_Malloc$1" -> "runtime.setprofilebucket"
  "runtime.tryRecordGoroutineProfile" -> "runtime.mProf_Malloc$1"
  "runtime.mmap$1" -> "runtime.callCgoMmap"
  "runtime.tryRecordGoroutineProfile" -> "runtime.mmap$1"
  "(*runtime.traceMap).put$1" -> "runtime.lock"
  "(*runtime.traceMap).put$1" -> "(*runtime.traceMap).find"
  "(*runtime.traceMap).put$1" -> "runtime.unlock"
  "(*runtime.traceMap).put$1" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.traceRegionAlloc).alloc" -> "runtime.alignUp"
  "(*runtime.traceRegionAlloc).alloc" -> "runtime.throw"
  "(*runtime.traceRegionAlloc).alloc" -> "runtime.sysAlloc"
  "(*runtime.traceRegionAlloc).alloc" -> "runtime.throw"
  "(*runtime.traceMap).newTraceMapNode" -> "(*runtime.traceRegionAlloc).alloc"
  "(*runtime.traceMap).newTraceMapNode" -> "runtime.memmove"
  "(*runtime.traceMap).newTraceMapNode" -> "(*runtime.traceRegionAlloc).alloc"
  "(*runtime.traceMap).put$1" -> "(*runtime.traceMap).newTraceMapNode"
  "(*runtime.traceMap).put$1" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*runtime.traceMap).put$1" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "(*runtime.traceMap).put$1" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "(*runtime.traceMap).put$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.traceMap).put$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.fatal$1"
  "(runtime.traceWriter).refill$1" -> "runtime.lock"
  "runtime.traceBufFlush" -> "runtime.assertLockHeld"
  "(*runtime.traceBuf).varintAt" -> "runtime.throw"
  "runtime.traceBufFlush" -> "(*runtime.traceBuf).varintAt"
  "runtime.traceBufFlush" -> "(*runtime.traceBufQueue).push"
  "runtime.traceBufFlush" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.traceBufFlush" -> "(*runtime/internal/atomic.Bool).Store"
  "(runtime.traceWriter).refill$1" -> "runtime.traceBufFlush"
  "(runtime.traceWriter).refill$1" -> "runtime.unlock"
  "(runtime.traceWriter).refill$1" -> "runtime.unlock"
  "(runtime.traceWriter).refill$1" -> "runtime.sysAlloc"
  "(runtime.traceWriter).refill$1" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "(runtime.traceWriter).refill$1"
  "runtime.sigaction$1" -> "runtime.callCgoSigaction"
  "runtime.tryRecordGoroutineProfile" -> "runtime.sigaction$1"
  "runtime.gcMarkTermination$4$1" -> "runtime.lock"
  "runtime.gcMarkTermination$4$1" -> "(*runtime.pageCache).flush"
  "runtime.gcMarkTermination$4$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "runtime.gcMarkTermination$4$1"
  "(*runtime.mspan).setUserArenaChunkToFault$1" -> "runtime.lock"
  "(*runtime.mspan).setUserArenaChunkToFault$1" -> "(*runtime.mSpanList).insert"
  "(*runtime.mspan).setUserArenaChunkToFault$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "runtime.exitsyscallfast_reacquired$1" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscallfast_reacquired$1" -> "(runtime.traceLocker).ProcSteal"
  "runtime.exitsyscallfast_reacquired$1" -> "(runtime.traceLocker).ProcStart"
  "runtime.exitsyscallfast_reacquired$1" -> "(runtime.puintptr).ptr"
  "runtime.exitsyscallfast_reacquired$1" -> "(runtime.traceLocker).GoSysBlock"
  "runtime.exitsyscallfast_reacquired$1" -> "(runtime.traceLocker).GoSysExit"
  "runtime.tryRecordGoroutineProfile" -> "runtime.exitsyscallfast_reacquired$1"
  "(*runtime.traceStringTable).writeString" -> "runtime.lock"
  "(*runtime.traceStringTable).writeString" -> "runtime.unsafeTraceWriter"
  "(*runtime.traceStringTable).writeString" -> "(runtime.traceWriter).ensure"
  "(*runtime.traceStringTable).writeString" -> "(*runtime.traceBuf).byte"
  "(*runtime.traceStringTable).writeString" -> "(*runtime.traceBuf).byte"
  "(*runtime.traceStringTable).writeString" -> "(*runtime.traceBuf).varint"
  "(*runtime.traceStringTable).writeString" -> "(*runtime.traceBuf).varint"
  "(*runtime.traceStringTable).writeString" -> "(*runtime.traceBuf).stringData"
  "(*runtime.traceStringTable).writeString" -> "runtime.unlock"
  "(*runtime.traceStringTable).put$1" -> "(*runtime.traceStringTable).writeString"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.traceStringTable).put$1"
  "(*runtime.rwmutex).rlock$1" -> "runtime.lock"
  "(*runtime.rwmutex).rlock$1" -> "runtime.unlock"
  "(*runtime.rwmutex).rlock$1" -> "runtime.getg"
  "(*runtime.rwmutex).rlock$1" -> "(*runtime.muintptr).set"
  "(*runtime.rwmutex).rlock$1" -> "runtime.unlock"
  "(*runtime.rwmutex).rlock$1" -> "runtime.notesleep"
  "(*runtime.rwmutex).rlock$1" -> "runtime.noteclear"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.rwmutex).rlock$1"
  "runtime.traceThreadDestroy$1" -> "runtime.lock"
  "runtime.traceThreadDestroy$1" -> "runtime.unlock"
  "runtime.traceThreadDestroy$1" -> "runtime.traceBufFlush"
  "runtime.tryRecordGoroutineProfile" -> "runtime.traceThreadDestroy$1"
  "runtime.stackalloc" -> "runtime.getg"
  "runtime.stackalloc" -> "runtime.throw"
  "runtime.stackalloc" -> "runtime.throw"
  "runtime.stackalloc" -> "runtime.alignUp"
  "runtime.stackalloc" -> "runtime.sysAlloc"
  "runtime.stackalloc" -> "runtime.throw"
  "runtime.stackalloc" -> "runtime.stacklog2"
  "runtime.stackalloc" -> "runtime.lock"
  "runtime.stackalloc" -> "(*runtime.mSpanList).isEmpty"
  "runtime.stackalloc" -> "runtime.lock"
  "runtime.stackpoolalloc" -> "runtime.lockWithRankMayAcquire"
  "runtime.stackpoolalloc" -> "(*runtime.mheap).allocManual"
  "runtime.stackpoolalloc" -> "(runtime.gclinkptr).ptr"
  "runtime.stackpoolalloc" -> "runtime.throw"
  "runtime.stackpoolalloc" -> "runtime.throw"
  "runtime.stackpoolalloc" -> "(runtime.gclinkptr).ptr"
  "runtime.stackpoolalloc" -> "runtime.throw"
  "runtime.stackpoolalloc" -> "runtime.osStackAlloc"
  "runtime.stackpoolalloc" -> "(*runtime.mspan).base"
  "runtime.stackpoolalloc" -> "(runtime.gclinkptr).ptr"
  "runtime.stackpoolalloc" -> "(*runtime.mSpanList).insert"
  "runtime.stackpoolalloc" -> "runtime.throw"
  "runtime.stackpoolalloc" -> "(runtime.gclinkptr).ptr"
  "runtime.stackpoolalloc" -> "(runtime.gclinkptr).ptr"
  "runtime.stackpoolalloc" -> "(*runtime.mSpanList).remove"
  "runtime.stackalloc" -> "runtime.stackpoolalloc"
  "runtime.stackalloc" -> "runtime.unlock"
  "runtime.stackalloc" -> "(runtime.puintptr).ptr"
  "runtime.stackalloc" -> "(runtime.gclinkptr).ptr"
  "runtime.stackcacherefill" -> "runtime.lock"
  "runtime.stackcacherefill" -> "runtime.stackpoolalloc"
  "runtime.stackcacherefill" -> "(runtime.gclinkptr).ptr"
  "runtime.stackcacherefill" -> "runtime.unlock"
  "runtime.stackalloc" -> "runtime.stackcacherefill"
  "runtime.stackalloc" -> "(runtime.gclinkptr).ptr"
  "runtime.stackalloc" -> "(*runtime.mSpanList).remove"
  "runtime.stackalloc" -> "runtime.unlock"
  "runtime.stackalloc" -> "runtime.lockWithRankMayAcquire"
  "runtime.stackalloc" -> "(*runtime.mheap).allocManual"
  "runtime.stackalloc" -> "(*runtime.mspan).base"
  "runtime.stackalloc" -> "runtime.throw"
  "runtime.stackalloc" -> "runtime.osStackAlloc"
  "runtime.stackalloc" -> "runtime.racemalloc"
  "runtime.stackalloc" -> "runtime.msanmalloc"
  "runtime.stackalloc" -> "runtime.asanunpoison"
  "runtime.malg$1" -> "runtime.stackalloc"
  "runtime.tryRecordGoroutineProfile" -> "runtime.malg$1"
  "runtime.allocmcache$1" -> "runtime.lock"
  "runtime.allocmcache$1" -> "(*runtime.fixalloc).alloc"
  "runtime.allocmcache$1" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.allocmcache$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "runtime.allocmcache$1"
  "runtime.freemcache$1" -> "(*runtime.mcache).releaseAll"
  "runtime.freemcache$1" -> "runtime.stackcache_clear"
  "runtime.freemcache$1" -> "runtime.lock"
  "runtime.freemcache$1" -> "(*runtime.fixalloc).free"
  "runtime.freemcache$1" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "runtime.freemcache$1"
  "runtime.reentersyscall$1" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.reentersyscall$1"
  "runtime.reentersyscall$2" -> "(runtime.traceLocker).GoSysCall"
  "runtime.reentersyscall$2" -> "runtime.traceRelease"
  "runtime.tryRecordGoroutineProfile" -> "runtime.reentersyscall$2"
  "runtime.entersyscall_sysmon" -> "runtime.lock"
  "runtime.entersyscall_sysmon" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.entersyscall_sysmon" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.entersyscall_sysmon" -> "runtime.notewakeup"
  "runtime.entersyscall_sysmon" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "runtime.entersyscall_sysmon"
  "runtime.runSafePointFn" -> "runtime.getg"
  "runtime.runSafePointFn" -> "(runtime.puintptr).ptr"
  "runtime.runSafePointFn" -> "runtime/internal/atomic.Cas"
  "runtime.runSafePointFn" -> "runtime.lock"
  "runtime.runSafePointFn" -> "runtime.notewakeup"
  "runtime.runSafePointFn" -> "runtime.unlock"
  "runtime.runSafePointFn" -> "runtime.gcMarkDone$1"
  "runtime.runSafePointFn" -> "runtime.gcMarkTermination$4"
  "runtime.tryRecordGoroutineProfile" -> "runtime.runSafePointFn"
  "runtime.entersyscall_gcwait" -> "runtime.getg"
  "runtime.entersyscall_gcwait" -> "(runtime.puintptr).ptr"
  "runtime.entersyscall_gcwait" -> "runtime.lock"
  "runtime.entersyscall_gcwait" -> "runtime.traceAcquire"
  "runtime.entersyscall_gcwait" -> "(runtime.traceLocker).ok"
  "runtime.entersyscall_gcwait" -> "runtime.unlock"
  "runtime.entersyscall_gcwait" -> "(runtime.traceLocker).ok"
  "runtime.entersyscall_gcwait" -> "runtime/internal/atomic.Cas"
  "runtime.entersyscall_gcwait" -> "(runtime.traceLocker).ProcSteal"
  "runtime.entersyscall_gcwait" -> "runtime.traceRelease"
  "runtime.entersyscall_gcwait" -> "(runtime.traceLocker).GoSysBlock"
  "runtime.entersyscall_gcwait" -> "(runtime.traceLocker).ProcStop"
  "runtime.entersyscall_gcwait" -> "runtime.notewakeup"
  "runtime.entersyscall_gcwait" -> "runtime.traceRelease"
  "runtime.tryRecordGoroutineProfile" -> "runtime.entersyscall_gcwait"
  "runtime._VDSO" -> "runtime._VDSO"
  "runtime.tryRecordGoroutineProfile" -> "runtime._VDSO"
  "runtime._ExternalCode" -> "runtime._ExternalCode"
  "runtime.tryRecordGoroutineProfile" -> "runtime._ExternalCode"
  "runtime._GC" -> "runtime._GC"
  "runtime.tryRecordGoroutineProfile" -> "runtime._GC"
  "runtime._System" -> "runtime._System"
  "runtime.tryRecordGoroutineProfile" -> "runtime._System"
  "runtime.sigpanic" -> "runtime.getg"
  "runtime.canpanic" -> "runtime.getg"
  "runtime.canpanic" -> "runtime.acquirem"
  "runtime.canpanic" -> "runtime.releasem"
  "runtime.canpanic" -> "runtime.releasem"
  "runtime.canpanic" -> "runtime.readgstatus"
  "runtime.canpanic" -> "runtime.releasem"
  "runtime.canpanic" -> "runtime.releasem"
  "runtime.canpanic" -> "runtime.releasem"
  "runtime.sigpanic" -> "runtime.canpanic"
  "runtime.sigpanic" -> "runtime.throw"
  "runtime.panicCheck2" -> "runtime.getg"
  "runtime.panicCheck2" -> "runtime.throw"
  "runtime.panicmem" -> "runtime.panicCheck2"
  "runtime.sigpanic" -> "runtime.panicmem"
  "runtime.panicmemAddr" -> "runtime.panicCheck2"
  "runtime.sigpanic" -> "runtime.panicmemAddr"
  "runtime.sigpanic" -> "runtime.throw"
  "runtime.sigpanic" -> "runtime.panicmem"
  "runtime.sigpanic" -> "runtime.panicmemAddr"
  "runtime.sigpanic" -> "runtime.inUserArenaChunk"
  "runtime.sigpanic" -> "runtime.throw"
  "runtime.panicfloat" -> "runtime.panicCheck2"
  "runtime.sigpanic" -> "runtime.panicfloat"
  "runtime.panicdivide" -> "runtime.panicCheck2"
  "runtime.sigpanic" -> "runtime.panicdivide"
  "runtime.panicoverflow" -> "runtime.panicCheck2"
  "runtime.sigpanic" -> "runtime.panicoverflow"
  "runtime.sigpanic" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.sigpanic"
  "runtime.sysSigaction$1" -> "runtime.throw"
  "runtime.tryRecordGoroutineProfile" -> "runtime.sysSigaction$1"
  "runtime.markrootFreeGStacks" -> "runtime.lock"
  "runtime.markrootFreeGStacks" -> "runtime.unlock"
  "runtime.markrootFreeGStacks" -> "(*runtime.gList).empty"
  "runtime.markrootFreeGStacks" -> "(runtime.guintptr).ptr"
  "runtime.markrootFreeGStacks" -> "runtime.stackfree"
  "runtime.markrootFreeGStacks" -> "(*runtime.guintptr).set"
  "runtime.markrootFreeGStacks" -> "(runtime.guintptr).ptr"
  "runtime.markrootFreeGStacks" -> "runtime.lock"
  "runtime.markrootFreeGStacks" -> "(*runtime.gList).pushAll"
  "runtime.markrootFreeGStacks" -> "runtime.unlock"
  "runtime.tryRecordGoroutineProfile" -> "runtime.markrootFreeGStacks"
  "runtime.markroot$1" -> "runtime.getg"
  "runtime.markroot$1" -> "runtime.readgstatus"
  "runtime.markroot$1" -> "runtime.casGToWaiting"
  "runtime.suspendG" -> "runtime.getg"
  "runtime.suspendG" -> "runtime.throw"
  "runtime.suspendG" -> "runtime.readgstatus"
  "runtime.suspendG" -> "runtime.readgstatus"
  "runtime.casGFromPreempted" -> "runtime.throw"
  "runtime.casGFromPreempted" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.suspendG" -> "runtime.casGFromPreempted"
  "runtime.castogscanstatus" -> "runtime.throw"
  "runtime.castogscanstatus" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.castogscanstatus" -> "runtime.acquireLockRank"
  "runtime.suspendG" -> "runtime.castogscanstatus"
  "runtime.suspendG" -> "runtime.castogscanstatus"
  "runtime.suspendG" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.suspendG" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.suspendG" -> "runtime.casfrom_Gscanstatus"
  "runtime.suspendG" -> "runtime.nanotime"
  "runtime.suspendG" -> "runtime.preemptM"
  "runtime.suspendG" -> "runtime.dumpgstatus"
  "runtime.suspendG" -> "runtime.throw"
  "runtime.suspendG" -> "runtime.nanotime"
  "runtime.suspendG" -> "runtime.nanotime"
  "runtime.suspendG" -> "runtime.procyield"
  "runtime.suspendG" -> "runtime.osyield"
  "runtime.suspendG" -> "runtime.nanotime"
  "runtime.markroot$1" -> "runtime.suspendG"
  "runtime.markroot$1" -> "runtime.throw"
  "runtime.scanstack" -> "runtime.readgstatus"
  "runtime.scanstack" -> "runtime.readgstatus"
  "runtime.scanstack" -> "runtime.throw"
  "runtime.scanstack" -> "runtime.readgstatus"
  "runtime.scanstack" -> "runtime.getg"
  "runtime.scanstack" -> "runtime.readgstatus"
  "runtime.scanstack" -> "runtime.throw"
  "runtime.scanstack" -> "runtime.readgstatus"
  "runtime.scanstack" -> "runtime.throw"
  "runtime.scanstack" -> "runtime.throw"
  "runtime.scanstack" -> "runtime.getg"
  "runtime.scanstack" -> "(runtime.puintptr).ptr"
  "runtime.isShrinkStackSafe" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.scanstack" -> "runtime.isShrinkStackSafe"
  "runtime.shrinkstack" -> "runtime.throw"
  "runtime.shrinkstack" -> "runtime.readgstatus"
  "runtime.shrinkstack" -> "runtime.getg"
  "runtime.shrinkstack" -> "runtime.isShrinkStackSafe"
  "runtime.shrinkstack" -> "runtime.throw"
  "runtime.shrinkstack" -> "runtime.getg"
  "runtime.shrinkstack" -> "runtime.getg"
  "runtime.shrinkstack" -> "runtime.throw"
  "runtime.shrinkstack" -> "runtime.getg"
  "runtime.shrinkstack" -> "runtime.throw"
  "runtime.shrinkstack" -> "runtime.findfunc"
  "runtime.shrinkstack" -> "(runtime.funcInfo).valid"
  "runtime.copystack" -> "runtime.throw"
  "runtime.copystack" -> "runtime.throw"
  "runtime.copystack" -> "runtime.getg"
  "runtime.copystack" -> "(runtime.puintptr).ptr"
  "(*runtime.gcControllerState).addScannableStack" -> "(*runtime/internal/atomic.Uint64).Add"
  "(*runtime.gcControllerState).addScannableStack" -> "(*runtime/internal/atomic.Uint64).Add"
  "runtime.copystack" -> "(*runtime.gcControllerState).addScannableStack"
  "runtime.copystack" -> "runtime.stackalloc"
  "runtime.copystack" -> "runtime.fillstack"
  "runtime.copystack" -> "runtime.memmove"
  "runtime.adjustctxt" -> "runtime.adjustpointer"
  "runtime.adjustctxt" -> "runtime.adjustpointer"
  "runtime.adjustctxt" -> "runtime.throw"
  "runtime.adjustctxt" -> "runtime.memmove"
  "runtime.adjustctxt" -> "runtime.adjustpointer"
  "runtime.copystack" -> "runtime.adjustctxt"
  "runtime.adjustdefers" -> "runtime.adjustpointer"
  "runtime.adjustdefers" -> "runtime.adjustpointer"
  "runtime.adjustdefers" -> "runtime.adjustpointer"
  "runtime.adjustdefers" -> "runtime.adjustpointer"
  "runtime.copystack" -> "runtime.adjustdefers"
  "runtime.adjustpanics" -> "runtime.adjustpointer"
  "runtime.copystack" -> "runtime.adjustpanics"
  "runtime.copystack" -> "runtime.findsghi"
  "runtime.adjustsudogs" -> "runtime.adjustpointer"
  "runtime.syncadjustsudogs" -> "runtime.adjustsudogs"
  "runtime.syncadjustsudogs" -> "runtime.lockWithRank"
  "runtime.syncadjustsudogs" -> "runtime.memmove"
  "runtime.syncadjustsudogs" -> "runtime.unlock"
  "runtime.copystack" -> "runtime.syncadjustsudogs"
  "runtime.copystack" -> "runtime.throw"
  "runtime.copystack" -> "runtime.adjustsudogs"
  "runtime.copystack" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.copystack" -> "(*runtime.unwinder).init"
  "runtime.adjustframe" -> "runtime.funcname"
  "(*runtime.stkframe).getStackMap" -> "(runtime.funcInfo).entry"
  "(*runtime.stkframe).getStackMap" -> "runtime.pcdatavalue"
  "(*runtime.stkframe).getStackMap" -> "runtime.funcdata"
  "(*runtime.stkframe).argMapInternal" -> "runtime.funcname"
  "(*runtime.stkframe).argMapInternal" -> "(runtime.funcInfo).entry"
  "(*runtime.stkframe).argMapInternal" -> "(runtime.funcInfo).entry"
  "(*runtime.stkframe).argMapInternal" -> "runtime.funcname"
  "(*runtime.stkframe).argMapInternal" -> "(runtime.funcInfo).entry"
  "(*runtime.stkframe).argMapInternal" -> "runtime.throw"
  "(*runtime.stkframe).argMapInternal" -> "runtime.funcname"
  "(*runtime.stkframe).argMapInternal" -> "runtime.throw"
  "(*runtime.stkframe).getStackMap" -> "(*runtime.stkframe).argMapInternal"
  "(*runtime.stkframe).getStackMap" -> "runtime.funcname"
  "(*runtime.stkframe).getStackMap" -> "runtime.throw"
  "(*runtime.stkframe).getStackMap" -> "runtime.funcname"
  "(*runtime.stkframe).getStackMap" -> "runtime.throw"
  "runtime.stackmapdata" -> "runtime.throw"
  "runtime.stackmapdata" -> "runtime.addb"
  "(*runtime.stkframe).getStackMap" -> "runtime.stackmapdata"
  "(*runtime.stkframe).getStackMap" -> "runtime.funcdata"
  "(*runtime.stkframe).getStackMap" -> "runtime.funcname"
  "(*runtime.stkframe).getStackMap" -> "runtime.throw"
  "(*runtime.stkframe).getStackMap" -> "runtime.funcname"
  "(*runtime.stkframe).getStackMap" -> "runtime.throw"
  "(*runtime.stkframe).getStackMap" -> "runtime.stackmapdata"
  "(*runtime.stkframe).getStackMap" -> "runtime.funcdata"
  "(*runtime.stkframe).getStackMap" -> "runtime.add"
  "(*runtime.stkframe).getStackMap" -> "runtime.noescape"
  "runtime.adjustframe" -> "(*runtime.stkframe).getStackMap"
  "runtime.adjustframe" -> "runtime.adjustpointer"
  "runtime.adjustframe" -> "runtime.throw"
  "runtime.adjustpointers" -> "runtime.addb"
  "runtime.adjustpointers" -> "runtime.add"
  "(*runtime.bitvector).ptrbit" -> "runtime.addb"
  "runtime.adjustpointers" -> "(*runtime.bitvector).ptrbit"
  "runtime.adjustpointers" -> "runtime.add"
  "runtime.adjustpointers" -> "runtime.addb"
  "runtime.adjustpointers" -> "runtime/internal/sys.TrailingZeros8"
  "runtime.adjustpointers" -> "runtime.add"
  "runtime.adjustpointers" -> "(runtime.funcInfo).valid"
  "runtime.adjustpointers" -> "runtime.getg"
  "runtime.adjustpointers" -> "runtime.funcname"
  "runtime.adjustpointers" -> "runtime.throw"
  "runtime.adjustpointers" -> "runtime.funcname"
  "runtime.adjustpointers" -> "runtime/internal/atomic.Casp1"
  "runtime.adjustframe" -> "runtime.adjustpointers"
  "runtime.adjustframe" -> "runtime.adjustpointers"
  "runtime.adjustframe" -> "(*runtime.stackObjectRecord).ptrdata"
  "runtime.adjustframe" -> "(*runtime.stackObjectRecord).gcdata"
  "runtime.adjustframe" -> "(*runtime.stackObjectRecord).useGCProg"
  "runtime.materializeGCProg" -> "runtime.divRoundUp"
  "runtime.materializeGCProg" -> "runtime.divRoundUp"
  "runtime.materializeGCProg" -> "(*runtime.mheap).allocManual"
  "runtime.materializeGCProg" -> "runtime.addb"
  "runtime.materializeGCProg" -> "runtime.runGCProg"
  "runtime.adjustframe" -> "runtime.materializeGCProg"
  "runtime.adjustframe" -> "runtime.addb"
  "runtime.adjustframe" -> "runtime.adjustpointer"
  "runtime.dematerializeGCProg" -> "(*runtime.mheap).freeManual"
  "runtime.adjustframe" -> "runtime.dematerializeGCProg"
  "runtime.copystack" -> "runtime.adjustframe"
  "runtime.copystack" -> "(*runtime.unwinder).next"
  "runtime.copystack" -> "(*runtime.unwinder).valid"
  "runtime.copystack" -> "runtime.fillstack"
  "runtime.copystack" -> "runtime.stackfree"
  "runtime.shrinkstack" -> "runtime.copystack"
  "runtime.scanstack" -> "runtime.shrinkstack"
  "runtime.scanstack" -> "runtime.scanblock"
  "runtime.scanstack" -> "(*runtime.unwinder).init"
  "runtime.scanframeworker" -> "runtime.funcname"
  "runtime.scanframeworker" -> "(runtime.funcInfo).valid"
  "runtime.scanframeworker" -> "(runtime.funcInfo).valid"
  "runtime.scanframeworker" -> "(*runtime.stkframe).getStackMap"
  "runtime.scanframeworker" -> "runtime.funcname"
  "(*runtime.stkframe).argBytes" -> "(*runtime.stkframe).argMapInternal"
  "runtime.scanframeworker" -> "(*runtime.stkframe).argBytes"
  "runtime.scanConservative" -> "runtime.printlock"
  "runtime.scanConservative" -> "runtime.hexdumpWords"
  "runtime.scanConservative" -> "runtime.printunlock"
  "runtime.scanConservative" -> "runtime.addb"
  "runtime.scanConservative" -> "runtime.throw"
  "runtime.scanConservative" -> "(*runtime.stackScanState).putPtr"
  "runtime.scanConservative" -> "runtime.spanOfHeap"
  "runtime.scanConservative" -> "(*runtime.mspan).objIndex"
  "runtime.scanConservative" -> "(*runtime.mspan).isFree"
  "runtime.scanConservative" -> "(*runtime.mspan).base"
  "runtime.scanConservative" -> "runtime.greyobject"
  "runtime.scanframeworker" -> "runtime.scanConservative"
  "runtime.scanframeworker" -> "runtime.scanConservative"
  "runtime.scanframeworker" -> "runtime.scanblock"
  "runtime.scanframeworker" -> "runtime.scanblock"
  "(*runtime.stackScanState).addObject" -> "runtime.getempty"
  "(*runtime.stackScanState).addObject" -> "runtime.throw"
  "(*runtime.stackScanState).addObject" -> "runtime.getempty"
  "(*runtime.stackScanState).addObject" -> "(*runtime.stackObject).setRecord"
  "runtime.scanframeworker" -> "(*runtime.stackScanState).addObject"
  "runtime.scanstack" -> "runtime.scanframeworker"
  "runtime.scanstack" -> "(*runtime.unwinder).next"
  "runtime.scanstack" -> "(*runtime.unwinder).valid"
  "runtime.scanstack" -> "runtime.scanblock"
  "runtime.scanstack" -> "runtime.scanblock"
  "runtime.scanstack" -> "runtime.scanblock"
  "runtime.scanstack" -> "(*runtime.stackScanState).putPtr"
  "runtime.binarySearchTree" -> "runtime.binarySearchTree"
  "runtime.binarySearchTree" -> "runtime.binarySearchTree"
  "(*runtime.stackScanState).buildIndex" -> "runtime.binarySearchTree"
  "runtime.scanstack" -> "(*runtime.stackScanState).buildIndex"
  "(*runtime.stackScanState).getPtr" -> "runtime.putempty"
  "(*runtime.stackScanState).getPtr" -> "runtime.putempty"
  "runtime.scanstack" -> "(*runtime.stackScanState).getPtr"
  "runtime.scanstack" -> "(*runtime.stackScanState).findObject"
  "runtime.scanstack" -> "(*runtime.stackObject).setRecord"
  "runtime.scanstack" -> "runtime.printlock"
  "runtime.scanstack" -> "(*runtime.stackObjectRecord).gcdata"
  "runtime.scanstack" -> "(*runtime.stackObjectRecord).useGCProg"
  "runtime.scanstack" -> "runtime.printunlock"
  "runtime.scanstack" -> "(*runtime.stackObjectRecord).ptrdata"
  "runtime.scanstack" -> "runtime.materializeGCProg"
  "runtime.scanstack" -> "(*runtime.stackObjectRecord).ptrdata"
  "runtime.scanstack" -> "runtime.scanConservative"
  "runtime.scanstack" -> "(*runtime.stackObjectRecord).ptrdata"
  "runtime.scanstack" -> "runtime.scanblock"
  "runtime.scanstack" -> "runtime.dematerializeGCProg"
  "runtime.scanstack" -> "runtime.putempty"
  "runtime.scanstack" -> "runtime.throw"
  "runtime.markroot$1" -> "runtime.scanstack"
  "runtime.resumeG" -> "runtime.readgstatus"
  "runtime.resumeG" -> "runtime.casfrom_Gscanstatus"
  "runtime.resumeG" -> "runtime.dumpgstatus"
  "runtime.resumeG" -> "runtime.throw"
  "runtime.resumeG" -> "runtime.ready"
  "runtime.markroot$1" -> "runtime.resumeG"
  "runtime.markroot$1" -> "runtime.casgstatus"
  "runtime.tryRecordGoroutineProfile" -> "runtime.markroot$1"
  "runtime.tryRecordGoroutineProfile" -> "runtime.printArgs$3"
  "compress/flate.fixedHuffmanDecoderInit$1" -> "(*compress/flate.huffmanDecoder).init"
  "runtime.tryRecordGoroutineProfile" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "runtime.freeSomeWbufs$1" -> "runtime.getg"
  "runtime.freeSomeWbufs$1" -> "(*runtime.mSpanList).remove"
  "runtime.freeSomeWbufs$1" -> "(*runtime.mheap).freeManual"
  "runtime.tryRecordGoroutineProfile" -> "runtime.freeSomeWbufs$1"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.lock"
  "(*runtime.pageAlloc).scavengeOne" -> "(runtime.pallocSum).max"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.throw"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.throw"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.alignUp"
  "runtime.fillAligned" -> "runtime.fillAligned$1"
  "runtime.fillAligned" -> "runtime.fillAligned$1"
  "runtime.fillAligned" -> "runtime.fillAligned$1"
  "runtime.fillAligned" -> "runtime.fillAligned$1"
  "runtime.fillAligned" -> "runtime.fillAligned$1"
  "runtime.fillAligned" -> "runtime.fillAligned$1"
  "runtime.fillAligned" -> "runtime.throw"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.fillAligned"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.fillAligned"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime/internal/sys.LeadingZeros64"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime/internal/sys.LeadingZeros64"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.fillAligned"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime/internal/sys.LeadingZeros64"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.alignUp"
  "(*runtime.pallocData).findScavengeCandidate" -> "runtime.alignDown"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pallocData).findScavengeCandidate"
  "(*runtime.scavengeIndex).setEmpty" -> "(*runtime.atomicScavChunkData).load"
  "(*runtime.scavengeIndex).setEmpty" -> "(*runtime.scavChunkFlags).setEmpty"
  "(*runtime.scavengeIndex).setEmpty" -> "(*runtime.atomicScavChunkData).store"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.scavengeIndex).setEmpty"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.unlock"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.chunkBase"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pallocData).allocRange"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pageAlloc).update"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.unlock"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.getg"
  "(*runtime.pageAlloc).scavengeOne" -> "(runtime.puintptr).ptr"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.pageTraceScav"
  "runtime.sysUnused" -> "(*runtime/internal/atomic.Uint64).Add"
  "runtime.sysUnusedOS" -> "runtime.throw"
  "runtime.sysUnusedOS" -> "runtime/internal/atomic.Load"
  "runtime.sysUnusedOS" -> "runtime.madvise"
  "runtime.sysUnusedOS" -> "runtime.madvise"
  "runtime.sysUnusedOS" -> "runtime/internal/atomic.Store"
  "runtime.sysUnusedOS" -> "runtime.mmap"
  "runtime.sysUnusedOS" -> "runtime/internal/atomic.Store"
  "runtime.sysUnusedOS" -> "runtime.mmap"
  "runtime.sysUnusedOS" -> "runtime.throw"
  "runtime.sysUnused" -> "runtime.sysUnusedOS"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.sysUnused"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.sysMemStat).add"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.sysMemStat).add"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.consistentHeapStats).acquire"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime/internal/atomic.Xaddint64"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.consistentHeapStats).release"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.lock"
  "(*runtime.pageAlloc).scavengeOne" -> "(runtime.offAddr).lessThan"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pallocBits).free"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pageAlloc).update"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pageAlloc).chunkOf"
  "(*runtime.pageAlloc).scavengeOne" -> "(*runtime.pageBits).setRange"
  "(*runtime.pageAlloc).scavengeOne" -> "runtime.unlock"
  "(*runtime.pageAlloc).scavenge$1" -> "(*runtime.pageAlloc).scavengeOne"
  "runtime.tryRecordGoroutineProfile" -> "(*runtime.pageAlloc).scavenge$1"
  "runtime._LostExternalCode" -> "runtime._LostExternalCode"
  "runtime.tryRecordGoroutineProfile" -> "runtime._LostExternalCode"
  "runtime._LostSIGPROFDuringAtomic64" -> "runtime._LostSIGPROFDuringAtomic64"
  "runtime.tryRecordGoroutineProfile" -> "runtime._LostSIGPROFDuringAtomic64"
  "runtime.munmap$1" -> "runtime.callCgoMunmap"
  "runtime.tryRecordGoroutineProfile" -> "runtime.munmap$1"
  "runtime.execute" -> "runtime.tryRecordGoroutineProfile"
  "runtime.execute" -> "runtime.casgstatus"
  "runtime.execute" -> "(runtime.puintptr).ptr"
  "runtime.setThreadCPUProfiler" -> "runtime.getg"
  "runtime.setThreadCPUProfiler" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.setThreadCPUProfiler" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.setThreadCPUProfiler" -> "runtime.timer_delete"
  "runtime.setThreadCPUProfiler" -> "runtime.throw"
  "runtime.setThreadCPUProfiler" -> "runtime.cheaprandn"
  "runtime.setThreadCPUProfiler" -> "(*runtime.timespec).setNsec"
  "runtime.setThreadCPUProfiler" -> "(*runtime.timespec).setNsec"
  "runtime.setThreadCPUProfiler" -> "runtime.timer_create"
  "runtime.setThreadCPUProfiler" -> "runtime.timer_settime"
  "runtime.setThreadCPUProfiler" -> "runtime.throw"
  "runtime.setThreadCPUProfiler" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.execute" -> "runtime.setThreadCPUProfiler"
  "runtime.execute" -> "runtime.traceAcquire"
  "runtime.execute" -> "(runtime.traceLocker).ok"
  "runtime.execute" -> "runtime.gogo"
  "runtime.execute" -> "(runtime.traceLocker).GoSysExit"
  "runtime.execute" -> "(runtime.traceLocker).GoStart"
  "runtime.execute" -> "runtime.traceRelease"
  "runtime.schedule" -> "runtime.execute"
  "runtime.schedule" -> "runtime.throw"
  "runtime.schedule" -> "(runtime.puintptr).ptr"
  "runtime.schedule" -> "runtime.throw"
  "runtime.findRunnable" -> "runtime.getg"
  "runtime.findRunnable" -> "(runtime.puintptr).ptr"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.gcstopm" -> "runtime.getg"
  "runtime.gcstopm" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.gcstopm" -> "runtime.throw"
  "runtime.gcstopm" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.gcstopm" -> "runtime.releasep"
  "runtime.gcstopm" -> "runtime.lock"
  "runtime.gcstopm" -> "runtime.throw"
  "runtime.gcstopm" -> "runtime.notewakeup"
  "runtime.gcstopm" -> "runtime.unlock"
  "runtime.gcstopm" -> "runtime.stopm"
  "runtime.findRunnable" -> "runtime.gcstopm"
  "runtime.findRunnable" -> "runtime.runSafePointFn"
  "runtime.checkTimers" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.checkTimers" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.checkTimers" -> "runtime.nanotime"
  "runtime.checkTimers" -> "runtime.getg"
  "runtime.checkTimers" -> "(runtime.puintptr).ptr"
  "runtime.checkTimers" -> "runtime.lock"
  "runtime.checkTimers" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.checkTimers" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.adjusttimers" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.adjusttimers" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.verifyTimerHeap" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.verifyTimerHeap" -> "runtime.throw"
  "runtime.verifyTimerHeap" -> "runtime.throw"
  "runtime.adjusttimers" -> "runtime.verifyTimerHeap"
  "runtime.adjusttimers" -> "(runtime.puintptr).ptr"
  "runtime.adjusttimers" -> "runtime.throw"
  "runtime.adjusttimers" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.adjusttimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.adjusttimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.dodeltimer" -> "(runtime.puintptr).ptr"
  "runtime.dodeltimer" -> "runtime.throw"
  "runtime.dodeltimer" -> "runtime.siftupTimer"
  "runtime.siftdownTimer" -> "runtime.badTimer"
  "runtime.siftdownTimer" -> "runtime.badTimer"
  "runtime.dodeltimer" -> "runtime.siftdownTimer"
  "runtime.updateTimer0When" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.updateTimer0When" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.dodeltimer" -> "runtime.updateTimer0When"
  "runtime.dodeltimer" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.dodeltimer" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.adjusttimers" -> "runtime.dodeltimer"
  "runtime.adjusttimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.adjusttimers" -> "runtime.badTimer"
  "runtime.adjusttimers" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.adjusttimers" -> "runtime.badTimer"
  "runtime.adjusttimers" -> "runtime.dodeltimer"
  "runtime.adjusttimers" -> "runtime.osyield"
  "runtime.adjusttimers" -> "runtime.badTimer"
  "runtime.addAdjustedTimers" -> "runtime.doaddtimer"
  "runtime.addAdjustedTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.addAdjustedTimers" -> "runtime.badTimer"
  "runtime.adjusttimers" -> "runtime.addAdjustedTimers"
  "runtime.adjusttimers" -> "runtime.verifyTimerHeap"
  "runtime.checkTimers" -> "runtime.adjusttimers"
  "runtime.checkTimers" -> "runtime.getg"
  "runtime.checkTimers" -> "(runtime.puintptr).ptr"
  "runtime.runtimer" -> "(runtime.puintptr).ptr"
  "runtime.runtimer" -> "runtime.throw"
  "runtime.runtimer" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.runtimer" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.runtimer" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.runOneTimer" -> "runtime.getg"
  "runtime.runOneTimer" -> "(runtime.puintptr).ptr"
  "runtime.runOneTimer" -> "internal/abi.FuncPCABIInternal"
  "runtime.racegostart" -> "runtime.throw"
  "runtime.runOneTimer" -> "runtime.racegostart"
  "runtime.raceacquirectx" -> "runtime.throw"
  "runtime.runOneTimer" -> "runtime.raceacquirectx"
  "runtime.dodeltimer0" -> "(runtime.puintptr).ptr"
  "runtime.dodeltimer0" -> "runtime.throw"
  "runtime.dodeltimer0" -> "runtime.siftdownTimer"
  "runtime.dodeltimer0" -> "runtime.updateTimer0When"
  "runtime.dodeltimer0" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.dodeltimer0" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.runOneTimer" -> "runtime.dodeltimer0"
  "runtime.runOneTimer" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.runOneTimer" -> "runtime.siftdownTimer"
  "runtime.runOneTimer" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.runOneTimer" -> "runtime.badTimer"
  "runtime.runOneTimer" -> "runtime.updateTimer0When"
  "runtime.runOneTimer" -> "runtime.badTimer"
  "runtime.runOneTimer" -> "runtime.getg"
  "runtime.runOneTimer" -> "runtime.unlock"
  "time.sendTime" -> "time.Now"
  "runtime.runOneTimer" -> "time.sendTime"
  "runtime.runOneTimer" -> "runtime.lock"
  "runtime.runOneTimer" -> "runtime.throw"
  "runtime.runOneTimer" -> "(runtime.puintptr).ptr"
  "runtime.runOneTimer" -> "runtime.getg"
  "runtime.runtimer" -> "runtime.runOneTimer"
  "runtime.runtimer" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.runtimer" -> "runtime.dodeltimer0"
  "runtime.runtimer" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.runtimer" -> "runtime.badTimer"
  "runtime.runtimer" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.runtimer" -> "runtime.osyield"
  "runtime.runtimer" -> "runtime.dodeltimer0"
  "runtime.runtimer" -> "runtime.doaddtimer"
  "runtime.runtimer" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.runtimer" -> "runtime.badTimer"
  "runtime.runtimer" -> "runtime.badTimer"
  "runtime.runtimer" -> "runtime.badTimer"
  "runtime.runtimer" -> "runtime.badTimer"
  "runtime.checkTimers" -> "runtime.runtimer"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.clearDeletedTimers" -> "runtime.siftupTimer"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.clearDeletedTimers" -> "runtime.siftupTimer"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.clearDeletedTimers" -> "runtime.badTimer"
  "runtime.clearDeletedTimers" -> "runtime.osyield"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.clearDeletedTimers" -> "runtime.badTimer"
  "runtime.clearDeletedTimers" -> "runtime.badTimer"
  "runtime.clearDeletedTimers" -> "runtime.badTimer"
  "runtime.clearDeletedTimers" -> "runtime.badTimer"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.clearDeletedTimers" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.clearDeletedTimers" -> "runtime.updateTimer0When"
  "runtime.clearDeletedTimers" -> "runtime.verifyTimerHeap"
  "runtime.checkTimers" -> "runtime.clearDeletedTimers"
  "runtime.checkTimers" -> "runtime.unlock"
  "runtime.checkTimers" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.findRunnable" -> "runtime.checkTimers"
  "runtime.findRunnable" -> "runtime.traceEnabled"
  "runtime.traceReader" -> "runtime.traceReaderAvailable"
  "(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB" -> "runtime/internal/atomic.Casp1"
  "(*runtime/internal/atomic.Pointer[runtime.g]).CompareAndSwapNoWB[runtime.g]" -> "(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB"
  "runtime.traceReader" -> "(*runtime/internal/atomic.Pointer[runtime.g]).CompareAndSwapNoWB[runtime.g]"
  "runtime.findRunnable" -> "runtime.traceReader"
  "runtime.findRunnable" -> "runtime.traceShuttingDown"
  "runtime.findRunnable" -> "runtime.traceAcquire"
  "runtime.findRunnable" -> "runtime.casgstatus"
  "runtime.findRunnable" -> "(runtime.traceLocker).ok"
  "runtime.findRunnable" -> "(runtime.traceLocker).GoUnpark"
  "runtime.findRunnable" -> "runtime.traceRelease"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "runtime.throw"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "runtime.nanotime"
  "(*runtime.gcCPULimiterState).needUpdate" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(*runtime.gcCPULimiterState).needUpdate"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(*runtime.gcCPULimiterState).update"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "runtime.gcMarkWorkAvailable"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(*runtime.lfstack).pop"
  "(*runtime.gcControllerState).findRunnableGCWorker$1" -> "(*runtime/internal/atomic.Int64).Load"
  "(*runtime.gcControllerState).findRunnableGCWorker$1" -> "(*runtime/internal/atomic.Int64).CompareAndSwap"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(*runtime.gcControllerState).findRunnableGCWorker$1"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(runtime.guintptr).ptr"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "runtime.traceAcquire"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "runtime.casgstatus"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(runtime.traceLocker).ok"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(*runtime.lfstack).push"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(*runtime.lfstack).push"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "(runtime.traceLocker).GoUnpark"
  "(*runtime.gcControllerState).findRunnableGCWorker" -> "runtime.traceRelease"
  "runtime.findRunnable" -> "(*runtime.gcControllerState).findRunnableGCWorker"
  "runtime.findRunnable" -> "runtime.lock"
  "runtime.globrunqget" -> "runtime.assertLockHeld"
  "runtime.globrunqget" -> "(*runtime.gQueue).pop"
  "runtime.globrunqget" -> "(*runtime.gQueue).pop"
  "runtime.globrunqget" -> "runtime.runqput"
  "runtime.findRunnable" -> "runtime.globrunqget"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.wakefing" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.findRunnable" -> "runtime.wakefing"
  "runtime.findRunnable" -> "runtime.ready"
  "runtime.findRunnable" -> "runtime.asmcgocall"
  "runtime.runqget" -> "(runtime.guintptr).ptr"
  "runtime.runqget" -> "(*runtime.guintptr).cas"
  "runtime.runqget" -> "runtime/internal/atomic.LoadAcq"
  "runtime.runqget" -> "(runtime.guintptr).ptr"
  "runtime.runqget" -> "runtime/internal/atomic.CasRel"
  "runtime.findRunnable" -> "runtime.runqget"
  "runtime.findRunnable" -> "runtime.lock"
  "runtime.findRunnable" -> "runtime.globrunqget"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "runtime.netpollinited"
  "runtime.findRunnable" -> "runtime.netpoll"
  "runtime.findRunnable" -> "(*runtime.gList).empty"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.findRunnable" -> "runtime.netpollAnyWaiters"
  "runtime.findRunnable" -> "(*runtime.gList).pop"
  "runtime.findRunnable" -> "runtime.injectglist"
  "runtime.findRunnable" -> "runtime.netpollAdjustWaiters"
  "runtime.findRunnable" -> "runtime.traceAcquire"
  "runtime.findRunnable" -> "runtime.casgstatus"
  "runtime.findRunnable" -> "(runtime.traceLocker).ok"
  "runtime.findRunnable" -> "(runtime.traceLocker).GoUnpark"
  "runtime.findRunnable" -> "runtime.traceRelease"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int32).Load"
  "(*runtime.m).becomeSpinning" -> "(*runtime/internal/atomic.Int32).Add"
  "(*runtime.m).becomeSpinning" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.findRunnable" -> "(*runtime.m).becomeSpinning"
  "runtime.stealWork" -> "runtime.getg"
  "runtime.stealWork" -> "(runtime.puintptr).ptr"
  "runtime.stealWork" -> "runtime.cheaprand"
  "runtime.stealWork" -> "(*runtime.randomOrder).start"
  "runtime.stealWork" -> "(*runtime.randomEnum).done"
  "runtime.stealWork" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.stealWork" -> "(*runtime.randomEnum).next"
  "runtime.stealWork" -> "(*runtime.randomEnum).position"
  "runtime.stealWork" -> "runtime.checkTimers"
  "runtime.stealWork" -> "(*runtime.randomEnum).position"
  "(runtime.pMask).read" -> "runtime/internal/atomic.Load"
  "runtime.stealWork" -> "(runtime.pMask).read"
  "runtime.stealWork" -> "(*runtime.randomEnum).position"
  "runtime.stealWork" -> "(runtime.pMask).read"
  "runtime.stealWork" -> "runtime.runqget"
  "runtime.runqgrab" -> "runtime/internal/atomic.LoadAcq"
  "runtime.runqgrab" -> "runtime/internal/atomic.LoadAcq"
  "runtime.runqgrab" -> "(*runtime.guintptr).cas"
  "runtime.runqgrab" -> "runtime.usleep"
  "runtime.runqgrab" -> "runtime.osyield"
  "runtime.runqgrab" -> "runtime/internal/atomic.CasRel"
  "runtime.runqsteal" -> "runtime.runqgrab"
  "runtime.runqsteal" -> "(runtime.guintptr).ptr"
  "runtime.runqsteal" -> "runtime/internal/atomic.LoadAcq"
  "runtime.runqsteal" -> "runtime.throw"
  "runtime.runqsteal" -> "runtime/internal/atomic.StoreRel"
  "runtime.stealWork" -> "runtime.runqsteal"
  "runtime.findRunnable" -> "runtime.stealWork"
  "runtime.findRunnable" -> "(*runtime.lfstack).pop"
  "runtime.findRunnable" -> "runtime.beforeIdle"
  "(*runtime.gcControllerState).addIdleMarkWorker" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).addIdleMarkWorker" -> "runtime.throw"
  "(*runtime.gcControllerState).addIdleMarkWorker" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "runtime.findRunnable" -> "(*runtime.gcControllerState).addIdleMarkWorker"
  "runtime.findRunnable" -> "runtime.gcMarkWorkAvailable"
  "runtime.findRunnable" -> "(runtime.guintptr).ptr"
  "runtime.findRunnable" -> "runtime.traceAcquire"
  "runtime.findRunnable" -> "runtime.casgstatus"
  "runtime.findRunnable" -> "(runtime.traceLocker).ok"
  "runtime.findRunnable" -> "(*runtime.gcControllerState).removeIdleMarkWorker"
  "runtime.findRunnable" -> "(runtime.traceLocker).GoUnpark"
  "runtime.findRunnable" -> "runtime.traceRelease"
  "runtime.findRunnable" -> "runtime.traceAcquire"
  "runtime.findRunnable" -> "runtime.casgstatus"
  "runtime.findRunnable" -> "(runtime.traceLocker).ok"
  "runtime.findRunnable" -> "(runtime.traceLocker).GoUnpark"
  "runtime.findRunnable" -> "runtime.traceRelease"
  "runtime.findRunnable" -> "runtime.lock"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "runtime.globrunqget"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "(*runtime.m).becomeSpinning"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "runtime.releasep"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.findRunnable" -> "runtime.throw"
  "runtime.findRunnable" -> "runtime.pidleput"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.findRunnable" -> "runtime.netpollinited"
  "runtime.findRunnable" -> "runtime.throw"
  "runtime.findRunnable" -> "runtime.lock"
  "runtime.findRunnable" -> "runtime.pidlegetSpinning"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.checkRunqsNoP" -> "(runtime.pMask).read"
  "runtime.checkRunqsNoP" -> "runtime.lock"
  "runtime.checkRunqsNoP" -> "runtime.pidlegetSpinning"
  "runtime.checkRunqsNoP" -> "runtime.runqempty"
  "runtime.checkRunqsNoP" -> "runtime.unlock"
  "runtime.checkRunqsNoP" -> "runtime.unlock"
  "runtime.findRunnable" -> "runtime.checkRunqsNoP"
  "runtime.findRunnable" -> "runtime.globrunqget"
  "runtime.findRunnable" -> "runtime.throw"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "runtime.acquirep"
  "runtime.findRunnable" -> "(*runtime.m).becomeSpinning"
  "runtime.findRunnable" -> "runtime.acquirep"
  "runtime.findRunnable" -> "(*runtime.m).becomeSpinning"
  "runtime.checkIdleGCNoP" -> "runtime/internal/atomic.Load"
  "runtime.checkIdleGCNoP" -> "runtime.gcMarkWorkAvailable"
  "(*runtime.gcControllerState).needIdleMarkWorker" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.checkIdleGCNoP" -> "(*runtime.gcControllerState).needIdleMarkWorker"
  "runtime.checkIdleGCNoP" -> "runtime.lock"
  "runtime.checkIdleGCNoP" -> "runtime.pidlegetSpinning"
  "runtime.checkIdleGCNoP" -> "runtime.unlock"
  "runtime.checkIdleGCNoP" -> "runtime.pidleput"
  "runtime.checkIdleGCNoP" -> "runtime.unlock"
  "runtime.checkIdleGCNoP" -> "(*runtime.lfstack).pop"
  "runtime.checkIdleGCNoP" -> "(*runtime.gcControllerState).addIdleMarkWorker"
  "runtime.checkIdleGCNoP" -> "runtime.pidleput"
  "runtime.checkIdleGCNoP" -> "runtime.unlock"
  "runtime.checkIdleGCNoP" -> "(*runtime.gcControllerState).removeIdleMarkWorker"
  "runtime.checkIdleGCNoP" -> "runtime.unlock"
  "runtime.checkIdleGCNoP" -> "(runtime.guintptr).ptr"
  "runtime.findRunnable" -> "runtime.checkIdleGCNoP"
  "runtime.findRunnable" -> "runtime.acquirep"
  "runtime.findRunnable" -> "(*runtime.m).becomeSpinning"
  "runtime.findRunnable" -> "runtime.traceAcquire"
  "runtime.findRunnable" -> "runtime.casgstatus"
  "runtime.findRunnable" -> "(runtime.traceLocker).ok"
  "runtime.checkTimersNoP" -> "(runtime.pMask).read"
  "runtime.checkTimersNoP" -> "runtime.nobarrierWakeTime"
  "runtime.findRunnable" -> "runtime.checkTimersNoP"
  "runtime.findRunnable" -> "(runtime.traceLocker).GoUnpark"
  "runtime.findRunnable" -> "runtime.traceRelease"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.findRunnable" -> "runtime.stopm"
  "(*runtime/internal/atomic.Int64).Swap" -> "runtime/internal/atomic.Xchgint64"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int64).Swap"
  "runtime.findRunnable" -> "runtime.netpollAnyWaiters"
  "runtime.findRunnable" -> "runtime.throw"
  "runtime.findRunnable" -> "runtime.throw"
  "runtime.findRunnable" -> "runtime.nanotime"
  "runtime.findRunnable" -> "runtime.netpoll"
  "runtime.findRunnable" -> "runtime.nanotime"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int64).Store"
  "runtime.findRunnable" -> "runtime.stopm"
  "runtime.findRunnable" -> "runtime.lock"
  "runtime.findRunnable" -> "runtime.pidleget"
  "runtime.findRunnable" -> "runtime.unlock"
  "runtime.findRunnable" -> "(*runtime.gList).empty"
  "runtime.findRunnable" -> "runtime.injectglist"
  "runtime.findRunnable" -> "runtime.netpollAdjustWaiters"
  "runtime.findRunnable" -> "runtime.acquirep"
  "runtime.findRunnable" -> "(*runtime.gList).empty"
  "runtime.findRunnable" -> "(*runtime.gList).pop"
  "runtime.findRunnable" -> "runtime.injectglist"
  "runtime.findRunnable" -> "runtime.netpollAdjustWaiters"
  "runtime.findRunnable" -> "runtime.traceAcquire"
  "runtime.findRunnable" -> "runtime.casgstatus"
  "runtime.findRunnable" -> "(runtime.traceLocker).ok"
  "runtime.findRunnable" -> "(runtime.traceLocker).GoUnpark"
  "runtime.findRunnable" -> "runtime.traceRelease"
  "runtime.findRunnable" -> "(*runtime.m).becomeSpinning"
  "runtime.findRunnable" -> "(*runtime/internal/atomic.Int64).Load"
  "runtime.findRunnable" -> "runtime.netpollinited"
  "runtime.findRunnable" -> "runtime.netpollBreak"
  "runtime.schedule" -> "runtime.findRunnable"
  "runtime.schedule" -> "runtime.lock"
  "runtime.schedule" -> "runtime.lock"
  "runtime.schedule" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.resetspinning" -> "runtime.getg"
  "runtime.resetspinning" -> "runtime.throw"
  "runtime.resetspinning" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.resetspinning" -> "runtime.throw"
  "runtime.resetspinning" -> "runtime.wakep"
  "runtime.schedule" -> "runtime.resetspinning"
  "runtime.schedule" -> "runtime.lock"
  "runtime.schedule" -> "runtime.schedEnabled"
  "runtime.schedule" -> "runtime.schedEnabled"
  "runtime.schedule" -> "runtime.unlock"
  "runtime.schedule" -> "(*runtime.gQueue).pushBack"
  "runtime.schedule" -> "runtime.unlock"
  "runtime.schedule" -> "runtime.wakep"
  "runtime.startlockedm" -> "(runtime.muintptr).ptr"
  "runtime.startlockedm" -> "runtime.getg"
  "runtime.startlockedm" -> "runtime.throw"
  "runtime.startlockedm" -> "runtime.throw"
  "runtime.startlockedm" -> "runtime.incidlelocked"
  "runtime.startlockedm" -> "runtime.releasep"
  "runtime.startlockedm" -> "(*runtime.puintptr).set"
  "runtime.startlockedm" -> "runtime.notewakeup"
  "runtime.startlockedm" -> "runtime.stopm"
  "runtime.schedule" -> "runtime.startlockedm"
  "runtime.schedule" -> "runtime.execute"
  "runtime.preemptPark" -> "runtime.schedule"
  "runtime.forEachG" -> "runtime.preemptPark"
  "runtime.forEachG" -> "runtime.gopreempt_m"
  "runtime.forEachG" -> "runtime.gosched_m"
  "runtime.forEachG" -> "runtime.gcResetMarkState$1"
  "runtime.forEachG" -> "runtime.park_m"
  "runtime.forEachG" -> "runtime.unlock"
  "runtime.forEachG" -> "runtime.tracebackothers$1"
  "runtime.forEachG" -> "runtime.schedtrace$1"
  "runtime.forEachG" -> "runtime.goyield_m"
  "runtime.forEachG" -> "runtime.exitsyscall0"
  "runtime.forEachG" -> "runtime.checkdead$1"
  "runtime.forEachG" -> "runtime.goschedguarded_m"
  "runtime.forEachG" -> "runtime.gcMarkRootCheck$1"
  "runtime.schedtrace" -> "runtime.forEachG"
  "runtime.schedtrace" -> "runtime.unlock"
  "runtime.schedtrace" -> "(runtime.guintptr).ptr"
  "runtime.startpanic_m" -> "runtime.schedtrace"
  "runtime.freezetheworld" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.freezetheworld" -> "runtime.usleep"
  "runtime.freezetheworld" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.freezetheworld" -> "runtime.preemptall"
  "runtime.freezetheworld" -> "runtime.usleep"
  "runtime.freezetheworld" -> "runtime.preemptall"
  "runtime.freezetheworld" -> "runtime.usleep"
  "runtime.freezetheworld" -> "runtime.usleep"
  "runtime.startpanic_m" -> "runtime.freezetheworld"
  "runtime.startpanic_m" -> "runtime.exit"
  "runtime.startpanic_m" -> "runtime.exit"
  "runtime.fatalthrow$1" -> "runtime.startpanic_m"
  "runtime.dopanic_m" -> "runtime.signame"
  "runtime.dopanic_m" -> "runtime.gotraceback"
  "runtime.dopanic_m" -> "runtime.unlock"
  "runtime.dopanic_m" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.dopanic_m" -> "runtime.goroutineheader"
  "runtime.dopanic_m" -> "runtime.traceback"
  "runtime.dopanic_m" -> "runtime.traceback"
  "runtime.dopanic_m" -> "runtime.tracebackothers"
  "runtime.dopanic_m" -> "runtime.lock"
  "runtime.dopanic_m" -> "runtime.lock"
  "runtime.printDebugLog" -> "runtime.printlock"
  "runtime.printDebugLog" -> "runtime/internal/atomic.Loaduintptr"
  "runtime.printDebugLog" -> "runtime.printunlock"
  "runtime.printDebugLog" -> "runtime.sysAllocOS"
  "runtime.printDebugLog" -> "runtime.printunlock"
  "(*runtime.debugLogReader).peek" -> "(*runtime.debugLogReader).readUint16LEAt"
  "(*runtime.debugLogReader).peek" -> "(*runtime.debugLogReader).readUint64LEAt"
  "(*runtime.debugLogReader).peek" -> "(*runtime.debugLogReader).readUint64LEAt"
  "runtime.printDebugLog" -> "(*runtime.debugLogReader).peek"
  "runtime.printDebugLog" -> "runtime.printunlock"
  "(*runtime.debugLogReader).header" -> "(*runtime.debugLogReader).readUint16LEAt"
  "(*runtime.debugLogReader).header" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).header" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).varint" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).header" -> "(*runtime.debugLogReader).varint"
  "runtime.printDebugLog" -> "(*runtime.debugLogReader).header"
  "runtime.printDebugLog" -> "runtime.itoaDiv"
  "runtime.printDebugLog" -> "runtime.noescape"
  "runtime.slicebytetostringtmp" -> "runtime.getcallerpc"
  "runtime.slicebytetostringtmp" -> "internal/abi.FuncPCABIInternal"
  "runtime.racereadrangepc" -> "runtime.throw"
  "runtime.slicebytetostringtmp" -> "runtime.racereadrangepc"
  "runtime.msanread" -> "runtime.throw"
  "runtime.slicebytetostringtmp" -> "runtime.msanread"
  "runtime.asanread" -> "runtime.throw"
  "runtime.slicebytetostringtmp" -> "runtime.asanread"
  "runtime.printDebugLog" -> "runtime.slicebytetostringtmp"
  "runtime.printDebugLog" -> "(*runtime.debugLogReader).peek"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).varint"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "runtime.gwrite"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "runtime.printDebugLogPC" -> "runtime.findfunc"
  "runtime.printDebugLogPC" -> "(runtime.funcInfo).valid"
  "runtime.printDebugLogPC" -> "(runtime.funcInfo).valid"
  "runtime.printDebugLogPC" -> "(runtime.funcInfo).entry"
  "runtime.printDebugLogPC" -> "runtime.funcname"
  "runtime.printDebugLogPC" -> "runtime.funcline"
  "runtime.printDebugLogPC" -> "(runtime.funcInfo).entry"
  "(*runtime.debugLogReader).printVal" -> "runtime.printDebugLogPC"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "(*runtime.debugLogReader).uvarint"
  "(*runtime.debugLogReader).printVal" -> "runtime.printDebugLogPC"
  "runtime.printDebugLog" -> "(*runtime.debugLogReader).printVal"
  "runtime.dopanic_m" -> "runtime.printDebugLog"
  "runtime.fatalthrow$1" -> "runtime.dopanic_m"
  "runtime.unblocksig" -> "runtime.sigaddset"
  "runtime.unblocksig" -> "runtime.sigprocmask"
  "runtime.dieFromSignal" -> "runtime.unblocksig"
  "runtime.dieFromSignal" -> "runtime/internal/atomic.Store"
  "runtime.dieFromSignal" -> "runtime.raise"
  "runtime.dieFromSignal" -> "runtime.osyield"
  "runtime.dieFromSignal" -> "runtime.osyield"
  "runtime.dieFromSignal" -> "runtime.osyield"
  "runtime.setsig" -> "runtime.sigfillset"
  "runtime.setsig" -> "internal/abi.FuncPCABI0"
  "runtime.setsig" -> "internal/abi.FuncPCABIInternal"
  "runtime.sigaction" -> "runtime.msanwrite"
  "runtime.sigaction" -> "runtime.asanwrite"
  "runtime.sysSigaction" -> "runtime.rt_sigaction"
  "runtime.sysSigaction" -> "runtime.systemstack"
  "runtime.sigaction" -> "runtime.sysSigaction"
  "runtime.sigaction" -> "runtime.getg"
  "runtime.sigaction" -> "runtime.callCgoSigaction"
  "runtime.sigaction" -> "runtime.callCgoSigaction"
  "runtime.sigaction" -> "runtime.systemstack"
  "runtime.sigaction" -> "runtime.sysSigaction"
  "runtime.sigaction" -> "runtime.msanread"
  "runtime.sigaction" -> "runtime.asanread"
  "runtime.setsig" -> "runtime.sigaction"
  "runtime.setsig" -> "internal/abi.FuncPCABI0"
  "runtime.setsig" -> "internal/abi.FuncPCABI0"
  "runtime.dieFromSignal" -> "runtime.setsig"
  "runtime.dieFromSignal" -> "runtime.raise"
  "runtime.dieFromSignal" -> "runtime.osyield"
  "runtime.dieFromSignal" -> "runtime.osyield"
  "runtime.dieFromSignal" -> "runtime.osyield"
  "runtime.dieFromSignal" -> "runtime.exit"
  "runtime.crash" -> "runtime.dieFromSignal"
  "runtime.fatalthrow$1" -> "runtime.crash"
  "runtime.fatalthrow$1" -> "runtime.exit"
  "os/signal.Notify$1$1" -> "runtime.fatalthrow$1"
  "os/signal.Notify$1$1" -> "runtime.goready$1"
  "os/signal.Notify$1$1" -> "runtime.gcResetMarkState"
  "os/signal.Notify$1$1" -> "runtime.gcStart$1"
  "os/signal.Notify$1$1" -> "runtime.gcStart$2"
  "os/signal.Notify$1$1" -> "runtime.gcStart$3"
  "os/signal.Notify$1$1" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "os/signal.Notify$1$1" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "os/signal.Notify$1$1" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "os/signal.Notify$1$1" -> "runtime.Stack$1"
  "os/signal.Notify$1$1" -> "runtime/pprof.printCountProfile$2"
  "os/signal.Notify$1$1" -> "runtime.ReadMemStats$1"
  "os/signal.Notify$1$1" -> "runtime/pprof.writeHeapProto$1"
  "os/signal.Notify$1$1" -> "(*internal/godebug.Setting).IncNonDefault"
  "os/signal.Notify$1$1" -> "hash/crc32.ieeeInit"
  "os/signal.Notify$1$1" -> "runtime.sweepone$1"
  "os/signal.Notify$1$1" -> "runtime.casgstatus$1"
  "os/signal.Notify$1$1" -> "runtime.osyield"
  "os/signal.Notify$1$1" -> "runtime.cgoCheckTypedBlock$1"
  "os/signal.Notify$1$1" -> "runtime.callers$1"
  "os/signal.Notify$1$1" -> "flag.isZeroValue$1"
  "os/signal.Notify$1$1" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "os/signal.Notify$1$1" -> "runtime.stopTheWorld$1"
  "os/signal.Notify$1$1" -> "runtime.startTheWorld$1"
  "os/signal.Notify$1$1" -> "(*runtime/pprof.profileBuilder).build$1"
  "os/signal.Notify$1$1" -> "(*internal/godebug.Setting).Value$1"
  "os/signal.Notify$1$1" -> "(*runtime.sweepLocked).sweep$1"
  "os/signal.Notify$1$1" -> "(*runtime.sweepLocked).sweep$2"
  "os/signal.Notify$1$1" -> "reflect.embeddedIfaceMethStub"
  "os/signal.Notify$1$1" -> "runtime.futexwakeup$1"
  "os/signal.Notify$1$1" -> "runtime.wbBufFlush$1"
  "os/signal.Notify$1$1" -> "runtime.gcBgMarkWorker$2"
  "os/signal.Notify$1$1" -> "runtime.mspinning"
  "os/signal.Notify$1$1" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "os/signal.Notify$1$1" -> "runtime.flushallmcaches"
  "os/signal.Notify$1$1" -> "(*internal/godebug.Setting).register"
  "os/signal.Notify$1$1" -> "runtime.persistentalloc$1"
  "os/signal.Notify$1$1" -> "runtime.tracefree$1"
  "os/signal.Notify$1$1" -> "(*runtime.mheap).freeSpan$1"
  "os/signal.Notify$1$1" -> "runtime.doRecordGoroutineProfile$1"
  "os/signal.Notify$1$1" -> "runtime._LostContendedRuntimeLock"
  "os/signal.Notify$1$1" -> "(*runtime.mLockProfile).captureStack$1"
  "os/signal.Notify$1$1" -> "runtime.gcMarkDone$2"
  "os/signal.Notify$1$1" -> "runtime.gcMarkDone$3"
  "os/signal.Notify$1$1" -> "runtime.gcMarkDone$4"
  "os/signal.Notify$1$1" -> "runtime.entersyscallblock$1"
  "os/signal.Notify$1$1" -> "runtime.entersyscallblock$2"
  "os/signal.Notify$1$1" -> "runtime.entersyscallblock_handoff"
  "os/signal.Notify$1$1" -> "runtime.exitsyscall$1"
  "os/signal.Notify$1$1" -> "runtime.exitsyscall$2"
  "os/signal.Notify$1$1" -> "runtime.cgoCheckPtrWrite$1"
  "os/signal.Notify$1$1" -> "runtime.unreachableMethod"
  "os/signal.Notify$1$1" -> "runtime.heapSetType$1"
  "os/signal.Notify$1$1" -> "runtime.tracealloc$1"
  "os/signal.Notify$1$1" -> "runtime.wirep$1"
  "os/signal.Notify$1$1" -> "runtime.wirep$2"
  "os/signal.Notify$1$1" -> "runtime.sigreturn__sigaction"
  "os/signal.Notify$1$1" -> "runtime.cgoSigtramp"
  "os/signal.Notify$1$1" -> "runtime.sigtramp"
  "os/signal.Notify$1$1" -> "runtime.forEachP$1"
  "os/signal.Notify$1$1" -> "runtime.gcMarkTermination$1"
  "os/signal.Notify$1$1" -> "runtime.gcMarkTermination$2"
  "os/signal.Notify$1$1" -> "runtime.gcControllerCommit"
  "os/signal.Notify$1$1" -> "runtime.gcMarkTermination$3"
  "os/signal.Notify$1$1" -> "runtime.freeStackSpans"
  "os/signal.Notify$1$1" -> "runtime.gcMarkTermination$5"
  "os/signal.Notify$1$1" -> "runtime.exitsyscallfast$1"
  "os/signal.Notify$1$1" -> "runtime.allocm$1"
  "os/signal.Notify$1$1" -> "runtime.mstart"
  "os/signal.Notify$1$1" -> "runtime.getempty$1"
  "os/signal.Notify$1$1" -> "(*runtime.p).destroy$1"
  "os/signal.Notify$1$1" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "os/signal.Notify$1$1" -> "runtime.gcAssistAlloc$1"
  "os/signal.Notify$1$1" -> "(*runtime.mheap).alloc$1"
  "os/signal.Notify$1$1" -> "runtime.mProf_Malloc$1"
  "os/signal.Notify$1$1" -> "runtime.mmap$1"
  "os/signal.Notify$1$1" -> "(*runtime.traceMap).put$1"
  "os/signal.Notify$1$1" -> "runtime.fatal$1"
  "os/signal.Notify$1$1" -> "(runtime.traceWriter).refill$1"
  "os/signal.Notify$1$1" -> "runtime.sigaction$1"
  "os/signal.Notify$1$1" -> "runtime.gcMarkTermination$4$1"
  "os/signal.Notify$1$1" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "os/signal.Notify$1$1" -> "runtime.exitsyscallfast_reacquired$1"
  "os/signal.Notify$1$1" -> "(*runtime.traceStringTable).put$1"
  "os/signal.Notify$1$1" -> "(*runtime.rwmutex).rlock$1"
  "os/signal.Notify$1$1" -> "runtime.traceThreadDestroy$1"
  "os/signal.Notify$1$1" -> "runtime.malg$1"
  "os/signal.Notify$1$1" -> "runtime.allocmcache$1"
  "os/signal.Notify$1$1" -> "runtime.freemcache$1"
  "os/signal.Notify$1$1" -> "runtime.reentersyscall$1"
  "os/signal.Notify$1$1" -> "runtime.reentersyscall$2"
  "os/signal.Notify$1$1" -> "runtime.entersyscall_sysmon"
  "os/signal.Notify$1$1" -> "runtime.runSafePointFn"
  "os/signal.Notify$1$1" -> "runtime.entersyscall_gcwait"
  "os/signal.Notify$1$1" -> "runtime._VDSO"
  "os/signal.Notify$1$1" -> "runtime._ExternalCode"
  "os/signal.Notify$1$1" -> "runtime._GC"
  "os/signal.Notify$1$1" -> "runtime._System"
  "os/signal.Notify$1$1" -> "runtime.sigpanic"
  "os/signal.Notify$1$1" -> "runtime.sysSigaction$1"
  "os/signal.Notify$1$1" -> "runtime.markrootFreeGStacks"
  "os/signal.Notify$1$1" -> "runtime.markroot$1"
  "os/signal.Notify$1$1" -> "runtime.printArgs$3"
  "os/signal.Notify$1$1" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "os/signal.Notify$1$1" -> "runtime.freeSomeWbufs$1"
  "os/signal.Notify$1$1" -> "(*runtime.pageAlloc).scavenge$1"
  "os/signal.Notify$1$1" -> "runtime._LostExternalCode"
  "os/signal.Notify$1$1" -> "runtime._LostSIGPROFDuringAtomic64"
  "os/signal.Notify$1$1" -> "runtime.munmap$1"
  "(*sync.Once).doSlow" -> "os/signal.Notify$1$1"
  "(*sync.Once).doSlow" -> "runtime.throw$1"
  "(*sync.Once).doSlow" -> "(*flag.FlagSet).defaultUsage"
  "(*sync.Once).doSlow" -> "time.initLocal"
  "(*sync.Once).doSlow" -> "sync.poolCleanup"
  "(*sync.Once).doSlow" -> "runtime.chanrecv$1"
  "(*sync.Once).doSlow" -> "runtime.asyncPreempt2"
  "(*sync.Once).doSlow" -> "internal/poll.runtime_pollServerInit"
  "(*sync.Once).doSlow" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "(*sync.Once).doSlow" -> "syscall.copyenv"
  "(*sync.Once).doSlow" -> "(*encoding/json.encodeState).marshal$1"
  "(*sync.Once).doSlow" -> "runtime.fatalthrow$1"
  "(*sync.Once).doSlow" -> "runtime.goready$1"
  "(*sync.Once).doSlow" -> "runtime.gcResetMarkState"
  "(*sync.Once).doSlow" -> "runtime.gcStart$1"
  "(*sync.Once).doSlow" -> "runtime.gcStart$2"
  "(*sync.Once).doSlow" -> "runtime.gcStart$3"
  "(*sync.Once).doSlow" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "(*sync.Once).doSlow" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "(*sync.Once).doSlow" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "(*sync.Once).doSlow" -> "runtime.Stack$1"
  "(*sync.Once).doSlow" -> "runtime/pprof.printCountProfile$2"
  "(*sync.Once).doSlow" -> "runtime.ReadMemStats$1"
  "(*sync.Once).doSlow" -> "runtime/pprof.writeHeapProto$1"
  "(*sync.Once).doSlow" -> "(*internal/godebug.Setting).IncNonDefault"
  "(*sync.Once).doSlow" -> "hash/crc32.ieeeInit"
  "(*sync.Once).doSlow" -> "runtime.sweepone$1"
  "(*sync.Once).doSlow" -> "runtime.casgstatus$1"
  "(*sync.Once).doSlow" -> "runtime.osyield"
  "(*sync.Once).doSlow" -> "runtime.cgoCheckTypedBlock$1"
  "(*sync.Once).doSlow" -> "runtime.callers$1"
  "(*sync.Once).doSlow" -> "flag.isZeroValue$1"
  "(*sync.Once).doSlow" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "(*sync.Once).doSlow" -> "runtime.stopTheWorld$1"
  "(*sync.Once).doSlow" -> "runtime.startTheWorld$1"
  "(*sync.Once).doSlow" -> "(*runtime/pprof.profileBuilder).build$1"
  "(*sync.Once).doSlow" -> "(*internal/godebug.Setting).Value$1"
  "(*sync.Once).doSlow" -> "(*runtime.sweepLocked).sweep$1"
  "(*sync.Once).doSlow" -> "(*runtime.sweepLocked).sweep$2"
  "(*sync.Once).doSlow" -> "reflect.embeddedIfaceMethStub"
  "(*sync.Once).doSlow" -> "runtime.futexwakeup$1"
  "(*sync.Once).doSlow" -> "runtime.wbBufFlush$1"
  "(*sync.Once).doSlow" -> "runtime.gcBgMarkWorker$2"
  "(*sync.Once).doSlow" -> "runtime.mspinning"
  "(*sync.Once).doSlow" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "(*sync.Once).doSlow" -> "runtime.flushallmcaches"
  "(*sync.Once).doSlow" -> "(*internal/godebug.Setting).register"
  "(*sync.Once).doSlow" -> "runtime.persistentalloc$1"
  "(*sync.Once).doSlow" -> "runtime.tracefree$1"
  "(*sync.Once).doSlow" -> "(*runtime.mheap).freeSpan$1"
  "(*sync.Once).doSlow" -> "runtime.doRecordGoroutineProfile$1"
  "(*sync.Once).doSlow" -> "runtime._LostContendedRuntimeLock"
  "(*sync.Once).doSlow" -> "(*runtime.mLockProfile).captureStack$1"
  "(*sync.Once).doSlow" -> "runtime.gcMarkDone$2"
  "(*sync.Once).doSlow" -> "runtime.gcMarkDone$3"
  "(*sync.Once).doSlow" -> "runtime.gcMarkDone$4"
  "(*sync.Once).doSlow" -> "runtime.entersyscallblock$1"
  "(*sync.Once).doSlow" -> "runtime.entersyscallblock$2"
  "(*sync.Once).doSlow" -> "runtime.entersyscallblock_handoff"
  "(*sync.Once).doSlow" -> "runtime.exitsyscall$1"
  "(*sync.Once).doSlow" -> "runtime.exitsyscall$2"
  "(*sync.Once).doSlow" -> "runtime.cgoCheckPtrWrite$1"
  "(*sync.Once).doSlow" -> "runtime.unreachableMethod"
  "(*sync.Once).doSlow" -> "runtime.heapSetType$1"
  "(*sync.Once).doSlow" -> "runtime.tracealloc$1"
  "(*sync.Once).doSlow" -> "runtime.wirep$1"
  "(*sync.Once).doSlow" -> "runtime.wirep$2"
  "(*sync.Once).doSlow" -> "runtime.sigreturn__sigaction"
  "(*sync.Once).doSlow" -> "runtime.cgoSigtramp"
  "(*sync.Once).doSlow" -> "runtime.sigtramp"
  "(*sync.Once).doSlow" -> "runtime.forEachP$1"
  "(*sync.Once).doSlow" -> "runtime.gcMarkTermination$1"
  "(*sync.Once).doSlow" -> "runtime.gcMarkTermination$2"
  "(*sync.Once).doSlow" -> "runtime.gcControllerCommit"
  "(*sync.Once).doSlow" -> "runtime.gcMarkTermination$3"
  "(*sync.Once).doSlow" -> "runtime.freeStackSpans"
  "(*sync.Once).doSlow" -> "runtime.gcMarkTermination$5"
  "(*sync.Once).doSlow" -> "runtime.exitsyscallfast$1"
  "(*sync.Once).doSlow" -> "runtime.allocm$1"
  "(*sync.Once).doSlow" -> "runtime.mstart"
  "(*sync.Once).doSlow" -> "runtime.getempty$1"
  "(*sync.Once).doSlow" -> "(*runtime.p).destroy$1"
  "(*sync.Once).doSlow" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "(*sync.Once).doSlow" -> "runtime.gcAssistAlloc$1"
  "(*sync.Once).doSlow" -> "(*runtime.mheap).alloc$1"
  "(*sync.Once).doSlow" -> "runtime.mProf_Malloc$1"
  "(*sync.Once).doSlow" -> "runtime.mmap$1"
  "(*sync.Once).doSlow" -> "(*runtime.traceMap).put$1"
  "(*sync.Once).doSlow" -> "runtime.fatal$1"
  "(*sync.Once).doSlow" -> "(runtime.traceWriter).refill$1"
  "(*sync.Once).doSlow" -> "runtime.sigaction$1"
  "(*sync.Once).doSlow" -> "runtime.gcMarkTermination$4$1"
  "(*sync.Once).doSlow" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "(*sync.Once).doSlow" -> "runtime.exitsyscallfast_reacquired$1"
  "(*sync.Once).doSlow" -> "(*runtime.traceStringTable).put$1"
  "(*sync.Once).doSlow" -> "(*runtime.rwmutex).rlock$1"
  "(*sync.Once).doSlow" -> "runtime.traceThreadDestroy$1"
  "(*sync.Once).doSlow" -> "runtime.malg$1"
  "(*sync.Once).doSlow" -> "runtime.allocmcache$1"
  "(*sync.Once).doSlow" -> "runtime.freemcache$1"
  "(*sync.Once).doSlow" -> "runtime.reentersyscall$1"
  "(*sync.Once).doSlow" -> "runtime.reentersyscall$2"
  "(*sync.Once).doSlow" -> "runtime.entersyscall_sysmon"
  "(*sync.Once).doSlow" -> "runtime.runSafePointFn"
  "(*sync.Once).doSlow" -> "runtime.entersyscall_gcwait"
  "(*sync.Once).doSlow" -> "runtime._VDSO"
  "(*sync.Once).doSlow" -> "runtime._ExternalCode"
  "(*sync.Once).doSlow" -> "runtime._GC"
  "(*sync.Once).doSlow" -> "runtime._System"
  "(*sync.Once).doSlow" -> "runtime.sigpanic"
  "(*sync.Once).doSlow" -> "runtime.sysSigaction$1"
  "(*sync.Once).doSlow" -> "runtime.markrootFreeGStacks"
  "(*sync.Once).doSlow" -> "runtime.markroot$1"
  "(*sync.Once).doSlow" -> "runtime.printArgs$3"
  "(*sync.Once).doSlow" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "(*sync.Once).doSlow" -> "runtime.freeSomeWbufs$1"
  "(*sync.Once).doSlow" -> "(*runtime.pageAlloc).scavenge$1"
  "(*sync.Once).doSlow" -> "runtime._LostExternalCode"
  "(*sync.Once).doSlow" -> "runtime._LostSIGPROFDuringAtomic64"
  "(*sync.Once).doSlow" -> "runtime.munmap$1"
  "(*sync.Once).Do" -> "(*sync.Once).doSlow"
  "(*time.Location).get" -> "(*sync.Once).Do"
  "(time.Time).abs" -> "(*time.Location).get"
  "(*time.Time).unixSec" -> "(*time.Time).sec"
  "(time.Time).abs" -> "(*time.Time).unixSec"
  "(*time.Location).lookup" -> "(*time.Location).get"
  "(*time.Location).lookupFirstZone" -> "(*time.Location).firstZoneUsed"
  "(*time.Location).lookup" -> "(*time.Location).lookupFirstZone"
  "(*time.Location).lookup" -> "time.tzset"
  "(time.Time).abs" -> "(*time.Location).lookup"
  "(time.Time).GoString" -> "(time.Time).abs"
  "(time.Time).GoString" -> "time.absDate"
  "(time.Time).GoString" -> "time.absClock"
  "time.appendInt" -> "time.appendInt$1"
  "time.appendInt" -> "time.appendInt$1"
  "time.appendInt" -> "time.appendInt$1"
  "time.appendInt" -> "time.appendInt$1"
  "time.appendInt" -> "time.appendInt$1"
  "time.appendInt" -> "time.appendInt$1"
  "time.appendInt" -> "time.appendInt$1"
  "time.appendInt" -> "time.appendInt$1"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "(time.Time).Nanosecond"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "(time.Time).Location"
  "(time.Time).GoString" -> "time.appendInt"
  "(time.Time).GoString" -> "time.quote"
  "(*fmt.pp).handleMethods" -> "(time.Time).GoString"
  "(*periph.io/x/host/v3/bcm283x.pcmMap).GoString" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.pcmMap).GoString"
  "(*fmt.pp).handleMethods" -> "(image/png.UnsupportedError).Error"
  "(*periph.io/x/host/v3/bcm283x.dmaMap).GoString" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).GoString"
  "(*periph.io/x/host/v3/bcm283x.dmaMap).GoString" -> "fmt.Sprintf"
  "periph.io/x/host/v3/bcm283x.indent" -> "strings.Split"
  "periph.io/x/host/v3/bcm283x.indent" -> "strings.Join"
  "(*periph.io/x/host/v3/bcm283x.dmaMap).GoString" -> "periph.io/x/host/v3/bcm283x.indent"
  "(*periph.io/x/host/v3/bcm283x.dmaMap).GoString" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/bcm283x.dmaMap).GoString" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/bcm283x.dmaMap).GoString" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.dmaMap).GoString"
  "(*fmt.fmt).fmtS" -> "(*fmt.fmt).truncateString"
  "(*fmt.fmt).fmtS" -> "(*fmt.fmt).padString"
  "(*fmt.pp).handleMethods" -> "(*fmt.fmt).fmtS"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.pp).handleMethods" -> "(*errors.errorString).Error"
  "(*fmt.pp).handleMethods" -> "(runtime.errorString).Error"
  "(reflect.ChanDir).String" -> "strconv.Itoa"
  "(*fmt.pp).handleMethods" -> "(reflect.ChanDir).String"
  "(*fmt.pp).handleMethods" -> "(syscall.Errno).Error"
  "(*fmt.pp).handleMethods" -> "(*internal/bisect.parseError).Error"
  "(*fmt.pp).handleMethods" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*fmt.pp).handleMethods" -> "(context.deadlineExceededError).Error"
  "(*fmt.pp).handleMethods" -> "(encoding/binary.bigEndian).String"
  "(*fmt.pp).handleMethods" -> "(*time.ParseError).Error"
  "(*fmt.pp).handleMethods" -> "(*io/fs.PathError).Error"
  "(*fmt.pp).handleMethods" -> "(*reflect.ValueError).Error"
  "(*fmt.pp).handleMethods" -> "(runtime.plainError).Error"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adagui/props.FontPropertyName).String"
  "(*fmt.pp).handleMethods" -> "(image/png.FormatError).Error"
  "(*fmt.pp).handleMethods" -> "(*runtime.TypeAssertionError).Error"
  "(*fmt.pp).handleMethods" -> "(*fmt.wrapError).Error"
  "(*fmt.pp).handleMethods" -> "(*fmt.wrapErrors).Error"
  "(*fmt.pp).handleMethods" -> "(internal/poll.errNetClosing).Error"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adagui/props.SizePropertyName).String"
  "(*fmt.pp).handleMethods" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*fmt.pp).handleMethods" -> "(*encoding/json.UnsupportedValueError).Error"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/allwinner.PinPL).String"
  "(*periph.io/x/host/v3/sysfs.SPI).String" -> "(*periph.io/x/host/v3/sysfs.spiConn).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.SPI).String"
  "(syscall.Signal).String" -> "internal/itoa.Itoa"
  "(*fmt.pp).handleMethods" -> "(syscall.Signal).String"
  "(*fmt.pp).handleMethods" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*fmt.pp).handleMethods" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*fmt.pp).handleMethods" -> "(*strconv.NumError).Error"
  "(*fmt.pp).handleMethods" -> "(*encoding/json.SyntaxError).Error"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtS"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).truncateString"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).padString"
  "strconv.CanBackquote" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.fmt).fmtQ" -> "strconv.CanBackquote"
  "strconv.AppendQuoteToASCII" -> "strconv.appendQuotedWith"
  "(*fmt.fmt).fmtQ" -> "strconv.AppendQuoteToASCII"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).write"
  "(*fmt.fmt).pad" -> "unicode/utf8.RuneCount"
  "(*fmt.fmt).pad" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).write"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).write"
  "(*fmt.fmt).pad" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).pad"
  "strconv.AppendQuote" -> "strconv.appendQuotedWith"
  "(*fmt.fmt).fmtQ" -> "strconv.AppendQuote"
  "(*fmt.fmt).fmtQ" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtQ"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtS"
  "(*fmt.fmt).fmtSbx" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtSbx" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtSbx" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtSx" -> "(*fmt.fmt).fmtSbx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtSx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtSx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmtQ"
  "(*fmt.pp).fmtString" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).GoString" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).GoString"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/physic.Frequency).String"
  "fmt.Sprint" -> "fmt.newPrinter"
  "fmt.Sprint" -> "(*fmt.pp).doPrint"
  "fmt.Sprint" -> "(*fmt.pp).free"
  "(github.com/golang/freetype/raster.Path).String" -> "fmt.Sprint"
  "(github.com/golang/freetype/raster.Path).String" -> "fmt.Sprint"
  "(github.com/golang/freetype/raster.Path).String" -> "fmt.Sprint"
  "(github.com/golang/freetype/raster.Path).String" -> "fmt.Sprint"
  "(*fmt.pp).handleMethods" -> "(github.com/golang/freetype/raster.Path).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.driverI2C).String"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).GoString" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).GoString"
  "(periph.io/x/host/v3/bcm283x.clockDiv).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.clockDiv).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/bcm283x.clockDiv).String"
  "(image.Point).String" -> "strconv.Itoa"
  "(image.Point).String" -> "strconv.Itoa"
  "(image.Rectangle).String" -> "(image.Point).String"
  "(image.Rectangle).String" -> "(image.Point).String"
  "(*fmt.pp).handleMethods" -> "(image.Rectangle).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/conn/v3/gpio/gpioreg.pinAlias).String"
  "(*fmt.pp).handleMethods" -> "(image.YCbCrSubsampleRatio).String"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/gg/color.SortField).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).String"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adatft.PenEventType).String"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/gpio.invalidPin).String"
  "(*fmt.pp).handleMethods" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(time.Weekday).String" -> "time.fmtInt"
  "(*fmt.pp).handleMethods" -> "(time.Weekday).String"
  "(*fmt.pp).handleMethods" -> "(runtime.errorAddressString).Error"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).String"
  "(periph.io/x/host/v3/bcm283x.clockCtl).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.clockCtl).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.clockCtl).String" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/bcm283x.clockCtl).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/allwinner.driverDMA).String"
  "(time.Time).locabs" -> "(*time.Location).get"
  "(time.Time).locabs" -> "(*time.Time).unixSec"
  "(time.Time).locabs" -> "(*time.Location).lookup"
  "(time.Time).appendFormatRFC3339" -> "(time.Time).locabs"
  "(time.Time).appendFormatRFC3339" -> "time.absDate"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.absClock"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.stdFracSecond"
  "(time.Time).appendFormatRFC3339" -> "(time.Time).Nanosecond"
  "time.appendNano" -> "time.digitsLen"
  "time.appendNano" -> "time.separator"
  "time.appendNano" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.appendNano"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).appendFormatRFC3339" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "(time.Time).appendFormatRFC3339"
  "(time.Time).AppendFormat" -> "(time.Time).appendFormatRFC3339"
  "(time.Time).appendFormat" -> "(time.Time).locabs"
  "time.nextStdChunk" -> "time.startsWithLowerCase"
  "time.nextStdChunk" -> "time.startsWithLowerCase"
  "time.nextStdChunk" -> "time.isDigit[string]"
  "time.nextStdChunk" -> "time.stdFracSecond"
  "(time.Time).appendFormat" -> "time.nextStdChunk"
  "(time.Time).appendFormat" -> "time.absDate"
  "(time.Time).appendFormat" -> "time.absClock"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Month).String" -> "time.fmtInt"
  "(time.Time).appendFormat" -> "(time.Month).String"
  "(time.Time).appendFormat" -> "(time.Month).String"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.absWeekday"
  "(time.Time).appendFormat" -> "(time.Weekday).String"
  "(time.Time).appendFormat" -> "time.absWeekday"
  "(time.Time).appendFormat" -> "(time.Weekday).String"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "(time.Time).Nanosecond"
  "(time.Time).appendFormat" -> "time.appendNano"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).appendFormat" -> "time.appendInt"
  "(time.Time).AppendFormat" -> "(time.Time).appendFormat"
  "(time.Time).Format" -> "(time.Time).AppendFormat"
  "(github.com/stefan-muehlebach/adagui/touch.Event).String" -> "(time.Time).Format"
  "(github.com/stefan-muehlebach/adagui/touch.Event).String" -> "(time.Time).Format"
  "(github.com/stefan-muehlebach/adagui/touch.Event).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adagui/touch.Event).String"
  "(time.Time).String" -> "(time.Time).Format"
  "(time.Time).String" -> "time.appendInt"
  "(time.Time).String" -> "time.appendInt"
  "(time.Time).String" -> "time.appendInt"
  "(*fmt.pp).handleMethods" -> "(time.Time).String"
  "(time.Duration).format" -> "time.fmtFrac"
  "(time.Duration).format" -> "time.fmtInt"
  "(time.Duration).format" -> "time.fmtFrac"
  "(time.Duration).format" -> "time.fmtInt"
  "(time.Duration).format" -> "time.fmtInt"
  "(time.Duration).format" -> "time.fmtInt"
  "(time.Duration).String" -> "(time.Duration).format"
  "(*fmt.pp).handleMethods" -> "(time.Duration).String"
  "(*periph.io/x/host/v3/bcm283x.clock).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.clock).String"
  "(*fmt.pp).handleMethods" -> "(*reflect.rtype).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/pine64.driver).String"
  "(periph.io/x/host/v3/bcm283x.dmaStride).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaStride).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/bcm283x.dmaStride).String"
  "(periph.io/x/conn/v3/gpio.Pull).String" -> "strconv.Itoa"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/gpio.Pull).String"
  "(periph.io/x/host/v3/bcm283x.dmaDebug).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaDebug).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaDebug).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaDebug).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaDebug).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaDebug).String" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/bcm283x.dmaDebug).String"
  "(*fmt.pp).handleMethods" -> "(*os.SyscallError).Error"
  "(*runtime/pprof.labelMap).String" -> "fmt.Sprintf"
  "(*runtime/pprof.labelMap).String" -> "sort.Strings"
  "(*runtime/pprof.labelMap).String" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(*runtime/pprof.labelMap).String"
  "(github.com/stefan-muehlebach/adatft.TouchRawPos).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adatft.TouchRawPos).String"
  "(periph.io/x/conn/v3.Duplex).String" -> "strconv.Itoa"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3.Duplex).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).String"
  "(*fmt.pp).handleMethods" -> "(runtime.lockRank).String"
  "(*periph.io/x/host/v3/sysfs.I2C).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.I2C).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/allwinner.Pin).String"
  "(periph.io/x/host/v3/bcm283x.dmaTransferInfo).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaTransferInfo).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaTransferInfo).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaTransferInfo).String" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/bcm283x.dmaTransferInfo).String"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adatft.RefPointType).String"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).String"
  "(*fmt.pp).handleMethods" -> "(internal/abi.Kind).String"
  "(*fmt.pp).handleMethods" -> "(*internal/reflectlite.ValueError).Error"
  "(*fmt.pp).handleMethods" -> "(*flag.boolValue).String"
  "(periph.io/x/conn/v3/gpio.Edge).String" -> "strconv.Itoa"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/gpio.Edge).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.driverSPI).String"
  "(*fmt.pp).handleMethods" -> "(compress/flate.CorruptInputError).Error"
  "(periph.io/x/host/v3/allwinner.pwmPrescale).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/allwinner.pwmPrescale).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).String"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/gpio.Level).String"
  "(*fmt.pp).handleMethods" -> "(encoding/base64.CorruptInputError).Error"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/bcm283x.Pin).String"
  "(*fmt.pp).handleMethods" -> "(encoding/binary.bigEndian).GoString"
  "(*fmt.pp).handleMethods" -> "(*strings.Builder).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.driverLED).String"
  "(*fmt.pp).handleMethods" -> "(io/fs.FileMode).String"
  "(periph.io/x/host/v3/allwinner.pwmPeriod).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/allwinner.pwmPeriod).String"
  "(*fmt.pp).handleMethods" -> "(reflect.Value).String"
  "(*fmt.pp).handleMethods" -> "(reflect.Kind).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).String"
  "(*fmt.pp).handleMethods" -> "(encoding/json.Number).String"
  "(*fmt.pp).handleMethods" -> "(image.Point).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/rpi.driver).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.spiConn).String"
  "(*time.Location).String" -> "(*time.Location).get"
  "(*fmt.pp).handleMethods" -> "(*time.Location).String"
  "(*fmt.pp).handleMethods" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*fmt.pp).handleMethods" -> "(encoding/binary.littleEndian).GoString"
  "(*fmt.pp).handleMethods" -> "(image/jpeg.FormatError).Error"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/conn/v3/pin.BasicPin).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/sysfs.Pin).String"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adagui/props.ColorPropertyName).String"
  "(*fmt.pp).handleMethods" -> "(*bytes.Buffer).String"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).handleMethods" -> "(time.Month).String"
  "(*periph.io/x/host/v3/allwinner.pwmMap).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/allwinner.pwmMap).String"
  "strconv.FormatUint" -> "strconv.small"
  "strconv.FormatUint" -> "strconv.formatBits"
  "(periph.io/x/conn/v3/spi.Mode).String" -> "strconv.FormatUint"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/spi.Mode).String"
  "io/fs.FormatFileInfo" -> "(*os.fileStat).Name"
  "(*embed.file).Name" -> "embed.split"
  "io/fs.FormatFileInfo" -> "(*embed.file).Name"
  "io/fs.FormatFileInfo" -> "(*os.fileStat).Mode"
  "io/fs.FormatFileInfo" -> "(*embed.file).Mode"
  "io/fs.FormatFileInfo" -> "(io/fs.FileMode).String"
  "io/fs.FormatFileInfo" -> "(*os.fileStat).Size"
  "io/fs.FormatFileInfo" -> "(*embed.file).Size"
  "io/fs.FormatFileInfo" -> "(*os.fileStat).ModTime"
  "io/fs.FormatFileInfo" -> "(*embed.file).ModTime"
  "io/fs.FormatFileInfo" -> "(time.Time).Format"
  "io/fs.FormatFileInfo" -> "(*os.fileStat).IsDir"
  "io/fs.FormatFileInfo" -> "(*embed.file).IsDir"
  "(*embed.file).String" -> "io/fs.FormatFileInfo"
  "(*fmt.pp).handleMethods" -> "(*embed.file).String"
  "(periph.io/x/host/v3/bcm283x.dmaStatus).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaStatus).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaStatus).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/bcm283x.dmaStatus).String" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/bcm283x.dmaStatus).String"
  "(*fmt.pp).handleMethods" -> "(image/jpeg.UnsupportedError).Error"
  "(golang.org/x/image/math/fixed.Int26_6).String" -> "fmt.Sprintf"
  "(golang.org/x/image/math/fixed.Int26_6).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(golang.org/x/image/math/fixed.Int26_6).String"
  "(*fmt.pp).handleMethods" -> "(*golang.org/x/text/encoding/internal.Encoding).String"
  "(github.com/stefan-muehlebach/adatft.TouchPos).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adatft.TouchPos).String"
  "(*fmt.pp).handleMethods" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).String"
  "(*fmt.pp).handleMethods" -> "(compress/flate.InternalError).Error"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adagui/touch.Type).String"
  "io/fs.FormatDirEntry" -> "(*embed.file).Name"
  "io/fs.FormatDirEntry" -> "(*os.unixDirent).Name"
  "(*embed.file).Type" -> "(*embed.file).Mode"
  "(*embed.file).Type" -> "(io/fs.FileMode).Type"
  "io/fs.FormatDirEntry" -> "(*embed.file).Type"
  "io/fs.FormatDirEntry" -> "(*os.unixDirent).Type"
  "io/fs.FormatDirEntry" -> "(io/fs.FileMode).String"
  "io/fs.FormatDirEntry" -> "(*embed.file).IsDir"
  "(*os.unixDirent).IsDir" -> "(io/fs.FileMode).IsDir"
  "io/fs.FormatDirEntry" -> "(*os.unixDirent).IsDir"
  "(*os.unixDirent).String" -> "io/fs.FormatDirEntry"
  "(*fmt.pp).handleMethods" -> "(*os.unixDirent).String"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).String"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/physic.ElectricCurrent).String"
  "(*fmt.pp).handleMethods" -> "(encoding/binary.littleEndian).String"
  "(*fmt.pp).handleMethods" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(periph.io/x/conn/v3/gpio.Duty).String" -> "strconv.Itoa"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/conn/v3/gpio.Duty).String"
  "(periph.io/x/host/v3/sysfs.functionality).String" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/sysfs.functionality).String"
  "(*fmt.pp).handleMethods" -> "(*golang.org/x/text/encoding/charmap.Charmap).String"
  "(*fmt.pp).handleMethods" -> "(runtime.waitReason).String"
  "(*fmt.pp).handleMethods" -> "(*encoding/json.MarshalerError).Error"
  "(*fmt.pp).handleMethods" -> "(internal/reflectlite.rtype).String"
  "(periph.io/x/host/v3/allwinner.pwmCtl).String" -> "(periph.io/x/host/v3/allwinner.pwmPrescale).String"
  "(periph.io/x/host/v3/allwinner.pwmCtl).String" -> "fmt.Sprintf"
  "(periph.io/x/host/v3/allwinner.pwmCtl).String" -> "strings.Join"
  "(*fmt.pp).handleMethods" -> "(periph.io/x/host/v3/allwinner.pwmCtl).String"
  "(*fmt.pp).handleMethods" -> "(time.fileSizeError).Error"
  "(github.com/stefan-muehlebach/adagui.Orientation).String" -> "strconv.FormatInt"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/adagui.Orientation).String"
  "(*fmt.pp).handleMethods" -> "(github.com/stefan-muehlebach/gg/geom.Point).String"
  "(*fmt.pp).printValue" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printValue" -> "(reflect.Value).CanInterface"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printValue" -> "(reflect.Value).Bool"
  "(*fmt.fmt).fmtBoolean" -> "(*fmt.fmt).padString"
  "(*fmt.fmt).fmtBoolean" -> "(*fmt.fmt).padString"
  "(*fmt.pp).fmtBool" -> "(*fmt.fmt).fmtBoolean"
  "(*fmt.pp).fmtBool" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtBool"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(reflect.Value).Int"
  "(*fmt.fmt).fmtInteger" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtInteger" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmt0x64" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.fmt).fmtC" -> "unicode/utf8.AppendRune"
  "(*fmt.fmt).fmtC" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtC"
  "strconv.appendQuotedRuneWith" -> "unicode/utf8.ValidRune"
  "strconv.appendQuotedRuneWith" -> "strconv.appendEscapedRune"
  "strconv.AppendQuoteRuneToASCII" -> "strconv.appendQuotedRuneWith"
  "(*fmt.fmt).fmtQc" -> "strconv.AppendQuoteRuneToASCII"
  "(*fmt.fmt).fmtQc" -> "(*fmt.fmt).pad"
  "strconv.AppendQuoteRune" -> "strconv.appendQuotedRuneWith"
  "(*fmt.fmt).fmtQc" -> "strconv.AppendQuoteRune"
  "(*fmt.fmt).fmtQc" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtQc"
  "(*fmt.fmt).fmtUnicode" -> "unicode/utf8.RuneLen"
  "(*fmt.fmt).fmtUnicode" -> "unicode/utf8.EncodeRune"
  "(*fmt.fmt).fmtUnicode" -> "strconv.IsPrint"
  "(*fmt.fmt).fmtUnicode" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtInteger" -> "(*fmt.fmt).fmtUnicode"
  "(*fmt.pp).fmtInteger" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printValue" -> "(reflect.Value).Uint"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printValue" -> "(reflect.Value).Float"
  "strconv.genericFtoa" -> "math.Float32bits"
  "strconv.genericFtoa" -> "math.Float64bits"
  "strconv.fmtB" -> "strconv.formatBits"
  "strconv.fmtB" -> "strconv.formatBits"
  "strconv.genericFtoa" -> "strconv.fmtB"
  "strconv.fmtX" -> "strconv.lower"
  "strconv.genericFtoa" -> "strconv.fmtX"
  "(*strconv.decimal).Assign" -> "strconv.trim"
  "strconv.bigFtoa" -> "(*strconv.decimal).Assign"
  "strconv.leftShift" -> "strconv.prefixIsLessThan"
  "strconv.leftShift" -> "strconv.trim"
  "(*strconv.decimal).Shift" -> "strconv.leftShift"
  "(*strconv.decimal).Shift" -> "strconv.leftShift"
  "strconv.rightShift" -> "strconv.trim"
  "(*strconv.decimal).Shift" -> "strconv.rightShift"
  "(*strconv.decimal).Shift" -> "strconv.rightShift"
  "strconv.bigFtoa" -> "(*strconv.decimal).Shift"
  "strconv.roundShortest" -> "(*strconv.decimal).Assign"
  "strconv.roundShortest" -> "(*strconv.decimal).Shift"
  "strconv.roundShortest" -> "(*strconv.decimal).Assign"
  "strconv.roundShortest" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).Round" -> "strconv.shouldRoundUp"
  "(*strconv.decimal).Round" -> "(*strconv.decimal).RoundUp"
  "(*strconv.decimal).RoundDown" -> "strconv.trim"
  "(*strconv.decimal).Round" -> "(*strconv.decimal).RoundDown"
  "strconv.roundShortest" -> "(*strconv.decimal).Round"
  "strconv.roundShortest" -> "(*strconv.decimal).RoundDown"
  "strconv.roundShortest" -> "(*strconv.decimal).RoundUp"
  "strconv.bigFtoa" -> "strconv.roundShortest"
  "strconv.formatDigits" -> "strconv.fmtE"
  "strconv.formatDigits" -> "strconv.fmtF"
  "strconv.formatDigits" -> "strconv.fmtE"
  "strconv.formatDigits" -> "strconv.fmtF"
  "strconv.bigFtoa" -> "strconv.formatDigits"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.genericFtoa" -> "strconv.bigFtoa"
  "strconv.divmod1e9" -> "math/bits.Mul64"
  "strconv.ryuDigits" -> "strconv.divmod1e9"
  "strconv.ryuDigits" -> "strconv.divmod1e9"
  "strconv.ryuDigits" -> "strconv.divmod1e9"
  "strconv.ryuDigits" -> "strconv.ryuDigits32"
  "strconv.ryuDigits" -> "strconv.ryuDigits32"
  "strconv.ryuDigits" -> "strconv.ryuDigits32"
  "strconv.ryuFtoaShortest" -> "strconv.ryuDigits"
  "strconv.ryuFtoaShortest" -> "strconv.computeBounds"
  "strconv.ryuFtoaShortest" -> "math/bits.TrailingZeros64"
  "strconv.ryuFtoaShortest" -> "strconv.ryuDigits"
  "strconv.ryuFtoaShortest" -> "strconv.mulByLog2Log10"
  "strconv.mult64bitPow10" -> "math/bits.Mul64"
  "strconv.mult64bitPow10" -> "strconv.mulByLog10Log2"
  "strconv.ryuFtoaShortest" -> "strconv.mult64bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult64bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult64bitPow10"
  "strconv.mult128bitPow10" -> "strconv.mulByLog10Log2"
  "strconv.mult128bitPow10" -> "math/bits.Mul64"
  "strconv.mult128bitPow10" -> "math/bits.Mul64"
  "strconv.mult128bitPow10" -> "math/bits.Add64"
  "strconv.ryuFtoaShortest" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaShortest" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaShortest" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaShortest" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaShortest" -> "strconv.ryuDigits"
  "strconv.genericFtoa" -> "strconv.ryuFtoaShortest"
  "strconv.ryuFtoaFixed32" -> "math/bits.Len32"
  "strconv.ryuFtoaFixed32" -> "strconv.mulByLog2Log10"
  "strconv.ryuFtoaFixed32" -> "strconv.mult64bitPow10"
  "strconv.ryuFtoaFixed32" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaFixed32" -> "strconv.formatDecimal"
  "strconv.genericFtoa" -> "strconv.ryuFtoaFixed32"
  "strconv.ryuFtoaFixed64" -> "math/bits.Len64"
  "strconv.ryuFtoaFixed64" -> "strconv.mulByLog2Log10"
  "strconv.ryuFtoaFixed64" -> "strconv.mult128bitPow10"
  "strconv.ryuFtoaFixed64" -> "strconv.divisibleByPower5"
  "strconv.ryuFtoaFixed64" -> "strconv.formatDecimal"
  "strconv.genericFtoa" -> "strconv.ryuFtoaFixed64"
  "strconv.genericFtoa" -> "strconv.bigFtoa"
  "strconv.genericFtoa" -> "strconv.formatDigits"
  "strconv.AppendFloat" -> "strconv.genericFtoa"
  "(*fmt.fmt).fmtFloat" -> "strconv.AppendFloat"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.buffer).writeByte"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.buffer).write"
  "(*fmt.fmt).fmtFloat" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.fmt).fmtFloat"
  "(*fmt.pp).fmtFloat" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printValue" -> "(reflect.Value).Float"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printValue" -> "(reflect.Value).Complex"
  "(*fmt.pp).fmtComplex" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtComplex" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).fmtComplex" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).fmtComplex" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtComplex" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printValue" -> "(reflect.Value).Complex"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printValue" -> "(reflect.Value).String"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsNil"
  "internal/fmtsort.Sort" -> "(reflect.Value).Type"
  "internal/fmtsort.Sort" -> "(*reflect.rtype).Kind"
  "internal/fmtsort.Sort" -> "(reflect.Value).Len"
  "(reflect.Value).MapRange" -> "(reflect.flag).kind"
  "(reflect.flag).panicNotMap" -> "(reflect.flag).mustBe"
  "(reflect.Value).MapRange" -> "(reflect.flag).panicNotMap"
  "internal/fmtsort.Sort" -> "(reflect.Value).MapRange"
  "(*reflect.MapIter).Key" -> "(*reflect.hiter).initialized"
  "(*reflect.MapIter).Key" -> "reflect.mapiterkey"
  "(*reflect.MapIter).Key" -> "(reflect.Value).typ"
  "(*reflect.MapIter).Key" -> "(reflect.flag).ro"
  "(*reflect.MapIter).Key" -> "(*internal/abi.Type).Kind"
  "reflect.copyVal" -> "(*internal/abi.Type).IfaceIndir"
  "reflect.copyVal" -> "reflect.unsafe_New"
  "reflect.copyVal" -> "reflect.typedmemmove"
  "(*reflect.MapIter).Key" -> "reflect.copyVal"
  "internal/fmtsort.Sort" -> "(*reflect.MapIter).Key"
  "(*reflect.MapIter).Value" -> "(*reflect.hiter).initialized"
  "(*reflect.MapIter).Value" -> "reflect.mapiterelem"
  "(*reflect.MapIter).Value" -> "(reflect.Value).typ"
  "(*reflect.MapIter).Value" -> "(reflect.flag).ro"
  "(*reflect.MapIter).Value" -> "(*internal/abi.Type).Kind"
  "(*reflect.MapIter).Value" -> "reflect.copyVal"
  "internal/fmtsort.Sort" -> "(*reflect.MapIter).Value"
  "sort.Stable" -> "(*internal/fmtsort.SortedMap).Len"
  "sort.stable" -> "sort.insertionSort"
  "sort.stable" -> "sort.insertionSort"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.symMerge" -> "(encoding/json.byIndex).Swap"
  "sort.symMerge" -> "(compress/flate.byFreq).Swap"
  "sort.symMerge" -> "(compress/flate.byLiteral).Less"
  "sort.symMerge" -> "(compress/flate.byFreq).Less"
  "sort.symMerge" -> "(*runtime/pprof.keysByCount).Less"
  "sort.symMerge" -> "(encoding/json.byIndex).Less"
  "sort.symMerge" -> "(compress/flate.byFreq).Less"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.symMerge" -> "sort.symMerge"
  "sort.swapRange" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.swapRange" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.swapRange" -> "(encoding/json.byIndex).Swap"
  "sort.swapRange" -> "(compress/flate.byLiteral).Swap"
  "sort.swapRange" -> "(compress/flate.byFreq).Swap"
  "sort.rotate" -> "sort.swapRange"
  "sort.rotate" -> "sort.swapRange"
  "sort.rotate" -> "sort.swapRange"
  "sort.symMerge" -> "sort.rotate"
  "sort.symMerge" -> "(compress/flate.byLiteral).Swap"
  "sort.symMerge" -> "(compress/flate.byFreq).Swap"
  "sort.symMerge" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.symMerge" -> "(encoding/json.byIndex).Swap"
  "sort.symMerge" -> "(encoding/json.byIndex).Less"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.symMerge" -> "(*runtime/pprof.keysByCount).Swap"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Less"
  "sort.symMerge" -> "(compress/flate.byLiteral).Less"
  "sort.symMerge" -> "(compress/flate.byFreq).Less"
  "sort.symMerge" -> "(*runtime/pprof.keysByCount).Less"
  "sort.symMerge" -> "(encoding/json.byIndex).Less"
  "sort.symMerge" -> "(compress/flate.byLiteral).Less"
  "sort.symMerge" -> "(*internal/fmtsort.SortedMap).Swap"
  "sort.symMerge" -> "sort.symMerge"
  "sort.symMerge" -> "(*runtime/pprof.keysByCount).Less"
  "sort.symMerge" -> "(compress/flate.byLiteral).Swap"
  "sort.stable" -> "sort.symMerge"
  "sort.stable" -> "sort.symMerge"
  "sort.Stable" -> "sort.stable"
  "sort.Stable" -> "(encoding/json.byIndex).Len"
  "sort.Stable" -> "(compress/flate.byLiteral).Len"
  "sort.Stable" -> "(compress/flate.byFreq).Len"
  "sort.Stable" -> "(*runtime/pprof.keysByCount).Len"
  "internal/fmtsort.Sort" -> "sort.Stable"
  "(*reflect.MapIter).Next" -> "(reflect.Value).IsValid"
  "(*reflect.MapIter).Next" -> "(*reflect.hiter).initialized"
  "(*reflect.MapIter).Next" -> "(reflect.Value).typ"
  "(*reflect.MapIter).Next" -> "(reflect.Value).pointer"
  "(*reflect.MapIter).Next" -> "reflect.mapiterinit"
  "(*reflect.MapIter).Next" -> "reflect.mapiterkey"
  "(*reflect.MapIter).Next" -> "reflect.mapiterkey"
  "(*reflect.MapIter).Next" -> "reflect.mapiternext"
  "internal/fmtsort.Sort" -> "(*reflect.MapIter).Next"
  "(*fmt.pp).printValue" -> "internal/fmtsort.Sort"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Elem"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).NumField"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).Field"
  "fmt.getField" -> "(reflect.Value).Field"
  "fmt.getField" -> "(reflect.Value).Kind"
  "fmt.getField" -> "(reflect.Value).Elem"
  "fmt.getField" -> "(reflect.Value).IsNil"
  "(*fmt.pp).printValue" -> "fmt.getField"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).Elem"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).Kind"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(reflect.Value).bytesSlow" -> "(reflect.flag).kind"
  "(reflect.Value).bytesSlow" -> "(reflect.Value).typ"
  "(reflect.Value).bytesSlow" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).bytesSlow" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).bytesSlow" -> "(reflect.Value).typ"
  "(reflect.Value).bytesSlow" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).bytesSlow" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).bytesSlow" -> "(reflect.flag).kind"
  "(reflect.Value).bytesSlow" -> "(reflect.Value).CanAddr"
  "(reflect.Value).bytesSlow" -> "(reflect.Value).typ"
  "(reflect.Value).Bytes" -> "(reflect.Value).bytesSlow"
  "(*fmt.pp).printValue" -> "(reflect.Value).Bytes"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.fmt).truncate" -> "unicode/utf8.DecodeRune"
  "(*fmt.fmt).fmtBs" -> "(*fmt.fmt).truncate"
  "(*fmt.fmt).fmtBs" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtBs"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtInteger"
  "(*fmt.fmt).fmtBx" -> "(*fmt.fmt).fmtSbx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtBx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtBx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmtQ"
  "(*fmt.pp).fmtBytes" -> "reflect.ValueOf"
  "(*fmt.pp).fmtBytes" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtBytes"
  "(*fmt.pp).printValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printValue" -> "(reflect.Value).CanAddr"
  "(*fmt.pp).printValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printValue" -> "(reflect.Value).Uint"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsNil"
  "(*fmt.pp).printValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Kind"
  "(reflect.Value).UnsafePointer" -> "(reflect.flag).kind"
  "(reflect.Value).UnsafePointer" -> "(reflect.Value).typ"
  "(reflect.Value).UnsafePointer" -> "(reflect.Value).pointer"
  "(reflect.Value).UnsafePointer" -> "reflect.verifyNotInHeapPtr"
  "(reflect.Value).UnsafePointer" -> "reflect.methodValueCallCodePtr"
  "(reflect.Value).UnsafePointer" -> "(reflect.Value).pointer"
  "(reflect.Value).UnsafePointer" -> "(reflect.flag).kind"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).UnsafePointer"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Type"
  "(*fmt.pp).fmtPointer" -> "(*reflect.rtype).String"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtPointer" -> "(*fmt.fmt).padString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtPointer"
  "(*fmt.pp).printValue" -> "(reflect.Value).Elem"
  "(*fmt.pp).printValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printValue" -> "(reflect.Value).UnsafePointer"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).unknownType" -> "(reflect.Value).IsValid"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).unknownType" -> "(reflect.Value).Type"
  "(*fmt.pp).unknownType" -> "(*reflect.rtype).String"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).printValue" -> "(*fmt.pp).unknownType"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).printValue"
  "(*fmt.pp).badVerb" -> "(reflect.Value).IsValid"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).printArg" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printArg" -> "reflect.TypeOf"
  "(*fmt.pp).printArg" -> "(*reflect.rtype).String"
  "(*fmt.pp).printArg" -> "(*fmt.fmt).fmtS"
  "(*fmt.pp).printArg" -> "reflect.ValueOf"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtPointer"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtBool"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtFloat"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtComplex"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInteger"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtBytes"
  "(*fmt.pp).printArg" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printArg" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printArg" -> "(reflect.Value).Interface"
  "(*fmt.pp).printArg" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printArg" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printArg" -> "(reflect.Value).CanInterface"
  "(*fmt.pp).printArg" -> "reflect.ValueOf"
  "(*fmt.pp).printArg" -> "(*fmt.pp).printValue"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "fmt.intFromArg" -> "reflect.ValueOf"
  "fmt.intFromArg" -> "(reflect.Value).Kind"
  "fmt.intFromArg" -> "fmt.tooLarge"
  "fmt.intFromArg" -> "(reflect.Value).Int"
  "fmt.intFromArg" -> "(reflect.Value).Uint"
  "(*fmt.pp).doPrintf" -> "fmt.intFromArg"
  "(*fmt.pp).doPrintf" -> "fmt.parsenum"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.pp).doPrintf" -> "fmt.intFromArg"
  "(*fmt.pp).doPrintf" -> "fmt.parsenum"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).badArgNum" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).badArgNum" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).badArgNum" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).badArgNum"
  "(*fmt.pp).missingArg" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).missingArg" -> "(*fmt.buffer).writeRune"
  "(*fmt.pp).missingArg" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).missingArg"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "(*fmt.pp).doPrintf" -> "(*fmt.fmt).clearflags"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "reflect.TypeOf"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).writeByte"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "(*fmt.pp).doPrintf" -> "(*reflect.rtype).String"
  "fmt.Fprintf" -> "(*fmt.pp).doPrintf"
  "fmt.Fprintf" -> "(*bytes.Buffer).Write"
  "fmt.Fprintf" -> "(*os.File).Write"
  "fmt.Fprintf" -> "(*internal/poll.FD).Write"
  "fmt.Fprintf" -> "(io.discard).Write"
  "fmt.Fprintf" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "fmt.Fprintf" -> "(*fmt.pp).Write"
  "fmt.Fprintf" -> "(*bufio.Writer).Write"
  "fmt.Fprintf" -> "(*fmt.pp).free"
  "fmt.Fprintf" -> "(*compress/flate.dictWriter).Write"
  "fmt.Fprintf" -> "(*strings.Builder).Write"
  "fmt.Fprintf" -> "(*hash/crc32.digest).Write"
  "fmt.Fprintf" -> "(*text/tabwriter.Writer).Write"
  "fmt.Fprintf" -> "(*compress/flate.Writer).Write"
  "fmt.Fprintf" -> "(*golang.org/x/text/transform.Writer).Write"
  "fmt.Fprintf" -> "(*compress/zlib.Writer).Write"
  "fmt.Fprintf" -> "(*internal/godebug.runtimeStderr).Write"
  "fmt.Fprintf" -> "(*image/png.encoder).Write"
  "fmt.Fprintf" -> "(*hash/adler32.digest).Write"
  "flag.init$1" -> "fmt.Fprintf"
  "flag.PrintDefaults" -> "(*flag.FlagSet).PrintDefaults"
  "flag.init$1" -> "flag.PrintDefaults"
  "flag.commandLineUsage" -> "flag.init$1"
  "flag.commandLineUsage" -> "runtime.init$1"
  "flag.commandLineUsage" -> "internal/poll.CopyFileRange$1"
  "flag.commandLineUsage" -> "runtime.chansend$1"
  "flag.commandLineUsage" -> "(*flag.FlagSet).defaultUsage"
  "flag.commandLineUsage" -> "time.initLocal"
  "flag.commandLineUsage" -> "sync.poolCleanup"
  "flag.commandLineUsage" -> "runtime.chanrecv$1"
  "flag.commandLineUsage" -> "runtime.asyncPreempt2"
  "flag.commandLineUsage" -> "os/signal.loop"
  "flag.commandLineUsage" -> "time.FixedZone$1"
  "flag.commandLineUsage" -> "(*fmt.ss).Token$1"
  "flag.commandLineUsage" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "flag.commandLineUsage" -> "internal/poll.runtime_pollServerInit"
  "flag.commandLineUsage" -> "os/signal.Notify$1$1"
  "flag.commandLineUsage" -> "reflect.methodValueCall"
  "flag.commandLineUsage" -> "runtime.throw$1"
  "flag.commandLineUsage" -> "runtime.SetFinalizer$1"
  "flag.commandLineUsage" -> "runtime.SetFinalizer$2"
  "flag.commandLineUsage" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "flag.commandLineUsage" -> "syscall.copyenv"
  "flag.commandLineUsage" -> "(*encoding/json.encodeState).marshal$1"
  "flag.commandLineUsage" -> "runtime.fatalthrow$1"
  "flag.commandLineUsage" -> "runtime.goready$1"
  "flag.commandLineUsage" -> "runtime.gcResetMarkState"
  "flag.commandLineUsage" -> "runtime.gcStart$1"
  "flag.commandLineUsage" -> "runtime.gcStart$2"
  "flag.commandLineUsage" -> "runtime.gcStart$3"
  "flag.commandLineUsage" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "flag.commandLineUsage" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "flag.commandLineUsage" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "flag.commandLineUsage" -> "runtime.Stack$1"
  "flag.commandLineUsage" -> "runtime/pprof.printCountProfile$2"
  "flag.commandLineUsage" -> "runtime.ReadMemStats$1"
  "flag.commandLineUsage" -> "runtime/pprof.writeHeapProto$1"
  "flag.commandLineUsage" -> "(*internal/godebug.Setting).IncNonDefault"
  "flag.commandLineUsage" -> "hash/crc32.ieeeInit"
  "flag.commandLineUsage" -> "runtime.sweepone$1"
  "flag.commandLineUsage" -> "runtime.casgstatus$1"
  "flag.commandLineUsage" -> "runtime.osyield"
  "flag.commandLineUsage" -> "runtime.cgoCheckTypedBlock$1"
  "flag.commandLineUsage" -> "runtime.callers$1"
  "flag.commandLineUsage" -> "flag.isZeroValue$1"
  "flag.commandLineUsage" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "flag.commandLineUsage" -> "runtime.stopTheWorld$1"
  "flag.commandLineUsage" -> "runtime.startTheWorld$1"
  "flag.commandLineUsage" -> "(*runtime/pprof.profileBuilder).build$1"
  "flag.commandLineUsage" -> "(*internal/godebug.Setting).Value$1"
  "flag.commandLineUsage" -> "(*runtime.sweepLocked).sweep$1"
  "flag.commandLineUsage" -> "(*runtime.sweepLocked).sweep$2"
  "flag.commandLineUsage" -> "reflect.embeddedIfaceMethStub"
  "flag.commandLineUsage" -> "runtime.futexwakeup$1"
  "flag.commandLineUsage" -> "runtime.wbBufFlush$1"
  "flag.commandLineUsage" -> "runtime.gcBgMarkWorker$2"
  "flag.commandLineUsage" -> "runtime.mspinning"
  "flag.commandLineUsage" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "flag.commandLineUsage" -> "runtime.flushallmcaches"
  "flag.commandLineUsage" -> "(*internal/godebug.Setting).register"
  "flag.commandLineUsage" -> "runtime.persistentalloc$1"
  "flag.commandLineUsage" -> "runtime.tracefree$1"
  "flag.commandLineUsage" -> "(*runtime.mheap).freeSpan$1"
  "flag.commandLineUsage" -> "runtime.doRecordGoroutineProfile$1"
  "flag.commandLineUsage" -> "runtime._LostContendedRuntimeLock"
  "flag.commandLineUsage" -> "(*runtime.mLockProfile).captureStack$1"
  "flag.commandLineUsage" -> "runtime.gcMarkDone$2"
  "flag.commandLineUsage" -> "runtime.gcMarkDone$3"
  "flag.commandLineUsage" -> "runtime.gcMarkDone$4"
  "flag.commandLineUsage" -> "runtime.entersyscallblock$1"
  "flag.commandLineUsage" -> "runtime.entersyscallblock$2"
  "flag.commandLineUsage" -> "runtime.entersyscallblock_handoff"
  "flag.commandLineUsage" -> "runtime.exitsyscall$1"
  "flag.commandLineUsage" -> "runtime.exitsyscall$2"
  "flag.commandLineUsage" -> "runtime.cgoCheckPtrWrite$1"
  "flag.commandLineUsage" -> "runtime.unreachableMethod"
  "flag.commandLineUsage" -> "runtime.heapSetType$1"
  "flag.commandLineUsage" -> "runtime.tracealloc$1"
  "flag.commandLineUsage" -> "runtime.wirep$1"
  "flag.commandLineUsage" -> "runtime.wirep$2"
  "flag.commandLineUsage" -> "runtime.sigreturn__sigaction"
  "flag.commandLineUsage" -> "runtime.cgoSigtramp"
  "flag.commandLineUsage" -> "runtime.sigtramp"
  "flag.commandLineUsage" -> "runtime.forEachP$1"
  "flag.commandLineUsage" -> "runtime.gcMarkTermination$1"
  "flag.commandLineUsage" -> "runtime.gcMarkTermination$2"
  "flag.commandLineUsage" -> "runtime.gcControllerCommit"
  "flag.commandLineUsage" -> "runtime.gcMarkTermination$3"
  "flag.commandLineUsage" -> "runtime.freeStackSpans"
  "flag.commandLineUsage" -> "runtime.gcMarkTermination$5"
  "flag.commandLineUsage" -> "runtime.exitsyscallfast$1"
  "flag.commandLineUsage" -> "runtime.allocm$1"
  "flag.commandLineUsage" -> "runtime.mstart"
  "flag.commandLineUsage" -> "runtime.getempty$1"
  "flag.commandLineUsage" -> "(*runtime.p).destroy$1"
  "flag.commandLineUsage" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "flag.commandLineUsage" -> "runtime.gcAssistAlloc$1"
  "flag.commandLineUsage" -> "(*runtime.mheap).alloc$1"
  "flag.commandLineUsage" -> "runtime.mProf_Malloc$1"
  "flag.commandLineUsage" -> "runtime.mmap$1"
  "flag.commandLineUsage" -> "(*runtime.traceMap).put$1"
  "flag.commandLineUsage" -> "runtime.fatal$1"
  "flag.commandLineUsage" -> "(runtime.traceWriter).refill$1"
  "flag.commandLineUsage" -> "runtime.sigaction$1"
  "flag.commandLineUsage" -> "runtime.gcMarkTermination$4$1"
  "flag.commandLineUsage" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "flag.commandLineUsage" -> "runtime.exitsyscallfast_reacquired$1"
  "flag.commandLineUsage" -> "(*runtime.traceStringTable).put$1"
  "flag.commandLineUsage" -> "(*runtime.rwmutex).rlock$1"
  "flag.commandLineUsage" -> "runtime.traceThreadDestroy$1"
  "flag.commandLineUsage" -> "runtime.malg$1"
  "flag.commandLineUsage" -> "runtime.allocmcache$1"
  "flag.commandLineUsage" -> "runtime.freemcache$1"
  "flag.commandLineUsage" -> "runtime.reentersyscall$1"
  "flag.commandLineUsage" -> "runtime.reentersyscall$2"
  "flag.commandLineUsage" -> "runtime.entersyscall_sysmon"
  "flag.commandLineUsage" -> "runtime.runSafePointFn"
  "flag.commandLineUsage" -> "runtime.entersyscall_gcwait"
  "flag.commandLineUsage" -> "runtime._VDSO"
  "flag.commandLineUsage" -> "runtime._ExternalCode"
  "flag.commandLineUsage" -> "runtime._GC"
  "flag.commandLineUsage" -> "runtime._System"
  "flag.commandLineUsage" -> "runtime.sigpanic"
  "flag.commandLineUsage" -> "runtime.sysSigaction$1"
  "flag.commandLineUsage" -> "runtime.markrootFreeGStacks"
  "flag.commandLineUsage" -> "runtime.markroot$1"
  "flag.commandLineUsage" -> "runtime.printArgs$3"
  "flag.commandLineUsage" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "flag.commandLineUsage" -> "runtime.freeSomeWbufs$1"
  "flag.commandLineUsage" -> "(*runtime.pageAlloc).scavenge$1"
  "flag.commandLineUsage" -> "runtime._LostExternalCode"
  "flag.commandLineUsage" -> "runtime._LostSIGPROFDuringAtomic64"
  "flag.commandLineUsage" -> "runtime.munmap$1"
  "runtime.clearpools" -> "flag.commandLineUsage"
  "runtime.clearpools" -> "runtime/pprof.writeHeapProto$1"
  "runtime.clearpools" -> "runtime.casgstatus$1"
  "runtime.clearpools" -> "runtime.osyield"
  "runtime.clearpools" -> "flag.init$1"
  "runtime.clearpools" -> "internal/poll.CopyFileRange$1"
  "runtime.clearpools" -> "runtime.chansend$1"
  "runtime.clearpools" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "runtime.clearpools" -> "os/signal.Notify$1$1"
  "runtime.clearpools" -> "runtime.gcStart$2"
  "runtime.clearpools" -> "runtime.Stack$1"
  "runtime.clearpools" -> "(*flag.FlagSet).defaultUsage"
  "runtime.clearpools" -> "time.initLocal"
  "runtime.clearpools" -> "sync.poolCleanup"
  "runtime.clearpools" -> "runtime.asyncPreempt2"
  "runtime.clearpools" -> "internal/poll.runtime_pollServerInit"
  "runtime.clearpools" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "runtime.clearpools" -> "(*internal/godebug.Setting).IncNonDefault"
  "runtime.clearpools" -> "hash/crc32.ieeeInit"
  "runtime.clearpools" -> "os/signal.loop"
  "runtime.clearpools" -> "time.FixedZone$1"
  "runtime.clearpools" -> "(*encoding/json.encodeState).marshal$1"
  "runtime.clearpools" -> "runtime.fatalthrow$1"
  "runtime.clearpools" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "runtime.clearpools" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "runtime.clearpools" -> "runtime.asyncPreempt"
  "runtime.clearpools" -> "runtime.goready$1"
  "runtime.clearpools" -> "runtime/pprof.printCountProfile$2"
  "runtime.clearpools" -> "runtime.sweepone$1"
  "runtime.clearpools" -> "runtime.init$1"
  "runtime.clearpools" -> "runtime.gcStart$1"
  "runtime.clearpools" -> "runtime.chanrecv$1"
  "runtime.clearpools" -> "runtime.throw$1"
  "runtime.clearpools" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "runtime.clearpools" -> "runtime.ReadMemStats$1"
  "runtime.clearpools" -> "runtime.cgoCheckTypedBlock$1"
  "runtime.clearpools" -> "runtime.gcStart$3"
  "runtime.clearpools" -> "runtime.callers$1"
  "runtime.clearpools" -> "(*fmt.ss).Token$1"
  "runtime.clearpools" -> "reflect.methodValueCall"
  "runtime.clearpools" -> "runtime.SetFinalizer$1"
  "runtime.clearpools" -> "runtime.SetFinalizer$2"
  "runtime.clearpools" -> "syscall.copyenv"
  "runtime.clearpools" -> "runtime.gcResetMarkState"
  "runtime.clearpools" -> "runtime.atomicstorep"
  "runtime.clearpools" -> "runtime.lock"
  "runtime.clearpools" -> "runtime.unlock"
  "runtime.clearpools" -> "runtime.lock"
  "runtime.clearpools" -> "runtime.unlock"
  "runtime.clearpools" -> "flag.isZeroValue$1"
  "runtime.clearpools" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "runtime.clearpools" -> "runtime.stopTheWorld$1"
  "runtime.clearpools" -> "runtime.startTheWorld$1"
  "runtime.clearpools" -> "(*runtime/pprof.profileBuilder).build$1"
  "runtime.clearpools" -> "(*internal/godebug.Setting).Value$1"
  "runtime.clearpools" -> "(*runtime.sweepLocked).sweep$1"
  "runtime.clearpools" -> "(*runtime.sweepLocked).sweep$2"
  "runtime.clearpools" -> "reflect.embeddedIfaceMethStub"
  "runtime.clearpools" -> "runtime.futexwakeup$1"
  "runtime.clearpools" -> "runtime.wbBufFlush$1"
  "runtime.clearpools" -> "runtime.gcBgMarkWorker$2"
  "runtime.clearpools" -> "runtime.mspinning"
  "runtime.clearpools" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "runtime.clearpools" -> "runtime.flushallmcaches"
  "runtime.clearpools" -> "(*internal/godebug.Setting).register"
  "runtime.clearpools" -> "runtime.persistentalloc$1"
  "runtime.clearpools" -> "runtime.tracefree$1"
  "runtime.clearpools" -> "(*runtime.mheap).freeSpan$1"
  "runtime.clearpools" -> "runtime.doRecordGoroutineProfile$1"
  "runtime.clearpools" -> "runtime._LostContendedRuntimeLock"
  "runtime.clearpools" -> "(*runtime.mLockProfile).captureStack$1"
  "runtime.clearpools" -> "runtime.gcMarkDone$2"
  "runtime.clearpools" -> "runtime.gcMarkDone$3"
  "runtime.clearpools" -> "runtime.gcMarkDone$4"
  "runtime.clearpools" -> "runtime.entersyscallblock$1"
  "runtime.clearpools" -> "runtime.entersyscallblock$2"
  "runtime.clearpools" -> "runtime.entersyscallblock_handoff"
  "runtime.clearpools" -> "runtime.exitsyscall$1"
  "runtime.clearpools" -> "runtime.exitsyscall$2"
  "runtime.clearpools" -> "runtime.cgoCheckPtrWrite$1"
  "runtime.clearpools" -> "runtime.unreachableMethod"
  "runtime.clearpools" -> "runtime.heapSetType$1"
  "runtime.clearpools" -> "runtime.tracealloc$1"
  "runtime.clearpools" -> "runtime.wirep$1"
  "runtime.clearpools" -> "runtime.wirep$2"
  "runtime.clearpools" -> "runtime.sigreturn__sigaction"
  "runtime.clearpools" -> "runtime.cgoSigtramp"
  "runtime.clearpools" -> "runtime.sigtramp"
  "runtime.clearpools" -> "runtime.forEachP$1"
  "runtime.clearpools" -> "runtime.gcMarkTermination$1"
  "runtime.clearpools" -> "runtime.gcMarkTermination$2"
  "runtime.clearpools" -> "runtime.gcControllerCommit"
  "runtime.clearpools" -> "runtime.gcMarkTermination$3"
  "runtime.clearpools" -> "runtime.freeStackSpans"
  "runtime.clearpools" -> "runtime.gcMarkTermination$5"
  "runtime.clearpools" -> "runtime.exitsyscallfast$1"
  "runtime.clearpools" -> "runtime.allocm$1"
  "runtime.clearpools" -> "runtime.mstart"
  "runtime.clearpools" -> "runtime.getempty$1"
  "runtime.clearpools" -> "(*runtime.p).destroy$1"
  "runtime.clearpools" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "runtime.clearpools" -> "runtime.gcAssistAlloc$1"
  "runtime.clearpools" -> "(*runtime.mheap).alloc$1"
  "runtime.clearpools" -> "runtime.mProf_Malloc$1"
  "runtime.clearpools" -> "runtime.mmap$1"
  "runtime.clearpools" -> "(*runtime.traceMap).put$1"
  "runtime.clearpools" -> "runtime.fatal$1"
  "runtime.clearpools" -> "(runtime.traceWriter).refill$1"
  "runtime.clearpools" -> "runtime.sigaction$1"
  "runtime.clearpools" -> "runtime.gcMarkTermination$4$1"
  "runtime.clearpools" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "runtime.clearpools" -> "runtime.exitsyscallfast_reacquired$1"
  "runtime.clearpools" -> "(*runtime.traceStringTable).put$1"
  "runtime.clearpools" -> "(*runtime.rwmutex).rlock$1"
  "runtime.clearpools" -> "runtime.traceThreadDestroy$1"
  "runtime.clearpools" -> "runtime.malg$1"
  "runtime.clearpools" -> "runtime.allocmcache$1"
  "runtime.clearpools" -> "runtime.freemcache$1"
  "runtime.clearpools" -> "runtime.reentersyscall$1"
  "runtime.clearpools" -> "runtime.reentersyscall$2"
  "runtime.clearpools" -> "runtime.entersyscall_sysmon"
  "runtime.clearpools" -> "runtime.runSafePointFn"
  "runtime.clearpools" -> "runtime.entersyscall_gcwait"
  "runtime.clearpools" -> "runtime._VDSO"
  "runtime.clearpools" -> "runtime._ExternalCode"
  "runtime.clearpools" -> "runtime._GC"
  "runtime.clearpools" -> "runtime._System"
  "runtime.clearpools" -> "runtime.sigpanic"
  "runtime.clearpools" -> "runtime.sysSigaction$1"
  "runtime.clearpools" -> "runtime.markrootFreeGStacks"
  "runtime.clearpools" -> "runtime.markroot$1"
  "runtime.clearpools" -> "runtime.printArgs$3"
  "runtime.clearpools" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "runtime.clearpools" -> "runtime.freeSomeWbufs$1"
  "runtime.clearpools" -> "(*runtime.pageAlloc).scavenge$1"
  "runtime.clearpools" -> "runtime._LostExternalCode"
  "runtime.clearpools" -> "runtime._LostSIGPROFDuringAtomic64"
  "runtime.clearpools" -> "runtime.munmap$1"
  "runtime.gcStart" -> "runtime.clearpools"
  "runtime.gcStart" -> "(*runtime/internal/atomic.Uint32).Add"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Int64).Store"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime.gcControllerState).revise"
  "(*runtime.gcControllerState).setMaxIdleMarkWorkers" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.gcControllerState).setMaxIdleMarkWorkers" -> "runtime.throw"
  "(*runtime.gcControllerState).setMaxIdleMarkWorkers" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime.gcControllerState).setMaxIdleMarkWorkers"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime.gcControllerState).setMaxIdleMarkWorkers"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime.gcControllerState).setMaxIdleMarkWorkers"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime.gcControllerState).heapGoal"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Float64).Load"
  "(*runtime.gcControllerState).startCycle" -> "(*runtime/internal/atomic.Uint64).Load"
  "runtime.gcStart" -> "(*runtime.gcControllerState).startCycle"
  "runtime.gcStart" -> "(*runtime.gcCPULimiterState).startGCTransition"
  "runtime.gcStart" -> "runtime.schedEnableUser"
  "runtime.gcStart" -> "runtime.setGCPhase"
  "runtime.gcStart" -> "runtime.gcBgMarkPrepare"
  "runtime.gcMarkRootPrepare" -> "runtime.assertWorldStopped"
  "runtime.gcMarkRootPrepare" -> "runtime.activeModules"
  "runtime.gcMarkRootPrepare$1" -> "runtime.divRoundUp"
  "runtime.gcMarkRootPrepare" -> "runtime.gcMarkRootPrepare$1"
  "runtime.gcMarkRootPrepare" -> "runtime.activeModules"
  "runtime.gcMarkRootPrepare" -> "runtime.gcMarkRootPrepare$1"
  "runtime.allGsSnapshot" -> "runtime.assertWorldStoppedOrLockHeld"
  "runtime.gcMarkRootPrepare" -> "runtime.allGsSnapshot"
  "runtime.gcStart" -> "runtime.gcMarkRootPrepare"
  "runtime.gcMarkTinyAllocs" -> "runtime.assertWorldStopped"
  "runtime.gcMarkTinyAllocs" -> "runtime.findObject"
  "runtime.gcMarkTinyAllocs" -> "runtime.greyobject"
  "runtime.gcStart" -> "runtime.gcMarkTinyAllocs"
  "runtime.gcStart" -> "runtime/internal/atomic.Store"
  "runtime.gcStart" -> "runtime.acquirem"
  "runtime.gcStart" -> "runtime.systemstack"
  "runtime.gcStart" -> "runtime.semrelease"
  "runtime.gcStart" -> "runtime.releasem"
  "runtime.gcStart" -> "runtime.Gosched"
  "runtime.gcStart" -> "runtime.semrelease"
  "runtime.mallocgc" -> "runtime.gcStart"
  "runtime.mallocgc" -> "runtime.add"
  "runtime.itabAdd" -> "runtime.mallocgc"
  "runtime.iterate_itabs" -> "runtime.add"
  "(*runtime.itabTableType).add" -> "runtime.itabHashFunc"
  "(*runtime.itabTableType).add" -> "runtime.add"
  "(*runtime.itabTableType).add" -> "runtime/internal/atomic.StorepNoWB"
  "runtime.iterate_itabs" -> "(*runtime.itabTableType).add"
  "runtime.itabAdd" -> "runtime.iterate_itabs"
  "runtime.itabAdd" -> "(*runtime.itabTableType).add"
  "runtime.itabAdd" -> "runtime.throw"
  "runtime.itabAdd" -> "runtime.atomicstorep"
  "runtime.getitab" -> "runtime.itabAdd"
  "runtime.getitab" -> "runtime.unlock"
  "runtime.getitab" -> "(*runtime.itab).init"
  "runtime.assertE2I2" -> "runtime.getitab"
  "runtime.SetFinalizer" -> "runtime.assertE2I2"
  "runtime.SetFinalizer" -> "runtime.alignUp"
  "runtime.SetFinalizer" -> "runtime.alignUp"
  "runtime.createfing" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.runfinq" -> "runtime.getg"
  "runtime.runfinq" -> "runtime.lock"
  "runtime.runfinq" -> "runtime.unlock"
  "runtime.runfinq" -> "runtime.lock"
  "runtime.runfinq" -> "runtime.gopark"
  "runtime.runfinq" -> "runtime.unlock"
  "runtime.racefingo" -> "runtime.throw"
  "runtime.runfinq" -> "runtime.racefingo"
  "runtime.runfinq" -> "runtime.lock"
  "runtime.runfinq" -> "runtime.unlock"
  "runtime.runfinq" -> "runtime.mallocgc"
  "runtime.runfinq" -> "runtime.throw"
  "runtime.runfinq" -> "(*runtime/internal/atomic.Uint32).Or"
  "runtime.runfinq" -> "runtime.reflectcall"
  "(*runtime/internal/atomic.Uint32).And" -> "runtime/internal/atomic.And"
  "runtime.runfinq" -> "(*runtime/internal/atomic.Uint32).And"
  "runtime.runfinq" -> "runtime/internal/atomic.Store"
  "runtime.runfinq" -> "runtime.throw"
  "runtime.assertE2I" -> "runtime.getitab"
  "runtime.runfinq" -> "runtime.assertE2I"
  "runtime.createfing" -> "runtime.runfinq"
  "runtime.createfing" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.SetFinalizer" -> "runtime.createfing"
  "runtime.SetFinalizer" -> "runtime.systemstack"
  "internal/poll.newPoolPipe" -> "runtime.SetFinalizer"
  "(*sync.Pool).Get" -> "internal/poll.newPoolPipe"
  "reflect.funcLayout$1" -> "reflect.unsafe_New"
  "(*sync.Pool).Get" -> "reflect.funcLayout$1"
  "fmt.newPrinter" -> "(*sync.Pool).Get"
  "(*fmt.fmt).init" -> "(*fmt.fmt).clearflags"
  "fmt.newPrinter" -> "(*fmt.fmt).init"
  "fmt.Errorf" -> "fmt.newPrinter"
  "fmt.Errorf" -> "(*fmt.pp).doPrintf"
  "fmt.Errorf" -> "(*fmt.pp).free"
  "fmt.Errorf" -> "errors.New"
  "slices.Sort[[]int int]" -> "math/bits.Len"
  "cmp.Less[int]" -> "cmp.isNaN[int]"
  "cmp.Less[int]" -> "cmp.isNaN[int]"
  "slices.insertionSortOrdered[int]" -> "cmp.Less[int]"
  "slices.pdqsortOrdered[int]" -> "slices.insertionSortOrdered[int]"
  "slices.siftDownOrdered[int]" -> "cmp.Less[int]"
  "slices.siftDownOrdered[int]" -> "cmp.Less[int]"
  "slices.heapSortOrdered[int]" -> "slices.siftDownOrdered[int]"
  "slices.heapSortOrdered[int]" -> "slices.siftDownOrdered[int]"
  "slices.pdqsortOrdered[int]" -> "slices.heapSortOrdered[int]"
  "slices.breakPatternsOrdered[int]" -> "slices.nextPowerOfTwo"
  "slices.breakPatternsOrdered[int]" -> "(*slices.xorshift).Next"
  "slices.pdqsortOrdered[int]" -> "slices.breakPatternsOrdered[int]"
  "slices.order2Ordered[int]" -> "cmp.Less[int]"
  "slices.medianOrdered[int]" -> "slices.order2Ordered[int]"
  "slices.medianOrdered[int]" -> "slices.order2Ordered[int]"
  "slices.medianOrdered[int]" -> "slices.order2Ordered[int]"
  "slices.medianAdjacentOrdered[int]" -> "slices.medianOrdered[int]"
  "slices.choosePivotOrdered[int]" -> "slices.medianAdjacentOrdered[int]"
  "slices.choosePivotOrdered[int]" -> "slices.medianAdjacentOrdered[int]"
  "slices.choosePivotOrdered[int]" -> "slices.medianAdjacentOrdered[int]"
  "slices.choosePivotOrdered[int]" -> "slices.medianOrdered[int]"
  "slices.pdqsortOrdered[int]" -> "slices.choosePivotOrdered[int]"
  "slices.pdqsortOrdered[int]" -> "slices.reverseRangeOrdered[int]"
  "slices.partialInsertionSortOrdered[int]" -> "cmp.Less[int]"
  "slices.partialInsertionSortOrdered[int]" -> "cmp.Less[int]"
  "slices.partialInsertionSortOrdered[int]" -> "cmp.Less[int]"
  "slices.pdqsortOrdered[int]" -> "slices.partialInsertionSortOrdered[int]"
  "slices.partitionEqualOrdered[int]" -> "cmp.Less[int]"
  "slices.partitionEqualOrdered[int]" -> "cmp.Less[int]"
  "slices.pdqsortOrdered[int]" -> "slices.partitionEqualOrdered[int]"
  "slices.partitionOrdered[int]" -> "cmp.Less[int]"
  "slices.partitionOrdered[int]" -> "cmp.Less[int]"
  "slices.partitionOrdered[int]" -> "cmp.Less[int]"
  "slices.partitionOrdered[int]" -> "cmp.Less[int]"
  "slices.pdqsortOrdered[int]" -> "slices.partitionOrdered[int]"
  "slices.pdqsortOrdered[int]" -> "cmp.Less[int]"
  "slices.pdqsortOrdered[int]" -> "slices.pdqsortOrdered[int]"
  "slices.pdqsortOrdered[int]" -> "slices.pdqsortOrdered[int]"
  "slices.Sort[[]int int]" -> "slices.pdqsortOrdered[int]"
  "sort.intsImpl" -> "slices.Sort[[]int int]"
  "sort.Ints" -> "sort.intsImpl"
  "fmt.Errorf" -> "sort.Ints"
  "(*periph.io/x/host/v3/sysfs.spiConn).Write" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.spiConn).Write" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.spiConn).Write" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.spiConn).Write" -> "(*periph.io/x/host/v3/sysfs.spiConn).txPackets"
  "(*periph.io/x/host/v3/sysfs.spiConn).Write" -> "fmt.Errorf"
  "(*compress/zlib.Writer).writeHeader" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*fmt.pp).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*bufio.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*compress/flate.dictWriter).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*hash/adler32.digest).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*text/tabwriter.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*compress/zlib.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*image/png.encoder).Write"
  "hash/adler32.New" -> "(*hash/adler32.digest).Reset"
  "(*compress/zlib.Writer).writeHeader" -> "hash/adler32.New"
  "compress/flate.newHuffmanBitWriter" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.newHuffmanBitWriter" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.newHuffmanBitWriter" -> "compress/flate.newHuffmanEncoder"
  "(*compress/flate.compressor).init" -> "compress/flate.newHuffmanBitWriter"
  "(*compress/flate.compressor).init" -> "compress/flate.newDeflateFast"
  "(*compress/flate.compressor).init" -> "(*compress/flate.compressor).initDeflate"
  "(*compress/flate.compressor).init" -> "fmt.Errorf"
  "compress/flate.NewWriter" -> "(*compress/flate.compressor).init"
  "compress/flate.NewWriterDict" -> "compress/flate.NewWriter"
  "(*compress/flate.compressor).fillWindow" -> "compress/flate.bulkHash4"
  "compress/flate.NewWriterDict" -> "(*compress/flate.compressor).fillWindow"
  "(*compress/zlib.Writer).writeHeader" -> "compress/flate.NewWriterDict"
  "(*compress/zlib.Writer).writeHeader" -> "(*hash/adler32.digest).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*text/tabwriter.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*image/png.encoder).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*compress/zlib.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*compress/flate.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*strings.Builder).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*compress/flate.dictWriter).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*hash/crc32.digest).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*internal/godebug.runtimeStderr).Write"
  "hash/adler32.Checksum" -> "hash/adler32.update"
  "(*compress/zlib.Writer).writeHeader" -> "hash/adler32.Checksum"
  "(*compress/zlib.Writer).writeHeader" -> "(encoding/binary.bigEndian).PutUint32"
  "(*compress/zlib.Writer).writeHeader" -> "(*bytes.Buffer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*os.File).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*internal/poll.FD).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(io.discard).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*fmt.pp).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*bufio.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*strings.Builder).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*compress/flate.Writer).Write"
  "(*compress/zlib.Writer).writeHeader" -> "(*hash/crc32.digest).Write"
  "(*compress/zlib.Writer).Close" -> "(*compress/zlib.Writer).writeHeader"
  "(*compress/flate.compressor).close" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.compressor).close" -> "(*compress/flate.huffmanBitWriter).flush"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).store"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).storeHuff"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).encSpeed"
  "(*compress/flate.compressor).close" -> "(*compress/flate.compressor).deflate"
  "(*compress/flate.Writer).Close" -> "(*compress/flate.compressor).close"
  "(*compress/zlib.Writer).Close" -> "(*compress/flate.Writer).Close"
  "(*compress/zlib.Writer).Close" -> "(encoding/binary.bigEndian).PutUint32"
  "(*compress/zlib.Writer).Close" -> "(*bytes.Buffer).Write"
  "(*compress/zlib.Writer).Close" -> "(*os.File).Write"
  "(*compress/zlib.Writer).Close" -> "(*internal/poll.FD).Write"
  "(*compress/zlib.Writer).Close" -> "(io.discard).Write"
  "(*compress/zlib.Writer).Close" -> "(*hash/adler32.digest).Write"
  "(*compress/zlib.Writer).Close" -> "(*fmt.pp).Write"
  "(*compress/zlib.Writer).Close" -> "(*bufio.Writer).Write"
  "(*compress/zlib.Writer).Close" -> "(*hash/crc32.digest).Write"
  "(*compress/zlib.Writer).Close" -> "(*hash/crc32.digest).Sum32"
  "(*compress/zlib.Writer).Close" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/zlib.Writer).Close" -> "(*compress/zlib.Writer).Write"
  "(*compress/zlib.Writer).Close" -> "(*strings.Builder).Write"
  "(*compress/zlib.Writer).Close" -> "(*compress/flate.dictWriter).Write"
  "(*compress/zlib.Writer).Close" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/zlib.Writer).Close" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/zlib.Writer).Close" -> "(*compress/flate.Writer).Write"
  "(*compress/zlib.Writer).Close" -> "(*hash/adler32.digest).Sum32"
  "(*compress/zlib.Writer).Close" -> "(*text/tabwriter.Writer).Write"
  "(*compress/zlib.Writer).Close" -> "(*image/png.encoder).Write"
  "(*container/list.List).MoveToBack" -> "(*container/list.List).move"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Point).In"
  "(*image.RGBA).RGBA64At" -> "(image.Point).In"
  "(*image.RGBA).RGBA64At" -> "(*image.RGBA).PixOffset"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(image.Rectangle).RGBA64At" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(*image.Paletted).RGBA64At" -> "(image.Point).In"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/color.HSP).RGBA" -> "math.Sqrt"
  "(*image.Paletted).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.Gray16).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.CMYK).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.RGBA).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.RGBA64).RGBA"
  "math.Mod" -> "math.archMod"
  "math.mod" -> "math.NaN"
  "math.Abs" -> "math.Float64bits"
  "math.Abs" -> "math.Float64frombits"
  "math.mod" -> "math.Abs"
  "math.Frexp" -> "math.archFrexp"
  "math.frexp" -> "math.IsInf"
  "math.normalize" -> "math.Abs"
  "math.frexp" -> "math.normalize"
  "math.frexp" -> "math.Float64bits"
  "math.frexp" -> "math.Float64frombits"
  "math.frexp" -> "math.IsNaN"
  "math.Frexp" -> "math.frexp"
  "math.mod" -> "math.Frexp"
  "math.mod" -> "math.IsNaN"
  "math.mod" -> "math.IsNaN"
  "math.mod" -> "math.IsInf"
  "math.mod" -> "math.Frexp"
  "math.Ldexp" -> "math.archLdexp"
  "math.ldexp" -> "math.IsInf"
  "math.ldexp" -> "math.normalize"
  "math.ldexp" -> "math.Float64bits"
  "math.ldexp" -> "math.IsNaN"
  "math.Copysign" -> "math.Float64bits"
  "math.Copysign" -> "math.Float64bits"
  "math.Copysign" -> "math.Float64frombits"
  "math.ldexp" -> "math.Copysign"
  "math.Inf" -> "math.Float64frombits"
  "math.ldexp" -> "math.Inf"
  "math.ldexp" -> "math.Inf"
  "math.ldexp" -> "math.Float64frombits"
  "math.Ldexp" -> "math.ldexp"
  "math.mod" -> "math.Ldexp"
  "math.Mod" -> "math.mod"
  "(github.com/stefan-muehlebach/gg/color.HSI).RGBA" -> "math.Mod"
  "(github.com/stefan-muehlebach/gg/color.HSI).RGBA" -> "math.Abs"
  "(*image.Paletted).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image.Paletted).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.Gray).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.Alpha16).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.NRGBA64).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.Gray16).RGBA"
  "(github.com/stefan-muehlebach/gg/color.HSV).RGBA" -> "math.Mod"
  "(github.com/stefan-muehlebach/gg/color.HSV).RGBA" -> "math.Abs"
  "(*image.Uniform).RGBA" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.RGBA).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.RGBA64).RGBA"
  "(*image.Uniform).RGBA" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image.Uniform).RGBA" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.CMYK).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.Alpha16).RGBA"
  "(*image.Uniform).RGBA" -> "(*image.Uniform).RGBA"
  "(*image.Uniform).RGBA" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.Alpha).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.NYCbCrA).RGBA"
  "(*image.Uniform).RGBA" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(github.com/stefan-muehlebach/gg/color.HSL).RGBA" -> "math.Abs"
  "(github.com/stefan-muehlebach/gg/color.HSL).RGBA" -> "math.Mod"
  "(github.com/stefan-muehlebach/gg/color.HSL).RGBA" -> "math.Abs"
  "(*image.Uniform).RGBA" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.YCbCr).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.Gray).RGBA"
  "(*image.Uniform).RGBA" -> "(image/color.NRGBA).RGBA"
  "(*image.Paletted).RGBA64At" -> "(*image.Uniform).RGBA"
  "(*image.Paletted).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.Alpha).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.NYCbCrA).RGBA"
  "(*image.Paletted).RGBA64At" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*image.Paletted).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.YCbCr).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.NRGBA64).RGBA"
  "(*image.Paletted).RGBA64At" -> "(image/color.NRGBA).RGBA"
  "(*image.Paletted).RGBA64At" -> "(*image.Paletted).PixOffset"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(*image.Uniform).RGBA64At" -> "(image/color.NRGBA64).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.Gray16).RGBA"
  "(*image.Uniform).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.RGBA).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.RGBA64).RGBA"
  "(*image.Uniform).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image.Uniform).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.CMYK).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.Alpha16).RGBA"
  "(*image.Uniform).RGBA64At" -> "(*image.Uniform).RGBA"
  "(*image.Uniform).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.Alpha).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.NYCbCrA).RGBA"
  "(*image.Uniform).RGBA64At" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*image.Uniform).RGBA64At" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.YCbCr).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.Gray).RGBA"
  "(*image.Uniform).RGBA64At" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(*image.YCbCr).YCbCrAt" -> "(image.Point).In"
  "(*image.YCbCr).YCbCrAt" -> "(*image.YCbCr).YOffset"
  "(*image.YCbCr).YCbCrAt" -> "(*image.YCbCr).COffset"
  "(*image.YCbCr).RGBA64At" -> "(*image.YCbCr).YCbCrAt"
  "(*image.YCbCr).RGBA64At" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(*image.Alpha).AlphaAt" -> "(image.Point).In"
  "(*image.Alpha).AlphaAt" -> "(*image.Alpha).PixOffset"
  "(*image.Alpha).RGBA64At" -> "(*image.Alpha).AlphaAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(*image.NRGBA64).NRGBA64At" -> "(image.Point).In"
  "(*image.NRGBA64).NRGBA64At" -> "(*image.NRGBA64).PixOffset"
  "(*image.NRGBA64).RGBA64At" -> "(*image.NRGBA64).NRGBA64At"
  "(*image.NRGBA64).RGBA64At" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(*image.Alpha).At" -> "(*image.Alpha).AlphaAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(*image.Gray16).Gray16At" -> "(image.Point).In"
  "(*image.Gray16).Gray16At" -> "(*image.Gray16).PixOffset"
  "(*image.Gray16).RGBA64At" -> "(*image.Gray16).Gray16At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(*image.RGBA).RGBAAt" -> "(image.Point).In"
  "(*image.RGBA).RGBAAt" -> "(*image.RGBA).PixOffset"
  "(*image.RGBA).At" -> "(*image.RGBA).RGBAAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(image.Rectangle).At" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).ILIColorAt" -> "(image.Point).In"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).ILIColorAt" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).PixOffset"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).At" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).ILIColorAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*image.YCbCr).At" -> "(*image.YCbCr).YCbCrAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(*image.Paletted).At" -> "(image.Point).In"
  "(*image.Paletted).At" -> "(*image.Paletted).PixOffset"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(*image.Gray16).At" -> "(*image.Gray16).Gray16At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(*image.RGBA64).RGBA64At" -> "(image.Point).In"
  "(*image.RGBA64).RGBA64At" -> "(*image.RGBA64).PixOffset"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*image.NRGBA).Set" -> "(image.Point).In"
  "(*image.NRGBA).Set" -> "(*image.NRGBA).PixOffset"
  "(*image.NRGBA).Set" -> "(*image.Uniform).Convert"
  "image/color.rgba64Model" -> "(image/color.NRGBA64).RGBA"
  "image/color.rgba64Model" -> "(image/color.Gray16).RGBA"
  "image/color.rgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.rgba64Model" -> "(image/color.RGBA).RGBA"
  "image/color.rgba64Model" -> "(image/color.RGBA64).RGBA"
  "image/color.rgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.rgba64Model" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.rgba64Model" -> "(image/color.CMYK).RGBA"
  "image/color.rgba64Model" -> "(image/color.Alpha16).RGBA"
  "image/color.rgba64Model" -> "(*image.Uniform).RGBA"
  "image/color.rgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.rgba64Model" -> "(image/color.Alpha).RGBA"
  "image/color.rgba64Model" -> "(image/color.NYCbCrA).RGBA"
  "image/color.rgba64Model" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.rgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.rgba64Model" -> "(image/color.YCbCr).RGBA"
  "image/color.rgba64Model" -> "(image/color.Gray).RGBA"
  "image/color.rgba64Model" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.rgba64Model"
  "image/color.nrgba64Model" -> "(image/color.NRGBA64).RGBA"
  "image/color.nrgba64Model" -> "(image/color.Gray16).RGBA"
  "image/color.nrgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.nrgba64Model" -> "(image/color.RGBA).RGBA"
  "image/color.nrgba64Model" -> "(image/color.RGBA64).RGBA"
  "image/color.nrgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.nrgba64Model" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.nrgba64Model" -> "(image/color.CMYK).RGBA"
  "image/color.nrgba64Model" -> "(image/color.Alpha16).RGBA"
  "image/color.nrgba64Model" -> "(*image.Uniform).RGBA"
  "image/color.nrgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.nrgba64Model" -> "(image/color.Alpha).RGBA"
  "image/color.nrgba64Model" -> "(image/color.NYCbCrA).RGBA"
  "image/color.nrgba64Model" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.nrgba64Model" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.nrgba64Model" -> "(image/color.YCbCr).RGBA"
  "image/color.nrgba64Model" -> "(image/color.Gray).RGBA"
  "image/color.nrgba64Model" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.nrgba64Model"
  "image/color.alpha16Model" -> "(image/color.NRGBA64).RGBA"
  "image/color.alpha16Model" -> "(image/color.Gray16).RGBA"
  "image/color.alpha16Model" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.alpha16Model" -> "(image/color.RGBA).RGBA"
  "image/color.alpha16Model" -> "(image/color.RGBA64).RGBA"
  "image/color.alpha16Model" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.alpha16Model" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.alpha16Model" -> "(image/color.CMYK).RGBA"
  "image/color.alpha16Model" -> "(image/color.Alpha16).RGBA"
  "image/color.alpha16Model" -> "(*image.Uniform).RGBA"
  "image/color.alpha16Model" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.alpha16Model" -> "(image/color.Alpha).RGBA"
  "image/color.alpha16Model" -> "(image/color.NYCbCrA).RGBA"
  "image/color.alpha16Model" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.alpha16Model" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.alpha16Model" -> "(image/color.YCbCr).RGBA"
  "image/color.alpha16Model" -> "(image/color.Gray).RGBA"
  "image/color.alpha16Model" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.alpha16Model"
  "image/color.gray16Model" -> "(image/color.NRGBA64).RGBA"
  "image/color.gray16Model" -> "(image/color.Gray16).RGBA"
  "image/color.gray16Model" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.gray16Model" -> "(image/color.RGBA).RGBA"
  "image/color.gray16Model" -> "(image/color.RGBA64).RGBA"
  "image/color.gray16Model" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.gray16Model" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.gray16Model" -> "(image/color.CMYK).RGBA"
  "image/color.gray16Model" -> "(image/color.Alpha16).RGBA"
  "image/color.gray16Model" -> "(*image.Uniform).RGBA"
  "image/color.gray16Model" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.gray16Model" -> "(image/color.Alpha).RGBA"
  "image/color.gray16Model" -> "(image/color.NYCbCrA).RGBA"
  "image/color.gray16Model" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.gray16Model" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.gray16Model" -> "(image/color.YCbCr).RGBA"
  "image/color.gray16Model" -> "(image/color.Gray).RGBA"
  "image/color.gray16Model" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.gray16Model"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "math.Abs"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.Gray16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.RGBA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.RGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.Gray).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.Alpha16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(*image.Uniform).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.NYCbCrA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.Alpha).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.YCbCr).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.NRGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.NRGBA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hslModel" -> "(image/color.CMYK).RGBA"
  "(*image/color.modelFunc).Convert" -> "github.com/stefan-muehlebach/gg/color.hslModel"
  "image/color.nrgbaModel" -> "(image/color.NRGBA64).RGBA"
  "image/color.nrgbaModel" -> "(image/color.Gray16).RGBA"
  "image/color.nrgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.nrgbaModel" -> "(image/color.RGBA).RGBA"
  "image/color.nrgbaModel" -> "(image/color.RGBA64).RGBA"
  "image/color.nrgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.nrgbaModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.nrgbaModel" -> "(image/color.CMYK).RGBA"
  "image/color.nrgbaModel" -> "(image/color.Alpha16).RGBA"
  "image/color.nrgbaModel" -> "(*image.Uniform).RGBA"
  "image/color.nrgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.nrgbaModel" -> "(image/color.Alpha).RGBA"
  "image/color.nrgbaModel" -> "(image/color.NYCbCrA).RGBA"
  "image/color.nrgbaModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.nrgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.nrgbaModel" -> "(image/color.YCbCr).RGBA"
  "image/color.nrgbaModel" -> "(image/color.Gray).RGBA"
  "image/color.nrgbaModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.nrgbaModel"
  "image/color.alphaModel" -> "(image/color.NRGBA64).RGBA"
  "image/color.alphaModel" -> "(image/color.Gray16).RGBA"
  "image/color.alphaModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.alphaModel" -> "(image/color.RGBA).RGBA"
  "image/color.alphaModel" -> "(image/color.RGBA64).RGBA"
  "image/color.alphaModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.alphaModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.alphaModel" -> "(image/color.CMYK).RGBA"
  "image/color.alphaModel" -> "(image/color.Alpha16).RGBA"
  "image/color.alphaModel" -> "(*image.Uniform).RGBA"
  "image/color.alphaModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.alphaModel" -> "(image/color.Alpha).RGBA"
  "image/color.alphaModel" -> "(image/color.NYCbCrA).RGBA"
  "image/color.alphaModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.alphaModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.alphaModel" -> "(image/color.YCbCr).RGBA"
  "image/color.alphaModel" -> "(image/color.Gray).RGBA"
  "image/color.alphaModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.alphaModel"
  "image/color.yCbCrModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.yCbCrModel" -> "(image/color.Gray16).RGBA"
  "image/color.yCbCrModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.yCbCrModel" -> "(image/color.RGBA).RGBA"
  "image/color.yCbCrModel" -> "(image/color.RGBA64).RGBA"
  "image/color.yCbCrModel" -> "(image/color.Gray).RGBA"
  "image/color.yCbCrModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.yCbCrModel" -> "(image/color.CMYK).RGBA"
  "image/color.yCbCrModel" -> "(image/color.Alpha16).RGBA"
  "image/color.yCbCrModel" -> "(*image.Uniform).RGBA"
  "image/color.yCbCrModel" -> "image/color.RGBToYCbCr"
  "image/color.yCbCrModel" -> "(image/color.Alpha).RGBA"
  "image/color.yCbCrModel" -> "(image/color.NYCbCrA).RGBA"
  "image/color.yCbCrModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.yCbCrModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.yCbCrModel" -> "(image/color.YCbCr).RGBA"
  "image/color.yCbCrModel" -> "(image/color.NRGBA64).RGBA"
  "image/color.yCbCrModel" -> "(image/color.NRGBA).RGBA"
  "image/color.yCbCrModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.yCbCrModel"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.NRGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.Gray16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.RGBA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.RGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.CMYK).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.Alpha16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(*image.Uniform).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.Alpha).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.NYCbCrA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.YCbCr).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.Gray).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsiModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "github.com/stefan-muehlebach/gg/color.hsiModel"
  "image/color.rgbaModel" -> "(image/color.NRGBA64).RGBA"
  "image/color.rgbaModel" -> "(image/color.Gray16).RGBA"
  "image/color.rgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.rgbaModel" -> "(image/color.RGBA).RGBA"
  "image/color.rgbaModel" -> "(image/color.RGBA64).RGBA"
  "image/color.rgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.rgbaModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.rgbaModel" -> "(image/color.CMYK).RGBA"
  "image/color.rgbaModel" -> "(image/color.Alpha16).RGBA"
  "image/color.rgbaModel" -> "(*image.Uniform).RGBA"
  "image/color.rgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.rgbaModel" -> "(image/color.Alpha).RGBA"
  "image/color.rgbaModel" -> "(image/color.NYCbCrA).RGBA"
  "image/color.rgbaModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.rgbaModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.rgbaModel" -> "(image/color.YCbCr).RGBA"
  "image/color.rgbaModel" -> "(image/color.Gray).RGBA"
  "image/color.rgbaModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.rgbaModel"
  "image/color.grayModel" -> "(image/color.NRGBA64).RGBA"
  "image/color.grayModel" -> "(image/color.Gray16).RGBA"
  "image/color.grayModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.grayModel" -> "(image/color.RGBA).RGBA"
  "image/color.grayModel" -> "(image/color.RGBA64).RGBA"
  "image/color.grayModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.grayModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.grayModel" -> "(image/color.CMYK).RGBA"
  "image/color.grayModel" -> "(image/color.Alpha16).RGBA"
  "image/color.grayModel" -> "(*image.Uniform).RGBA"
  "image/color.grayModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.grayModel" -> "(image/color.Alpha).RGBA"
  "image/color.grayModel" -> "(image/color.NYCbCrA).RGBA"
  "image/color.grayModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.grayModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.grayModel" -> "(image/color.YCbCr).RGBA"
  "image/color.grayModel" -> "(image/color.Gray).RGBA"
  "image/color.grayModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "image/color.grayModel"
  "image/color.nYCbCrAModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.Gray16).RGBA"
  "image/color.nYCbCrAModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.RGBA).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.RGBA64).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.Gray).RGBA"
  "image/color.nYCbCrAModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.CMYK).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.Alpha16).RGBA"
  "image/color.nYCbCrAModel" -> "(*image.Uniform).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.NYCbCrA).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.Alpha).RGBA"
  "image/color.nYCbCrAModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.nYCbCrAModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.nYCbCrAModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.YCbCr).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.NRGBA64).RGBA"
  "image/color.nYCbCrAModel" -> "(image/color.NRGBA).RGBA"
  "image/color.nYCbCrAModel" -> "image/color.RGBToYCbCr"
  "(*image/color.modelFunc).Convert" -> "image/color.nYCbCrAModel"
  "image/color.cmykModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/color.cmykModel" -> "(image/color.Gray16).RGBA"
  "image/color.cmykModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/color.cmykModel" -> "(image/color.RGBA).RGBA"
  "image/color.cmykModel" -> "(image/color.RGBA64).RGBA"
  "image/color.cmykModel" -> "(image/color.Gray).RGBA"
  "image/color.cmykModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/color.cmykModel" -> "(image/color.CMYK).RGBA"
  "image/color.cmykModel" -> "(image/color.Alpha16).RGBA"
  "image/color.cmykModel" -> "(*image.Uniform).RGBA"
  "image/color.cmykModel" -> "(image/color.NYCbCrA).RGBA"
  "image/color.cmykModel" -> "(image/color.Alpha).RGBA"
  "image/color.cmykModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/color.cmykModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/color.cmykModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/color.cmykModel" -> "(image/color.YCbCr).RGBA"
  "image/color.cmykModel" -> "(image/color.NRGBA64).RGBA"
  "image/color.cmykModel" -> "(image/color.NRGBA).RGBA"
  "image/color.cmykModel" -> "image/color.RGBToCMYK"
  "(*image/color.modelFunc).Convert" -> "image/color.cmykModel"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.NRGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.Gray16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.RGBA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.RGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.CMYK).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.Alpha16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(*image.Uniform).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.Alpha).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.NYCbCrA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.YCbCr).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.Gray).RGBA"
  "github.com/stefan-muehlebach/gg/color.hsvModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "github.com/stefan-muehlebach/gg/color.hsvModel"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.NRGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.Gray16).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.RGBA).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.RGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.CMYK).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.Alpha16).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(*image.Uniform).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.Alpha).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.NYCbCrA).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.YCbCr).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.Gray).RGBA"
  "github.com/stefan-muehlebach/gg/color.rgbafModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "github.com/stefan-muehlebach/gg/color.rgbafModel"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.NRGBA64).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.Gray16).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.RGBA).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.RGBA64).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.CMYK).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.Alpha16).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(*image.Uniform).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.Alpha).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.NYCbCrA).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "github.com/stefan-muehlebach/adatft.NewILIColor"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "github.com/stefan-muehlebach/adatft.NewILIColor"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "github.com/stefan-muehlebach/adatft.NewILIColor"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.YCbCr).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.Gray).RGBA"
  "github.com/stefan-muehlebach/adatft.iliModel" -> "(image/color.NRGBA).RGBA"
  "(*image/color.modelFunc).Convert" -> "github.com/stefan-muehlebach/adatft.iliModel"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.Gray16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.RGBA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.RGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.Gray).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.Alpha16).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(*image.Uniform).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "math.Sqrt"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.Alpha).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.NYCbCrA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.YCbCr).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.NRGBA64).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.NRGBA).RGBA"
  "github.com/stefan-muehlebach/gg/color.hspModel" -> "(image/color.CMYK).RGBA"
  "(*image/color.modelFunc).Convert" -> "github.com/stefan-muehlebach/gg/color.hspModel"
  "(*image.NRGBA).Set" -> "(*image/color.modelFunc).Convert"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Gray16).RGBA"
  "(image/color.Palette).Index" -> "image/color.sqDiff"
  "(image/color.Palette).Index" -> "(image/color.RGBA).RGBA"
  "(image/color.Palette).Index" -> "(image/color.RGBA64).RGBA"
  "(image/color.Palette).Index" -> "(image/color.NYCbCrA).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Gray).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Alpha16).RGBA"
  "(image/color.Palette).Index" -> "(*image.Uniform).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Alpha).RGBA"
  "(image/color.Palette).Index" -> "(image/color.YCbCr).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(image/color.Palette).Index" -> "(image/color.RGBA64).RGBA"
  "(image/color.Palette).Index" -> "(image/color.YCbCr).RGBA"
  "(image/color.Palette).Index" -> "image/color.sqDiff"
  "(image/color.Palette).Index" -> "(image/color.NRGBA).RGBA"
  "(image/color.Palette).Index" -> "image/color.sqDiff"
  "(image/color.Palette).Index" -> "(image/color.NRGBA64).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Alpha16).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Gray).RGBA"
  "(image/color.Palette).Index" -> "(image/color.NRGBA64).RGBA"
  "(image/color.Palette).Index" -> "(image/color.NYCbCrA).RGBA"
  "(image/color.Palette).Index" -> "(image/color.NRGBA).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(image/color.Palette).Index" -> "(image/color.CMYK).RGBA"
  "(image/color.Palette).Index" -> "(*image.Uniform).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(image/color.Palette).Index" -> "(image/color.CMYK).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Alpha).RGBA"
  "(image/color.Palette).Index" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(image/color.Palette).Index" -> "(image/color.Gray16).RGBA"
  "(image/color.Palette).Index" -> "image/color.sqDiff"
  "(image/color.Palette).Index" -> "(image/color.RGBA).RGBA"
  "(image/color.Palette).Convert" -> "(image/color.Palette).Index"
  "(*image.NRGBA).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image.NRGBA).NRGBAAt" -> "(image.Point).In"
  "(*image.NRGBA).NRGBAAt" -> "(*image.NRGBA).PixOffset"
  "(*image.NRGBA).RGBA64At" -> "(*image.NRGBA).NRGBAAt"
  "(*image.NRGBA).RGBA64At" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(*image.RGBA64).At" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(*image.CMYK).CMYKAt" -> "(image.Point).In"
  "(*image.CMYK).CMYKAt" -> "(*image.CMYK).PixOffset"
  "(*image.CMYK).RGBA64At" -> "(*image.CMYK).CMYKAt"
  "(*image.CMYK).RGBA64At" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*image.NRGBA64).Set" -> "(image.Point).In"
  "(*image.NRGBA64).Set" -> "(*image.NRGBA64).PixOffset"
  "(*image.NRGBA64).Set" -> "(*image.Uniform).Convert"
  "(*image.NRGBA64).Set" -> "(*image/color.modelFunc).Convert"
  "(*image.NRGBA64).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*image.Paletted).Set" -> "(image.Point).In"
  "(*image.Paletted).Set" -> "(*image.Paletted).PixOffset"
  "(*image.Paletted).Set" -> "(image/color.Palette).Index"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*image.RGBA64).Set" -> "(image.Point).In"
  "(*image.RGBA64).Set" -> "(*image.RGBA64).PixOffset"
  "(*image.RGBA64).Set" -> "(*image.Uniform).Convert"
  "(*image.RGBA64).Set" -> "(*image/color.modelFunc).Convert"
  "(*image.RGBA64).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(*image.NRGBA).At" -> "(*image.NRGBA).NRGBAAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*image.CMYK).Set" -> "(image.Point).In"
  "(*image.CMYK).Set" -> "(*image.CMYK).PixOffset"
  "(*image.CMYK).Set" -> "(*image.Uniform).Convert"
  "(*image.CMYK).Set" -> "(*image/color.modelFunc).Convert"
  "(*image.CMYK).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(*image.Gray16).Set" -> "(image.Point).In"
  "(*image.Gray16).Set" -> "(*image.Gray16).PixOffset"
  "(*image.Gray16).Set" -> "(*image.Uniform).Convert"
  "(*image.Gray16).Set" -> "(*image/color.modelFunc).Convert"
  "(*image.Gray16).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(*image.Gray).GrayAt" -> "(image.Point).In"
  "(*image.Gray).GrayAt" -> "(*image.Gray).PixOffset"
  "(*image.Gray).RGBA64At" -> "(*image.Gray).GrayAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image.NRGBA64).At" -> "(*image.NRGBA64).NRGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image.Gray).At" -> "(*image.Gray).GrayAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image.CMYK).At" -> "(*image.CMYK).CMYKAt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image.Gray).Set" -> "(image.Point).In"
  "(*image.Gray).Set" -> "(*image.Gray).PixOffset"
  "(*image.Gray).Set" -> "(*image.Uniform).Convert"
  "(*image.Gray).Set" -> "(*image/color.modelFunc).Convert"
  "(*image.Gray).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*image.RGBA).Set" -> "(image.Point).In"
  "(*image.RGBA).Set" -> "(*image.RGBA).PixOffset"
  "(*image.RGBA).Set" -> "(*image.Uniform).Convert"
  "(*image.RGBA).Set" -> "(*image/color.modelFunc).Convert"
  "(*image.RGBA).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image.Alpha).Set" -> "(image.Point).In"
  "(*image.Alpha).Set" -> "(*image.Alpha).PixOffset"
  "(*image.Alpha).Set" -> "(*image.Uniform).Convert"
  "(*image.Alpha).Set" -> "(*image/color.modelFunc).Convert"
  "(*image.Alpha).Set" -> "(image/color.Palette).Convert"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetPadding" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "image.pixelBufferLength" -> "(image.Rectangle).Dx"
  "image.pixelBufferLength" -> "(image.Rectangle).Dy"
  "image.mul3NonNeg" -> "math/bits.Mul64"
  "image.mul3NonNeg" -> "math/bits.Mul64"
  "image.pixelBufferLength" -> "image.mul3NonNeg"
  "image.NewRGBA64" -> "image.pixelBufferLength"
  "image.NewRGBA64" -> "(image.Rectangle).Dx"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Embed).Visible"
  "(github.com/stefan-muehlebach/gg/geom.Point).Max" -> "github.com/stefan-muehlebach/gg/geom.max"
  "(github.com/stefan-muehlebach/gg/geom.Point).Max" -> "github.com/stefan-muehlebach/gg/geom.max"
  "(*github.com/stefan-muehlebach/adagui.Embed).Size" -> "(github.com/stefan-muehlebach/gg/geom.Point).Max"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize" -> "(github.com/stefan-muehlebach/gg/geom.Point).Eq"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Pos" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Pos" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Center"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Pos"
  "(*github.com/stefan-muehlebach/adagui.Circle).Pos" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*github.com/stefan-muehlebach/adagui.Circle).Pos" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Center"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Circle).Pos"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.Point).Pos" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*github.com/stefan-muehlebach/adagui.Point).Pos" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Center"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Point).Pos"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(github.com/stefan-muehlebach/gg/geom.Point).Max"
  "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).Visible"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize" -> "(*github.com/stefan-muehlebach/adagui.NullLayout).MinSize"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).Visible"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize" -> "(github.com/stefan-muehlebach/gg/geom.Point).Max"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize" -> "(*github.com/stefan-muehlebach/adagui.PaddedLayout).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).MinSize" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).MinSize" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).isSpacer" -> "(*github.com/stefan-muehlebach/adagui.Spacer).ExpandHorizontal"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).isSpacer" -> "(*github.com/stefan-muehlebach/adagui.Spacer).ExpandVertical"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.BoxLayout).isSpacer"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).Visible"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).MinSize" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize" -> "(*github.com/stefan-muehlebach/adagui.BoxLayout).MinSize"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.Embed).Size" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.Embed).Size" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Add" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Add" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Add"
  "(*github.com/stefan-muehlebach/adagui.Circle).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Dx"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Dy"
  "(*github.com/stefan-muehlebach/adagui.Circle).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset"
  "(*github.com/stefan-muehlebach/adagui.Circle).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).In"
  "(*github.com/stefan-muehlebach/adagui.Circle).Contains" -> "(*github.com/stefan-muehlebach/adagui.Circle).Pos"
  "math.Hypot" -> "math.archHypot"
  "math.hypot" -> "math.Abs"
  "math.hypot" -> "math.Abs"
  "math.hypot" -> "math.IsInf"
  "math.hypot" -> "math.Inf"
  "math.hypot" -> "math.NaN"
  "math.hypot" -> "math.IsNaN"
  "math.hypot" -> "math.IsInf"
  "math.hypot" -> "math.IsNaN"
  "math.hypot" -> "math.Sqrt"
  "math.Hypot" -> "math.hypot"
  "(github.com/stefan-muehlebach/gg/geom.Point).Distance" -> "math.Hypot"
  "(*github.com/stefan-muehlebach/adagui.Circle).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).Distance"
  "(*github.com/stefan-muehlebach/adagui.Circle).Radius" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Circle).Contains" -> "(*github.com/stefan-muehlebach/adagui.Circle).Radius"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Circle).Contains"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).In"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Rectangle).Contains"
  "(*github.com/stefan-muehlebach/adagui.Point).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*github.com/stefan-muehlebach/adagui.Point).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset"
  "(*github.com/stefan-muehlebach/adagui.Point).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).In"
  "(*github.com/stefan-muehlebach/adagui.Point).Contains" -> "(*github.com/stefan-muehlebach/adagui.Point).Pos"
  "(*github.com/stefan-muehlebach/adagui.Point).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).Distance"
  "(*github.com/stefan-muehlebach/adagui/props.Properties).Size" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Width" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*github.com/stefan-muehlebach/adagui.Point).Contains" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Width"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Point).Contains"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).In"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Pos"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).AsCoord"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Radius" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Radius" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Radius" -> "(github.com/stefan-muehlebach/gg/geom.Point).AsCoord"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Radius"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains"
  "(*github.com/stefan-muehlebach/adagui.Line).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*github.com/stefan-muehlebach/adagui.Line).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset"
  "(*github.com/stefan-muehlebach/adagui.Line).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).In"
  "(*github.com/stefan-muehlebach/adagui.Line).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).PosRel" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Line).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).PosRel"
  "(*github.com/stefan-muehlebach/adagui.Line).Contains" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Line).Contains" -> "math.Abs"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Line).Contains"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Embed).Matrix" -> "(github.com/stefan-muehlebach/adagui.Marks).NeedsRecalc"
  "(*github.com/stefan-muehlebach/adagui.Embed).Matrix" -> "(*github.com/stefan-muehlebach/adagui.Marks).UnmarkNeedsRecalc"
  "(*github.com/stefan-muehlebach/adagui.Embed).Matrix" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "(*github.com/stefan-muehlebach/adagui.Embed).Matrix" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "(*github.com/stefan-muehlebach/adagui.Embed).Parent2Local" -> "(*github.com/stefan-muehlebach/adagui.Embed).Matrix"
  "(*github.com/stefan-muehlebach/adagui.Embed).Parent2Local" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Inv"
  "(*github.com/stefan-muehlebach/adagui.Embed).Parent2Local" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Transform"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).Parent2Local"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "(github.com/stefan-muehlebach/gg/geom.Point).In"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Embed).Bounds" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).Bounds"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Embed).Contains" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Embed).Contains"
  "(github.com/stefan-muehlebach/gg/color.HSI).Dark" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(image.Rectangle).Intersect" -> "(image.Rectangle).Empty"
  "(*image.CMYK).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.CMYK).SubImage" -> "(image.Rectangle).Empty"
  "(*image.CMYK).SubImage" -> "(*image.CMYK).PixOffset"
  "runtime.ThreadCreateProfile" -> "runtime/internal/atomic.Loadp"
  "golang.org/x/image/font/sfnt.t2CLineto" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).lineTo"
  "golang.org/x/image/font/sfnt.t2CHlineto" -> "golang.org/x/image/font/sfnt.t2CLineto"
  "github.com/stefan-muehlebach/adagui/binding.NewBool" -> "(*github.com/stefan-muehlebach/adagui/binding.base).Init"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Init" -> "github.com/stefan-muehlebach/adagui/binding.NewBool"
  "(*sync.RWMutex).Lock" -> "internal/race.Disable"
  "(*sync.RWMutex).Lock" -> "(*sync.Mutex).Lock"
  "(*sync.RWMutex).Lock" -> "(*sync/atomic.Int32).Add"
  "(*sync.RWMutex).Lock" -> "sync.runtime_SemacquireRWMutex"
  "(*sync.RWMutex).Lock" -> "(*sync/atomic.Int32).Add"
  "(*sync.RWMutex).Lock" -> "internal/race.Enable"
  "(*sync.RWMutex).Lock" -> "internal/race.Acquire"
  "(*sync.RWMutex).Lock" -> "internal/race.Acquire"
  "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set" -> "(*sync.RWMutex).Lock"
  "(*sync.RWMutex).Unlock" -> "internal/race.Release"
  "(*sync.RWMutex).Unlock" -> "internal/race.Disable"
  "(*sync.RWMutex).Unlock" -> "(*sync/atomic.Int32).Add"
  "(*sync.RWMutex).Unlock" -> "internal/race.Enable"
  "(*sync.RWMutex).Unlock" -> "sync.fatal"
  "(*sync.RWMutex).Unlock" -> "sync.runtime_Semrelease"
  "(*sync.RWMutex).Unlock" -> "(*sync.Mutex).Unlock"
  "(*sync.RWMutex).Unlock" -> "internal/race.Enable"
  "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set" -> "(*sync.RWMutex).Unlock"
  "(*sync.Map).Range" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).Range" -> "(*sync.Mutex).Lock"
  "(*sync.Map).Range" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).Range" -> "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
  "(*sync.Map).Range" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).Range" -> "(*sync.entry).load"
  "(*github.com/stefan-muehlebach/adagui.Embed).Mark" -> "(*github.com/stefan-muehlebach/adagui.LeafEmbed).OnChildMarked"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).OnChildMarked" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui.Embed).Mark" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).OnChildMarked"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).DataChanged" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/binding.base).trigger$1" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).DataChanged"
  "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Get" -> "(*sync.RWMutex).RLock"
  "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Get" -> "(*sync.RWMutex).RUnlock"
  "(*github.com/stefan-muehlebach/adagui.IconButton).DataChanged" -> "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Get"
  "(*github.com/stefan-muehlebach/adagui/binding.base).trigger$1" -> "(*github.com/stefan-muehlebach/adagui.IconButton).DataChanged"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).DataChanged" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/binding.base).trigger$1" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).DataChanged"
  "(*sync.Map).Range" -> "(*github.com/stefan-muehlebach/adagui/binding.base).trigger$1"
  "(*sync.Map).Range" -> "(*github.com/stefan-muehlebach/adagui/binding.base).trigger$2"
  "internal/godebug.update$1" -> "(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]"
  "(*sync.Map).Range" -> "internal/godebug.update$1"
  "(*github.com/stefan-muehlebach/adagui/binding.base).trigger" -> "(*sync.Map).Range"
  "(*github.com/stefan-muehlebach/adagui/binding.base).trigger" -> "(*sync.Map).Range"
  "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set" -> "(*github.com/stefan-muehlebach/adagui/binding.base).trigger"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Init" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set"
  "(*sync.Map).Swap" -> "(*sync.Map).loadReadOnly"
  "(*sync.entry).trySwap" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.entry).trySwap" -> "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
  "(*sync.Map).Swap" -> "(*sync.entry).trySwap"
  "(*sync.Map).Swap" -> "(*sync.Mutex).Lock"
  "(*sync.Map).Swap" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).Swap" -> "(*sync.entry).unexpungeLocked"
  "(*sync.Map).Swap" -> "(*sync.Mutex).Unlock"
  "(*sync/atomic.Pointer[any]).Swap[any]" -> "sync/atomic.SwapPointer"
  "(*sync.entry).swapLocked" -> "(*sync/atomic.Pointer[any]).Swap[any]"
  "(*sync.Map).Swap" -> "(*sync.entry).swapLocked"
  "(*sync.Map).Swap" -> "(*sync.entry).swapLocked"
  "(*sync.Map).Swap" -> "(*sync.Map).dirtyLocked"
  "(*sync.Map).Swap" -> "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
  "(*sync.Map).Swap" -> "sync.newEntry"
  "(*sync.Map).Store" -> "(*sync.Map).Swap"
  "(*github.com/stefan-muehlebach/adagui/binding.base).AddListener" -> "(*sync.Map).Store"
  "(*github.com/stefan-muehlebach/adagui/binding.base).AddListener" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).DataChanged"
  "(*github.com/stefan-muehlebach/adagui/binding.base).AddListener" -> "(*github.com/stefan-muehlebach/adagui.IconButton).DataChanged"
  "(*github.com/stefan-muehlebach/adagui/binding.base).AddListener" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).DataChanged"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Init" -> "(*github.com/stefan-muehlebach/adagui/binding.base).AddListener"
  "(github.com/stefan-muehlebach/gg/geom.Point).Abs" -> "math.Sqrt"
  "(github.com/stefan-muehlebach/gg/geom.Point).Normalize" -> "(github.com/stefan-muehlebach/gg/geom.Point).Abs"
  "(github.com/stefan-muehlebach/gg/geom.Point).Normalize" -> "(github.com/stefan-muehlebach/gg/geom.Point).Div"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/allwinner.driverDMA).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/pine64.driver).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/rpi.driver).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/sysfs.driverI2C).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/sysfs.driverLED).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/sysfs.driverSPI).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).String"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "strconv.Quote"
  "periph.io/x/conn/v3/driver/driverreg.Register" -> "errors.New"
  "periph.io/x/conn/v3/driver/driverreg.MustRegister" -> "periph.io/x/conn/v3/driver/driverreg.Register"
  "periph.io/x/host/v3/allwinner.init#4" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "internal/poll.getPipe" -> "(*sync.Pool).Get"
  "internal/poll.Splice" -> "internal/poll.getPipe"
  "internal/poll.putPipe" -> "runtime.SetFinalizer"
  "internal/poll.destroyPipe" -> "syscall.Close"
  "internal/poll.destroyPipe" -> "syscall.Close"
  "internal/poll.putPipe" -> "internal/poll.destroyPipe"
  "internal/poll.putPipe" -> "(*sync.Pool).Put"
  "internal/poll.Splice" -> "internal/poll.putPipe"
  "internal/poll.spliceDrain" -> "(*internal/poll.FD).readLock"
  "internal/poll.spliceDrain" -> "(*internal/poll.FD).readUnlock"
  "internal/poll.spliceDrain" -> "(*internal/poll.pollDesc).prepareRead"
  "syscall.Splice" -> "syscall.Syscall6"
  "syscall.Splice" -> "syscall.errnoErr"
  "internal/poll.splice" -> "syscall.Splice"
  "internal/poll.spliceDrain" -> "internal/poll.splice"
  "internal/poll.spliceDrain" -> "(*internal/poll.pollDesc).pollable"
  "internal/poll.spliceDrain" -> "(*internal/poll.pollDesc).waitRead"
  "internal/poll.Splice" -> "internal/poll.spliceDrain"
  "internal/poll.splicePump" -> "(*internal/poll.FD).writeLock"
  "internal/poll.splicePump" -> "(*internal/poll.FD).writeUnlock"
  "internal/poll.splicePump" -> "(*internal/poll.pollDesc).prepareWrite"
  "internal/poll.splicePump" -> "internal/poll.splice"
  "internal/poll.splicePump" -> "(*internal/poll.pollDesc).pollable"
  "internal/poll.splicePump" -> "(*internal/poll.pollDesc).waitWrite"
  "internal/poll.Splice" -> "internal/poll.splicePump"
  "(*os.File).ReadAt" -> "(*os.File).checkValid"
  "(*os.File).ReadAt" -> "errors.New"
  "(*internal/poll.FD).Pread" -> "(*internal/poll.FD).incref"
  "syscall.pread" -> "syscall.Syscall6"
  "syscall.pread" -> "syscall.errnoErr"
  "syscall.Pread" -> "syscall.pread"
  "syscall.Pread" -> "internal/race.WriteRange"
  "syscall.Pread" -> "internal/race.Acquire"
  "syscall.Pread" -> "syscall.msanWrite"
  "syscall.Pread" -> "syscall.asanWrite"
  "(*internal/poll.FD).Pread" -> "syscall.Pread"
  "(*internal/poll.FD).Pread" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Pread" -> "(*internal/poll.FD).eofError"
  "(*os.File).pread" -> "(*internal/poll.FD).Pread"
  "(*os.File).pread" -> "runtime.KeepAlive"
  "(*os.File).ReadAt" -> "(*os.File).pread"
  "(*os.File).ReadAt" -> "(*os.File).wrapErr"
  "(*golang.org/x/image/font/sfnt.source).view" -> "(*os.File).ReadAt"
  "(*golang.org/x/image/font/sfnt.source).view" -> "(*embed.openFile).ReadAt"
  "(*golang.org/x/image/font/sfnt.cffParser).read" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader"
  "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations" -> "golang.org/x/image/font/sfnt.bigEndian"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.psTopDictData).initialize"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.psInterpreter).parseNumber" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.psInterpreter).parseNumber" -> "golang.org/x/image/font/sfnt.u32"
  "strconv.special" -> "strconv.commonPrefixLenIgnoreCase"
  "strconv.special" -> "strconv.commonPrefixLenIgnoreCase"
  "strconv.special" -> "math.Inf"
  "strconv.special" -> "math.NaN"
  "strconv.atof32" -> "strconv.special"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.lower"
  "strconv.readFloat" -> "strconv.underscoreOK"
  "strconv.atof32" -> "strconv.readFloat"
  "strconv.atof32" -> "strconv.syntaxError"
  "strconv.atofHex" -> "strconv.rangeError"
  "strconv.atofHex" -> "math.Float32frombits"
  "strconv.atofHex" -> "math.Float64frombits"
  "strconv.atof32" -> "strconv.atofHex"
  "(*strconv.decimal).set" -> "strconv.lower"
  "strconv.atof32" -> "(*strconv.decimal).set"
  "strconv.atof32" -> "strconv.atof32exact"
  "strconv.eiselLemire32" -> "math.Float32frombits"
  "math/bits.LeadingZeros64" -> "math/bits.Len64"
  "strconv.eiselLemire32" -> "math/bits.LeadingZeros64"
  "strconv.eiselLemire32" -> "math/bits.Mul64"
  "strconv.eiselLemire32" -> "math/bits.Mul64"
  "strconv.eiselLemire32" -> "math.Float32frombits"
  "strconv.atof32" -> "strconv.eiselLemire32"
  "strconv.atof32" -> "strconv.eiselLemire32"
  "strconv.atof32" -> "strconv.syntaxError"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).RoundedInteger" -> "strconv.shouldRoundUp"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).RoundedInteger"
  "strconv.atof32" -> "(*strconv.decimal).floatBits"
  "strconv.atof32" -> "math.Float32frombits"
  "strconv.atof32" -> "strconv.rangeError"
  "strconv.parseFloatPrefix" -> "strconv.atof32"
  "strconv.atof64" -> "strconv.special"
  "strconv.atof64" -> "strconv.readFloat"
  "strconv.atof64" -> "strconv.syntaxError"
  "strconv.atof64" -> "strconv.atofHex"
  "strconv.atof64" -> "(*strconv.decimal).set"
  "strconv.atof64" -> "strconv.atof64exact"
  "strconv.eiselLemire64" -> "math.Float64frombits"
  "strconv.eiselLemire64" -> "math/bits.LeadingZeros64"
  "strconv.eiselLemire64" -> "math/bits.Mul64"
  "strconv.eiselLemire64" -> "math/bits.Mul64"
  "strconv.eiselLemire64" -> "math.Float64frombits"
  "strconv.atof64" -> "strconv.eiselLemire64"
  "strconv.atof64" -> "strconv.eiselLemire64"
  "strconv.atof64" -> "strconv.syntaxError"
  "strconv.atof64" -> "(*strconv.decimal).floatBits"
  "strconv.atof64" -> "math.Float64frombits"
  "strconv.atof64" -> "strconv.rangeError"
  "strconv.parseFloatPrefix" -> "strconv.atof64"
  "strconv.ParseFloat" -> "strconv.parseFloatPrefix"
  "strconv.ParseFloat" -> "strconv.syntaxError"
  "(*golang.org/x/image/font/sfnt.psInterpreter).parseNumber" -> "strconv.ParseFloat"
  "(*golang.org/x/image/font/sfnt.psInterpreter).parseNumber" -> "math.Float32bits"
  "(*golang.org/x/image/font/sfnt.psInterpreter).parseNumber" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "(*golang.org/x/image/font/sfnt.psInterpreter).parseNumber"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "fmt.Errorf"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "fmt.Errorf"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.init$2"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.init$3"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.init$4"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.init$5"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.init$6"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.init$7"
  "golang.org/x/image/font/sfnt.t2CStem" -> "golang.org/x/image/font/sfnt.t2CReadWidth"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CStem"
  "golang.org/x/image/font/sfnt.t2CVmoveto" -> "golang.org/x/image/font/sfnt.t2CReadWidth"
  "(*golang.org/x/image/font/sfnt.psType2CharstringsData).moveTo" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).closePath"
  "golang.org/x/image/font/sfnt.t2CVmoveto" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).moveTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CVmoveto"
  "golang.org/x/image/font/sfnt.t2CRlineto" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).lineTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CRlineto"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CHlineto"
  "golang.org/x/image/font/sfnt.t2CVlineto" -> "golang.org/x/image/font/sfnt.t2CLineto"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CVlineto"
  "golang.org/x/image/font/sfnt.t2CRrcurveto" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CRrcurveto"
  "golang.org/x/image/font/sfnt.t2CCall" -> "golang.org/x/image/font/sfnt.subrBias"
  "(*golang.org/x/image/font/sfnt.Buffer).view" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Buffer).view" -> "(*golang.org/x/image/font/sfnt.source).viewBufferWritable"
  "golang.org/x/image/font/sfnt.t2CCall" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "golang.org/x/image/font/sfnt.t2CCallsubr" -> "golang.org/x/image/font/sfnt.t2CCall"
  "(*golang.org/x/image/font/sfnt.fdSelect).lookup" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.fdSelect).lookup" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.fdSelect).lookup" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.fdSelect).lookup" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.t2CCallsubr" -> "(*golang.org/x/image/font/sfnt.fdSelect).lookup"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CCallsubr"
  "golang.org/x/image/font/sfnt.t2CReturn" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CReturn"
  "golang.org/x/image/font/sfnt.t2CEndchar" -> "golang.org/x/image/font/sfnt.t2CReadWidth"
  "golang.org/x/image/font/sfnt.t2CEndchar" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).closePath"
  "golang.org/x/image/font/sfnt.t2CEndchar" -> "(*golang.org/x/image/font/sfnt.psInterpreter).hasMoreInstructions"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CEndchar"
  "golang.org/x/image/font/sfnt.t2CMask" -> "golang.org/x/image/font/sfnt.t2CStem"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CMask"
  "golang.org/x/image/font/sfnt.t2CRmoveto" -> "golang.org/x/image/font/sfnt.t2CReadWidth"
  "golang.org/x/image/font/sfnt.t2CRmoveto" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).moveTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CRmoveto"
  "golang.org/x/image/font/sfnt.t2CHmoveto" -> "golang.org/x/image/font/sfnt.t2CReadWidth"
  "golang.org/x/image/font/sfnt.t2CHmoveto" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).moveTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CHmoveto"
  "golang.org/x/image/font/sfnt.t2CRcurveline" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "golang.org/x/image/font/sfnt.t2CRcurveline" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).lineTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CRcurveline"
  "golang.org/x/image/font/sfnt.t2CRlinecurve" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).lineTo"
  "golang.org/x/image/font/sfnt.t2CRlinecurve" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CRlinecurve"
  "golang.org/x/image/font/sfnt.t2CCurveto4" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "golang.org/x/image/font/sfnt.t2CCurveto" -> "golang.org/x/image/font/sfnt.t2CCurveto4"
  "golang.org/x/image/font/sfnt.t2CVvcurveto" -> "golang.org/x/image/font/sfnt.t2CCurveto"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CVvcurveto"
  "golang.org/x/image/font/sfnt.t2CHhcurveto" -> "golang.org/x/image/font/sfnt.t2CCurveto"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CHhcurveto"
  "golang.org/x/image/font/sfnt.t2CCallgsubr" -> "golang.org/x/image/font/sfnt.t2CCall"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CCallgsubr"
  "golang.org/x/image/font/sfnt.t2CVhcurveto" -> "golang.org/x/image/font/sfnt.t2CCurveto"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CVhcurveto"
  "golang.org/x/image/font/sfnt.t2CHvcurveto" -> "golang.org/x/image/font/sfnt.t2CCurveto"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CHvcurveto"
  "golang.org/x/image/font/sfnt.t2CHflex" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "golang.org/x/image/font/sfnt.t2CHflex" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CHflex"
  "golang.org/x/image/font/sfnt.t2CHflex1" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "golang.org/x/image/font/sfnt.t2CHflex1" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).cubeTo"
  "(*golang.org/x/image/font/sfnt.psInterpreter).run" -> "golang.org/x/image/font/sfnt.t2CHflex1"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.psInterpreter).run"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).skip"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "golang.org/x/image/font/sfnt.bigEndian"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).skip"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).seekFromBase"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations"
  "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT" -> "(*golang.org/x/image/font/sfnt.psPrivateDictData).initialize"
  "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT" -> "(*golang.org/x/image/font/sfnt.psInterpreter).run"
  "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT" -> "(*golang.org/x/image/font/sfnt.cffParser).seekFromBase"
  "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader"
  "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT"
  "(*golang.org/x/image/font/sfnt.cffParser).parseFDSelect" -> "(*golang.org/x/image/font/sfnt.cffParser).seekFromBase"
  "(*golang.org/x/image/font/sfnt.cffParser).parseFDSelect" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parseFDSelect" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parseFDSelect" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseFDSelect"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).seekFromBase"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexHeader"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parseIndexLocations"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).read"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.psTopDictData).initialize"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.psInterpreter).run"
  "(*golang.org/x/image/font/sfnt.cffParser).parse" -> "(*golang.org/x/image/font/sfnt.cffParser).parsePrivateDICT"
  "(*golang.org/x/image/font/sfnt.Font).parseGlyphData" -> "(*golang.org/x/image/font/sfnt.cffParser).parse"
  "golang.org/x/image/font/sfnt.parseLoca" -> "(*golang.org/x/image/font/sfnt.source).view"
  "golang.org/x/image/font/sfnt.parseLoca" -> "golang.org/x/image/font/sfnt.u32"
  "golang.org/x/image/font/sfnt.parseLoca" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGlyphData" -> "golang.org/x/image/font/sfnt.parseLoca"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "golang.org/x/image/font/sfnt.stringifyMacintosh" -> "(*golang.org/x/text/encoding/charmap.Charmap).NewDecoder"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/transform.NopResetter).Reset"
  "golang.org/x/text/transform.doAppend" -> "golang.org/x/text/transform.grow"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/transform.discard).Transform"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/encoding.replacementDecoder).Transform"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/encoding.replacementEncoder).Transform"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/encoding/charmap.charmapDecoder).Transform"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/encoding.utf8Validator).Transform"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform"
  "golang.org/x/text/transform.doAppend" -> "(golang.org/x/text/transform.nop).Transform"
  "golang.org/x/text/transform.Bytes" -> "golang.org/x/text/transform.doAppend"
  "(*golang.org/x/text/encoding.Decoder).Bytes" -> "golang.org/x/text/transform.Bytes"
  "golang.org/x/image/font/sfnt.stringifyMacintosh" -> "(*golang.org/x/text/encoding.Decoder).Bytes"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.stringifyMacintosh"
  "golang.org/x/image/font/sfnt.stringifyUCS2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).Name" -> "golang.org/x/image/font/sfnt.stringifyUCS2"
  "(*bytes.Buffer).ReadRune" -> "(*bytes.Buffer).empty"
  "(*bytes.Buffer).ReadRune" -> "(*bytes.Buffer).Reset"
  "(*bytes.Buffer).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*fmt.ss).ReadRune" -> "(*bytes.Buffer).ReadRune"
  "(*fmt.ss).ReadRune" -> "(*fmt.ss).ReadRune"
  "(*bufio.Reader).ReadRune" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).ReadRune" -> "unicode/utf8.FullRune"
  "(*bufio.Reader).ReadRune" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*fmt.ss).ReadRune" -> "(*bufio.Reader).ReadRune"
  "(*fmt.readRune).ReadRune" -> "unicode/utf8.RuneLen"
  "(*fmt.readRune).readByte" -> "io.ReadFull"
  "(*fmt.readRune).ReadRune" -> "(*fmt.readRune).readByte"
  "(*fmt.readRune).ReadRune" -> "(*fmt.readRune).readByte"
  "(*fmt.readRune).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*fmt.readRune).ReadRune" -> "unicode/utf8.FullRune"
  "(*fmt.ss).ReadRune" -> "(*fmt.readRune).ReadRune"
  "(*fmt.ss).getRune" -> "(*fmt.ss).ReadRune"
  "(*fmt.ss).getRune" -> "(*fmt.ss).error"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).getRune"
  "(*fmt.ss).peek" -> "(*fmt.ss).getRune"
  "(*bytes.Buffer).UnreadRune" -> "errors.New"
  "(*fmt.ss).UnreadRune" -> "(*bytes.Buffer).UnreadRune"
  "(*fmt.ss).UnreadRune" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).UnreadRune" -> "(*bufio.Reader).UnreadRune"
  "(*fmt.readRune).UnreadRune" -> "errors.New"
  "(*fmt.ss).UnreadRune" -> "(*fmt.readRune).UnreadRune"
  "(*fmt.ss).peek" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).peek" -> "fmt.indexRune"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).peek"
  "(*fmt.ss).SkipSpace" -> "fmt.isSpace"
  "(*fmt.ss).errorString" -> "errors.New"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).errorString"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).notEOF" -> "(*fmt.ss).getRune"
  "(*fmt.ss).notEOF" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).consume" -> "(*fmt.ss).getRune"
  "(*fmt.ss).consume" -> "fmt.indexRune"
  "(*fmt.ss).consume" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).consume" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).accept" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanPercent" -> "(*fmt.ss).errorString"
  "(*github.com/stefan-muehlebach/adagui/props.Properties).Color" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BarColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*os.File).Readdir" -> "(*os.File).readdir"
  "math.Atan" -> "math.archAtan"
  "math.satan" -> "math.xatan"
  "math.satan" -> "math.xatan"
  "math.satan" -> "math.xatan"
  "math.atan" -> "math.satan"
  "math.atan" -> "math.satan"
  "math.Atan" -> "math.atan"
  "time.Until" -> "time.runtimeNano"
  "time.Until" -> "time.subMono"
  "time.Until" -> "time.Now"
  "time.Until" -> "(time.Time).Sub"
  "(golang.org/x/image/math/fixed.Rectangle26_6).In" -> "(golang.org/x/image/math/fixed.Rectangle26_6).Empty"
  "(encoding/json.structEncoder).encode" -> "(reflect.Value).Kind"
  "(encoding/json.structEncoder).encode" -> "(reflect.Value).IsNil"
  "(encoding/json.structEncoder).encode" -> "(reflect.Value).Field"
  "(encoding/json.structEncoder).encode" -> "(reflect.Value).Elem"
  "(*bytes.Buffer).WriteByte" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).WriteByte" -> "(*bytes.Buffer).grow"
  "(encoding/json.structEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "encoding/json.isEmptyValue" -> "(reflect.Value).Kind"
  "encoding/json.isEmptyValue" -> "(reflect.Value).Len"
  "(reflect.Value).IsZero" -> "(reflect.flag).kind"
  "(reflect.Value).IsZero" -> "(reflect.Value).Bool"
  "(reflect.Value).IsZero" -> "(reflect.Value).Int"
  "(reflect.Value).IsZero" -> "(reflect.Value).Uint"
  "(reflect.Value).IsZero" -> "(reflect.Value).Float"
  "(reflect.Value).IsZero" -> "(reflect.Value).Complex"
  "(reflect.Value).IsZero" -> "(reflect.Value).IsNil"
  "(reflect.Value).IsZero" -> "(reflect.Value).typ"
  "(reflect.Value).IsZero" -> "reflect.noescape"
  "(reflect.Value).IsZero" -> "(*internal/abi.Type).Size"
  "(reflect.Value).IsZero" -> "(*internal/abi.Type).Size"
  "(reflect.Value).IsZero" -> "reflect.isZero"
  "(reflect.Value).IsZero" -> "(reflect.Value).Index"
  "(reflect.Value).IsZero" -> "(reflect.Value).IsZero"
  "(reflect.Value).IsZero" -> "(reflect.Value).Len"
  "(reflect.Value).IsZero" -> "(reflect.Value).Kind"
  "(reflect.Value).IsZero" -> "(reflect.Value).typ"
  "(reflect.Value).IsZero" -> "reflect.noescape"
  "(reflect.Value).IsZero" -> "(*internal/abi.Type).Size"
  "(reflect.Value).IsZero" -> "(*internal/abi.Type).Size"
  "(reflect.Value).IsZero" -> "reflect.isZero"
  "(reflect.Value).IsZero" -> "(reflect.Value).NumField"
  "(reflect.Value).IsZero" -> "(reflect.Value).Field"
  "(reflect.Value).IsZero" -> "(reflect.Value).IsZero"
  "(reflect.Value).IsZero" -> "(reflect.Value).Type"
  "(reflect.Value).IsZero" -> "(*reflect.rtype).Field"
  "reflect.ArrayOf$1" -> "reflect.arrayAt"
  "reflect.ArrayOf$1" -> "reflect.arrayAt"
  "reflect.ArrayOf$1" -> "reflect.ArrayOf$1"
  "reflect.StructOf$2" -> "reflect.add"
  "reflect.StructOf$2" -> "reflect.add"
  "reflect.StructOf$2" -> "reflect.ArrayOf$1"
  "reflect.StructOf$2" -> "reflect.StructOf$2"
  "reflect.ArrayOf$1" -> "reflect.StructOf$2"
  "(reflect.Value).IsZero" -> "reflect.ArrayOf$1"
  "(reflect.Value).IsZero" -> "reflect.ArrayOf$1"
  "(reflect.Value).IsZero" -> "reflect.StructOf$2"
  "(reflect.Value).IsZero" -> "reflect.StructOf$2"
  "encoding/json.isEmptyValue" -> "(reflect.Value).IsZero"
  "(encoding/json.structEncoder).encode" -> "encoding/json.isEmptyValue"
  "(*bytes.Buffer).WriteString" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).WriteString" -> "(*bytes.Buffer).grow"
  "(encoding/json.structEncoder).encode" -> "(*bytes.Buffer).WriteString"
  "encoding/json.typeEncoder$1" -> "(*sync.WaitGroup).Wait"
  "(encoding/json.floatEncoder).encode" -> "(reflect.Value).Float"
  "(encoding/json.floatEncoder).encode" -> "math.IsInf"
  "strconv.FormatFloat" -> "strconv.genericFtoa"
  "(encoding/json.floatEncoder).encode" -> "strconv.FormatFloat"
  "(encoding/json.floatEncoder).encode" -> "(*encoding/json.encodeState).error"
  "(encoding/json.floatEncoder).encode" -> "(*bytes.Buffer).AvailableBuffer"
  "(encoding/json.floatEncoder).encode" -> "encoding/json.mayAppendQuote"
  "(encoding/json.floatEncoder).encode" -> "math.Abs"
  "(encoding/json.floatEncoder).encode" -> "math.IsNaN"
  "(encoding/json.floatEncoder).encode" -> "strconv.AppendFloat"
  "(encoding/json.floatEncoder).encode" -> "encoding/json.mayAppendQuote"
  "(encoding/json.floatEncoder).encode" -> "(*bytes.Buffer).Write"
  "encoding/json.typeEncoder$1" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "(reflect.Value).IsNil"
  "(encoding/json.ptrEncoder).encode" -> "(*bytes.Buffer).WriteString"
  "(encoding/json.ptrEncoder).encode" -> "(reflect.Value).Interface"
  "(encoding/json.ptrEncoder).encode" -> "(reflect.Value).Elem"
  "(reflect.Value).Addr" -> "(reflect.Value).typ"
  "(reflect.Value).Addr" -> "reflect.ptrTo"
  "encoding/json.addrMarshalerEncoder" -> "(reflect.Value).Addr"
  "encoding/json.addrMarshalerEncoder" -> "(reflect.Value).IsNil"
  "encoding/json.addrMarshalerEncoder" -> "(*bytes.Buffer).WriteString"
  "encoding/json.addrMarshalerEncoder" -> "(reflect.Value).Interface"
  "encoding/json.addrMarshalerEncoder" -> "(*encoding/json.encodeState).error"
  "(time.Time).appendStrictRFC3339" -> "(time.Time).appendFormatRFC3339"
  "(time.Time).appendStrictRFC3339" -> "errors.New"
  "(time.Time).appendStrictRFC3339" -> "errors.New"
  "(time.Time).appendStrictRFC3339" -> "(time.Time).appendStrictRFC3339$1"
  "(time.Time).MarshalJSON" -> "(time.Time).appendStrictRFC3339"
  "(time.Time).MarshalJSON" -> "errors.New"
  "(time.Time).MarshalJSON" -> "(*errors.errorString).Error"
  "(time.Time).MarshalJSON" -> "(runtime.errorString).Error"
  "(time.Time).MarshalJSON" -> "(time.fileSizeError).Error"
  "(time.Time).MarshalJSON" -> "(syscall.Errno).Error"
  "(time.Time).MarshalJSON" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(time.Time).MarshalJSON" -> "(*internal/poll.DeadlineExceededError).Error"
  "(time.Time).MarshalJSON" -> "(context.deadlineExceededError).Error"
  "(time.Time).MarshalJSON" -> "(compress/flate.CorruptInputError).Error"
  "(time.Time).MarshalJSON" -> "(*time.ParseError).Error"
  "(time.Time).MarshalJSON" -> "(*io/fs.PathError).Error"
  "(time.Time).MarshalJSON" -> "(*reflect.ValueError).Error"
  "(time.Time).MarshalJSON" -> "(runtime.plainError).Error"
  "(time.Time).MarshalJSON" -> "(*os.SyscallError).Error"
  "(time.Time).MarshalJSON" -> "(image/png.FormatError).Error"
  "(time.Time).MarshalJSON" -> "(compress/flate.InternalError).Error"
  "(time.Time).MarshalJSON" -> "(*fmt.wrapError).Error"
  "(time.Time).MarshalJSON" -> "(*fmt.wrapErrors).Error"
  "(time.Time).MarshalJSON" -> "(internal/poll.errNetClosing).Error"
  "(time.Time).MarshalJSON" -> "(*internal/reflectlite.ValueError).Error"
  "(time.Time).MarshalJSON" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(time.Time).MarshalJSON" -> "(*encoding/json.UnsupportedValueError).Error"
  "(time.Time).MarshalJSON" -> "(encoding/base64.CorruptInputError).Error"
  "(time.Time).MarshalJSON" -> "(*encoding/json.MarshalerError).Error"
  "(time.Time).MarshalJSON" -> "(*internal/bisect.parseError).Error"
  "(time.Time).MarshalJSON" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(time.Time).MarshalJSON" -> "(image/jpeg.UnsupportedError).Error"
  "(time.Time).MarshalJSON" -> "(*strconv.NumError).Error"
  "(time.Time).MarshalJSON" -> "(*encoding/json.SyntaxError).Error"
  "(time.Time).MarshalJSON" -> "(*runtime.TypeAssertionError).Error"
  "(time.Time).MarshalJSON" -> "(runtime.errorAddressString).Error"
  "(time.Time).MarshalJSON" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(time.Time).MarshalJSON" -> "(image/jpeg.FormatError).Error"
  "(time.Time).MarshalJSON" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(time.Time).MarshalJSON" -> "(image/png.UnsupportedError).Error"
  "(time.Time).MarshalJSON" -> "(*encoding/json.UnmarshalTypeError).Error"
  "encoding/json.addrMarshalerEncoder" -> "(time.Time).MarshalJSON"
  "(*bytes.Buffer).Grow" -> "(*bytes.Buffer).grow"
  "encoding/json.addrMarshalerEncoder" -> "(*bytes.Buffer).Grow"
  "encoding/json.addrMarshalerEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.newScanner" -> "(*sync.Pool).Get"
  "encoding/json.newScanner" -> "(*encoding/json.scanner).reset"
  "encoding/json.appendCompact" -> "encoding/json.newScanner"
  "encoding/json.freeScanner" -> "(*sync.Pool).Put"
  "encoding/json.appendCompact" -> "encoding/json.freeScanner"
  "encoding/json.stateBeginValue" -> "encoding/json.isSpace"
  "encoding/json.quoteChar" -> "strconv.Quote"
  "(*encoding/json.scanner).error" -> "encoding/json.quoteChar"
  "(*encoding/json.scanner).pushParseState" -> "(*encoding/json.scanner).error"
  "encoding/json.stateBeginValue" -> "(*encoding/json.scanner).pushParseState"
  "encoding/json.stateBeginValue" -> "(*encoding/json.scanner).pushParseState"
  "encoding/json.stateBeginValue" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateBeginValue"
  "encoding/json.stateBeginStringOrEmpty" -> "encoding/json.isSpace"
  "encoding/json.stateEndTop" -> "encoding/json.isSpace"
  "encoding/json.stateEndTop" -> "(*encoding/json.scanner).error"
  "encoding/json.stateEndValue" -> "encoding/json.stateEndTop"
  "encoding/json.stateEndValue" -> "encoding/json.isSpace"
  "encoding/json.stateEndValue" -> "(*encoding/json.scanner).error"
  "encoding/json.stateEndValue" -> "(*encoding/json.scanner).popParseState"
  "encoding/json.stateEndValue" -> "(*encoding/json.scanner).error"
  "encoding/json.stateEndValue" -> "(*encoding/json.scanner).error"
  "encoding/json.stateEndValue" -> "(*encoding/json.scanner).popParseState"
  "encoding/json.stateEndValue" -> "(*encoding/json.scanner).error"
  "encoding/json.stateBeginStringOrEmpty" -> "encoding/json.stateEndValue"
  "encoding/json.stateBeginString" -> "encoding/json.isSpace"
  "encoding/json.stateBeginString" -> "(*encoding/json.scanner).error"
  "encoding/json.stateBeginStringOrEmpty" -> "encoding/json.stateBeginString"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateBeginStringOrEmpty"
  "encoding/json.stateBeginValueOrEmpty" -> "encoding/json.isSpace"
  "encoding/json.stateBeginValueOrEmpty" -> "encoding/json.stateEndValue"
  "encoding/json.stateBeginValueOrEmpty" -> "encoding/json.stateBeginValue"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateBeginValueOrEmpty"
  "encoding/json.stateInString" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateInString"
  "encoding/json.stateNeg" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateNeg"
  "encoding/json.state0" -> "encoding/json.stateEndValue"
  "(*encoding/json.scanner).eof" -> "encoding/json.state0"
  "encoding/json.stateT" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateT"
  "encoding/json.stateF" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateF"
  "encoding/json.stateN" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateN"
  "encoding/json.state1" -> "encoding/json.state0"
  "(*encoding/json.scanner).eof" -> "encoding/json.state1"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateEndValue"
  "encoding/json.stateInStringEsc" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateInStringEsc"
  "encoding/json.stateDot" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateDot"
  "encoding/json.stateESign" -> "(*encoding/json.scanner).error"
  "encoding/json.stateE" -> "encoding/json.stateESign"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateE"
  "encoding/json.stateTr" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateTr"
  "encoding/json.stateFa" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateFa"
  "encoding/json.stateNu" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateNu"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateError"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateEndTop"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateBeginString"
  "encoding/json.stateInStringEscU" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateInStringEscU"
  "encoding/json.stateDot0" -> "encoding/json.stateEndValue"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateDot0"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateESign"
  "encoding/json.stateTru" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateTru"
  "encoding/json.stateFal" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateFal"
  "encoding/json.stateNul" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateNul"
  "encoding/json.stateInStringEscU1" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateInStringEscU1"
  "encoding/json.stateE0" -> "encoding/json.stateEndValue"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateE0"
  "encoding/json.stateFals" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateFals"
  "encoding/json.stateInStringEscU12" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateInStringEscU12"
  "encoding/json.stateInStringEscU123" -> "(*encoding/json.scanner).error"
  "(*encoding/json.scanner).eof" -> "encoding/json.stateInStringEscU123"
  "encoding/json.appendCompact" -> "(*encoding/json.scanner).eof"
  "encoding/json.appendCompact" -> "encoding/json.state0"
  "encoding/json.appendCompact" -> "encoding/json.stateF"
  "encoding/json.appendCompact" -> "encoding/json.stateDot0"
  "encoding/json.appendCompact" -> "encoding/json.stateN"
  "encoding/json.appendCompact" -> "encoding/json.stateInStringEsc"
  "encoding/json.appendCompact" -> "encoding/json.stateDot"
  "encoding/json.appendCompact" -> "encoding/json.stateEndTop"
  "encoding/json.appendCompact" -> "encoding/json.stateInStringEscU"
  "encoding/json.appendCompact" -> "encoding/json.stateESign"
  "encoding/json.appendCompact" -> "encoding/json.stateNul"
  "encoding/json.appendCompact" -> "encoding/json.stateNeg"
  "encoding/json.appendCompact" -> "encoding/json.stateEndValue"
  "encoding/json.appendCompact" -> "encoding/json.stateT"
  "encoding/json.appendCompact" -> "encoding/json.stateE"
  "encoding/json.appendCompact" -> "encoding/json.stateNu"
  "encoding/json.appendCompact" -> "encoding/json.stateE0"
  "encoding/json.appendCompact" -> "encoding/json.stateBeginValueOrEmpty"
  "encoding/json.appendCompact" -> "encoding/json.stateFa"
  "encoding/json.appendCompact" -> "encoding/json.stateBeginStringOrEmpty"
  "encoding/json.appendCompact" -> "encoding/json.state1"
  "encoding/json.appendCompact" -> "encoding/json.stateTr"
  "encoding/json.appendCompact" -> "encoding/json.stateTru"
  "encoding/json.appendCompact" -> "encoding/json.stateFals"
  "encoding/json.appendCompact" -> "encoding/json.stateBeginValue"
  "encoding/json.appendCompact" -> "encoding/json.stateInString"
  "encoding/json.appendCompact" -> "encoding/json.stateError"
  "encoding/json.appendCompact" -> "encoding/json.stateFal"
  "encoding/json.appendCompact" -> "encoding/json.stateInStringEscU1"
  "encoding/json.appendCompact" -> "encoding/json.stateInStringEscU123"
  "encoding/json.appendCompact" -> "encoding/json.stateBeginString"
  "encoding/json.appendCompact" -> "encoding/json.stateInStringEscU12"
  "encoding/json.addrMarshalerEncoder" -> "encoding/json.appendCompact"
  "encoding/json.addrMarshalerEncoder" -> "(*bytes.Buffer).Write"
  "encoding/json.addrMarshalerEncoder" -> "(reflect.Value).Type"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.addrMarshalerEncoder"
  "encoding/json.boolEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.boolEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.boolEncoder" -> "(reflect.Value).Bool"
  "encoding/json.boolEncoder" -> "strconv.AppendBool"
  "encoding/json.boolEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.boolEncoder" -> "(*bytes.Buffer).Write"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.boolEncoder"
  "encoding/json.intEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.intEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.intEncoder" -> "(reflect.Value).Int"
  "strconv.AppendInt" -> "strconv.small"
  "strconv.AppendInt" -> "strconv.formatBits"
  "encoding/json.intEncoder" -> "strconv.AppendInt"
  "encoding/json.intEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.intEncoder" -> "(*bytes.Buffer).Write"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.intEncoder"
  "encoding/json.uintEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.uintEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.uintEncoder" -> "(reflect.Value).Uint"
  "strconv.AppendUint" -> "strconv.small"
  "strconv.AppendUint" -> "strconv.formatBits"
  "encoding/json.uintEncoder" -> "strconv.AppendUint"
  "encoding/json.uintEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.uintEncoder" -> "(*bytes.Buffer).Write"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.uintEncoder"
  "encoding/json.interfaceEncoder" -> "(reflect.Value).IsNil"
  "encoding/json.interfaceEncoder" -> "(*bytes.Buffer).WriteString"
  "encoding/json.interfaceEncoder" -> "(reflect.Value).Elem"
  "encoding/json.valueEncoder" -> "(reflect.Value).IsValid"
  "encoding/json.valueEncoder" -> "(reflect.Value).Type"
  "encoding/json.typeEncoder" -> "(*sync.Map).Load"
  "encoding/json.typeEncoder" -> "(*sync.WaitGroup).Add"
  "encoding/json.typeEncoder" -> "(*sync.Map).LoadOrStore"
  "encoding/json.newTypeEncoder" -> "(*reflect.rtype).Kind"
  "encoding/json.newTypeEncoder" -> "encoding/json.newTypeEncoder"
  "encoding/json.newTypeEncoder" -> "encoding/json.newCondAddrEncoder"
  "(*reflect.rtype).Implements" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Implements" -> "(*reflect.rtype).common"
  "(*reflect.rtype).Implements" -> "(*reflect.rtype).common"
  "(*reflect.rtype).Implements" -> "reflect.implements"
  "encoding/json.newTypeEncoder" -> "(*reflect.rtype).Implements"
  "reflect.PointerTo" -> "(*reflect.rtype).ptrTo"
  "reflect.PointerTo" -> "reflect.toRType"
  "encoding/json.newTypeEncoder" -> "reflect.PointerTo"
  "encoding/json.newTypeEncoder" -> "(*reflect.rtype).Implements"
  "encoding/json.newTypeEncoder" -> "(*reflect.rtype).Kind"
  "encoding/json.newTypeEncoder" -> "encoding/json.newTypeEncoder"
  "encoding/json.newTypeEncoder" -> "encoding/json.newCondAddrEncoder"
  "encoding/json.newTypeEncoder" -> "(*reflect.rtype).Implements"
  "encoding/json.newTypeEncoder" -> "reflect.PointerTo"
  "encoding/json.newTypeEncoder" -> "(*reflect.rtype).Implements"
  "encoding/json.newTypeEncoder" -> "(*reflect.rtype).Kind"
  "encoding/json.cachedTypeFields" -> "(*sync.Map).Load"
  "encoding/json.typeFields" -> "sort.Slice"
  "encoding/json.typeFields" -> "(*reflect.rtype).NumField"
  "encoding/json.typeFields" -> "(*reflect.rtype).Field"
  "encoding/json.typeFields" -> "(*reflect.rtype).Kind"
  "(reflect.StructTag).Lookup" -> "strconv.Unquote"
  "(reflect.StructTag).Get" -> "(reflect.StructTag).Lookup"
  "encoding/json.typeFields" -> "(reflect.StructTag).Get"
  "encoding/json.typeFields" -> "(reflect.StructField).IsExported"
  "encoding/json.typeFields" -> "(*reflect.rtype).Elem"
  "encoding/json.typeFields" -> "(reflect.StructField).IsExported"
  "encoding/json.typeFields" -> "(*reflect.rtype).Kind"
  "strings.Cut" -> "strings.Index"
  "encoding/json.parseTag" -> "strings.Cut"
  "encoding/json.typeFields" -> "encoding/json.parseTag"
  "strings.ContainsRune" -> "strings.IndexRune"
  "encoding/json.isValidTag" -> "strings.ContainsRune"
  "unicode.IsLetter" -> "unicode.isExcludingLatin"
  "encoding/json.isValidTag" -> "unicode.IsLetter"
  "unicode.IsDigit" -> "unicode.isExcludingLatin"
  "encoding/json.isValidTag" -> "unicode.IsDigit"
  "encoding/json.typeFields" -> "encoding/json.isValidTag"
  "encoding/json.typeFields" -> "(*reflect.rtype).Name"
  "encoding/json.typeFields" -> "(*reflect.rtype).Elem"
  "(encoding/json.tagOptions).Contains" -> "strings.Cut"
  "encoding/json.typeFields" -> "(encoding/json.tagOptions).Contains"
  "encoding/json.typeFields" -> "(*reflect.rtype).Kind"
  "encoding/json.typeFields" -> "(*reflect.rtype).Kind"
  "encoding/json.typeFields" -> "(*reflect.rtype).Kind"
  "encoding/json.typeFields" -> "(encoding/json.tagOptions).Contains"
  "encoding/json.typeFields" -> "encoding/json.appendHTMLEscape"
  "encoding/json.typeFields" -> "(*reflect.rtype).Name"
  "encoding/json.typeFields" -> "sort.Sort"
  "encoding/json.typeFields" -> "encoding/json.dominantField"
  "encoding/json.typeByIndex" -> "(*reflect.rtype).Kind"
  "encoding/json.typeByIndex" -> "(*reflect.rtype).Elem"
  "encoding/json.typeByIndex" -> "(*reflect.rtype).Field"
  "encoding/json.typeFields" -> "encoding/json.typeByIndex"
  "encoding/json.typeFields" -> "encoding/json.typeEncoder"
  "encoding/json.appendFoldedName" -> "unicode/utf8.DecodeRune"
  "unicode.To" -> "unicode.to"
  "unicode.ToLower" -> "unicode.To"
  "unicode.SimpleFold" -> "unicode.ToLower"
  "unicode.ToUpper" -> "unicode.To"
  "unicode.SimpleFold" -> "unicode.ToUpper"
  "encoding/json.foldRune" -> "unicode.SimpleFold"
  "encoding/json.appendFoldedName" -> "encoding/json.foldRune"
  "encoding/json.appendFoldedName" -> "unicode/utf8.AppendRune"
  "encoding/json.foldName" -> "encoding/json.appendFoldedName"
  "encoding/json.typeFields" -> "encoding/json.foldName"
  "encoding/json.typeFields" -> "encoding/json.foldName"
  "encoding/json.cachedTypeFields" -> "encoding/json.typeFields"
  "encoding/json.cachedTypeFields" -> "(*sync.Map).LoadOrStore"
  "encoding/json.newStructEncoder" -> "encoding/json.cachedTypeFields"
  "encoding/json.newTypeEncoder" -> "encoding/json.newStructEncoder"
  "(*reflect.rtype).Key" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Key" -> "(*reflect.rtype).String"
  "(*reflect.rtype).Key" -> "reflect.toType"
  "encoding/json.newMapEncoder" -> "(*reflect.rtype).Key"
  "encoding/json.newMapEncoder" -> "(*reflect.rtype).Kind"
  "encoding/json.newMapEncoder" -> "(*reflect.rtype).Elem"
  "encoding/json.newMapEncoder" -> "encoding/json.typeEncoder"
  "encoding/json.newMapEncoder" -> "(*reflect.rtype).Key"
  "encoding/json.newMapEncoder" -> "(*reflect.rtype).Implements"
  "encoding/json.newTypeEncoder" -> "encoding/json.newMapEncoder"
  "encoding/json.newSliceEncoder" -> "(*reflect.rtype).Elem"
  "encoding/json.newSliceEncoder" -> "(*reflect.rtype).Kind"
  "encoding/json.newSliceEncoder" -> "(*reflect.rtype).Elem"
  "encoding/json.newSliceEncoder" -> "reflect.PointerTo"
  "encoding/json.newSliceEncoder" -> "(*reflect.rtype).Implements"
  "encoding/json.newArrayEncoder" -> "(*reflect.rtype).Elem"
  "encoding/json.newArrayEncoder" -> "encoding/json.typeEncoder"
  "encoding/json.newSliceEncoder" -> "encoding/json.newArrayEncoder"
  "encoding/json.newSliceEncoder" -> "(*reflect.rtype).Implements"
  "encoding/json.newTypeEncoder" -> "encoding/json.newSliceEncoder"
  "encoding/json.newTypeEncoder" -> "encoding/json.newArrayEncoder"
  "encoding/json.newPtrEncoder" -> "(*reflect.rtype).Elem"
  "encoding/json.newPtrEncoder" -> "encoding/json.typeEncoder"
  "encoding/json.newTypeEncoder" -> "encoding/json.newPtrEncoder"
  "encoding/json.typeEncoder" -> "encoding/json.newTypeEncoder"
  "encoding/json.typeEncoder" -> "(*sync.WaitGroup).Done"
  "encoding/json.typeEncoder" -> "(*sync.Map).Store"
  "encoding/json.valueEncoder" -> "encoding/json.typeEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.valueEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "(encoding/json.floatEncoder).encode"
  "(*encoding/json.encodeState).reflectValue" -> "(encoding/json.ptrEncoder).encode"
  "encoding/json.invalidValueEncoder" -> "(*bytes.Buffer).WriteString"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.invalidValueEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.typeEncoder$1"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.addrMarshalerEncoder"
  "encoding/json.marshalerEncoder" -> "(reflect.Value).Kind"
  "encoding/json.marshalerEncoder" -> "(*bytes.Buffer).WriteString"
  "encoding/json.marshalerEncoder" -> "(reflect.Value).Interface"
  "encoding/json.marshalerEncoder" -> "(reflect.Value).IsNil"
  "encoding/json.marshalerEncoder" -> "(*bytes.Buffer).WriteString"
  "encoding/json.marshalerEncoder" -> "(*encoding/json.encodeState).error"
  "encoding/json.marshalerEncoder" -> "(time.Time).MarshalJSON"
  "encoding/json.marshalerEncoder" -> "(*bytes.Buffer).Grow"
  "encoding/json.marshalerEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.marshalerEncoder" -> "encoding/json.appendCompact"
  "encoding/json.marshalerEncoder" -> "(*bytes.Buffer).Write"
  "encoding/json.marshalerEncoder" -> "(reflect.Value).Type"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.marshalerEncoder"
  "encoding/json.addrTextMarshalerEncoder" -> "(reflect.Value).Addr"
  "encoding/json.addrTextMarshalerEncoder" -> "(reflect.Value).IsNil"
  "encoding/json.addrTextMarshalerEncoder" -> "(*bytes.Buffer).WriteString"
  "encoding/json.addrTextMarshalerEncoder" -> "(reflect.Value).Interface"
  "encoding/json.appendString[[]byte]" -> "unicode/utf8.DecodeRuneInString"
  "encoding/json.addrTextMarshalerEncoder" -> "encoding/json.appendString[[]byte]"
  "encoding/json.addrTextMarshalerEncoder" -> "(*encoding/json.encodeState).error"
  "encoding/json.addrTextMarshalerEncoder" -> "(github.com/stefan-muehlebach/adagui/props.SizePropertyName).MarshalText"
  "encoding/json.addrTextMarshalerEncoder" -> "(github.com/stefan-muehlebach/adagui/props.FontPropertyName).MarshalText"
  "(*github.com/stefan-muehlebach/gg/fonts.Font).MarshalText" -> "errors.New"
  "encoding/json.addrTextMarshalerEncoder" -> "(*github.com/stefan-muehlebach/gg/fonts.Font).MarshalText"
  "(time.Time).MarshalText" -> "(time.Time).appendStrictRFC3339"
  "(time.Time).MarshalText" -> "errors.New"
  "(time.Time).MarshalText" -> "(*errors.errorString).Error"
  "(time.Time).MarshalText" -> "(runtime.errorString).Error"
  "(time.Time).MarshalText" -> "(time.fileSizeError).Error"
  "(time.Time).MarshalText" -> "(syscall.Errno).Error"
  "(time.Time).MarshalText" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(time.Time).MarshalText" -> "(*internal/poll.DeadlineExceededError).Error"
  "(time.Time).MarshalText" -> "(context.deadlineExceededError).Error"
  "(time.Time).MarshalText" -> "(compress/flate.CorruptInputError).Error"
  "(time.Time).MarshalText" -> "(*time.ParseError).Error"
  "(time.Time).MarshalText" -> "(*io/fs.PathError).Error"
  "(time.Time).MarshalText" -> "(*reflect.ValueError).Error"
  "(time.Time).MarshalText" -> "(runtime.plainError).Error"
  "(time.Time).MarshalText" -> "(*os.SyscallError).Error"
  "(time.Time).MarshalText" -> "(image/png.FormatError).Error"
  "(time.Time).MarshalText" -> "(compress/flate.InternalError).Error"
  "(time.Time).MarshalText" -> "(*fmt.wrapError).Error"
  "(time.Time).MarshalText" -> "(*fmt.wrapErrors).Error"
  "(time.Time).MarshalText" -> "(internal/poll.errNetClosing).Error"
  "(time.Time).MarshalText" -> "(*internal/reflectlite.ValueError).Error"
  "(time.Time).MarshalText" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(time.Time).MarshalText" -> "(*encoding/json.UnsupportedValueError).Error"
  "(time.Time).MarshalText" -> "(encoding/base64.CorruptInputError).Error"
  "(time.Time).MarshalText" -> "(*encoding/json.MarshalerError).Error"
  "(time.Time).MarshalText" -> "(*internal/bisect.parseError).Error"
  "(time.Time).MarshalText" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(time.Time).MarshalText" -> "(image/jpeg.UnsupportedError).Error"
  "(time.Time).MarshalText" -> "(*strconv.NumError).Error"
  "(time.Time).MarshalText" -> "(*encoding/json.SyntaxError).Error"
  "(time.Time).MarshalText" -> "(*runtime.TypeAssertionError).Error"
  "(time.Time).MarshalText" -> "(runtime.errorAddressString).Error"
  "(time.Time).MarshalText" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(time.Time).MarshalText" -> "(image/jpeg.FormatError).Error"
  "(time.Time).MarshalText" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(time.Time).MarshalText" -> "(image/png.UnsupportedError).Error"
  "(time.Time).MarshalText" -> "(*encoding/json.UnmarshalTypeError).Error"
  "encoding/json.addrTextMarshalerEncoder" -> "(time.Time).MarshalText"
  "encoding/json.addrTextMarshalerEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.addrTextMarshalerEncoder" -> "(*bytes.Buffer).Write"
  "encoding/json.addrTextMarshalerEncoder" -> "(github.com/stefan-muehlebach/adagui/props.ColorPropertyName).MarshalText"
  "encoding/json.addrTextMarshalerEncoder" -> "(reflect.Value).Type"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.addrTextMarshalerEncoder"
  "encoding/json.textMarshalerEncoder" -> "(reflect.Value).Kind"
  "encoding/json.textMarshalerEncoder" -> "(*bytes.Buffer).WriteString"
  "encoding/json.textMarshalerEncoder" -> "(reflect.Value).Interface"
  "encoding/json.textMarshalerEncoder" -> "(reflect.Value).IsNil"
  "encoding/json.textMarshalerEncoder" -> "(*bytes.Buffer).WriteString"
  "encoding/json.textMarshalerEncoder" -> "encoding/json.appendString[[]byte]"
  "encoding/json.textMarshalerEncoder" -> "(*encoding/json.encodeState).error"
  "encoding/json.textMarshalerEncoder" -> "(github.com/stefan-muehlebach/adagui/props.SizePropertyName).MarshalText"
  "encoding/json.textMarshalerEncoder" -> "(github.com/stefan-muehlebach/adagui/props.FontPropertyName).MarshalText"
  "encoding/json.textMarshalerEncoder" -> "(*github.com/stefan-muehlebach/gg/fonts.Font).MarshalText"
  "encoding/json.textMarshalerEncoder" -> "(time.Time).MarshalText"
  "encoding/json.textMarshalerEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.textMarshalerEncoder" -> "(*bytes.Buffer).Write"
  "encoding/json.textMarshalerEncoder" -> "(github.com/stefan-muehlebach/adagui/props.ColorPropertyName).MarshalText"
  "encoding/json.textMarshalerEncoder" -> "(reflect.Value).Type"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.textMarshalerEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.boolEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.intEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.uintEncoder"
  "encoding/json.stringEncoder" -> "(reflect.Value).Type"
  "encoding/json.stringEncoder" -> "(reflect.Value).String"
  "encoding/json.stringEncoder" -> "encoding/json.isValidNumber"
  "encoding/json.stringEncoder" -> "fmt.Errorf"
  "encoding/json.stringEncoder" -> "(*encoding/json.encodeState).error"
  "encoding/json.stringEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.stringEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.stringEncoder" -> "encoding/json.mayAppendQuote"
  "encoding/json.stringEncoder" -> "(*bytes.Buffer).Write"
  "encoding/json.stringEncoder" -> "(reflect.Value).String"
  "encoding/json.appendString[string]" -> "unicode/utf8.DecodeRuneInString"
  "encoding/json.stringEncoder" -> "encoding/json.appendString[string]"
  "encoding/json.stringEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.stringEncoder" -> "encoding/json.appendString[[]byte]"
  "encoding/json.stringEncoder" -> "(*bytes.Buffer).Write"
  "encoding/json.stringEncoder" -> "(*bytes.Buffer).AvailableBuffer"
  "encoding/json.stringEncoder" -> "(reflect.Value).String"
  "encoding/json.stringEncoder" -> "encoding/json.appendString[string]"
  "encoding/json.stringEncoder" -> "(*bytes.Buffer).Write"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.stringEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.interfaceEncoder"
  "encoding/json.unsupportedTypeEncoder" -> "(reflect.Value).Type"
  "encoding/json.unsupportedTypeEncoder" -> "(*encoding/json.encodeState).error"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "(reflect.Value).CanAddr"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.condAddrEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.addrMarshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.boolEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.intEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.uintEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.interfaceEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.marshalerEncoder"
  "(encoding/json.mapEncoder).encode" -> "(reflect.Value).IsNil"
  "(encoding/json.mapEncoder).encode" -> "(*bytes.Buffer).WriteString"
  "(encoding/json.mapEncoder).encode" -> "(reflect.Value).UnsafePointer"
  "(encoding/json.mapEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.mapEncoder).encode" -> "(reflect.Value).Len"
  "(encoding/json.mapEncoder).encode" -> "(reflect.Value).MapRange"
  "(encoding/json.mapEncoder).encode" -> "(reflect.Value).Type"
  "(encoding/json.mapEncoder).encode" -> "fmt.Sprintf"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.encodeState).error"
  "(encoding/json.mapEncoder).encode" -> "(*reflect.MapIter).Next"
  "(encoding/json.mapEncoder).encode" -> "(*reflect.MapIter).Key"
  "encoding/json.resolveKeyName" -> "(reflect.Value).Kind"
  "encoding/json.resolveKeyName" -> "(reflect.Value).String"
  "encoding/json.resolveKeyName" -> "(reflect.Value).Interface"
  "encoding/json.resolveKeyName" -> "(reflect.Value).Kind"
  "encoding/json.resolveKeyName" -> "(reflect.Value).Kind"
  "encoding/json.resolveKeyName" -> "(reflect.Value).Uint"
  "encoding/json.resolveKeyName" -> "(reflect.Value).Int"
  "encoding/json.resolveKeyName" -> "(github.com/stefan-muehlebach/adagui/props.SizePropertyName).MarshalText"
  "encoding/json.resolveKeyName" -> "(github.com/stefan-muehlebach/adagui/props.FontPropertyName).MarshalText"
  "encoding/json.resolveKeyName" -> "(*github.com/stefan-muehlebach/gg/fonts.Font).MarshalText"
  "encoding/json.resolveKeyName" -> "(time.Time).MarshalText"
  "encoding/json.resolveKeyName" -> "strconv.FormatInt"
  "encoding/json.resolveKeyName" -> "strconv.FormatUint"
  "encoding/json.resolveKeyName" -> "(github.com/stefan-muehlebach/adagui/props.ColorPropertyName).MarshalText"
  "encoding/json.resolveKeyName" -> "(reflect.Value).IsNil"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.resolveKeyName"
  "slices.SortFunc[[]encoding/json.reflectWithString encoding/json.reflectWithString]" -> "math/bits.Len"
  "(encoding/json.mapEncoder).encode$1" -> "strings.Compare"
  "slices.insertionSortCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.insertionSortCmpFunc[encoding/json.reflectWithString]"
  "slices.siftDownCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.siftDownCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.heapSortCmpFunc[encoding/json.reflectWithString]" -> "slices.siftDownCmpFunc[encoding/json.reflectWithString]"
  "slices.heapSortCmpFunc[encoding/json.reflectWithString]" -> "slices.siftDownCmpFunc[encoding/json.reflectWithString]"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.heapSortCmpFunc[encoding/json.reflectWithString]"
  "slices.breakPatternsCmpFunc[encoding/json.reflectWithString]" -> "slices.nextPowerOfTwo"
  "slices.breakPatternsCmpFunc[encoding/json.reflectWithString]" -> "(*slices.xorshift).Next"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.breakPatternsCmpFunc[encoding/json.reflectWithString]"
  "slices.order2CmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.medianCmpFunc[encoding/json.reflectWithString]" -> "slices.order2CmpFunc[encoding/json.reflectWithString]"
  "slices.medianCmpFunc[encoding/json.reflectWithString]" -> "slices.order2CmpFunc[encoding/json.reflectWithString]"
  "slices.medianCmpFunc[encoding/json.reflectWithString]" -> "slices.order2CmpFunc[encoding/json.reflectWithString]"
  "slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]" -> "slices.medianCmpFunc[encoding/json.reflectWithString]"
  "slices.choosePivotCmpFunc[encoding/json.reflectWithString]" -> "slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]"
  "slices.choosePivotCmpFunc[encoding/json.reflectWithString]" -> "slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]"
  "slices.choosePivotCmpFunc[encoding/json.reflectWithString]" -> "slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]"
  "slices.choosePivotCmpFunc[encoding/json.reflectWithString]" -> "slices.medianCmpFunc[encoding/json.reflectWithString]"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.choosePivotCmpFunc[encoding/json.reflectWithString]"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.reverseRangeCmpFunc[encoding/json.reflectWithString]"
  "slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]"
  "slices.partitionEqualCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.partitionEqualCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.partitionEqualCmpFunc[encoding/json.reflectWithString]"
  "slices.partitionCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.partitionCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.partitionCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.partitionCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.partitionCmpFunc[encoding/json.reflectWithString]"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "(encoding/json.mapEncoder).encode$1"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.pdqsortCmpFunc[encoding/json.reflectWithString]"
  "slices.pdqsortCmpFunc[encoding/json.reflectWithString]" -> "slices.pdqsortCmpFunc[encoding/json.reflectWithString]"
  "slices.SortFunc[[]encoding/json.reflectWithString encoding/json.reflectWithString]" -> "slices.pdqsortCmpFunc[encoding/json.reflectWithString]"
  "(encoding/json.mapEncoder).encode" -> "slices.SortFunc[[]encoding/json.reflectWithString encoding/json.reflectWithString]"
  "(encoding/json.mapEncoder).encode" -> "(reflect.Value).Type"
  "(encoding/json.mapEncoder).encode" -> "(*reflect.rtype).String"
  "(encoding/json.mapEncoder).encode" -> "(*errors.errorString).Error"
  "(encoding/json.mapEncoder).encode" -> "(runtime.errorString).Error"
  "(encoding/json.mapEncoder).encode" -> "(encoding/json.condAddrEncoder).encode"
  "(encoding/json.mapEncoder).encode" -> "(syscall.Errno).Error"
  "(encoding/json.mapEncoder).encode" -> "(encoding/json.ptrEncoder).encode"
  "(encoding/json.mapEncoder).encode" -> "(*internal/poll.DeadlineExceededError).Error"
  "(encoding/json.mapEncoder).encode" -> "(context.deadlineExceededError).Error"
  "(encoding/json.mapEncoder).encode" -> "(compress/flate.CorruptInputError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*time.ParseError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*io/fs.PathError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*reflect.ValueError).Error"
  "(encoding/json.mapEncoder).encode" -> "(runtime.plainError).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.boolEncoder"
  "(encoding/json.mapEncoder).encode" -> "(image/png.FormatError).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.mapEncoder).encode" -> "(*fmt.wrapError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*fmt.wrapErrors).Error"
  "(encoding/json.mapEncoder).encode" -> "(internal/poll.errNetClosing).Error"
  "(encoding/json.mapEncoder).encode" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.UnsupportedValueError).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.addrTextMarshalerEncoder"
  "encoding/json.encodeByteSlice" -> "(reflect.Value).IsNil"
  "encoding/json.encodeByteSlice" -> "(*bytes.Buffer).WriteString"
  "encoding/json.encodeByteSlice" -> "(reflect.Value).Bytes"
  "encoding/json.encodeByteSlice" -> "(*bytes.Buffer).AvailableBuffer"
  "(*encoding/base64.Encoding).AppendEncode" -> "(*encoding/base64.Encoding).EncodedLen"
  "(*encoding/base64.Encoding).AppendEncode" -> "slices.Grow[[]byte byte]"
  "(*encoding/base64.Encoding).AppendEncode" -> "(*encoding/base64.Encoding).Encode"
  "encoding/json.encodeByteSlice" -> "(*encoding/base64.Encoding).AppendEncode"
  "encoding/json.encodeByteSlice" -> "(*bytes.Buffer).Write"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.encodeByteSlice"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.addrMarshalerEncoder"
  "(encoding/json.mapEncoder).encode" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.interfaceEncoder"
  "(encoding/json.mapEncoder).encode" -> "(*strconv.NumError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.SyntaxError).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.marshalerEncoder"
  "(encoding/json.mapEncoder).encode" -> "(runtime.errorAddressString).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.stringEncoder"
  "(encoding/json.mapEncoder).encode" -> "(image/jpeg.FormatError).Error"
  "(encoding/json.sliceEncoder).encode" -> "(reflect.Value).IsNil"
  "(encoding/json.sliceEncoder).encode" -> "(*bytes.Buffer).WriteString"
  "(encoding/json.sliceEncoder).encode" -> "(reflect.Value).UnsafePointer"
  "(encoding/json.sliceEncoder).encode" -> "(reflect.Value).Len"
  "(encoding/json.sliceEncoder).encode" -> "(*encoding/json.encodeState).error"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.typeEncoder$1"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.textMarshalerEncoder"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.stringEncoder"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.sliceEncoder).encode" -> "(encoding/json.sliceEncoder).encode"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.addrMarshalerEncoder"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.boolEncoder"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.intEncoder"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.uintEncoder"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.interfaceEncoder"
  "(encoding/json.sliceEncoder).encode" -> "(encoding/json.condAddrEncoder).encode"
  "(encoding/json.sliceEncoder).encode" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.marshalerEncoder"
  "(encoding/json.sliceEncoder).encode" -> "(encoding/json.mapEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.arrayEncoder).encode" -> "(reflect.Value).Len"
  "(encoding/json.arrayEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.arrayEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.arrayEncoder).encode" -> "(reflect.Value).Index"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.textMarshalerEncoder"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.stringEncoder"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.arrayEncoder).encode" -> "(encoding/json.sliceEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.addrTextMarshalerEncoder"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.typeEncoder$1"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.intEncoder"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.uintEncoder"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.interfaceEncoder"
  "(encoding/json.arrayEncoder).encode" -> "(encoding/json.condAddrEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.addrMarshalerEncoder"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.boolEncoder"
  "(encoding/json.arrayEncoder).encode" -> "(encoding/json.mapEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.marshalerEncoder"
  "(encoding/json.arrayEncoder).encode" -> "(encoding/json.structEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.encodeByteSlice"
  "(encoding/json.arrayEncoder).encode" -> "(encoding/json.ptrEncoder).encode"
  "(encoding/json.arrayEncoder).encode" -> "encoding/json.invalidValueEncoder"
  "(encoding/json.sliceEncoder).encode" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.invalidValueEncoder"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.addrTextMarshalerEncoder"
  "(encoding/json.sliceEncoder).encode" -> "(encoding/json.structEncoder).encode"
  "(encoding/json.sliceEncoder).encode" -> "encoding/json.encodeByteSlice"
  "(encoding/json.sliceEncoder).encode" -> "(encoding/json.ptrEncoder).encode"
  "(encoding/json.sliceEncoder).encode" -> "(reflect.Value).Type"
  "(encoding/json.sliceEncoder).encode" -> "fmt.Sprintf"
  "(encoding/json.mapEncoder).encode" -> "(encoding/json.sliceEncoder).encode"
  "(encoding/json.mapEncoder).encode" -> "(image/png.UnsupportedError).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.intEncoder"
  "(encoding/json.mapEncoder).encode" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(encoding/json.mapEncoder).encode" -> "(compress/flate.InternalError).Error"
  "(encoding/json.mapEncoder).encode" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(encoding/json.mapEncoder).encode" -> "(encoding/json.structEncoder).encode"
  "(encoding/json.mapEncoder).encode" -> "(*os.SyscallError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(encoding/json.mapEncoder).encode" -> "(image/jpeg.UnsupportedError).Error"
  "(encoding/json.mapEncoder).encode" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.mapEncoder).encode" -> "(*internal/reflectlite.ValueError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*runtime.TypeAssertionError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*internal/bisect.parseError).Error"
  "(encoding/json.mapEncoder).encode" -> "(time.fileSizeError).Error"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.invalidValueEncoder"
  "(encoding/json.mapEncoder).encode" -> "(encoding/base64.CorruptInputError).Error"
  "(encoding/json.mapEncoder).encode" -> "(encoding/json.mapEncoder).encode"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.MarshalerError).Error"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(encoding/json.mapEncoder).encode" -> "fmt.Errorf"
  "(encoding/json.mapEncoder).encode" -> "(*encoding/json.encodeState).error"
  "(encoding/json.mapEncoder).encode" -> "(*reflect.MapIter).Value"
  "(encoding/json.mapEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.mapEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.mapEncoder).encode" -> "(*bytes.Buffer).AvailableBuffer"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.appendString[string]"
  "(encoding/json.mapEncoder).encode" -> "(*bytes.Buffer).Write"
  "(encoding/json.mapEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.uintEncoder"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.typeEncoder$1"
  "(encoding/json.mapEncoder).encode" -> "encoding/json.textMarshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.mapEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.invalidValueEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.addrTextMarshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.structEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.encodeByteSlice"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.ptrEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.sliceEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.addrMarshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.typeEncoder$1"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.textMarshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.stringEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.marshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.mapEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.addrTextMarshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.structEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.encodeByteSlice"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.ptrEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.invalidValueEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.typeEncoder$1"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.textMarshalerEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.stringEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.sliceEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "(encoding/json.condAddrEncoder).encode"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.boolEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.intEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.uintEncoder"
  "(encoding/json.condAddrEncoder).encode" -> "encoding/json.interfaceEncoder"
  "(*encoding/json.encodeState).reflectValue" -> "(encoding/json.condAddrEncoder).encode"
  "(*encoding/json.encodeState).reflectValue" -> "(encoding/json.structEncoder).encode"
  "(*encoding/json.encodeState).reflectValue" -> "(encoding/json.mapEncoder).encode"
  "(*encoding/json.encodeState).reflectValue" -> "(encoding/json.sliceEncoder).encode"
  "(*encoding/json.encodeState).reflectValue" -> "encoding/json.encodeByteSlice"
  "(*encoding/json.encodeState).reflectValue" -> "(encoding/json.arrayEncoder).encode"
  "encoding/json.interfaceEncoder" -> "(*encoding/json.encodeState).reflectValue"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.interfaceEncoder"
  "(encoding/json.ptrEncoder).encode" -> "(encoding/json.condAddrEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.marshalerEncoder"
  "(encoding/json.ptrEncoder).encode" -> "(encoding/json.mapEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.invalidValueEncoder"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.addrTextMarshalerEncoder"
  "(encoding/json.ptrEncoder).encode" -> "(encoding/json.structEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.encodeByteSlice"
  "(encoding/json.ptrEncoder).encode" -> "(encoding/json.ptrEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "(*encoding/json.encodeState).error"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.typeEncoder$1"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.textMarshalerEncoder"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.stringEncoder"
  "(encoding/json.ptrEncoder).encode" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.ptrEncoder).encode" -> "(encoding/json.sliceEncoder).encode"
  "(encoding/json.ptrEncoder).encode" -> "(reflect.Value).Type"
  "(encoding/json.ptrEncoder).encode" -> "fmt.Sprintf"
  "encoding/json.typeEncoder$1" -> "(encoding/json.ptrEncoder).encode"
  "encoding/json.typeEncoder$1" -> "encoding/json.invalidValueEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.typeEncoder$1"
  "encoding/json.typeEncoder$1" -> "encoding/json.addrMarshalerEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.marshalerEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.addrTextMarshalerEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.textMarshalerEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.boolEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.intEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.uintEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.stringEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.interfaceEncoder"
  "encoding/json.typeEncoder$1" -> "encoding/json.unsupportedTypeEncoder"
  "encoding/json.typeEncoder$1" -> "(encoding/json.condAddrEncoder).encode"
  "encoding/json.typeEncoder$1" -> "(encoding/json.structEncoder).encode"
  "encoding/json.typeEncoder$1" -> "(encoding/json.mapEncoder).encode"
  "encoding/json.typeEncoder$1" -> "(encoding/json.sliceEncoder).encode"
  "encoding/json.typeEncoder$1" -> "encoding/json.encodeByteSlice"
  "encoding/json.typeEncoder$1" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "encoding/json.typeEncoder$1"
  "(encoding/json.structEncoder).encode" -> "encoding/json.textMarshalerEncoder"
  "(encoding/json.structEncoder).encode" -> "encoding/json.stringEncoder"
  "(encoding/json.structEncoder).encode" -> "encoding/json.unsupportedTypeEncoder"
  "(encoding/json.structEncoder).encode" -> "(encoding/json.sliceEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "(*bytes.Buffer).WriteByte"
  "(encoding/json.structEncoder).encode" -> "encoding/json.boolEncoder"
  "(encoding/json.structEncoder).encode" -> "encoding/json.intEncoder"
  "(encoding/json.structEncoder).encode" -> "encoding/json.uintEncoder"
  "(encoding/json.structEncoder).encode" -> "encoding/json.interfaceEncoder"
  "(encoding/json.structEncoder).encode" -> "(encoding/json.condAddrEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "encoding/json.addrMarshalerEncoder"
  "(encoding/json.structEncoder).encode" -> "encoding/json.marshalerEncoder"
  "(encoding/json.structEncoder).encode" -> "(encoding/json.mapEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "(encoding/json.arrayEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "(encoding/json.floatEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "encoding/json.addrTextMarshalerEncoder"
  "(encoding/json.structEncoder).encode" -> "(encoding/json.structEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "encoding/json.encodeByteSlice"
  "(encoding/json.structEncoder).encode" -> "(encoding/json.ptrEncoder).encode"
  "(encoding/json.structEncoder).encode" -> "encoding/json.invalidValueEncoder"
  "(encoding/json.structEncoder).encode" -> "(*bytes.Buffer).WriteString"
  "(encoding/json.structEncoder).encode" -> "(*bytes.Buffer).WriteString"
  "(*github.com/stefan-muehlebach/gg.Context).Clear" -> "image.NewUniform"
  "(*github.com/stefan-muehlebach/gg.Context).Clear" -> "(*image.RGBA).Bounds"
  "image/draw.clip" -> "(*image.RGBA).Bounds"
  "image/draw.clip" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "image/draw.clip" -> "(*image.Alpha).Bounds"
  "image/draw.clip" -> "(*image.Paletted).Bounds"
  "image/draw.clip" -> "(image.Rectangle).Intersect"
  "image/draw.clip" -> "(*image.Uniform).Bounds"
  "image/draw.clip" -> "(*image.Alpha).Bounds"
  "image/draw.clip" -> "(*image.RGBA64).Bounds"
  "image/draw.clip" -> "(*image.RGBA).Bounds"
  "image/draw.clip" -> "(image.Rectangle).Bounds"
  "image/draw.clip" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "image/draw.clip" -> "(*image.YCbCr).Bounds"
  "image/draw.clip" -> "(*image.Paletted).Bounds"
  "image/draw.clip" -> "(image.Point).Sub"
  "image/draw.clip" -> "(image.Rectangle).Add"
  "image/draw.clip" -> "(image.Rectangle).Intersect"
  "image/draw.clip" -> "(*image.Uniform).Bounds"
  "image/draw.clip" -> "(*image.Alpha).Bounds"
  "image/draw.clip" -> "(*image.RGBA64).Bounds"
  "image/draw.clip" -> "(*image.RGBA).Bounds"
  "image/draw.clip" -> "(image.Rectangle).Bounds"
  "image/draw.clip" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "image/draw.clip" -> "(*image.YCbCr).Bounds"
  "image/draw.clip" -> "(*image.Paletted).Bounds"
  "image/draw.clip" -> "(image.Point).Sub"
  "image/draw.clip" -> "(image.Rectangle).Add"
  "image/draw.clip" -> "(image.Rectangle).Intersect"
  "image/draw.clip" -> "(*image.Gray).Bounds"
  "image/draw.clip" -> "(*image.Gray).Bounds"
  "image/draw.clip" -> "(*image.Gray).Bounds"
  "image/draw.clip" -> "(*image.CMYK).Bounds"
  "image/draw.clip" -> "(*image.CMYK).Bounds"
  "image/draw.clip" -> "(*image.CMYK).Bounds"
  "image/draw.clip" -> "(*image.NRGBA).Bounds"
  "image/draw.clip" -> "(*image.NRGBA).Bounds"
  "image/draw.clip" -> "(*image.NRGBA).Bounds"
  "image/draw.clip" -> "(*image.NRGBA64).Bounds"
  "image/draw.clip" -> "(*image.NRGBA64).Bounds"
  "image/draw.clip" -> "(*image.NRGBA64).Bounds"
  "image/draw.clip" -> "(*image.Gray16).Bounds"
  "image/draw.clip" -> "(*image.Gray16).Bounds"
  "image/draw.clip" -> "(*image.Gray16).Bounds"
  "image/draw.clip" -> "(*image.RGBA64).Bounds"
  "image/draw.DrawMask" -> "image/draw.clip"
  "image/draw.DrawMask" -> "(image.Rectangle).Empty"
  "image/draw.processBackward" -> "(image.Point).Sub"
  "image/draw.processBackward" -> "(image.Rectangle).Add"
  "(image.Rectangle).Overlaps" -> "(image.Rectangle).Empty"
  "(image.Rectangle).Overlaps" -> "(image.Rectangle).Empty"
  "image/draw.processBackward" -> "(image.Rectangle).Overlaps"
  "image/draw.DrawMask" -> "image/draw.processBackward"
  "image/draw.drawRGBA" -> "(*image.RGBA).PixOffset"
  "image/draw.drawRGBA" -> "(image.Point).Sub"
  "image/draw.drawRGBA" -> "(image.Rectangle).Add"
  "image/draw.drawRGBA" -> "(image.Rectangle).Overlaps"
  "image/draw.drawRGBA" -> "(*image.RGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image.Rectangle).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Paletted).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Alpha).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Gray16).At"
  "image/draw.drawRGBA" -> "(*image.RGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image.Rectangle).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Paletted).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Alpha).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Gray16).At"
  "image/draw.drawRGBA" -> "(*image.RGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image.Rectangle).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Paletted).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Alpha).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.RGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image.Rectangle).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Paletted).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Alpha).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.RGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image.Rectangle).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Paletted).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Alpha).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.RGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image.Rectangle).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Paletted).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Alpha).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).At"
  "image/draw.drawRGBA" -> "(*image.Alpha).At"
  "image/draw.drawRGBA" -> "(*image.Gray16).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.RGBA).At"
  "image/draw.drawRGBA" -> "(image.Rectangle).At"
  "image/draw.drawRGBA" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).At"
  "image/draw.drawRGBA" -> "(*image.Paletted).At"
  "image/draw.drawRGBA" -> "(*image.Gray16).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Gray16).RGBA"
  "image/draw.drawRGBA" -> "(*image.RGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.RGBA).RGBA"
  "image/draw.drawRGBA" -> "(image/color.RGBA64).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Alpha16).RGBA"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA"
  "image/draw.drawRGBA" -> "(*image.RGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Alpha).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.drawRGBA" -> "(*image.Gray16).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.YCbCr).RGBA"
  "image/draw.drawRGBA" -> "(*image.Gray).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.NRGBA).RGBA"
  "image/draw.drawRGBA" -> "(*image.RGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.NRGBA64).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Gray).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).At"
  "image/draw.drawRGBA" -> "(*image.RGBA64).At"
  "image/draw.drawRGBA" -> "(image/color.CMYK).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.drawRGBA" -> "(*image.Gray).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Uniform).At"
  "image/draw.drawRGBA" -> "(*image.Alpha).At"
  "image/draw.drawRGBA" -> "(*image.Gray16).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.RGBA).At"
  "image/draw.drawRGBA" -> "(image.Rectangle).At"
  "image/draw.drawRGBA" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.drawRGBA" -> "(*image.YCbCr).At"
  "image/draw.drawRGBA" -> "(*image.Paletted).At"
  "image/draw.drawRGBA" -> "(*image.Gray16).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Gray16).RGBA"
  "image/draw.drawRGBA" -> "(*image.RGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.RGBA).RGBA"
  "image/draw.drawRGBA" -> "(image/color.RGBA64).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Alpha16).RGBA"
  "image/draw.drawRGBA" -> "(*image.Uniform).RGBA"
  "image/draw.drawRGBA" -> "(*image.RGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Alpha).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.drawRGBA" -> "(*image.Gray16).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.YCbCr).RGBA"
  "image/draw.drawRGBA" -> "(*image.Gray).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.NRGBA).RGBA"
  "image/draw.drawRGBA" -> "(*image.RGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.NRGBA64).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.Gray).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).RGBA64At"
  "image/draw.drawRGBA" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA).At"
  "image/draw.drawRGBA" -> "(*image.RGBA64).At"
  "image/draw.drawRGBA" -> "(image/color.CMYK).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.drawRGBA" -> "(*image.NRGBA64).At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.drawRGBA" -> "(*image.Gray).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).RGBA64At"
  "image/draw.drawRGBA" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.drawRGBA" -> "(*image.CMYK).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Gray).At"
  "image/draw.drawRGBA" -> "(*image.Gray).At"
  "image/draw.drawRGBA" -> "(*image.Gray).RGBA64At"
  "image/draw.drawRGBA" -> "(*image.Gray).RGBA64At"
  "image/draw.DrawMask" -> "image/draw.drawRGBA"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA"
  "image/draw.drawFillSrc" -> "(*image.RGBA).PixOffset"
  "image/draw.drawFillSrc" -> "(image.Rectangle).Dx"
  "image/draw.DrawMask" -> "image/draw.drawFillSrc"
  "image/draw.drawFillOver" -> "(*image.RGBA).PixOffset"
  "image/draw.drawFillOver" -> "(image.Rectangle).Dx"
  "image/draw.DrawMask" -> "image/draw.drawFillOver"
  "image/draw.drawCopyOver" -> "(image.Rectangle).Dx"
  "image/draw.drawCopyOver" -> "(image.Rectangle).Dy"
  "image/draw.drawCopyOver" -> "(*image.RGBA).PixOffset"
  "image/draw.drawCopyOver" -> "(*image.RGBA).PixOffset"
  "image/draw.DrawMask" -> "image/draw.drawCopyOver"
  "image/draw.DrawMask" -> "image/draw.drawNRGBAOver"
  "image/draw.DrawMask" -> "image/internal/imageutil.DrawYCbCr"
  "image/draw.DrawMask" -> "image/draw.drawGray"
  "image/draw.drawCMYK" -> "image/color.CMYKToRGB"
  "image/draw.DrawMask" -> "image/draw.drawCMYK"
  "image/draw.drawGlyphOver" -> "(*image.RGBA).PixOffset"
  "image/draw.drawGlyphOver" -> "(image.Rectangle).Dx"
  "image/draw.drawGlyphOver" -> "(*image.Alpha).PixOffset"
  "image/draw.drawGlyphOver" -> "(*image.Uniform).RGBA"
  "image/draw.DrawMask" -> "image/draw.drawGlyphOver"
  "image/draw.drawRGBAMaskOver" -> "(*image.RGBA).PixOffset"
  "image/draw.drawRGBAMaskOver" -> "(image.Point).Sub"
  "image/draw.drawRGBAMaskOver" -> "(image.Rectangle).Add"
  "image/draw.drawRGBAMaskOver" -> "(image.Rectangle).Overlaps"
  "image/draw.drawRGBAMaskOver" -> "(*image.Alpha).PixOffset"
  "image/draw.drawRGBAMaskOver" -> "(*image.RGBA).PixOffset"
  "image/draw.DrawMask" -> "image/draw.drawRGBAMaskOver"
  "image/draw.drawGrayMaskOver" -> "(image.Point).Sub"
  "image/draw.drawGrayMaskOver" -> "(image.Rectangle).Add"
  "image/draw.drawGrayMaskOver" -> "(image.Rectangle).Overlaps"
  "image/draw.drawGrayMaskOver" -> "(*image.RGBA).PixOffset"
  "image/draw.drawGrayMaskOver" -> "(*image.Alpha).PixOffset"
  "image/draw.drawGrayMaskOver" -> "(*image.Gray).PixOffset"
  "image/draw.DrawMask" -> "image/draw.drawGrayMaskOver"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.RGBA).PixOffset"
  "image/draw.drawRGBA64ImageMaskOver" -> "(image.Point).Sub"
  "image/draw.drawRGBA64ImageMaskOver" -> "(image.Rectangle).Add"
  "image/draw.drawRGBA64ImageMaskOver" -> "(image.Rectangle).Overlaps"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.Alpha).PixOffset"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.RGBA).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(image.Rectangle).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.Paletted).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.Uniform).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.YCbCr).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.Alpha).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.RGBA64).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.Gray).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.CMYK).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.NRGBA).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.drawRGBA64ImageMaskOver" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "image/draw.drawRGBA64ImageMaskOver"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA"
  "image/draw.DrawMask" -> "image/draw.drawFillSrc"
  "image/draw.DrawMask" -> "(*image.RGBA).PixOffset"
  "image/draw.DrawMask" -> "(*image.RGBA).PixOffset"
  "image/draw.DrawMask" -> "(image.Rectangle).Dx"
  "image/draw.drawCopySrc" -> "(image.Rectangle).Dy"
  "image/draw.DrawMask" -> "image/draw.drawCopySrc"
  "image/draw.DrawMask" -> "image/draw.drawNRGBASrc"
  "image/draw.DrawMask" -> "image/internal/imageutil.DrawYCbCr"
  "image/draw.DrawMask" -> "image/draw.drawGray"
  "image/draw.DrawMask" -> "image/draw.drawCMYK"
  "image/draw.DrawMask" -> "(image/color.Palette).Index"
  "image/draw.DrawMask" -> "(*image.Paletted).PixOffset"
  "image/draw.DrawMask" -> "(image.Rectangle).Dx"
  "image/draw.DrawMask" -> "image/draw.processBackward"
  "image/draw.drawPaletted" -> "(*image.CMYK).At"
  "image/draw.drawPaletted" -> "(image/color.Gray16).RGBA"
  "image/draw.drawPaletted" -> "(*image.Gray16).At"
  "image/draw.drawPaletted" -> "(image/color.RGBA).RGBA"
  "image/draw.drawPaletted" -> "(image/color.RGBA64).RGBA"
  "image/draw.drawPaletted" -> "(*image.Gray).Set"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.drawPaletted" -> "(image/color.Alpha16).RGBA"
  "image/draw.drawPaletted" -> "(*image.Uniform).RGBA"
  "image/draw.drawPaletted" -> "(*image.NRGBA64).At"
  "image/draw.drawPaletted" -> "(image/color.Alpha).RGBA"
  "image/draw.drawPaletted" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.drawPaletted" -> "(*image.Gray).At"
  "image/draw.drawPaletted" -> "(image/color.YCbCr).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.drawPaletted" -> "(image/color.NRGBA).RGBA"
  "image/draw.drawPaletted" -> "(*image.RGBA64).At"
  "image/draw.drawPaletted" -> "(image/color.NRGBA64).RGBA"
  "image/draw.drawPaletted" -> "(*image.RGBA64).Set"
  "image/draw.drawPaletted" -> "(image/color.Gray).RGBA"
  "image/draw.drawPaletted" -> "(image/color.CMYK).RGBA"
  "image/draw.drawPaletted" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.drawPaletted" -> "(*image.NRGBA).Set"
  "image/draw.drawPaletted" -> "(*image.NRGBA).At"
  "image/draw.drawPaletted" -> "(image/color.CMYK).RGBA"
  "image/draw.drawPaletted" -> "(image/color.NRGBA).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.drawPaletted" -> "(image/color.YCbCr).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.drawPaletted" -> "(image/color.Gray).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.drawPaletted" -> "(image/color.NRGBA64).RGBA"
  "image/draw.drawPaletted" -> "(*image.Paletted).PixOffset"
  "image/draw.drawPaletted" -> "(image.Rectangle).Dx"
  "image/draw.drawPaletted" -> "(image.Rectangle).Dx"
  "image/draw.drawPaletted" -> "(image.Rectangle).Dy"
  "image/draw.drawPaletted" -> "(image.Rectangle).Dx"
  "image/draw.drawPaletted$1" -> "(*image.Uniform).At"
  "image/draw.drawPaletted$1" -> "(*image.Alpha).At"
  "image/draw.drawPaletted$1" -> "(*image.CMYK).At"
  "image/draw.drawPaletted$1" -> "(*image.RGBA).At"
  "image/draw.drawPaletted$1" -> "(image.Rectangle).At"
  "image/draw.drawPaletted$1" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.drawPaletted$1" -> "(*image.YCbCr).At"
  "image/draw.drawPaletted$1" -> "(*image.Paletted).At"
  "image/draw.drawPaletted$1" -> "(*image.Gray).At"
  "image/draw.drawPaletted$1" -> "(image/color.Gray16).RGBA"
  "image/draw.drawPaletted$1" -> "(*image.Gray16).At"
  "image/draw.drawPaletted$1" -> "(image/color.RGBA).RGBA"
  "image/draw.drawPaletted$1" -> "(image/color.RGBA64).RGBA"
  "image/draw.drawPaletted$1" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.drawPaletted$1" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.drawPaletted$1" -> "(*image.NRGBA).At"
  "image/draw.drawPaletted$1" -> "(image/color.Alpha16).RGBA"
  "image/draw.drawPaletted$1" -> "(*image.Uniform).RGBA"
  "image/draw.drawPaletted$1" -> "(*image.NRGBA64).At"
  "image/draw.drawPaletted$1" -> "(image/color.Alpha).RGBA"
  "image/draw.drawPaletted$1" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.drawPaletted$1" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.drawPaletted$1" -> "(image/color.CMYK).RGBA"
  "image/draw.drawPaletted$1" -> "(image/color.YCbCr).RGBA"
  "image/draw.drawPaletted$1" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.drawPaletted$1" -> "(image/color.NRGBA).RGBA"
  "image/draw.drawPaletted$1" -> "(*image.RGBA64).At"
  "image/draw.drawPaletted$1" -> "(image/color.NRGBA64).RGBA"
  "image/draw.drawPaletted$1" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.drawPaletted$1" -> "(image/color.Gray).RGBA"
  "image/draw.drawPaletted$1" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.drawPaletted" -> "image/draw.drawPaletted$1"
  "image/draw.drawPaletted$2" -> "(*image.RGBA).RGBAAt"
  "image/draw.drawPaletted$2" -> "(image/color.RGBA).RGBA"
  "image/draw.drawPaletted" -> "image/draw.drawPaletted$2"
  "image/draw.drawPaletted$3" -> "(*image.NRGBA).NRGBAAt"
  "image/draw.drawPaletted$3" -> "(image/color.NRGBA).RGBA"
  "image/draw.drawPaletted" -> "image/draw.drawPaletted$3"
  "image/draw.drawPaletted$4" -> "(*image.YCbCr).YCbCrAt"
  "image/draw.drawPaletted$4" -> "(image/color.YCbCr).RGBA"
  "image/draw.drawPaletted" -> "image/draw.drawPaletted$4"
  "image/draw.drawPaletted" -> "image/draw.clamp"
  "image/draw.drawPaletted" -> "image/draw.clamp"
  "image/draw.drawPaletted" -> "image/draw.clamp"
  "image/draw.drawPaletted" -> "image/draw.clamp"
  "image/draw.drawPaletted" -> "(*image.RGBA).Set"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Set" -> "(image.Point).In"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Set" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).PixOffset"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Set" -> "(*image.Uniform).Convert"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Set" -> "(*image/color.modelFunc).Convert"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Set" -> "(image/color.Palette).Convert"
  "image/draw.drawPaletted" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "image/draw.drawPaletted" -> "(*image.Alpha).Set"
  "image/draw.drawPaletted" -> "(*image.Paletted).Set"
  "image/draw.drawPaletted" -> "image/draw.sqDiff"
  "image/draw.drawPaletted" -> "image/draw.sqDiff"
  "image/draw.drawPaletted" -> "image/draw.sqDiff"
  "image/draw.drawPaletted" -> "image/draw.sqDiff"
  "image/draw.drawPaletted" -> "(*image.RGBA).At"
  "image/draw.drawPaletted" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.drawPaletted" -> "(*image.Alpha).At"
  "image/draw.drawPaletted" -> "(*image.Paletted).At"
  "image/draw.drawPaletted" -> "(*image.CMYK).Set"
  "image/draw.drawPaletted" -> "(image/color.Gray16).RGBA"
  "image/draw.drawPaletted" -> "(*image.Gray16).Set"
  "image/draw.drawPaletted" -> "(image/color.RGBA).RGBA"
  "image/draw.drawPaletted" -> "(image/color.RGBA64).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.drawPaletted" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.drawPaletted" -> "(image/color.Alpha16).RGBA"
  "image/draw.drawPaletted" -> "(*image.Uniform).RGBA"
  "image/draw.drawPaletted" -> "(*image.NRGBA64).Set"
  "image/draw.drawPaletted" -> "(image/color.Alpha).RGBA"
  "image/draw.DrawMask" -> "image/draw.drawPaletted"
  "image/draw.DrawMask" -> "(*image.NRGBA).PixOffset"
  "image/draw.DrawMask" -> "(*image.NRGBA).PixOffset"
  "image/draw.DrawMask" -> "(image.Rectangle).Dx"
  "image/draw.DrawMask" -> "image/draw.drawCopySrc"
  "image/draw.DrawMask" -> "(*image.NRGBA64).PixOffset"
  "image/draw.DrawMask" -> "(*image.NRGBA64).PixOffset"
  "image/draw.DrawMask" -> "(image.Rectangle).Dx"
  "image/draw.DrawMask" -> "image/draw.drawCopySrc"
  "image/draw.DrawMask" -> "(*image.RGBA).RGBA64At"
  "image/draw.DrawMask" -> "(image.Rectangle).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Paletted).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA64At"
  "image/draw.DrawMask" -> "(*image.YCbCr).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Alpha).RGBA64At"
  "(*image.Gray16).SetRGBA64" -> "(image.Point).In"
  "(*image.Gray16).SetRGBA64" -> "(*image.Gray16).PixOffset"
  "image/draw.DrawMask" -> "(*image.Gray16).SetRGBA64"
  "(*image.RGBA).SetRGBA64" -> "(image.Point).In"
  "(*image.RGBA).SetRGBA64" -> "(*image.RGBA).PixOffset"
  "image/draw.DrawMask" -> "(*image.RGBA).SetRGBA64"
  "(*image.Paletted).SetRGBA64" -> "(image.Point).In"
  "(*image.Paletted).SetRGBA64" -> "(*image.Paletted).PixOffset"
  "(*image.Paletted).SetRGBA64" -> "(image/color.Palette).Index"
  "image/draw.DrawMask" -> "(*image.Paletted).SetRGBA64"
  "(*image.Alpha).SetRGBA64" -> "(image.Point).In"
  "(*image.Alpha).SetRGBA64" -> "(*image.Alpha).PixOffset"
  "image/draw.DrawMask" -> "(*image.Alpha).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).RGBA64At"
  "image/draw.DrawMask" -> "(image.Rectangle).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Paletted).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA64At"
  "image/draw.DrawMask" -> "(*image.YCbCr).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Alpha).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "(*image.RGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Paletted).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Alpha).RGBA64At"
  "image/draw.DrawMask" -> "(*image.RGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Paletted).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Alpha).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).RGBA64At"
  "image/draw.DrawMask" -> "(image.Rectangle).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Paletted).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA64At"
  "image/draw.DrawMask" -> "(*image.YCbCr).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Alpha).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray16).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).RGBA64At"
  "image/draw.DrawMask" -> "(image.Rectangle).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Paletted).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA64At"
  "image/draw.DrawMask" -> "(*image.YCbCr).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Alpha).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray16).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Paletted).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Alpha).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Paletted).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Alpha).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).RGBA64At"
  "image/draw.DrawMask" -> "(image.Rectangle).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Paletted).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA64At"
  "image/draw.DrawMask" -> "(*image.YCbCr).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Alpha).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray16).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Paletted).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Alpha).RGBA64At"
  "image/draw.DrawMask" -> "(*image.RGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Paletted).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Alpha).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Paletted).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Alpha).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Uniform).At"
  "image/draw.DrawMask" -> "(*image.Alpha).At"
  "image/draw.DrawMask" -> "(*image.RGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(*image.RGBA).At"
  "image/draw.DrawMask" -> "(image.Rectangle).At"
  "image/draw.DrawMask" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.DrawMask" -> "(*image.YCbCr).At"
  "image/draw.DrawMask" -> "(*image.Paletted).At"
  "image/draw.DrawMask" -> "(*image.RGBA64).At"
  "image/draw.DrawMask" -> "(image/color.Gray16).RGBA"
  "(*image.RGBA64).SetRGBA64" -> "(image.Point).In"
  "(*image.RGBA64).SetRGBA64" -> "(*image.RGBA64).PixOffset"
  "image/draw.DrawMask" -> "(*image.RGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.RGBA).RGBA"
  "image/draw.DrawMask" -> "(image/color.RGBA64).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).At"
  "image/draw.DrawMask" -> "(image/color.Alpha16).RGBA"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.Alpha).RGBA"
  "(*image.NRGBA64).SetRGBA64" -> "(image.Point).In"
  "(*image.NRGBA64).SetRGBA64" -> "(*image.NRGBA64).PixOffset"
  "image/draw.DrawMask" -> "(*image.NRGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).Set"
  "image/draw.DrawMask" -> "(image/color.YCbCr).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).Set"
  "image/draw.DrawMask" -> "(image/color.NRGBA).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.NRGBA64).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.Gray).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).Set"
  "image/draw.DrawMask" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.CMYK).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).Set"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Uniform).At"
  "image/draw.DrawMask" -> "(*image.Alpha).At"
  "image/draw.DrawMask" -> "(*image.RGBA64).At"
  "image/draw.DrawMask" -> "(*image.RGBA).At"
  "image/draw.DrawMask" -> "(image.Rectangle).At"
  "image/draw.DrawMask" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.DrawMask" -> "(*image.YCbCr).At"
  "image/draw.DrawMask" -> "(*image.Paletted).At"
  "image/draw.DrawMask" -> "(*image.RGBA).Set"
  "image/draw.DrawMask" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "image/draw.DrawMask" -> "(*image.Alpha).Set"
  "image/draw.DrawMask" -> "(*image.Paletted).Set"
  "image/draw.DrawMask" -> "(*image.RGBA).Set"
  "image/draw.DrawMask" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "image/draw.DrawMask" -> "(*image.Alpha).Set"
  "image/draw.DrawMask" -> "(*image.Paletted).Set"
  "image/draw.DrawMask" -> "(*image.Uniform).At"
  "image/draw.DrawMask" -> "(*image.Alpha).At"
  "image/draw.DrawMask" -> "(*image.RGBA64).At"
  "image/draw.DrawMask" -> "(*image.RGBA).At"
  "image/draw.DrawMask" -> "(image.Rectangle).At"
  "image/draw.DrawMask" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.DrawMask" -> "(*image.YCbCr).At"
  "image/draw.DrawMask" -> "(*image.Paletted).At"
  "image/draw.DrawMask" -> "(*image.RGBA64).Set"
  "image/draw.DrawMask" -> "(image/color.Gray16).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.RGBA).RGBA"
  "image/draw.DrawMask" -> "(image/color.RGBA64).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).Set"
  "image/draw.DrawMask" -> "(image/color.Alpha16).RGBA"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.Alpha).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).Set"
  "image/draw.DrawMask" -> "(image/color.YCbCr).RGBA"
  "(*image.NRGBA).SetRGBA64" -> "(image.Point).In"
  "(*image.NRGBA).SetRGBA64" -> "(*image.NRGBA).PixOffset"
  "image/draw.DrawMask" -> "(*image.NRGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.NRGBA).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.NRGBA64).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.Gray).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).Set"
  "image/draw.DrawMask" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(*image.RGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.CMYK).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(*image.RGBA).At"
  "image/draw.DrawMask" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/draw.DrawMask" -> "(*image.Alpha).At"
  "image/draw.DrawMask" -> "(*image.Paletted).At"
  "image/draw.DrawMask" -> "(*image.RGBA64).At"
  "image/draw.DrawMask" -> "(image/color.Gray16).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.RGBA).RGBA"
  "image/draw.DrawMask" -> "(image/color.RGBA64).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).At"
  "image/draw.DrawMask" -> "(image/color.Alpha16).RGBA"
  "image/draw.DrawMask" -> "(*image.Uniform).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.Alpha).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.YCbCr).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.NRGBA).RGBA"
  "image/draw.DrawMask" -> "(*image.RGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.NRGBA64).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.Gray).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(image/color.NYCbCrA).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.RGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(image/color.CMYK).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "image/draw.DrawMask" -> "(*image.Gray16).RGBA64At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).Set"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/draw.DrawMask" -> "(*image.NRGBA64).RGBA64At"
  "image/draw.DrawMask" -> "(*image.RGBA).Set"
  "image/draw.DrawMask" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "image/draw.DrawMask" -> "(*image.Alpha).Set"
  "image/draw.DrawMask" -> "(*image.Paletted).Set"
  "image/draw.DrawMask" -> "(*image.Gray).Set"
  "image/draw.DrawMask" -> "(*image.Gray).Set"
  "image/draw.DrawMask" -> "(*image.Gray).At"
  "image/draw.DrawMask" -> "(*image.Gray).Set"
  "image/draw.DrawMask" -> "(*image.Gray).At"
  "image/draw.DrawMask" -> "(*image.Gray).At"
  "image/draw.DrawMask" -> "(*image.Gray).At"
  "image/draw.DrawMask" -> "(*image.Gray).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray).RGBA64At"
  "(*image.Gray).SetRGBA64" -> "(image.Point).In"
  "(*image.Gray).SetRGBA64" -> "(*image.Gray).PixOffset"
  "image/draw.DrawMask" -> "(*image.Gray).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Gray).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Gray).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Gray).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Gray).RGBA64At"
  "image/draw.DrawMask" -> "(*image.Gray).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.Gray).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.CMYK).At"
  "image/draw.DrawMask" -> "(*image.CMYK).At"
  "image/draw.DrawMask" -> "(*image.CMYK).At"
  "image/draw.DrawMask" -> "(*image.CMYK).RGBA64At"
  "image/draw.DrawMask" -> "(*image.CMYK).RGBA64At"
  "image/draw.DrawMask" -> "(*image.CMYK).RGBA64At"
  "image/draw.DrawMask" -> "(*image.CMYK).RGBA64At"
  "image/draw.DrawMask" -> "(*image.CMYK).RGBA64At"
  "(*image.CMYK).SetRGBA64" -> "(image.Point).In"
  "(*image.CMYK).SetRGBA64" -> "image/color.RGBToCMYK"
  "(*image.CMYK).SetRGBA64" -> "(*image.CMYK).PixOffset"
  "image/draw.DrawMask" -> "(*image.CMYK).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.CMYK).RGBA64At"
  "image/draw.DrawMask" -> "(*image.CMYK).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.CMYK).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.CMYK).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.CMYK).RGBA64At"
  "image/draw.DrawMask" -> "(*image.CMYK).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.CMYK).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.CMYK).Set"
  "image/draw.DrawMask" -> "(*image.CMYK).Set"
  "image/draw.DrawMask" -> "(*image.CMYK).At"
  "image/draw.DrawMask" -> "(*image.CMYK).Set"
  "image/draw.DrawMask" -> "(*image.NRGBA).Set"
  "image/draw.DrawMask" -> "(*image.NRGBA).Set"
  "image/draw.DrawMask" -> "(*image.NRGBA).At"
  "image/draw.DrawMask" -> "(*image.NRGBA).Set"
  "image/draw.DrawMask" -> "(*image.NRGBA).At"
  "image/draw.DrawMask" -> "(*image.NRGBA).At"
  "image/draw.DrawMask" -> "(*image.NRGBA).At"
  "image/draw.DrawMask" -> "(*image.NRGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.NRGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.NRGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.NRGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.NRGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.NRGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.NRGBA).RGBA64At"
  "image/draw.DrawMask" -> "(*image.NRGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.NRGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.NRGBA).SetRGBA64"
  "image/draw.DrawMask" -> "(*image.NRGBA).RGBA64At"
  "image/draw.Draw" -> "image/draw.DrawMask"
  "golang.org/x/image/draw.Draw" -> "image/draw.Draw"
  "(*github.com/stefan-muehlebach/gg.Context).Clear" -> "golang.org/x/image/draw.Draw"
  "(*github.com/stefan-muehlebach/gg.Context).Clear" -> "(*github.com/stefan-muehlebach/gg.solidPattern).ColorAt"
  "reflect.floatFromReg" -> "reflect.archFloat32FromReg"
  "(*math/rand.runtimeSource).Uint64" -> "math/rand.runtime_rand"
  "(*bytes.Buffer).readSlice" -> "bytes.IndexByte"
  "io/fs.ValidPath" -> "unicode/utf8.ValidString"
  "(embed.FS).lookup" -> "io/fs.ValidPath"
  "(embed.FS).lookup" -> "embed.split"
  "embed.sortSearch" -> "(embed.FS).lookup$1"
  "embed.sortSearch" -> "(embed.FS).readDir$1"
  "embed.sortSearch" -> "(embed.FS).readDir$2"
  "embed.sortSearch" -> "periph.io/x/conn/v3/driver/driverreg.insertDriver$1"
  "embed.sortSearch" -> "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure$1"
  "embed.sortSearch" -> "periph.io/x/conn/v3/driver/driverreg.insertString$1"
  "embed.sortSearch" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList$1$1"
  "embed.sortSearch" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1$1"
  "embed.sortSearch" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1$1"
  "(embed.FS).lookup" -> "embed.sortSearch"
  "(embed.FS).lookup" -> "embed.trimSlash"
  "(embed.FS).Open" -> "(embed.FS).lookup"
  "(embed.FS).Open" -> "(*embed.file).IsDir"
  "(embed.FS).readDir" -> "embed.sortSearch"
  "(embed.FS).readDir" -> "embed.sortSearch"
  "(embed.FS).Open" -> "(embed.FS).readDir"
  "encoding/json.unquoteBytes" -> "unicode/utf8.DecodeRune"
  "encoding/json.unquoteBytes" -> "encoding/json.getu4"
  "encoding/json.unquoteBytes" -> "unicode/utf16.IsSurrogate"
  "encoding/json.unquoteBytes" -> "encoding/json.getu4"
  "encoding/json.unquoteBytes" -> "unicode/utf16.DecodeRune"
  "encoding/json.unquoteBytes" -> "unicode/utf8.EncodeRune"
  "encoding/json.unquoteBytes" -> "unicode/utf8.EncodeRune"
  "encoding/json.unquoteBytes" -> "unicode/utf8.DecodeRune"
  "encoding/json.unquoteBytes" -> "unicode/utf8.EncodeRune"
  "encoding/json.unquote" -> "encoding/json.unquoteBytes"
  "(*encoding/json.decodeState).rescanLiteral" -> "encoding/json.stateEndValue"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Mutex).Lock"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Map).missLocked"
  "(*sync.Map).LoadAndDelete" -> "(*sync.Mutex).Unlock"
  "(*sync.entry).delete" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.entry).delete" -> "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
  "(*sync.Map).LoadAndDelete" -> "(*sync.entry).delete"
  "(*sync.Map).Delete" -> "(*sync.Map).LoadAndDelete"
  "(*github.com/stefan-muehlebach/adagui/binding.base).RemoveListener" -> "(*sync.Map).Delete"
  "sort.Search" -> "(embed.FS).readDir$1"
  "sort.Search" -> "(embed.FS).readDir$2"
  "sort.Search" -> "periph.io/x/conn/v3/driver/driverreg.insertDriver$1"
  "sort.Search" -> "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure$1"
  "sort.Search" -> "periph.io/x/conn/v3/driver/driverreg.insertString$1"
  "sort.Search" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList$1$1"
  "sort.Search" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1$1"
  "sort.Search" -> "(embed.FS).lookup$1"
  "sort.Search" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1$1"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1" -> "sort.Search"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1" -> "golang.org/x/image/font/sfnt.u16"
  "syscall.getsockopt" -> "syscall.Syscall6"
  "syscall.getsockopt" -> "syscall.errnoErr"
  "(*image/jpeg.decoder).fill" -> "(*fmt.stringReader).Read"
  "(*image/jpeg.decoder).fill" -> "(*fmt.ss).Read"
  "(*image/jpeg.decoder).fill" -> "(*bytes.Buffer).Read"
  "(*image/jpeg.decoder).fill" -> "(*internal/poll.FD).Read"
  "(*image/jpeg.decoder).fill" -> "(*os.File).Read"
  "(*image/jpeg.decoder).fill" -> "(*compress/flate.decompressor).Read"
  "(*image/jpeg.decoder).fill" -> "(*bufio.Reader).Read"
  "(*image/jpeg.decoder).fill" -> "(*embed.openFile).Read"
  "(*image/jpeg.decoder).fill" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*image/jpeg.decoder).fill" -> "(*compress/zlib.reader).Read"
  "(*image/jpeg.decoder).fill" -> "(*embed.openDir).Read"
  "(*image/jpeg.decoder).fill" -> "(*image/png.decoder).Read"
  "(*image/jpeg.decoder).fill" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*image/jpeg.decoder).readByte" -> "(*image/jpeg.decoder).fill"
  "(*image/jpeg.decoder).readByteStuffedByte" -> "(*image/jpeg.decoder).readByte"
  "(*image/jpeg.decoder).readByteStuffedByte" -> "(*image/jpeg.decoder).readByte"
  "math.Round" -> "math.Float64bits"
  "math.Round" -> "math.Float64frombits"
  "github.com/stefan-muehlebach/gg/geom.fix" -> "math.Round"
  "github.com/stefan-muehlebach/gg/geom.fixp" -> "github.com/stefan-muehlebach/gg/geom.fix"
  "github.com/stefan-muehlebach/gg/geom.fixp" -> "github.com/stefan-muehlebach/gg/geom.fix"
  "(github.com/stefan-muehlebach/gg/geom.Point).Fixed" -> "github.com/stefan-muehlebach/gg/geom.fixp"
  "(*github.com/stefan-muehlebach/gg.Context).fill" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "(*github.com/stefan-muehlebach/gg.Context).fill" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/stefan-muehlebach/gg.Context).fill" -> "(*github.com/golang/freetype/raster.Rasterizer).Clear"
  "(*github.com/golang/freetype/raster.Rasterizer).saveCell" -> "(*github.com/golang/freetype/raster.Rasterizer).findCell"
  "(*github.com/golang/freetype/raster.Rasterizer).setCell" -> "(*github.com/golang/freetype/raster.Rasterizer).saveCell"
  "(*github.com/golang/freetype/raster.Rasterizer).Start" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).AddPath" -> "(*github.com/golang/freetype/raster.Rasterizer).Start"
  "(*github.com/golang/freetype/raster.Rasterizer).scan" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).scan" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).scan" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).scan"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).scan"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).scan"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).scan"
  "(*github.com/golang/freetype/raster.Rasterizer).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).setCell"
  "(*github.com/golang/freetype/raster.Rasterizer).AddPath" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.Rasterizer).Add2" -> "github.com/golang/freetype/raster.maxAbs"
  "(*github.com/golang/freetype/raster.Rasterizer).Add2" -> "strconv.Itoa"
  "(*github.com/golang/freetype/raster.Rasterizer).Add2" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.Rasterizer).Add2" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.Rasterizer).AddPath" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "(*github.com/golang/freetype/raster.Rasterizer).Add3" -> "github.com/golang/freetype/raster.maxAbs"
  "(*github.com/golang/freetype/raster.Rasterizer).Add3" -> "github.com/golang/freetype/raster.maxAbs"
  "(*github.com/golang/freetype/raster.Rasterizer).Add3" -> "strconv.Itoa"
  "(*github.com/golang/freetype/raster.Rasterizer).Add3" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.Rasterizer).Add3" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.Rasterizer).AddPath" -> "(*github.com/golang/freetype/raster.Rasterizer).Add3"
  "(*github.com/stefan-muehlebach/gg.Context).fill" -> "(*github.com/golang/freetype/raster.Rasterizer).AddPath"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(*github.com/golang/freetype/raster.Rasterizer).saveCell"
  "(github.com/golang/freetype/raster.AlphaOverPainter).Paint" -> "(*image.Alpha).Bounds"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(github.com/golang/freetype/raster.AlphaOverPainter).Paint"
  "(*github.com/golang/freetype/raster.RGBAPainter).Paint" -> "(*image.RGBA).Bounds"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(*github.com/golang/freetype/raster.RGBAPainter).Paint"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(*image.Alpha).AlphaAt"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.NRGBA64).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.Gray16).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.RGBA).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.RGBA64).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.CMYK).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.Alpha16).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(*image.Uniform).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.Alpha).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.NYCbCrA).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.YCbCr).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.Gray).RGBA"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(*github.com/stefan-muehlebach/gg.solidPattern).ColorAt"
  "(*github.com/stefan-muehlebach/gg.patternPainter).Paint" -> "(image/color.NRGBA).RGBA"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(*github.com/stefan-muehlebach/gg.patternPainter).Paint"
  "(github.com/golang/freetype/truetype.facePainter).Paint" -> "(*image.Alpha).Bounds"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(github.com/golang/freetype/truetype.facePainter).Paint"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(*github.com/golang/freetype/raster.Rasterizer).areaToAlpha"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(*github.com/golang/freetype/raster.Rasterizer).areaToAlpha"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(github.com/golang/freetype/raster.AlphaOverPainter).Paint"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(*github.com/golang/freetype/raster.RGBAPainter).Paint"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(*github.com/stefan-muehlebach/gg.patternPainter).Paint"
  "(*github.com/golang/freetype/raster.Rasterizer).Rasterize" -> "(github.com/golang/freetype/truetype.facePainter).Paint"
  "(*github.com/stefan-muehlebach/gg.Context).fill" -> "(*github.com/golang/freetype/raster.Rasterizer).Rasterize"
  "(github.com/stefan-muehlebach/gg/geom.Point).Int" -> "image.Pt"
  "(*os.File).setWriteDeadline" -> "(*os.File).checkValid"
  "(time.Time).IsZero" -> "(*time.Time).sec"
  "(time.Time).IsZero" -> "(*time.Time).nsec"
  "internal/poll.setDeadlineImpl" -> "(time.Time).IsZero"
  "internal/poll.setDeadlineImpl" -> "time.Until"
  "internal/poll.setDeadlineImpl" -> "(*internal/poll.FD).incref"
  "internal/poll.setDeadlineImpl" -> "(*internal/poll.FD).decref"
  "internal/poll.setDeadlineImpl" -> "internal/poll.runtime_pollSetDeadline"
  "(*internal/poll.FD).SetWriteDeadline" -> "internal/poll.setDeadlineImpl"
  "(*os.File).setWriteDeadline" -> "(*internal/poll.FD).SetWriteDeadline"
  "(*os.File).SetWriteDeadline" -> "(*os.File).setWriteDeadline"
  "syscall.EpollCtl" -> "syscall.RawSyscall6"
  "syscall.EpollCtl" -> "syscall.errnoErr"
  "errors.init" -> "unsafe.init"
  "internal/reflectlite.init" -> "internal/goarch.init"
  "internal/unsafeheader.init" -> "unsafe.init"
  "internal/reflectlite.init" -> "internal/unsafeheader.init"
  "internal/reflectlite.init" -> "unsafe.init"
  "internal/abi.init" -> "internal/goarch.init"
  "internal/abi.init" -> "unsafe.init"
  "internal/reflectlite.init" -> "internal/abi.init"
  "runtime.init" -> "internal/abi.init"
  "runtime.init" -> "internal/cpu.init"
  "runtime.init" -> "internal/goarch.init"
  "runtime.init" -> "unsafe.init"
  "runtime.init" -> "internal/goexperiment.init"
  "runtime/internal/atomic.init" -> "internal/cpu.init"
  "runtime/internal/atomic.init" -> "unsafe.init"
  "runtime.init" -> "runtime/internal/atomic.init"
  "runtime/internal/math.init" -> "internal/goarch.init"
  "runtime.init" -> "runtime/internal/math.init"
  "runtime/internal/sys.init" -> "internal/goarch.init"
  "runtime/internal/sys.init" -> "internal/goos.init"
  "runtime.init" -> "runtime/internal/sys.init"
  "runtime.init" -> "internal/coverage/rtcov.init"
  "internal/bytealg.init" -> "internal/cpu.init"
  "internal/bytealg.init" -> "unsafe.init"
  "internal/bytealg.init" -> "internal/bytealg.init#1"
  "runtime.init" -> "internal/bytealg.init"
  "runtime.init" -> "internal/goos.init"
  "runtime.init" -> "internal/godebugs.init"
  "runtime/internal/syscall.init" -> "unsafe.init"
  "runtime.init" -> "runtime/internal/syscall.init"
  "internal/chacha8rand.init" -> "internal/goarch.init"
  "internal/chacha8rand.init" -> "unsafe.init"
  "runtime.init" -> "internal/chacha8rand.init"
  "runtime.init" -> "runtime.float64frombits"
  "runtime.init" -> "runtime.efaceOf"
  "runtime.init" -> "runtime.efaceOf"
  "runtime.init" -> "runtime.efaceOf"
  "runtime.init" -> "runtime.efaceOf"
  "runtime.init" -> "runtime.efaceOf"
  "runtime.init" -> "runtime.efaceOf"
  "runtime.init$2" -> "runtime.sigdelset"
  "runtime.init$2" -> "runtime.sigdelset"
  "runtime.init$2" -> "runtime.sigdelset"
  "runtime.init" -> "runtime.init$2"
  "runtime.init" -> "internal/abi.FuncPCABIInternal"
  "runtime.init" -> "internal/abi.FuncPCABIInternal"
  "runtime.init#1" -> "runtime.throw"
  "runtime.init#1" -> "runtime.throw"
  "runtime.init#1" -> "runtime.lockInit"
  "runtime.init#1" -> "runtime.throw"
  "runtime.init#1" -> "runtime.throw"
  "runtime.init" -> "runtime.init#1"
  "runtime.init" -> "runtime.init#2"
  "runtime.init" -> "runtime.init#3"
  "runtime.init#4" -> "runtime.throw"
  "runtime.init" -> "runtime.init#4"
  "runtime.init#5" -> "runtime.throw"
  "runtime.init#5" -> "runtime.throw"
  "runtime.init" -> "runtime.init#5"
  "runtime.init#6" -> "internal/abi.FuncPCABI0"
  "runtime.init#6" -> "runtime.findfunc"
  "runtime.funcMaxSPDelta" -> "(runtime.funcInfo).entry"
  "runtime.funcMaxSPDelta" -> "(runtime.funcInfo).entry"
  "runtime.funcMaxSPDelta" -> "runtime.step"
  "runtime.init#6" -> "runtime.funcMaxSPDelta"
  "runtime.init#6" -> "internal/abi.FuncPCABIInternal"
  "runtime.init#6" -> "runtime.findfunc"
  "runtime.init#6" -> "runtime.funcMaxSPDelta"
  "runtime.init#6" -> "runtime.throw"
  "runtime.init" -> "runtime.init#6"
  "runtime.forcegchelper" -> "runtime.getg"
  "runtime.forcegchelper" -> "runtime.lockInit"
  "runtime.forcegchelper" -> "runtime.lock"
  "runtime.forcegchelper" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.forcegchelper" -> "runtime.throw"
  "runtime.forcegchelper" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.forcegchelper" -> "runtime.goparkunlock"
  "runtime.forcegchelper" -> "runtime.nanotime"
  "runtime.forcegchelper" -> "runtime.gcStart"
  "runtime.init#7" -> "runtime.forcegchelper"
  "runtime.init" -> "runtime.init#7"
  "runtime.init#8" -> "runtime.throw"
  "runtime.init" -> "runtime.init#8"
  "internal/reflectlite.init" -> "runtime.init"
  "errors.init" -> "internal/reflectlite.init"
  "errors.init" -> "errors.New"
  "errors.init" -> "internal/reflectlite.TypeOf"
  "errors.init" -> "(internal/reflectlite.rtype).Elem"
  "periph.io/x/host/v3/fs.init" -> "errors.init"
  "time.init" -> "errors.init"
  "time.init" -> "runtime.init"
  "syscall.init" -> "unsafe.init"
  "syscall.init" -> "runtime.init"
  "sync/atomic.init" -> "unsafe.init"
  "sync.init" -> "sync/atomic.init"
  "sync.init" -> "unsafe.init"
  "internal/race.init" -> "unsafe.init"
  "sync.init" -> "internal/race.init"
  "sync.init" -> "runtime.init"
  "sync.init#1" -> "sync.runtime_registerPoolCleanup"
  "sync.init" -> "sync.init#1"
  "sync.init#2" -> "sync.runtime_notifyListCheck"
  "sync.init" -> "sync.init#2"
  "syscall.init" -> "sync.init"
  "syscall.init" -> "internal/itoa.init"
  "syscall.init" -> "errors.init"
  "syscall.init" -> "internal/bytealg.init"
  "syscall.init" -> "sync/atomic.init"
  "internal/oserror.init" -> "errors.init"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "internal/oserror.init" -> "errors.New"
  "syscall.init" -> "internal/oserror.init"
  "syscall.init" -> "internal/race.init"
  "syscall.init" -> "syscall.runtime_envs"
  "syscall.prlimit1" -> "syscall.RawSyscall6"
  "syscall.prlimit1" -> "syscall.errnoErr"
  "syscall.prlimit" -> "syscall.prlimit1"
  "(*sync/atomic.Pointer[syscall.Rlimit]).Store[syscall.Rlimit]" -> "sync/atomic.StorePointer"
  "syscall.prlimit" -> "(*sync/atomic.Pointer[syscall.Rlimit]).Store[syscall.Rlimit]"
  "syscall.Getrlimit" -> "syscall.prlimit"
  "syscall.getrlimit" -> "syscall.RawSyscall"
  "syscall.getrlimit" -> "syscall.errnoErr"
  "syscall.Getrlimit" -> "syscall.getrlimit"
  "syscall.init#1" -> "syscall.Getrlimit"
  "syscall.init#1" -> "(*sync/atomic.Pointer[syscall.Rlimit]).Store[syscall.Rlimit]"
  "syscall.init#1" -> "syscall.adjustFileLimit"
  "syscall.setrlimit" -> "syscall.prlimit"
  "syscall.setrlimit1" -> "syscall.RawSyscall"
  "syscall.setrlimit1" -> "syscall.errnoErr"
  "syscall.setrlimit" -> "syscall.setrlimit1"
  "syscall.init#1" -> "syscall.setrlimit"
  "syscall.init" -> "syscall.init#1"
  "time.init" -> "syscall.init"
  "time.init" -> "unsafe.init"
  "time.init" -> "sync.init"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "time.init" -> "time.runtimeNano"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "io/fs.init" -> "time.init"
  "io/fs.init" -> "internal/oserror.init"
  "io/fs.init" -> "unicode/utf8.init"
  "path.init" -> "errors.init"
  "path.init" -> "internal/bytealg.init"
  "path.init" -> "unicode/utf8.init"
  "path.init" -> "errors.New"
  "io/fs.init" -> "path.init"
  "io/fs.init" -> "errors.init"
  "sort.init" -> "internal/reflectlite.init"
  "math/bits.init" -> "unsafe.init"
  "sort.init" -> "math/bits.init"
  "slices.init" -> "cmp.init"
  "slices.init" -> "unsafe.init"
  "slices.init" -> "math/bits.init"
  "sort.init" -> "slices.init"
  "io/fs.init" -> "sort.init"
  "io.init" -> "errors.init"
  "io.init" -> "sync.init"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io/fs.init" -> "io.init"
  "io/fs.init" -> "io/fs.errInvalid"
  "io/fs.init" -> "io/fs.errPermission"
  "io/fs.init" -> "io/fs.errExist"
  "io/fs.init" -> "io/fs.errNotExist"
  "io/fs.init" -> "io/fs.errClosed"
  "io/fs.init" -> "errors.New"
  "io/fs.init" -> "errors.New"
  "os.init" -> "io/fs.init"
  "os.init" -> "sort.init"
  "os.init" -> "io.init"
  "os.init" -> "runtime.init"
  "os.init" -> "sync.init"
  "os.init" -> "syscall.init"
  "os.init" -> "unsafe.init"
  "internal/testlog.init" -> "sync.init"
  "internal/testlog.init" -> "sync/atomic.init"
  "os.init" -> "internal/testlog.init"
  "internal/syscall/unix.init" -> "syscall.init"
  "internal/syscall/unix.init" -> "unsafe.init"
  "internal/syscall/unix.init" -> "sync/atomic.init"
  "internal/poll.init" -> "internal/syscall/unix.init"
  "internal/poll.init" -> "sync.init"
  "internal/poll.init" -> "syscall.init"
  "internal/poll.init" -> "errors.init"
  "internal/poll.init" -> "sync/atomic.init"
  "internal/poll.init" -> "time.init"
  "internal/poll.init" -> "unsafe.init"
  "internal/poll.init" -> "io.init"
  "internal/poll.init" -> "runtime.init"
  "internal/poll.init" -> "errors.New"
  "internal/poll.init" -> "errors.New"
  "internal/poll.init" -> "errors.New"
  "os.init" -> "internal/poll.init"
  "os.init" -> "errors.init"
  "os.init" -> "sync/atomic.init"
  "os.init" -> "time.init"
  "os.init" -> "internal/itoa.init"
  "internal/syscall/execenv.init" -> "syscall.init"
  "os.init" -> "internal/syscall/execenv.init"
  "internal/safefilepath.init" -> "errors.init"
  "internal/safefilepath.init" -> "runtime.init"
  "internal/safefilepath.init" -> "errors.New"
  "os.init" -> "internal/safefilepath.init"
  "os.init" -> "internal/syscall/unix.init"
  "os.init" -> "internal/bytealg.init"
  "os.init" -> "os.errNoDeadline"
  "os.init" -> "os.errDeadlineExceeded"
  "os.init" -> "errors.New"
  "os.init" -> "errors.New"
  "os.NewFile" -> "internal/syscall/unix.Fcntl"
  "os.NewFile" -> "internal/syscall/unix.HasNonblockFlag"
  "os.NewFile" -> "os.newFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "errors.New"
  "os.init#1" -> "os.runtime_args"
  "os.init" -> "os.init#1"
  "periph.io/x/host/v3/fs.init" -> "os.init"
  "periph.io/x/host/v3/fs.init" -> "sync.init"
  "math.init" -> "math/bits.init"
  "math.init" -> "unsafe.init"
  "strconv.init" -> "math.init"
  "strconv.init" -> "errors.init"
  "strconv.init" -> "internal/bytealg.init"
  "strconv.init" -> "math/bits.init"
  "strconv.init" -> "unicode/utf8.init"
  "strconv.init" -> "errors.New"
  "strconv.init" -> "errors.New"
  "periph.io/x/host/v3/fs.init" -> "strconv.init"
  "strings.init" -> "internal/bytealg.init"
  "strings.init" -> "unicode/utf8.init"
  "strings.init" -> "unsafe.init"
  "strings.init" -> "errors.init"
  "strings.init" -> "io.init"
  "strings.init" -> "sync.init"
  "strings.init" -> "unicode.init"
  "periph.io/x/host/v3/fs.init" -> "strings.init"
  "periph.io/x/host/v3/fs.init" -> "syscall.init"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).wrap" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).Halt" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.Pin).Halt" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/sysfs.seekWrite" -> "(*os.File).Seek"
  "periph.io/x/host/v3/sysfs.seekWrite" -> "(*os.File).Write"
  "(*periph.io/x/host/v3/sysfs.Pin).haltEdge" -> "periph.io/x/host/v3/sysfs.seekWrite"
  "(*periph.io/x/host/v3/sysfs.Pin).wrap" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.Pin).haltEdge" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).haltEdge" -> "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge"
  "(*periph.io/x/host/v3/sysfs.Pin).Halt" -> "(*periph.io/x/host/v3/sysfs.Pin).haltEdge"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/sysfs.Pin).Halt"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).setFunction" -> "(*periph.io/x/host/v3/allwinner.PinPL).function"
  "(*periph.io/x/host/v3/allwinner.PinPL).setFunction" -> "(*periph.io/x/host/v3/allwinner.PinPL).function"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).setFunction"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).open"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "periph.io/x/host/v3/sysfs.seekWrite"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "periph.io/x/host/v3/sysfs.seekWrite"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "periph.io/x/host/v3/sysfs.fileIOOpenDefault"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "periph.io/x/host/v3/sysfs.seekWrite"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "syscall.EpollCreate1" -> "syscall.RawSyscall"
  "syscall.EpollCreate1" -> "syscall.errnoErr"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "syscall.EpollCreate1"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "syscall.EpollCtl"
  "syscall.EpollCreate" -> "syscall.EpollCreate1"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "syscall.EpollCreate"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*errors.errorString).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(runtime.errorString).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(time.fileSizeError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(syscall.Errno).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(context.deadlineExceededError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(compress/flate.CorruptInputError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*time.ParseError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*io/fs.PathError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*reflect.ValueError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(runtime.plainError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*os.SyscallError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(image/png.FormatError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(compress/flate.InternalError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*fmt.wrapError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*fmt.wrapErrors).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(internal/poll.errNetClosing).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*internal/reflectlite.ValueError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*encoding/json.UnsupportedValueError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(encoding/base64.CorruptInputError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*encoding/json.MarshalerError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*internal/bisect.parseError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(image/jpeg.UnsupportedError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*strconv.NumError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*encoding/json.SyntaxError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*runtime.TypeAssertionError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(runtime.errorAddressString).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(image/jpeg.FormatError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(image/png.UnsupportedError).Error"
  "(*periph.io/x/host/v3/fs.event).makeEvent" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*periph.io/x/host/v3/fs.Event).MakeEvent" -> "(*periph.io/x/host/v3/fs.event).makeEvent"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/fs.Event).MakeEvent"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "periph.io/x/host/v3/sysfs.seekWrite"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).WaitForEdge"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*os.File).Fd"
  "(*periph.io/x/host/v3/sysfs.Pin).In" -> "(*os.File).Close"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).Number"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/allwinner.PinPL).In" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).In"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).In"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).In"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).In"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).Halt" -> "(*periph.io/x/host/v3/sysfs.Pin).Halt"
  "(*periph.io/x/host/v3/allwinner.PinPL).Halt" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "(*periph.io/x/host/v3/allwinner.PinPL).Halt"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).open"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).haltEdge"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "periph.io/x/host/v3/sysfs.seekWrite"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "periph.io/x/host/v3/sysfs.seekWrite"
  "(*periph.io/x/host/v3/sysfs.Pin).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "(*periph.io/x/host/v3/allwinner.PinPL).FastOut"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "(*periph.io/x/host/v3/allwinner.PinPL).setFunction"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).Out" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).Out"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).Out"
  "(periph.io/x/conn/v3/pin.Func).Generalize" -> "strings.SplitN"
  "(periph.io/x/conn/v3/pin.Func).Generalize" -> "strings.TrimRightFunc"
  "(periph.io/x/conn/v3/pin.Func).Generalize" -> "strings.TrimRightFunc"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(periph.io/x/conn/v3/pin.Func).Generalize"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).Halt"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(periph.io/x/conn/v3/pin.Func).Generalize"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).setFunction"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).setFunction"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).setFunction"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).setFunction"
  "(*periph.io/x/host/v3/allwinner.PinPL).SetFunc" -> "(*periph.io/x/host/v3/allwinner.PinPL).setFunction"
  "(internal/reflectlite.rtype).Name" -> "(*internal/abi.Type).HasName"
  "(internal/reflectlite.rtype).Name" -> "(internal/reflectlite.rtype).String"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.Embed).Translate" -> "github.com/stefan-muehlebach/gg/geom.Translate"
  "(*github.com/stefan-muehlebach/adagui.Embed).Translate" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui.Embed).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).Translate"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SetSize" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SetSize" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos"
  "(*github.com/stefan-muehlebach/adagui.Point).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Point).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Point).SetPos" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Point).SetPos" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Point).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Point).SetPos"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetPos" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetPos" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetPos" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Circle).SetPos"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout" -> "(*github.com/stefan-muehlebach/adagui.PaddedLayout).Layout"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*container/list.List).Len"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Point).SetPos"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*container/list.List).Len"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).Visible"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).Visible"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.BoxLayout).isSpacer"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.BoxLayout).isSpacer"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Circle).SetPos"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).MinSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout" -> "(*github.com/stefan-muehlebach/adagui.BoxLayout).Layout"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout" -> "(*github.com/stefan-muehlebach/adagui.NullLayout).Layout"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*internal/poll.FD).SetsockoptByte" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptByte" -> "(*internal/poll.FD).decref"
  "syscall.setsockopt" -> "syscall.Syscall6"
  "syscall.setsockopt" -> "syscall.errnoErr"
  "syscall.SetsockoptByte" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptByte" -> "syscall.SetsockoptByte"
  "periph.io/x/host/v3/rpi.init#1" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "internal/bisect.init" -> "runtime.init"
  "internal/bisect.init" -> "sync.init"
  "internal/bisect.init" -> "sync/atomic.init"
  "internal/bisect.init" -> "unsafe.init"
  "internal/godebug.init" -> "internal/bisect.init"
  "internal/godebug.init" -> "internal/godebugs.init"
  "internal/godebug.init" -> "sync.init"
  "internal/godebug.init" -> "sync/atomic.init"
  "internal/godebug.init" -> "unsafe.init"
  "internal/godebug.init#1" -> "internal/godebug.setUpdate"
  "internal/godebug.init#1" -> "internal/godebug.setNewIncNonDefault"
  "internal/godebug.init" -> "internal/godebug.init#1"
  "(github.com/stefan-muehlebach/gg/color.HSP).Alpha" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*runtime.sigctxt).r23" -> "(*runtime.sigctxt).regs"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.runtime_goroutineProfileWithLabels"
  "runtime/pprof.writeThreadCreate$1" -> "runtime.ThreadCreateProfile"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.writeThreadCreate$1"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.writeThreadCreate$1"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.runtime_goroutineProfileWithLabels"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Len"
  "(*runtime/pprof.runtimeProfile).Stack" -> "(*runtime.StackRecord).Stack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Stack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Label"
  "runtime/pprof.printCountProfile$1" -> "(*strings.Builder).Reset"
  "runtime/pprof.printCountProfile$1" -> "fmt.Fprintf"
  "runtime/pprof.printCountProfile$1" -> "fmt.Fprintf"
  "runtime/pprof.printCountProfile$1" -> "(*strings.Builder).WriteString"
  "runtime/pprof.printCountProfile$1" -> "(*runtime/pprof.labelMap).String"
  "runtime/pprof.printCountProfile$1" -> "(*strings.Builder).WriteString"
  "runtime/pprof.printCountProfile$1" -> "(*strings.Builder).String"
  "runtime/pprof.printCountProfile" -> "runtime/pprof.printCountProfile$1"
  "runtime/pprof.printCountProfile" -> "sort.Sort"
  "(*text/tabwriter.Writer).Init" -> "(*text/tabwriter.Writer).reset"
  "text/tabwriter.NewWriter" -> "(*text/tabwriter.Writer).Init"
  "runtime/pprof.printCountProfile" -> "text/tabwriter.NewWriter"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Len"
  "runtime/pprof.printCountProfile" -> "fmt.Fprintf"
  "compress/gzip.NewWriterLevel" -> "fmt.Errorf"
  "(*compress/flate.compressor).reset" -> "(*compress/flate.huffmanBitWriter).reset"
  "(*compress/flate.compressor).reset" -> "(*compress/flate.deflateFast).reset"
  "(*compress/flate.Writer).Reset" -> "(*compress/flate.compressor).reset"
  "(*compress/flate.Writer).Reset" -> "(*compress/flate.compressor).fillWindow"
  "(*compress/flate.Writer).Reset" -> "(*compress/flate.compressor).reset"
  "(*compress/gzip.Writer).init" -> "(*compress/flate.Writer).Reset"
  "compress/gzip.NewWriterLevel" -> "(*compress/gzip.Writer).init"
  "runtime/pprof.newProfileBuilder" -> "compress/gzip.NewWriterLevel"
  "runtime/pprof.newProfileBuilder" -> "time.Now"
  "(*runtime/pprof.profileBuilder).readMapping" -> "os.ReadFile"
  "bytes.Cut" -> "bytes.Index"
  "runtime/pprof.parseProcSelfMaps" -> "bytes.Cut"
  "runtime/pprof.parseProcSelfMaps$1" -> "bytes.Cut"
  "bytes.TrimLeft" -> "bytes.trimLeftByte"
  "bytes.TrimLeft" -> "bytes.makeASCIISet"
  "bytes.trimLeftASCII" -> "(*bytes.asciiSet).contains"
  "bytes.TrimLeft" -> "bytes.trimLeftASCII"
  "bytes.trimLeftUnicode" -> "unicode/utf8.DecodeRune"
  "bytes.trimLeftUnicode" -> "bytes.containsRune"
  "bytes.TrimLeft" -> "bytes.trimLeftUnicode"
  "runtime/pprof.parseProcSelfMaps$1" -> "bytes.TrimLeft"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.parseProcSelfMaps" -> "strings.Cut"
  "runtime/pprof.parseProcSelfMaps" -> "strconv.ParseUint"
  "runtime/pprof.parseProcSelfMaps" -> "strconv.ParseUint"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.parseProcSelfMaps" -> "strconv.ParseUint"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.parseProcSelfMaps$1"
  "runtime/pprof.elfBuildID" -> "os.Open"
  "runtime/pprof.elfBuildID" -> "(*os.File).Close"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "fmt.Sprintf"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint16"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint64"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(*os.File).ReadAt"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.littleEndian).Uint32"
  "runtime/pprof.elfBuildID" -> "(encoding/binary.bigEndian).Uint32"
  "runtime/pprof.parseProcSelfMaps" -> "runtime/pprof.elfBuildID"
  "(*runtime/pprof.profileBuilder).addMapping" -> "(*runtime/pprof.profileBuilder).addMappingEntry"
  "runtime/pprof.parseProcSelfMaps" -> "(*runtime/pprof.profileBuilder).addMapping"
  "(*runtime/pprof.profileBuilder).readMapping" -> "runtime/pprof.parseProcSelfMaps"
  "(*runtime/pprof.profileBuilder).readMapping" -> "(*runtime/pprof.profileBuilder).addMappingEntry"
  "runtime/pprof.newProfileBuilder" -> "(*runtime/pprof.profileBuilder).readMapping"
  "runtime/pprof.printCountProfile" -> "runtime/pprof.newProfileBuilder"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).int64"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).int64"
  "(*runtime/pprof.profileBuilder).pbValueType" -> "(*runtime/pprof.protobuf).endMessage"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountProfile" -> "fmt.Fprintf"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Stack"
  "runtime/pprof.printStackRecord" -> "runtime.CallersFrames"
  "runtime/pprof.printStackRecord" -> "(*runtime.Frames).Next"
  "runtime/pprof.printStackRecord" -> "fmt.Fprintf"
  "runtime/pprof.printStackRecord" -> "fmt.Fprintf"
  "runtime/pprof.printStackRecord" -> "strings.HasPrefix"
  "runtime/pprof.printStackRecord" -> "runtime/pprof.printStackRecord"
  "runtime/pprof.printStackRecord" -> "fmt.Fprintf"
  "runtime/pprof.printCountProfile" -> "runtime/pprof.printStackRecord"
  "(*text/tabwriter.Writer).flush" -> "(*text/tabwriter.Writer).handlePanic"
  "(*text/tabwriter.Writer).flush" -> "(*text/tabwriter.Writer).flushNoDefers"
  "(*text/tabwriter.Writer).Flush" -> "(*text/tabwriter.Writer).flush"
  "runtime/pprof.printCountProfile" -> "(*text/tabwriter.Writer).Flush"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Stack"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).reset"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "runtime/pprof.runtime_expandFinalInlineFrame"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.pcDeck).reset"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.protobuf).uint64Opt" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "runtime/pprof.runtime_FrameSymbolName"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "runtime/pprof.runtime_FrameStartLine"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbLine" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).pbLine"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.protobuf).endMessage"
  "hash/crc32.Update" -> "hash/crc32.update"
  "(*compress/gzip.Writer).Write" -> "hash/crc32.Update"
  "(*compress/gzip.Writer).Write" -> "(*compress/flate.Writer).Write"
  "(*compress/gzip.Writer).Write" -> "time.Unix"
  "(time.Time).After" -> "(*time.Time).sec"
  "(time.Time).After" -> "(*time.Time).sec"
  "(time.Time).After" -> "(*time.Time).nsec"
  "(time.Time).After" -> "(*time.Time).nsec"
  "(*compress/gzip.Writer).Write" -> "(time.Time).After"
  "(time.Time).Unix" -> "(*time.Time).unixSec"
  "(*compress/gzip.Writer).Write" -> "(time.Time).Unix"
  "(*compress/gzip.Writer).Write" -> "(encoding/binary.littleEndian).PutUint32"
  "(*compress/gzip.Writer).Write" -> "(*bytes.Buffer).Write"
  "(*compress/gzip.Writer).Write" -> "(*os.File).Write"
  "(*compress/gzip.Writer).Write" -> "(*internal/poll.FD).Write"
  "(*compress/gzip.Writer).Write" -> "(io.discard).Write"
  "(*compress/gzip.Writer).Write" -> "compress/flate.NewWriter"
  "(*compress/gzip.Writer).Write" -> "(*fmt.pp).Write"
  "(*compress/gzip.Writer).Write" -> "(*bufio.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "errors.New"
  "(*compress/gzip.Writer).writeBytes" -> "(encoding/binary.littleEndian).PutUint16"
  "(*compress/gzip.Writer).writeBytes" -> "(*bytes.Buffer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*os.File).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*internal/poll.FD).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(io.discard).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*fmt.pp).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*bufio.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*compress/zlib.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*text/tabwriter.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*image/png.encoder).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*bufio.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*strings.Builder).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*compress/flate.dictWriter).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*compress/flate.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*hash/adler32.digest).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*text/tabwriter.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*image/png.encoder).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*compress/zlib.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*compress/flate.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*strings.Builder).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*compress/flate.dictWriter).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*hash/crc32.digest).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*hash/adler32.digest).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*bytes.Buffer).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*os.File).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*internal/poll.FD).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(io.discard).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*hash/crc32.digest).Write"
  "(*compress/gzip.Writer).writeBytes" -> "(*fmt.pp).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/gzip.Writer).writeBytes"
  "(*compress/gzip.Writer).Write" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/gzip.Writer).writeString" -> "errors.New"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).WriteString"
  "(*bufio.Writer).WriteString" -> "(*bytes.Buffer).WriteString"
  "(*bufio.Writer).WriteString" -> "(*strings.Builder).WriteString"
  "(*os.File).WriteString" -> "(*os.File).Write"
  "(*bufio.Writer).WriteString" -> "(*os.File).WriteString"
  "(*fmt.pp).WriteString" -> "(*fmt.buffer).writeString"
  "(*bufio.Writer).WriteString" -> "(*fmt.pp).WriteString"
  "(*bufio.Writer).WriteString" -> "(io.discard).WriteString"
  "(*bufio.Writer).WriteString" -> "(*bufio.Writer).Flush"
  "io.WriteString" -> "(*bufio.Writer).WriteString"
  "io.WriteString" -> "(*bytes.Buffer).WriteString"
  "io.WriteString" -> "(*golang.org/x/text/transform.Writer).Write"
  "io.WriteString" -> "(*os.File).WriteString"
  "io.WriteString" -> "(*fmt.pp).WriteString"
  "io.WriteString" -> "(io.discard).WriteString"
  "io.WriteString" -> "(*strings.Builder).Write"
  "io.WriteString" -> "(*image/png.encoder).Write"
  "io.WriteString" -> "(*internal/godebug.runtimeStderr).Write"
  "io.WriteString" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "io.WriteString" -> "(*text/tabwriter.Writer).Write"
  "io.WriteString" -> "(*compress/zlib.Writer).Write"
  "io.WriteString" -> "(*hash/crc32.digest).Write"
  "io.WriteString" -> "(*compress/flate.Writer).Write"
  "io.WriteString" -> "(*hash/adler32.digest).Write"
  "io.WriteString" -> "(*strings.Builder).WriteString"
  "io.WriteString" -> "(*bytes.Buffer).Write"
  "io.WriteString" -> "(*os.File).Write"
  "io.WriteString" -> "(*internal/poll.FD).Write"
  "io.WriteString" -> "(io.discard).Write"
  "io.WriteString" -> "(*compress/flate.dictWriter).Write"
  "io.WriteString" -> "(*fmt.pp).Write"
  "io.WriteString" -> "(*bufio.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "io.WriteString"
  "(*compress/gzip.Writer).writeString" -> "(*bytes.Buffer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*os.File).Write"
  "(*compress/gzip.Writer).writeString" -> "(*internal/poll.FD).Write"
  "(*compress/gzip.Writer).writeString" -> "(io.discard).Write"
  "(*compress/gzip.Writer).writeString" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/gzip.Writer).writeString" -> "(*fmt.pp).Write"
  "(*compress/gzip.Writer).writeString" -> "(*bufio.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*compress/zlib.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*text/tabwriter.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*image/png.encoder).Write"
  "(*compress/gzip.Writer).writeString" -> "(*bufio.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/gzip.Writer).writeString" -> "(*strings.Builder).Write"
  "(*compress/gzip.Writer).writeString" -> "(*compress/flate.dictWriter).Write"
  "(*compress/gzip.Writer).writeString" -> "(*compress/flate.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*hash/adler32.digest).Write"
  "(*compress/gzip.Writer).writeString" -> "(*text/tabwriter.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*image/png.encoder).Write"
  "(*compress/gzip.Writer).writeString" -> "(*compress/zlib.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*compress/flate.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*strings.Builder).Write"
  "(*compress/gzip.Writer).writeString" -> "(*compress/flate.dictWriter).Write"
  "(*compress/gzip.Writer).writeString" -> "(*hash/crc32.digest).Write"
  "(*compress/gzip.Writer).writeString" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/gzip.Writer).writeString" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/gzip.Writer).writeString" -> "(*hash/adler32.digest).Write"
  "(*compress/gzip.Writer).writeString" -> "(*bytes.Buffer).Write"
  "(*compress/gzip.Writer).writeString" -> "(*os.File).Write"
  "(*compress/gzip.Writer).writeString" -> "(*internal/poll.FD).Write"
  "(*compress/gzip.Writer).writeString" -> "(io.discard).Write"
  "(*compress/gzip.Writer).writeString" -> "(*hash/crc32.digest).Write"
  "(*compress/gzip.Writer).writeString" -> "(*fmt.pp).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/gzip.Writer).writeString"
  "(*compress/gzip.Writer).Write" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/gzip.Writer).Write" -> "(*hash/crc32.digest).Write"
  "(*compress/gzip.Writer).Write" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/flate.dictWriter).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/gzip.Writer).writeString"
  "(*compress/gzip.Writer).Write" -> "(*strings.Builder).Write"
  "(*compress/gzip.Writer).Write" -> "(*hash/adler32.digest).Write"
  "(*compress/gzip.Writer).Write" -> "(*text/tabwriter.Writer).Write"
  "(*compress/gzip.Writer).Write" -> "(*image/png.encoder).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/zlib.Writer).Write"
  "(*compress/gzip.Writer).Write" -> "(*compress/flate.Writer).Write"
  "(*runtime/pprof.profileBuilder).flush" -> "(*compress/gzip.Writer).Write"
  "(*runtime/pprof.profileBuilder).emitLocation" -> "(*runtime/pprof.profileBuilder).flush"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "runtime/pprof.allFrames" -> "runtime.CallersFrames"
  "runtime/pprof.allFrames" -> "(*runtime.Frames).Next"
  "runtime/pprof.allFrames" -> "(*runtime.Frames).Next"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "runtime/pprof.allFrames"
  "(*runtime/pprof.pcDeck).tryAdd" -> "runtime/pprof.runtime_FrameSymbolName"
  "(*runtime/pprof.pcDeck).tryAdd" -> "runtime/pprof.runtime_FrameSymbolName"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).tryAdd"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).tryAdd"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.profileBuilder).emitLocation"
  "(*runtime/pprof.profileBuilder).appendLocsForStack" -> "(*runtime/pprof.pcDeck).tryAdd"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.runtimeProfile).Label"
  "(*runtime/pprof.profileBuilder).build" -> "time.Now"
  "(time.Time).UnixNano" -> "(*time.Time).unixSec"
  "(time.Time).UnixNano" -> "(*time.Time).nsec"
  "(*runtime/pprof.profileBuilder).build" -> "(time.Time).UnixNano"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "(*runtime/pprof.profileBuilder).build" -> "(time.Time).Sub"
  "(*runtime/pprof.profileBuilder).build" -> "(time.Duration).Nanoseconds"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.protobuf).int64s" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).int64s" -> "(*runtime/pprof.protobuf).length"
  "(*runtime/pprof.protobuf).int64s" -> "(*runtime/pprof.protobuf).int64"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).int64s"
  "(*runtime/pprof.protobuf).uint64s" -> "(*runtime/pprof.protobuf).varint"
  "(*runtime/pprof.protobuf).uint64s" -> "(*runtime/pprof.protobuf).length"
  "(*runtime/pprof.protobuf).uint64s" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).uint64s"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*encoding/json.encodeState).marshal$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.fatalthrow$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*internal/godebug.Setting).IncNonDefault"
  "(*runtime/pprof.profileBuilder).pbSample" -> "hash/crc32.ieeeInit"
  "(*runtime/pprof.profileBuilder).pbSample" -> "os/signal.loop"
  "(*runtime/pprof.profileBuilder).pbSample" -> "time.FixedZone$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime/pprof.printCountProfile$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.sweepone$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "flag.isZeroValue$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.stopTheWorld$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.asyncPreempt"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.goready$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.init$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcStart$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.ReadMemStats$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.cgoCheckTypedBlock$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.startTheWorld$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.chanrecv$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.throw$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.SetFinalizer$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.SetFinalizer$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "syscall.copyenv"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcResetMarkState"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcStart$3"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.callers$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*fmt.ss).Token$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "reflect.methodValueCall"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.profileBuilder).build$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "flag.commandLineUsage"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime/pprof.writeHeapProto$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.chansend$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "os/signal.Notify$1$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcStart$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.casgstatus$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.osyield"
  "(*runtime/pprof.profileBuilder).pbSample" -> "flag.init$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "internal/poll.CopyFileRange$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "sync.poolCleanup"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.asyncPreempt2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "internal/poll.runtime_pollServerInit"
  "(*runtime/pprof.profileBuilder).pbSample" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.Stack$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*flag.FlagSet).defaultUsage"
  "(*runtime/pprof.profileBuilder).pbSample" -> "time.initLocal"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime/pprof.profileBuilder).flush"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*internal/godebug.Setting).Value$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.sweepLocked).sweep$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.sweepLocked).sweep$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "reflect.embeddedIfaceMethStub"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.futexwakeup$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.wbBufFlush$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcBgMarkWorker$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.mspinning"
  "(*runtime/pprof.profileBuilder).pbSample" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.flushallmcaches"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*internal/godebug.Setting).register"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.persistentalloc$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.tracefree$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.mheap).freeSpan$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.doRecordGoroutineProfile$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime._LostContendedRuntimeLock"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.mLockProfile).captureStack$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkDone$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkDone$3"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkDone$4"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.entersyscallblock$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.entersyscallblock$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.entersyscallblock_handoff"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.exitsyscall$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.exitsyscall$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.cgoCheckPtrWrite$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.unreachableMethod"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.heapSetType$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.tracealloc$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.wirep$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.wirep$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.sigreturn__sigaction"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.cgoSigtramp"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.sigtramp"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.forEachP$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkTermination$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkTermination$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcControllerCommit"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkTermination$3"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.freeStackSpans"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkTermination$5"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.exitsyscallfast$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.allocm$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.mstart"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.getempty$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.p).destroy$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcAssistAlloc$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.mheap).alloc$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.mProf_Malloc$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.mmap$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.traceMap).put$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.fatal$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(runtime.traceWriter).refill$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.sigaction$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.gcMarkTermination$4$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.exitsyscallfast_reacquired$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.traceStringTable).put$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.rwmutex).rlock$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.traceThreadDestroy$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.malg$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.allocmcache$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.freemcache$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.reentersyscall$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.reentersyscall$2"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.entersyscall_sysmon"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.runSafePointFn"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.entersyscall_gcwait"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime._VDSO"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime._ExternalCode"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime._GC"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime._System"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.sigpanic"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.sysSigaction$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.markrootFreeGStacks"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.markroot$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.printArgs$3"
  "(*runtime/pprof.profileBuilder).pbSample" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.freeSomeWbufs$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "(*runtime.pageAlloc).scavenge$1"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime._LostExternalCode"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime._LostSIGPROFDuringAtomic64"
  "(*runtime/pprof.profileBuilder).pbSample" -> "runtime.munmap$1"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbSample"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).startMessage"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).uint64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).int64Opt"
  "(*runtime/pprof.protobuf).bool" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.protobuf).bool" -> "(*runtime/pprof.protobuf).uint64"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).bool"
  "(*runtime/pprof.profileBuilder).pbMapping" -> "(*runtime/pprof.protobuf).endMessage"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.profileBuilder).pbMapping"
  "(*runtime/pprof.protobuf).string" -> "(*runtime/pprof.protobuf).length"
  "(*runtime/pprof.protobuf).strings" -> "(*runtime/pprof.protobuf).string"
  "(*runtime/pprof.profileBuilder).build" -> "(*runtime/pprof.protobuf).strings"
  "(*runtime/pprof.profileBuilder).build" -> "(*compress/gzip.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*compress/gzip.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*compress/flate.Writer).Close"
  "(*compress/gzip.Writer).Close" -> "(encoding/binary.littleEndian).PutUint32"
  "(*compress/gzip.Writer).Close" -> "(encoding/binary.littleEndian).PutUint32"
  "(*compress/gzip.Writer).Close" -> "(*bytes.Buffer).Write"
  "(*compress/gzip.Writer).Close" -> "(*os.File).Write"
  "(*compress/gzip.Writer).Close" -> "(*internal/poll.FD).Write"
  "(*compress/gzip.Writer).Close" -> "(io.discard).Write"
  "(*compress/gzip.Writer).Close" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*compress/gzip.Writer).Close" -> "(*fmt.pp).Write"
  "(*compress/gzip.Writer).Close" -> "(*bufio.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*compress/flate.dictWriter).Write"
  "(*compress/gzip.Writer).Close" -> "(*strings.Builder).Write"
  "(*compress/gzip.Writer).Close" -> "(*hash/crc32.digest).Write"
  "(*compress/gzip.Writer).Close" -> "(*text/tabwriter.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*compress/flate.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*compress/zlib.Writer).Write"
  "(*compress/gzip.Writer).Close" -> "(*internal/godebug.runtimeStderr).Write"
  "(*compress/gzip.Writer).Close" -> "(*image/png.encoder).Write"
  "(*compress/gzip.Writer).Close" -> "(*hash/adler32.digest).Write"
  "(*runtime/pprof.profileBuilder).build" -> "(*compress/gzip.Writer).Close"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).build"
  "runtime/pprof.printCountProfile" -> "(*runtime/pprof.profileBuilder).pbSample"
  "runtime/pprof.writeRuntimeProfile" -> "runtime/pprof.printCountProfile"
  "runtime.chanbuf" -> "runtime.add"
  "runtime.racenotify" -> "runtime.chanbuf"
  "runtime.racenotify" -> "runtime.raceacquire"
  "runtime.racenotify" -> "runtime.racerelease"
  "runtime.raceacquireg" -> "runtime.throw"
  "runtime.racenotify" -> "runtime.raceacquireg"
  "runtime.racereleaseg" -> "runtime.throw"
  "runtime.racenotify" -> "runtime.racereleaseg"
  "runtime.racereleaseacquire" -> "runtime.throw"
  "runtime.racenotify" -> "runtime.racereleaseacquire"
  "runtime.racereleaseacquireg" -> "runtime.throw"
  "runtime.racenotify" -> "runtime.racereleaseacquireg"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).Init" -> "github.com/stefan-muehlebach/adagui/binding.NewBool"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).Init" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).Init" -> "(*github.com/stefan-muehlebach/adagui/binding.base).AddListener"
  "time.div" -> "(*time.Time).nsec"
  "time.div" -> "(*time.Time).sec"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnLongPress" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "(*periph.io/x/host/v3/bcm283x.Pin).wrap" -> "fmt.Errorf"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat1$1" -> "golang.org/x/image/font/sfnt.u16"
  "(*os.File).ReadDir" -> "(*os.File).readdir"
  "(*periph.io/x/host/v3/sysfs.Pin).SetFunc" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/sysfs.Pin).SetFunc" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*periph.io/x/host/v3/sysfs.Pin).SetFunc" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*periph.io/x/host/v3/sysfs.Pin).SetFunc" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.Pin).SetFunc" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*fmt.ss).convertFloat" -> "fmt.indexRune"
  "(*fmt.ss).convertFloat" -> "strconv.ParseFloat"
  "(*fmt.ss).convertFloat" -> "strconv.ParseFloat"
  "(*fmt.ss).convertFloat" -> "fmt.hasX"
  "(*fmt.ss).convertFloat" -> "strconv.Atoi"
  "(*fmt.ss).convertFloat" -> "(*fmt.ss).error"
  "(*fmt.ss).convertFloat" -> "math.Ldexp"
  "(*fmt.ss).convertFloat" -> "(*fmt.ss).error"
  "(*fmt.ss).convertFloat" -> "(*fmt.ss).error"
  "encoding/binary.init" -> "errors.init"
  "encoding/binary.init" -> "io.init"
  "encoding/binary.init" -> "math.init"
  "reflect.init" -> "internal/abi.init"
  "reflect.init" -> "internal/goarch.init"
  "reflect.init" -> "unsafe.init"
  "reflect.init" -> "internal/bytealg.init"
  "reflect.init" -> "internal/unsafeheader.init"
  "reflect.init" -> "strconv.init"
  "reflect.init" -> "sync.init"
  "reflect.init" -> "unicode.init"
  "reflect.init" -> "unicode/utf8.init"
  "reflect.init" -> "errors.init"
  "reflect.init" -> "internal/itoa.init"
  "reflect.init" -> "math.init"
  "reflect.init" -> "runtime.init"
  "reflect.init" -> "reflect.rtypeOf"
  "reflect.init" -> "reflect.rtypeOf"
  "reflect.init" -> "reflect.rtypeOf"
  "encoding/binary.init" -> "reflect.init"
  "encoding/binary.init" -> "sync.init"
  "encoding/binary.init" -> "errors.New"
  "periph.io/x/host/v3/distro.init" -> "encoding/binary.init"
  "periph.io/x/host/v3/distro.init" -> "os.init"
  "periph.io/x/host/v3/distro.init" -> "strconv.init"
  "periph.io/x/host/v3/distro.init" -> "strings.init"
  "periph.io/x/host/v3/distro.init" -> "sync.init"
  "periph.io/x/host/v3/distro.init" -> "unicode.init"
  "(*runtime.profAtomic).load" -> "runtime/internal/atomic.Load64"
  "(*runtime.profBuf).canWriteTwoRecords" -> "(*runtime.profAtomic).load"
  "(*runtime.profBuf).canWriteTwoRecords" -> "(*runtime.profAtomic).load"
  "(*runtime.profBuf).canWriteTwoRecords" -> "(runtime.profIndex).tagCount"
  "(*runtime.profBuf).canWriteTwoRecords" -> "(runtime.profIndex).tagCount"
  "(*runtime.profBuf).canWriteTwoRecords" -> "runtime.countSub"
  "(*runtime.profBuf).canWriteTwoRecords" -> "(runtime.profIndex).dataCount"
  "(*runtime.profBuf).canWriteTwoRecords" -> "(runtime.profIndex).dataCount"
  "(*runtime.profBuf).canWriteTwoRecords" -> "runtime.countSub"
  "(*runtime.profBuf).canWriteTwoRecords" -> "(runtime.profIndex).dataCount"
  "command-line-arguments.NewPoint$1" -> "(*github.com/stefan-muehlebach/adagui.Point).Pos"
  "command-line-arguments.NewPoint$1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewPoint$1" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewPoint$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "context.init" -> "errors.init"
  "context.init" -> "internal/reflectlite.init"
  "context.init" -> "sync.init"
  "context.init" -> "sync/atomic.init"
  "context.init" -> "time.init"
  "context.init" -> "errors.New"
  "context.init" -> "context.init#1"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "image.NewNRGBA" -> "image.pixelBufferLength"
  "image.NewNRGBA" -> "(image.Rectangle).Dx"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "image.NewGray" -> "image.pixelBufferLength"
  "image.NewGray" -> "(image.Rectangle).Dx"
  "(*image/png.decoder).readImagePass" -> "image.NewGray"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "image.NewPaletted" -> "image.pixelBufferLength"
  "image.NewPaletted" -> "(image.Rectangle).Dx"
  "(*image/png.decoder).readImagePass" -> "image.NewPaletted"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "image.NewRGBA" -> "image.pixelBufferLength"
  "image.NewRGBA" -> "(image.Rectangle).Dx"
  "(*image/png.decoder).readImagePass" -> "image.NewRGBA"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "image.NewNRGBA64" -> "image.pixelBufferLength"
  "image.NewNRGBA64" -> "(image.Rectangle).Dx"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA64"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA64"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "image.NewGray16" -> "image.pixelBufferLength"
  "image.NewGray16" -> "(image.Rectangle).Dx"
  "(*image/png.decoder).readImagePass" -> "image.NewGray16"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA64"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "(*image/png.decoder).readImagePass" -> "image.NewNRGBA64"
  "(*image/png.decoder).readImagePass" -> "image.Rect"
  "(*image/png.decoder).readImagePass" -> "image.NewRGBA64"
  "(*image/png.decoder).readImagePass" -> "io.ReadFull"
  "image/png.filterPaeth" -> "image/png.abs"
  "image/png.filterPaeth" -> "image/png.abs"
  "image/png.filterPaeth" -> "image/png.abs"
  "(*image/png.decoder).readImagePass" -> "image/png.filterPaeth"
  "(*image.NRGBA).SetNRGBA" -> "(image.Point).In"
  "(*image.NRGBA).SetNRGBA" -> "(*image.NRGBA).PixOffset"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA).SetNRGBA"
  "(*image.Gray).SetGray" -> "(image.Point).In"
  "(*image.Gray).SetGray" -> "(*image.Gray).PixOffset"
  "(*image/png.decoder).readImagePass" -> "(*image.Gray).SetGray"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA).SetNRGBA"
  "(*image/png.decoder).readImagePass" -> "(*image.Gray).SetGray"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA).SetNRGBA"
  "(*image/png.decoder).readImagePass" -> "(*image.Gray).SetGray"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA).SetNRGBA"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA).SetNRGBA"
  "(*image.Paletted).SetColorIndex" -> "(image.Point).In"
  "(*image.Paletted).SetColorIndex" -> "(*image.Paletted).PixOffset"
  "(*image/png.decoder).readImagePass" -> "(*image.Paletted).SetColorIndex"
  "(*image/png.decoder).readImagePass" -> "(*image.Paletted).SetColorIndex"
  "(*image/png.decoder).readImagePass" -> "(*image.Paletted).SetColorIndex"
  "(*image.NRGBA64).SetNRGBA64" -> "(image.Point).In"
  "(*image.NRGBA64).SetNRGBA64" -> "(*image.NRGBA64).PixOffset"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA64).SetNRGBA64"
  "(*image.Gray16).SetGray16" -> "(image.Point).In"
  "(*image.Gray16).SetGray16" -> "(*image.Gray16).PixOffset"
  "(*image/png.decoder).readImagePass" -> "(*image.Gray16).SetGray16"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA64).SetNRGBA64"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA64).SetNRGBA64"
  "(*image/png.decoder).readImagePass" -> "(*image.RGBA64).SetRGBA64"
  "(*image/png.decoder).readImagePass" -> "(*image.NRGBA64).SetNRGBA64"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnLeave" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "(*reflect.rtype).ChanDir" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).ChanDir" -> "(*reflect.rtype).String"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).In" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "periph.io/x/conn/v3/physic.atod" -> "errors.New"
  "periph.io/x/conn/v3/physic.atod" -> "errors.New"
  "periph.io/x/conn/v3/physic.atod" -> "errors.New"
  "periph.io/x/conn/v3/physic.atod" -> "errors.New"
  "periph.io/x/conn/v3/physic.atod" -> "errors.New"
  "periph.io/x/conn/v3/physic.valueOfUnitString" -> "periph.io/x/conn/v3/physic.atod"
  "periph.io/x/conn/v3/physic.valueOfUnitString" -> "unicode/utf8.DecodeRuneInString"
  "periph.io/x/conn/v3/physic.valueOfUnitString" -> "periph.io/x/conn/v3/physic.dtoi"
  "periph.io/x/conn/v3/physic.valueOfUnitString" -> "errors.New"
  "periph.io/x/conn/v3/physic.valueOfUnitString" -> "periph.io/x/conn/v3/physic.parseSIPrefix"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.valueOfUnitString"
  "periph.io/x/conn/v3/physic.hasSuffixes" -> "strings.HasSuffix"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.hasSuffixes"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "(periph.io/x/conn/v3/physic.ElectricCurrent).String"
  "periph.io/x/conn/v3/physic.maxValueErr" -> "errors.New"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.maxValueErr"
  "periph.io/x/conn/v3/physic.notNumberUnitErr" -> "errors.New"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.notNumberUnitErr"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "(periph.io/x/conn/v3/physic.ElectricCurrent).String"
  "periph.io/x/conn/v3/physic.minValueErr" -> "errors.New"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.minValueErr"
  "periph.io/x/conn/v3/physic.noUnitErr" -> "errors.New"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.noUnitErr"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.hasSuffixes"
  "periph.io/x/conn/v3/physic.unknownUnitPrefixErr" -> "errors.New"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.unknownUnitPrefixErr"
  "periph.io/x/conn/v3/physic.incorrectUnitErr" -> "errors.New"
  "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set" -> "periph.io/x/conn/v3/physic.incorrectUnitErr"
  "flag.init" -> "encoding.init"
  "flag.init" -> "errors.init"
  "fmt.init" -> "errors.init"
  "fmt.init" -> "sort.init"
  "fmt.init" -> "strconv.init"
  "fmt.init" -> "unicode/utf8.init"
  "internal/fmtsort.init" -> "reflect.init"
  "internal/fmtsort.init" -> "sort.init"
  "fmt.init" -> "internal/fmtsort.init"
  "fmt.init" -> "io.init"
  "fmt.init" -> "os.init"
  "fmt.init" -> "reflect.init"
  "fmt.init" -> "sync.init"
  "fmt.init" -> "math.init"
  "fmt.init" -> "errors.New"
  "fmt.init" -> "errors.New"
  "flag.init" -> "fmt.init"
  "flag.init" -> "io.init"
  "flag.init" -> "os.init"
  "flag.init" -> "reflect.init"
  "flag.init" -> "runtime.init"
  "flag.init" -> "sort.init"
  "flag.init" -> "strconv.init"
  "flag.init" -> "strings.init"
  "flag.init" -> "time.init"
  "flag.init" -> "errors.New"
  "flag.init" -> "errors.New"
  "flag.init" -> "errors.New"
  "flag.init" -> "flag.NewFlagSet"
  "flag.init" -> "flag.init#1"
  "(*golang.org/x/image/font/sfnt.glyfIter).close" -> "golang.org/x/image/font/sfnt.midPoint"
  "(*internal/poll.FD).RawControl" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).RawControl" -> "(*internal/poll.FD).decref"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "reflect.cvtInt" -> "(reflect.flag).ro"
  "reflect.cvtInt" -> "(reflect.Value).Int"
  "reflect.makeInt" -> "(*reflect.rtype).common"
  "reflect.makeInt" -> "reflect.unsafe_New"
  "reflect.makeInt" -> "(*internal/abi.Type).Size"
  "reflect.makeInt" -> "(*internal/abi.Type).Kind"
  "reflect.cvtInt" -> "reflect.makeInt"
  "(*runtime.profBuf).hasOverflow" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*reflect.rtype).FieldByIndex" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).FieldByIndex" -> "(*reflect.rtype).String"
  "(*reflect.structType).FieldByIndex" -> "reflect.toType"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Field"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Elem"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Elem"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).FieldByIndex" -> "(*reflect.structType).FieldByIndex"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat0$1" -> "(*golang.org/x/text/encoding/charmap.Charmap).EncodeRune"
  "(*golang.org/x/image/font/sfnt.Font).GlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat0$1"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4$1" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4$1" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).GlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4$1"
  "(*golang.org/x/image/font/sfnt.Font).GlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6$1"
  "(*golang.org/x/image/font/sfnt.Font).GlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12$1"
  "(*golang.org/x/image/font/sfnt.Font).Metrics" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Metrics" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Metrics" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Metrics" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Metrics" -> "golang.org/x/image/font/sfnt.scale"
  "periph.io/x/conn/v3/spi/spireg.init" -> "errors.init"
  "periph.io/x/conn/v3/spi/spireg.init" -> "strconv.init"
  "periph.io/x/conn/v3/spi/spireg.init" -> "strings.init"
  "periph.io/x/conn/v3/spi/spireg.init" -> "sync.init"
  "periph.io/x/conn/v3/pin.init" -> "strconv.init"
  "periph.io/x/conn/v3/pin.init" -> "strings.init"
  "periph.io/x/conn/v3/pin.init" -> "errors.init"
  "periph.io/x/conn/v3.init" -> "strconv.init"
  "periph.io/x/conn/v3/pin.init" -> "periph.io/x/conn/v3.init"
  "periph.io/x/conn/v3/pin.init" -> "periph.io/x/conn/v3/pin.init#1"
  "periph.io/x/conn/v3/spi.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/conn/v3/spi.init" -> "io.init"
  "periph.io/x/conn/v3/spi.init" -> "strconv.init"
  "periph.io/x/conn/v3/spi.init" -> "periph.io/x/conn/v3.init"
  "periph.io/x/conn/v3/gpio.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/conn/v3/gpio.init" -> "errors.init"
  "periph.io/x/conn/v3/gpio.init" -> "strconv.init"
  "periph.io/x/conn/v3/gpio.init" -> "strings.init"
  "periph.io/x/conn/v3/gpio.init" -> "time.init"
  "periph.io/x/conn/v3/physic.init" -> "time.init"
  "periph.io/x/conn/v3/physic.init" -> "periph.io/x/conn/v3.init"
  "periph.io/x/conn/v3/physic.init" -> "errors.init"
  "periph.io/x/conn/v3/physic.init" -> "strconv.init"
  "periph.io/x/conn/v3/physic.init" -> "strings.init"
  "periph.io/x/conn/v3/physic.init" -> "unicode/utf8.init"
  "periph.io/x/conn/v3/physic.init" -> "errors.New"
  "periph.io/x/conn/v3/physic.init" -> "errors.New"
  "periph.io/x/conn/v3/physic.init" -> "errors.New"
  "periph.io/x/conn/v3/gpio.init" -> "periph.io/x/conn/v3/physic.init"
  "periph.io/x/conn/v3/gpio.init" -> "errors.New"
  "periph.io/x/conn/v3/gpio.init" -> "periph.io/x/conn/v3/gpio.init#1"
  "periph.io/x/conn/v3/spi.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/conn/v3/spi.init" -> "periph.io/x/conn/v3/physic.init"
  "periph.io/x/conn/v3/spi/spireg.init" -> "periph.io/x/conn/v3/spi.init"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Close" -> "(*periph.io/x/host/v3/sysfs.Pin).Halt"
  "(*periph.io/x/host/v3/bcm283x.Pin).Halt" -> "(*periph.io/x/host/v3/sysfs.Pin).Halt"
  "(*periph.io/x/host/v3/bcm283x.Pin).haltDMA" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).reset"
  "(*periph.io/x/host/v3/bcm283x.Pin).haltDMA" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "(*periph.io/x/host/v3/bcm283x.Pin).haltDMA" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).haltClock" -> "(*periph.io/x/host/v3/bcm283x.Pin).haltDMA"
  "periph.io/x/host/v3/bcm283x.resetPWMClockSource" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).reset"
  "periph.io/x/host/v3/bcm283x.resetPWMClockSource" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.calcSource" -> "fmt.Errorf"
  "periph.io/x/host/v3/bcm283x.calcSource" -> "fmt.Errorf"
  "periph.io/x/host/v3/bcm283x.calcSource" -> "periph.io/x/host/v3/bcm283x.findDivisorExact"
  "periph.io/x/host/v3/bcm283x.calcSource" -> "periph.io/x/host/v3/bcm283x.findDivisorExact"
  "periph.io/x/host/v3/bcm283x.findDivisorOversampled" -> "periph.io/x/host/v3/bcm283x.findDivisorExact"
  "periph.io/x/host/v3/bcm283x.calcSource" -> "periph.io/x/host/v3/bcm283x.findDivisorOversampled"
  "periph.io/x/host/v3/bcm283x.calcSource" -> "periph.io/x/host/v3/bcm283x.findDivisorOversampled"
  "periph.io/x/host/v3/bcm283x.calcSource" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.clock).set" -> "periph.io/x/host/v3/bcm283x.calcSource"
  "(*periph.io/x/host/v3/bcm283x.clock).setRaw" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.clock).setRaw" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.Nanospin" -> "periph.io/x/host/v3/bcm283x.ReadTime"
  "periph.io/x/host/v3/cpu.nanospinLinux" -> "(time.Duration).Nanoseconds"
  "syscall.NsecToTimespec" -> "syscall.setTimespec"
  "periph.io/x/host/v3/cpu.nanospinLinux" -> "syscall.NsecToTimespec"
  "syscall.Nanosleep" -> "syscall.Syscall"
  "syscall.Nanosleep" -> "syscall.errnoErr"
  "periph.io/x/host/v3/cpu.nanospinLinux" -> "syscall.Nanosleep"
  "periph.io/x/host/v3/cpu.Nanospin" -> "periph.io/x/host/v3/cpu.nanospinLinux"
  "periph.io/x/host/v3/cpu.nanospinTime" -> "time.Now"
  "periph.io/x/host/v3/cpu.nanospinTime" -> "time.Since"
  "periph.io/x/host/v3/cpu.Nanospin" -> "periph.io/x/host/v3/cpu.nanospinTime"
  "periph.io/x/host/v3/bcm283x.Nanospin" -> "periph.io/x/host/v3/cpu.Nanospin"
  "periph.io/x/host/v3/bcm283x.Nanospin" -> "periph.io/x/host/v3/bcm283x.ReadTime"
  "(*periph.io/x/host/v3/bcm283x.clock).setRaw" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "(*periph.io/x/host/v3/bcm283x.clock).setRaw" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "(*periph.io/x/host/v3/bcm283x.clock).set" -> "(*periph.io/x/host/v3/bcm283x.clock).setRaw"
  "periph.io/x/host/v3/bcm283x.resetPWMClockSource" -> "(*periph.io/x/host/v3/bcm283x.clock).set"
  "(*periph.io/x/host/v3/bcm283x.Pin).haltClock" -> "periph.io/x/host/v3/bcm283x.resetPWMClockSource"
  "(*periph.io/x/host/v3/bcm283x.Pin).Halt" -> "(*periph.io/x/host/v3/bcm283x.Pin).haltClock"
  "(*periph.io/x/host/v3/bcm283x.Pin).Halt" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Close" -> "(*periph.io/x/host/v3/bcm283x.Pin).Halt"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Close" -> "(periph.io/x/conn/v3/gpio.invalidPin).Halt"
  "(*periph.io/x/host/v3/allwinner.Pin).Halt" -> "(*periph.io/x/host/v3/sysfs.Pin).Halt"
  "(*periph.io/x/host/v3/allwinner.Pin).wrap" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/allwinner.Pin).Halt" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Close" -> "(*periph.io/x/host/v3/allwinner.Pin).Halt"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Close" -> "(*periph.io/x/host/v3/allwinner.PinPL).Halt"
  "(*github.com/stefan-muehlebach/adagui.Embed).Init" -> "github.com/stefan-muehlebach/gg/geom.Identity"
  "(*github.com/stefan-muehlebach/adagui.Embed).Init" -> "github.com/stefan-muehlebach/gg/geom.Identity"
  "(*github.com/stefan-muehlebach/adagui.Embed).Init" -> "github.com/stefan-muehlebach/gg/geom.Identity"
  "(*github.com/stefan-muehlebach/adagui.Embed).Init" -> "github.com/stefan-muehlebach/gg/geom.Identity"
  "(*github.com/stefan-muehlebach/adagui.Shape).Init" -> "(*github.com/stefan-muehlebach/adagui.Embed).Init"
  "(*github.com/stefan-muehlebach/adagui.Shape).Init" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Init"
  "(*github.com/stefan-muehlebach/adagui.Shape).Init" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewPoint" -> "(*github.com/stefan-muehlebach/adagui.Shape).Init"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init" -> "github.com/stefan-muehlebach/adagui/props.NewProperties"
  "github.com/stefan-muehlebach/adagui.NewPoint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewPoint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Width"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Height" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "github.com/stefan-muehlebach/adagui.NewPoint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Height"
  "github.com/stefan-muehlebach/adagui.NewPoint" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "command-line-arguments.NewPoint" -> "github.com/stefan-muehlebach/adagui.NewPoint"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnPress" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "command-line-arguments.NewPoint" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnPress"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDrag" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "command-line-arguments.NewPoint" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDrag"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnRelease" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "command-line-arguments.NewPoint" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnRelease"
  "command-line-arguments.NewCanvas$4" -> "command-line-arguments.NewPoint"
  "command-line-arguments.NewCanvas$4" -> "(*github.com/stefan-muehlebach/adagui.Point).SetPos"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout"
  "log.Fatal" -> "fmt.Sprint"
  "(*log.Logger).Output" -> "(*log.Logger).output"
  "log.Fatal" -> "(*log.Logger).Output"
  "os.Exit" -> "os.runtime_beforeExit"
  "os.Exit" -> "syscall.Exit"
  "internal/testlog.PanicOnExit0" -> "(*sync.Mutex).Lock"
  "internal/testlog.PanicOnExit0" -> "(*sync.Mutex).Unlock"
  "os.Exit" -> "internal/testlog.PanicOnExit0"
  "log.Fatal" -> "os.Exit"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add" -> "log.Fatal"
  "(*container/list.List).lazyInit" -> "(*container/list.List).Init"
  "(*container/list.List).PushBack" -> "(*container/list.List).lazyInit"
  "(*container/list.List).insertValue" -> "(*container/list.List).insert"
  "(*container/list.List).PushBack" -> "(*container/list.List).insertValue"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add" -> "(*container/list.List).PushBack"
  "command-line-arguments.NewCanvas$4" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add"
  "command-line-arguments.NewCanvas$4" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "periph.io/x/host/v3/pine64.init" -> "errors.init"
  "periph.io/x/host/v3/pine64.init" -> "strings.init"
  "periph.io/x/conn/v3/driver/driverreg.init" -> "errors.init"
  "periph.io/x/conn/v3/driver/driverreg.init" -> "strconv.init"
  "periph.io/x/conn/v3/driver/driverreg.init" -> "strings.init"
  "periph.io/x/conn/v3/driver/driverreg.init" -> "sync.init"
  "periph.io/x/conn/v3/driver/driverreg.init" -> "periph.io/x/conn/v3/driver.init"
  "periph.io/x/host/v3/pine64.init" -> "periph.io/x/conn/v3/driver/driverreg.init"
  "periph.io/x/host/v3/pine64.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/conn/v3/pin/pinreg.init" -> "errors.init"
  "periph.io/x/conn/v3/pin/pinreg.init" -> "strconv.init"
  "periph.io/x/conn/v3/pin/pinreg.init" -> "sync.init"
  "periph.io/x/conn/v3/pin/pinreg.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/conn/v3/gpio/gpioreg.init" -> "errors.init"
  "periph.io/x/conn/v3/gpio/gpioreg.init" -> "strconv.init"
  "periph.io/x/conn/v3/gpio/gpioreg.init" -> "sync.init"
  "periph.io/x/conn/v3/gpio/gpioreg.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/conn/v3/pin/pinreg.init" -> "periph.io/x/conn/v3/gpio/gpioreg.init"
  "periph.io/x/conn/v3/pin/pinreg.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/host/v3/pine64.init" -> "periph.io/x/conn/v3/pin/pinreg.init"
  "periph.io/x/host/v3/allwinner.init" -> "strings.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/host/v3/sysfs.init" -> "errors.init"
  "periph.io/x/host/v3/sysfs.init" -> "os.init"
  "periph.io/x/host/v3/sysfs.init" -> "strconv.init"
  "periph.io/x/host/v3/sysfs.init" -> "strings.init"
  "periph.io/x/host/v3/sysfs.init" -> "sync.init"
  "periph.io/x/host/v3/sysfs.init" -> "sync/atomic.init"
  "periph.io/x/host/v3/sysfs.init" -> "syscall.init"
  "periph.io/x/host/v3/sysfs.init" -> "time.init"
  "periph.io/x/host/v3/sysfs.init" -> "fmt.init"
  "periph.io/x/host/v3/sysfs.init" -> "io.init"
  "path/filepath.init" -> "errors.init"
  "path/filepath.init" -> "os.init"
  "path/filepath.init" -> "runtime.init"
  "path/filepath.init" -> "sort.init"
  "path/filepath.init" -> "strings.init"
  "path/filepath.init" -> "unicode/utf8.init"
  "path/filepath.init" -> "io/fs.init"
  "path/filepath.init" -> "slices.init"
  "path/filepath.init" -> "syscall.init"
  "path/filepath.init" -> "errors.New"
  "periph.io/x/host/v3/sysfs.init" -> "path/filepath.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/driver/driverreg.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/gpio/gpioreg.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/physic.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/fs.init"
  "periph.io/x/host/v3/sysfs.init" -> "sort.init"
  "periph.io/x/host/v3/sysfs.init" -> "unsafe.init"
  "periph.io/x/conn/v3/i2c.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/conn/v3/i2c.init" -> "errors.init"
  "periph.io/x/conn/v3/i2c.init" -> "io.init"
  "periph.io/x/conn/v3/i2c.init" -> "strconv.init"
  "periph.io/x/conn/v3/i2c.init" -> "periph.io/x/conn/v3.init"
  "periph.io/x/conn/v3/i2c.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/conn/v3/i2c.init" -> "periph.io/x/conn/v3/physic.init"
  "periph.io/x/conn/v3/i2c.init" -> "errors.New"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/i2c.init"
  "periph.io/x/conn/v3/i2c/i2creg.init" -> "errors.init"
  "periph.io/x/conn/v3/i2c/i2creg.init" -> "strconv.init"
  "periph.io/x/conn/v3/i2c/i2creg.init" -> "strings.init"
  "periph.io/x/conn/v3/i2c/i2creg.init" -> "sync.init"
  "periph.io/x/conn/v3/i2c/i2creg.init" -> "periph.io/x/conn/v3/i2c.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/i2c/i2creg.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/spi.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/conn/v3/spi/spireg.init"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/fs.IOW"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/fs.IOW"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/fs.IOW"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/fs.IOW"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/fs.IOW"
  "periph.io/x/host/v3/sysfs.init#1" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/sysfs.init#1"
  "periph.io/x/host/v3/sysfs.init#2" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/sysfs.init#2"
  "periph.io/x/host/v3/sysfs.init#3" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/sysfs.init#3"
  "periph.io/x/host/v3/sysfs.init#4" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/sysfs.init#4"
  "periph.io/x/host/v3/sysfs.init#5" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/sysfs.init" -> "periph.io/x/host/v3/sysfs.init#5"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/sysfs.init"
  "periph.io/x/host/v3/allwinner.init" -> "sync.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/distro.init"
  "periph.io/x/host/v3/allwinner.init" -> "errors.init"
  "periph.io/x/host/v3/allwinner.init" -> "fmt.init"
  "log.init" -> "fmt.init"
  "log.init" -> "io.init"
  "log.init" -> "log/internal.init"
  "log.init" -> "os.init"
  "log.init" -> "runtime.init"
  "log.init" -> "sync.init"
  "log.init" -> "sync/atomic.init"
  "log.init" -> "time.init"
  "(*log.Logger).SetOutput" -> "(*sync.Mutex).Lock"
  "(*log.Logger).SetOutput" -> "(*sync.Mutex).Unlock"
  "(*sync/atomic.Bool).Store" -> "sync/atomic.b32"
  "(*sync/atomic.Bool).Store" -> "sync/atomic.StoreUint32"
  "(*log.Logger).SetOutput" -> "(*sync/atomic.Bool).Store"
  "log.New" -> "(*log.Logger).SetOutput"
  "(*sync/atomic.Pointer[string]).Store[string]" -> "sync/atomic.StorePointer"
  "(*log.Logger).SetPrefix" -> "(*sync/atomic.Pointer[string]).Store[string]"
  "log.New" -> "(*log.Logger).SetPrefix"
  "(*sync/atomic.Int32).Store" -> "sync/atomic.StoreInt32"
  "(*log.Logger).SetFlags" -> "(*sync/atomic.Int32).Store"
  "log.New" -> "(*log.Logger).SetFlags"
  "log.init" -> "log.New"
  "log.init" -> "log.init#1"
  "periph.io/x/host/v3/allwinner.init" -> "log.init"
  "periph.io/x/host/v3/allwinner.init" -> "os.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/conn/v3/driver/driverreg.init"
  "bytes.init" -> "errors.init"
  "bytes.init" -> "io.init"
  "bytes.init" -> "unicode/utf8.init"
  "bytes.init" -> "internal/bytealg.init"
  "bytes.init" -> "unicode.init"
  "bytes.init" -> "errors.New"
  "bytes.init" -> "errors.New"
  "bytes.init" -> "errors.New"
  "periph.io/x/host/v3/pmem.init" -> "bytes.init"
  "periph.io/x/host/v3/pmem.init" -> "io.init"
  "periph.io/x/host/v3/pmem.init" -> "os.init"
  "periph.io/x/host/v3/pmem.init" -> "reflect.init"
  "periph.io/x/host/v3/pmem.init" -> "sync.init"
  "periph.io/x/host/v3/pmem.init" -> "unsafe.init"
  "periph.io/x/host/v3/pmem.init" -> "syscall.init"
  "periph.io/x/host/v3/pmem.init" -> "encoding/binary.init"
  "periph.io/x/host/v3/pmem.init" -> "errors.init"
  "periph.io/x/host/v3/pmem.init" -> "fmt.init"
  "math/rand.init" -> "math.init"
  "math/rand.init" -> "internal/godebug.init"
  "math/rand.init" -> "sync.init"
  "math/rand.init" -> "sync/atomic.init"
  "math/rand.init" -> "unsafe.init"
  "math/rand.init" -> "internal/godebug.New"
  "periph.io/x/host/v3/pmem.init" -> "math/rand.init"
  "periph.io/x/host/v3/pmem.init" -> "periph.io/x/host/v3/fs.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/pmem.init"
  "periph.io/x/host/v3/allwinner.init" -> "path.init"
  "periph.io/x/host/v3/allwinner.init" -> "strconv.init"
  "periph.io/x/host/v3/allwinner.init" -> "time.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/conn/v3/gpio/gpioreg.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/conn/v3/physic.init"
  "periph.io/x/host/v3/cpu.init" -> "io.init"
  "periph.io/x/host/v3/cpu.init" -> "os.init"
  "periph.io/x/host/v3/cpu.init" -> "strconv.init"
  "periph.io/x/host/v3/cpu.init" -> "strings.init"
  "periph.io/x/host/v3/cpu.init" -> "sync.init"
  "periph.io/x/host/v3/cpu.init" -> "time.init"
  "periph.io/x/host/v3/cpu.init" -> "periph.io/x/host/v3/fs.init"
  "periph.io/x/host/v3/cpu.init" -> "syscall.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/cpu.init"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/allwinner.init#1"
  "periph.io/x/host/v3/allwinner.init#2" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/allwinner.init#2"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/allwinner.init#3"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/allwinner.init#4"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/allwinner.init#5"
  "periph.io/x/host/v3/allwinner.init#6" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/allwinner.init#6"
  "periph.io/x/host/v3/allwinner.init" -> "periph.io/x/host/v3/allwinner.init#7"
  "periph.io/x/host/v3/pine64.init" -> "periph.io/x/host/v3/allwinner.init"
  "periph.io/x/host/v3/pine64.init" -> "periph.io/x/host/v3/distro.init"
  "periph.io/x/host/v3/pine64.init#1" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/pine64.init" -> "periph.io/x/host/v3/pine64.init#1"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).RawWrite" -> "(*internal/poll.pollDesc).waitWrite"
  "internal/poll.SendFile" -> "(*internal/poll.FD).writeLock"
  "internal/poll.SendFile" -> "(*internal/poll.FD).writeUnlock"
  "internal/poll.SendFile" -> "(*internal/poll.pollDesc).prepareWrite"
  "syscall.Sendfile" -> "internal/race.ReleaseMerge"
  "syscall.sendfile" -> "syscall.Syscall6"
  "syscall.sendfile" -> "syscall.errnoErr"
  "syscall.Sendfile" -> "syscall.sendfile"
  "internal/poll.SendFile" -> "syscall.Sendfile"
  "internal/poll.SendFile" -> "(*internal/poll.pollDesc).waitWrite"
  "(*os.File).writeTo$1" -> "internal/poll.SendFile"
  "(*internal/poll.FD).RawWrite" -> "(*os.File).writeTo$1"
  "(github.com/stefan-muehlebach/gg/color.HSI).Interpolate" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*compress/zlib.reader).Reset" -> "io.ReadFull"
  "bufio.NewReaderSize" -> "(*bufio.Reader).reset"
  "bufio.NewReader" -> "bufio.NewReaderSize"
  "(*compress/zlib.reader).Reset" -> "bufio.NewReader"
  "(*compress/zlib.reader).Reset" -> "(encoding/binary.bigEndian).Uint16"
  "(*compress/zlib.reader).Reset" -> "io.ReadFull"
  "(*compress/zlib.reader).Reset" -> "(encoding/binary.bigEndian).Uint32"
  "(*compress/zlib.reader).Reset" -> "hash/adler32.Checksum"
  "(*compress/zlib.reader).Reset" -> "hash/adler32.New"
  "(*compress/zlib.reader).Reset" -> "(*compress/zlib.reader).Reset"
  "compress/flate.fixedHuffmanDecoderInit" -> "(*sync.Once).Do"
  "compress/flate.NewReaderDict" -> "compress/flate.fixedHuffmanDecoderInit"
  "(*bufio.Reader).Reset" -> "(*bufio.Reader).reset"
  "(*compress/flate.decompressor).makeReader" -> "(*bufio.Reader).Reset"
  "(*compress/flate.decompressor).makeReader" -> "bufio.NewReader"
  "compress/flate.NewReaderDict" -> "(*compress/flate.decompressor).makeReader"
  "compress/flate.NewReaderDict" -> "(*compress/flate.dictDecoder).init"
  "(*compress/zlib.reader).Reset" -> "compress/flate.NewReaderDict"
  "compress/flate.NewReader" -> "compress/flate.fixedHuffmanDecoderInit"
  "compress/flate.NewReader" -> "(*compress/flate.decompressor).makeReader"
  "compress/flate.NewReader" -> "(*compress/flate.dictDecoder).init"
  "(*compress/zlib.reader).Reset" -> "compress/flate.NewReader"
  "(*compress/flate.decompressor).Reset" -> "(*compress/flate.decompressor).makeReader"
  "(*compress/flate.decompressor).Reset" -> "(*compress/flate.dictDecoder).init"
  "(*compress/zlib.reader).Reset" -> "(*compress/flate.decompressor).Reset"
  "compress/zlib.NewReaderDict" -> "(*compress/zlib.reader).Reset"
  "compress/zlib.NewReader" -> "compress/zlib.NewReaderDict"
  "(*image/png.decoder).decode" -> "compress/zlib.NewReader"
  "(*image/png.decoder).decode" -> "(*internal/reflectlite.ValueError).Error"
  "(*image/png.decoder).decode" -> "(github.com/golang/freetype/truetype.FormatError).Error"
  "(*image/png.decoder).decode" -> "(*compress/flate.decompressor).Close"
  "(*image/png.decoder).decode" -> "(*embed.openDir).Close"
  "(*image/png.decoder).decode" -> "(image/jpeg.FormatError).Error"
  "(*image/png.decoder).decode" -> "(runtime.errorAddressString).Error"
  "(*image/png.decoder).decode" -> "(*compress/zlib.reader).Read"
  "(*image/png.decoder).decode" -> "(*internal/poll.FD).Close"
  "(*image/png.decoder).decode" -> "(*embed.openFile).Close"
  "(*image/png.decoder).decode" -> "(*os.File).Close"
  "(*compress/zlib.reader).Close" -> "(*compress/flate.decompressor).Close"
  "(*compress/zlib.reader).Close" -> "(*embed.openFile).Close"
  "(*compress/zlib.reader).Close" -> "(*compress/zlib.reader).Close"
  "(*compress/zlib.reader).Close" -> "(*embed.openDir).Close"
  "(*compress/zlib.reader).Close" -> "(*internal/poll.FD).Close"
  "(*compress/zlib.reader).Close" -> "(*os.File).Close"
  "(*image/png.decoder).decode" -> "(*compress/zlib.reader).Close"
  "(*image/png.decoder).decode" -> "(*runtime.TypeAssertionError).Error"
  "(*image/png.decoder).decode" -> "(github.com/golang/freetype/truetype.UnsupportedError).Error"
  "(*image/png.decoder).decode" -> "(*image/png.decoder).readImagePass"
  "(*image/png.decoder).decode" -> "(*image/png.decoder).readImagePass"
  "(*image/png.decoder).decode" -> "(*image/png.decoder).readImagePass"
  "(*image/png.decoder).mergePassInto" -> "(*image.Uniform).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.Alpha).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.RGBA64).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.RGBA).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(image.Rectangle).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.YCbCr).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.Paletted).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.Gray).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.CMYK).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.NRGBA).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.NRGBA64).Bounds"
  "(*image/png.decoder).mergePassInto" -> "(*image.Gray16).Bounds"
  "(*image/png.decoder).decode" -> "(*image/png.decoder).mergePassInto"
  "(*image/png.decoder).decode" -> "(*strconv.NumError).Error"
  "(*image/png.decoder).decode" -> "(*encoding/json.SyntaxError).Error"
  "(*image/png.decoder).decode" -> "(compress/flate.CorruptInputError).Error"
  "(*image/png.decoder).decode" -> "(*embed.openDir).Read"
  "(*image/png.decoder).decode" -> "(*encoding/json.MarshalerError).Error"
  "(*image/png.decoder).decode" -> "(*compress/flate.decompressor).Read"
  "(*image/png.decoder).decode" -> "(time.fileSizeError).Error"
  "(*image/png.decoder).decode" -> "(*internal/poll.FD).Read"
  "(*image/png.decoder).decode" -> "(*embed.openFile).Read"
  "(*image/png.decoder).decode" -> "(*os.File).Read"
  "(*image/png.decoder).decode" -> "(*internal/bisect.parseError).Error"
  "(*image/png.decoder).decode" -> "(*encoding/json.UnmarshalTypeError).Error"
  "(*image/png.decoder).decode" -> "(image/png.UnsupportedError).Error"
  "(*image/png.decoder).decode" -> "(*errors.errorString).Error"
  "(*image/png.decoder).decode" -> "(runtime.errorString).Error"
  "(*image/png.decoder).decode" -> "(compress/flate.InternalError).Error"
  "(*image/png.decoder).decode" -> "(syscall.Errno).Error"
  "(*image/png.decoder).decode" -> "(image/jpeg.UnsupportedError).Error"
  "(*image/png.decoder).decode" -> "(*internal/poll.DeadlineExceededError).Error"
  "(*image/png.decoder).decode" -> "(context.deadlineExceededError).Error"
  "(*image/png.decoder).decode" -> "(*encoding/json.UnsupportedTypeError).Error"
  "(*image/png.decoder).decode" -> "(*time.ParseError).Error"
  "(*image/png.decoder).decode" -> "(*io/fs.PathError).Error"
  "(*image/png.decoder).decode" -> "(*reflect.ValueError).Error"
  "(*image/png.decoder).decode" -> "(runtime.plainError).Error"
  "(*image/png.decoder).decode" -> "(*os.SyscallError).Error"
  "(*image/png.decoder).decode" -> "(image/png.FormatError).Error"
  "(*image/png.decoder).decode" -> "(encoding/base64.CorruptInputError).Error"
  "(*image/png.decoder).decode" -> "(*fmt.wrapError).Error"
  "(*image/png.decoder).decode" -> "(*fmt.wrapErrors).Error"
  "(*image/png.decoder).decode" -> "(internal/poll.errNetClosing).Error"
  "(*image/png.decoder).decode" -> "(golang.org/x/text/encoding/internal.RepertoireError).Error"
  "(*image/png.decoder).decode" -> "(*encoding/json.InvalidUnmarshalError).Error"
  "(*image/png.decoder).decode" -> "(*encoding/json.UnsupportedValueError).Error"
  "(*image/png.decoder).parseIDAT" -> "(*image/png.decoder).decode"
  "(*image/png.decoder).parseIDAT" -> "(*image/png.decoder).verifyChecksum"
  "text/tabwriter.init" -> "io.init"
  "text/tabwriter.init" -> "unicode/utf8.init"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.spiConn).setFlag" -> "(*periph.io/x/host/v3/fs.File).Ioctl"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "(*periph.io/x/host/v3/sysfs.spiConn).setFlag"
  "(*periph.io/x/host/v3/sysfs.SPI).Connect" -> "fmt.Errorf"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Intersect" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "(*runtime.profBuf).canWriteRecord" -> "(*runtime.profAtomic).load"
  "(*runtime.profBuf).canWriteRecord" -> "(*runtime.profAtomic).load"
  "(*runtime.profBuf).canWriteRecord" -> "(runtime.profIndex).tagCount"
  "(*runtime.profBuf).canWriteRecord" -> "(runtime.profIndex).tagCount"
  "(*runtime.profBuf).canWriteRecord" -> "runtime.countSub"
  "(*runtime.profBuf).canWriteRecord" -> "(runtime.profIndex).dataCount"
  "(*runtime.profBuf).canWriteRecord" -> "(runtime.profIndex).dataCount"
  "(*runtime.profBuf).canWriteRecord" -> "runtime.countSub"
  "(*runtime.profBuf).canWriteRecord" -> "(runtime.profIndex).dataCount"
  "(*reflect.rtype).Align" -> "(*internal/abi.Type).Align"
  "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Get" -> "(*sync.RWMutex).RLock"
  "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Get" -> "(*sync.RWMutex).RUnlock"
  "github.com/golang/freetype/truetype.normalize" -> "math.Hypot"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Init" -> "(*github.com/stefan-muehlebach/adagui.Embed).Init"
  "container/list.New" -> "(*container/list.List).Init"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Init" -> "container/list.New"
  "github.com/stefan-muehlebach/adagui.NewPanel" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewPanel" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewPanel" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "(reflect.Value).SetIterValue" -> "(*reflect.hiter).initialized"
  "(reflect.Value).SetIterValue" -> "reflect.mapiterelem"
  "(reflect.Value).SetIterValue" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetIterValue" -> "(reflect.flag).kind"
  "(reflect.Value).SetIterValue" -> "(reflect.Value).typ"
  "(reflect.Value).SetIterValue" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetIterValue" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).SetIterValue" -> "(reflect.Value).typ"
  "(reflect.Value).SetIterValue" -> "(reflect.Value).assignTo"
  "(reflect.Value).SetIterValue" -> "(reflect.Value).typ"
  "(reflect.Value).SetIterValue" -> "reflect.typedmemmove"
  "time.getnum3" -> "time.isDigit[string]"
  "(*runtime/internal/atomic.Uintptr).LoadAcquire" -> "runtime/internal/atomic.LoadAcquintptr"
  "(time.Time).Second" -> "(time.Time).abs"
  "encoding/json.newEncodeState" -> "(*sync.Pool).Get"
  "encoding/json.newEncodeState" -> "(*bytes.Buffer).Reset"
  "encoding/json.Marshal" -> "encoding/json.newEncodeState"
  "encoding/json.Marshal" -> "(*sync.Pool).Put"
  "(*encoding/json.encodeState).marshal" -> "(*encoding/json.encodeState).marshal$1"
  "(*encoding/json.encodeState).marshal" -> "reflect.ValueOf"
  "(*encoding/json.encodeState).marshal" -> "(*encoding/json.encodeState).reflectValue"
  "encoding/json.Marshal" -> "(*encoding/json.encodeState).marshal"
  "encoding/json.Marshal" -> "(*bytes.Buffer).Bytes"
  "encoding/json.MarshalIndent" -> "encoding/json.Marshal"
  "encoding/json.appendIndent" -> "encoding/json.newScanner"
  "encoding/json.appendIndent" -> "encoding/json.freeScanner"
  "encoding/json.appendIndent" -> "(*encoding/json.scanner).eof"
  "encoding/json.appendIndent" -> "encoding/json.appendNewline"
  "encoding/json.appendIndent" -> "encoding/json.appendNewline"
  "encoding/json.appendIndent" -> "encoding/json.appendNewline"
  "encoding/json.appendIndent" -> "encoding/json.stateBeginValue"
  "encoding/json.appendIndent" -> "encoding/json.stateBeginStringOrEmpty"
  "encoding/json.appendIndent" -> "encoding/json.stateBeginValueOrEmpty"
  "encoding/json.appendIndent" -> "encoding/json.stateInString"
  "encoding/json.appendIndent" -> "encoding/json.stateNeg"
  "encoding/json.appendIndent" -> "encoding/json.state0"
  "encoding/json.appendIndent" -> "encoding/json.stateT"
  "encoding/json.appendIndent" -> "encoding/json.stateF"
  "encoding/json.appendIndent" -> "encoding/json.stateN"
  "encoding/json.appendIndent" -> "encoding/json.state1"
  "encoding/json.appendIndent" -> "encoding/json.stateEndValue"
  "encoding/json.appendIndent" -> "encoding/json.stateInStringEsc"
  "encoding/json.appendIndent" -> "encoding/json.stateDot"
  "encoding/json.appendIndent" -> "encoding/json.stateE"
  "encoding/json.appendIndent" -> "encoding/json.stateTr"
  "encoding/json.appendIndent" -> "encoding/json.stateFa"
  "encoding/json.appendIndent" -> "encoding/json.stateNu"
  "encoding/json.appendIndent" -> "encoding/json.stateError"
  "encoding/json.appendIndent" -> "encoding/json.stateEndTop"
  "encoding/json.appendIndent" -> "encoding/json.stateBeginString"
  "encoding/json.appendIndent" -> "encoding/json.stateInStringEscU"
  "encoding/json.appendIndent" -> "encoding/json.stateDot0"
  "encoding/json.appendIndent" -> "encoding/json.stateESign"
  "encoding/json.appendIndent" -> "encoding/json.stateTru"
  "encoding/json.appendIndent" -> "encoding/json.stateFal"
  "encoding/json.appendIndent" -> "encoding/json.stateNul"
  "encoding/json.appendIndent" -> "encoding/json.stateInStringEscU1"
  "encoding/json.appendIndent" -> "encoding/json.stateE0"
  "encoding/json.appendIndent" -> "encoding/json.stateFals"
  "encoding/json.appendIndent" -> "encoding/json.stateInStringEscU12"
  "encoding/json.appendIndent" -> "encoding/json.stateInStringEscU123"
  "encoding/json.MarshalIndent" -> "encoding/json.appendIndent"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).WriteConfigFile" -> "encoding/json.MarshalIndent"
  "(*log.Logger).Fatal" -> "fmt.Sprint"
  "(*log.Logger).Fatal" -> "(*log.Logger).Output"
  "(*log.Logger).Fatal" -> "os.Exit"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).WriteConfigFile" -> "(*log.Logger).Fatal"
  "os.WriteFile" -> "os.OpenFile"
  "os.WriteFile" -> "(*os.File).Write"
  "os.WriteFile" -> "(*os.File).Close"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).WriteConfigFile" -> "os.WriteFile"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).WriteConfigFile" -> "(*log.Logger).Fatal"
  "runtime.shouldPushSigpanic" -> "runtime.findfunc"
  "runtime.shouldPushSigpanic" -> "(runtime.funcInfo).valid"
  "runtime.shouldPushSigpanic" -> "runtime.findfunc"
  "runtime.shouldPushSigpanic" -> "(runtime.funcInfo).valid"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.pollDesc).prepareRead"
  "syscall.accept4" -> "syscall.Syscall6"
  "syscall.accept4" -> "syscall.errnoErr"
  "syscall.Accept4" -> "syscall.accept4"
  "syscall.Accept4" -> "syscall.anyToSockaddr"
  "syscall.Accept4" -> "syscall.Close"
  "internal/poll.accept" -> "syscall.Accept4"
  "syscall.Accept" -> "syscall.accept4"
  "syscall.Accept" -> "syscall.anyToSockaddr"
  "syscall.Accept" -> "syscall.Close"
  "internal/poll.accept" -> "syscall.Accept"
  "internal/poll.accept" -> "syscall.CloseOnExec"
  "internal/poll.accept" -> "syscall.SetNonblock"
  "internal/poll.accept" -> "syscall.Close"
  "(*internal/poll.FD).Accept" -> "internal/poll.accept"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.pollDesc).pollable"
  "(*internal/poll.FD).Accept" -> "(*internal/poll.pollDesc).waitRead"
  "image/png.DecodeConfig" -> "hash/crc32.NewIEEE"
  "(*image/png.decoder).checkHeader" -> "io.ReadFull"
  "image/png.DecodeConfig" -> "(*image/png.decoder).checkHeader"
  "(*image/png.decoder).parseChunk" -> "io.ReadFull"
  "(*image/png.decoder).parseChunk" -> "(encoding/binary.bigEndian).Uint32"
  "(*image/png.decoder).parseIHDR" -> "io.ReadFull"
  "(*image/png.decoder).parseIHDR" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).parseIHDR" -> "(encoding/binary.bigEndian).Uint32"
  "(*image/png.decoder).parseIHDR" -> "(encoding/binary.bigEndian).Uint32"
  "(*image/png.decoder).parseIHDR" -> "fmt.Sprintf"
  "(*image/png.decoder).parseIHDR" -> "(*image/png.decoder).verifyChecksum"
  "(*image/png.decoder).parseIHDR" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).parseChunk" -> "(*image/png.decoder).parseIHDR"
  "(*image/png.decoder).parseChunk" -> "image/png.cbPaletted"
  "(*image/png.decoder).parsePLTE" -> "io.ReadFull"
  "(*image/png.decoder).parsePLTE" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).parsePLTE" -> "(*image/png.decoder).verifyChecksum"
  "(*image/png.decoder).parsePLTE" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).parseChunk" -> "(*image/png.decoder).parsePLTE"
  "(*image/png.decoder).parsetRNS" -> "(*image/png.decoder).verifyChecksum"
  "(*image/png.decoder).parsetRNS" -> "io.ReadFull"
  "(*image/png.decoder).parsetRNS" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).parsetRNS" -> "io.ReadFull"
  "(*image/png.decoder).parsetRNS" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).parsetRNS" -> "io.ReadFull"
  "(*image/png.decoder).parsetRNS" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).parsetRNS" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).parsetRNS" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).parsetRNS" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).parseChunk" -> "(*image/png.decoder).parsetRNS"
  "(*image/png.decoder).parseChunk" -> "image/png.cbTrueColor"
  "(*image/png.decoder).parseChunk" -> "image/png.cbPaletted"
  "(*image/png.decoder).parseChunk" -> "(*image/png.decoder).parseIDAT"
  "(*image/png.decoder).parseIEND" -> "(*image/png.decoder).verifyChecksum"
  "(*image/png.decoder).parseChunk" -> "(*image/png.decoder).parseIEND"
  "(*image/png.decoder).parseChunk" -> "fmt.Sprintf"
  "(*image/png.decoder).parseChunk" -> "io.ReadFull"
  "(*image/png.decoder).parseChunk" -> "(*image/png.decoder).verifyChecksum"
  "(*image/png.decoder).parseChunk" -> "(*hash/crc32.digest).Reset"
  "(*image/png.decoder).parseChunk" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).parseChunk" -> "(*hash/crc32.digest).Write"
  "(*image/png.decoder).parseChunk" -> "(*hash/adler32.digest).Reset"
  "(*image/png.decoder).parseChunk" -> "(*hash/adler32.digest).Write"
  "(*image/png.decoder).parseChunk" -> "(*hash/adler32.digest).Write"
  "image/png.DecodeConfig" -> "(*image/png.decoder).parseChunk"
  "image/png.DecodeConfig" -> "image/png.cbPaletted"
  "(encoding/json.Number).Float64" -> "strconv.ParseFloat"
  "(*image.Paletted).Opaque" -> "(image.Rectangle).Dx"
  "(*image.Paletted).Opaque" -> "(image/color.NRGBA64).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.Gray16).RGBA"
  "(*image.Paletted).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.RGBA).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.RGBA64).RGBA"
  "(*image.Paletted).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image.Paletted).Opaque" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.CMYK).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.Alpha16).RGBA"
  "(*image.Paletted).Opaque" -> "(*image.Uniform).RGBA"
  "(*image.Paletted).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.Alpha).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.NYCbCrA).RGBA"
  "(*image.Paletted).Opaque" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*image.Paletted).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.YCbCr).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.Gray).RGBA"
  "(*image.Paletted).Opaque" -> "(image/color.NRGBA).RGBA"
  "image/png.opaque" -> "(*image.Paletted).Opaque"
  "(*image.Uniform).Opaque" -> "(image/color.NRGBA64).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.Gray16).RGBA"
  "(*image.Uniform).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.RGBA).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.RGBA64).RGBA"
  "(*image.Uniform).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image.Uniform).Opaque" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.CMYK).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.Alpha16).RGBA"
  "(*image.Uniform).Opaque" -> "(*image.Uniform).RGBA"
  "(*image.Uniform).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.Alpha).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.NYCbCrA).RGBA"
  "(*image.Uniform).Opaque" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*image.Uniform).Opaque" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.YCbCr).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.Gray).RGBA"
  "(*image.Uniform).Opaque" -> "(image/color.NRGBA).RGBA"
  "image/png.opaque" -> "(*image.Uniform).Opaque"
  "image/png.opaque" -> "(*image.YCbCr).Opaque"
  "(*image.Alpha).Opaque" -> "(image.Rectangle).Empty"
  "(*image.Alpha).Opaque" -> "(image.Rectangle).Dx"
  "image/png.opaque" -> "(*image.Alpha).Opaque"
  "(*image.RGBA).Opaque" -> "(image.Rectangle).Empty"
  "(*image.RGBA).Opaque" -> "(image.Rectangle).Dx"
  "image/png.opaque" -> "(*image.RGBA).Opaque"
  "image/png.opaque" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Opaque"
  "image/png.opaque" -> "(*image.Uniform).Bounds"
  "image/png.opaque" -> "(*image.Alpha).Bounds"
  "image/png.opaque" -> "(*image.NRGBA).At"
  "image/png.opaque" -> "(*image.RGBA).Bounds"
  "image/png.opaque" -> "(image.Rectangle).Bounds"
  "image/png.opaque" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "image/png.opaque" -> "(*image.YCbCr).Bounds"
  "image/png.opaque" -> "(*image.Paletted).Bounds"
  "image/png.opaque" -> "(*image.Uniform).At"
  "image/png.opaque" -> "(*image.Alpha).At"
  "image/png.opaque" -> "(*image.Gray16).Bounds"
  "image/png.opaque" -> "(*image.RGBA).At"
  "image/png.opaque" -> "(image.Rectangle).At"
  "image/png.opaque" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/png.opaque" -> "(*image.YCbCr).At"
  "image/png.opaque" -> "(*image.Paletted).At"
  "image/png.opaque" -> "(*image.Gray16).Opaque"
  "image/png.opaque" -> "(image/color.Gray16).RGBA"
  "image/png.opaque" -> "(*image.RGBA64).Bounds"
  "image/png.opaque" -> "(image/color.RGBA).RGBA"
  "image/png.opaque" -> "(image/color.RGBA64).RGBA"
  "(*image.NRGBA).Opaque" -> "(image.Rectangle).Empty"
  "(*image.NRGBA).Opaque" -> "(image.Rectangle).Dx"
  "image/png.opaque" -> "(*image.NRGBA).Opaque"
  "image/png.opaque" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/png.opaque" -> "(*image.NRGBA).Bounds"
  "image/png.opaque" -> "(image/color.Alpha16).RGBA"
  "image/png.opaque" -> "(*image.Uniform).RGBA"
  "(*image.RGBA64).Opaque" -> "(image.Rectangle).Empty"
  "(*image.RGBA64).Opaque" -> "(image.Rectangle).Dx"
  "image/png.opaque" -> "(*image.RGBA64).Opaque"
  "image/png.opaque" -> "(image/color.Alpha).RGBA"
  "image/png.opaque" -> "(*image.CMYK).Bounds"
  "image/png.opaque" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/png.opaque" -> "(*image.NRGBA64).At"
  "image/png.opaque" -> "(image/color.YCbCr).RGBA"
  "image/png.opaque" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/png.opaque" -> "(image/color.NRGBA).RGBA"
  "image/png.opaque" -> "(*image.RGBA64).At"
  "image/png.opaque" -> "(image/color.NRGBA64).RGBA"
  "image/png.opaque" -> "(*image.NRGBA64).Bounds"
  "image/png.opaque" -> "(image/color.Gray).RGBA"
  "image/png.opaque" -> "(*image.CMYK).Opaque"
  "image/png.opaque" -> "(image/color.NYCbCrA).RGBA"
  "image/png.opaque" -> "(*image.CMYK).At"
  "image/png.opaque" -> "(*image.Gray16).At"
  "image/png.opaque" -> "(image/color.CMYK).RGBA"
  "image/png.opaque" -> "(*image.Gray).Opaque"
  "image/png.opaque" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image.NRGBA64).Opaque" -> "(image.Rectangle).Empty"
  "(*image.NRGBA64).Opaque" -> "(image.Rectangle).Dx"
  "image/png.opaque" -> "(*image.NRGBA64).Opaque"
  "image/png.opaque" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/png.opaque" -> "(*image.Gray).Bounds"
  "image/png.opaque" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/png.opaque" -> "(*image.Gray).At"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.parseRFC3339[[]byte]" -> "time.daysIn"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.daysSinceEpoch"
  "time.Date" -> "time.isLeap"
  "time.Date" -> "(*time.Location).lookup"
  "time.Date" -> "time.unixTime"
  "time.Date" -> "(*time.Time).setLoc"
  "time.Date" -> "(*time.Location).lookup"
  "time.parseRFC3339[[]byte]" -> "time.Date"
  "time.parseRFC3339[[]byte]" -> "time.isDigit[[]byte]"
  "time.parseNanoseconds[[]byte]" -> "time.commaOrPeriod"
  "time.atoi[[]byte]" -> "time.leadingInt[[]byte]"
  "time.parseNanoseconds[[]byte]" -> "time.atoi[[]byte]"
  "time.parseRFC3339[[]byte]" -> "time.parseNanoseconds[[]byte]"
  "time.parseRFC3339[[]byte]" -> "time.isDigit[[]byte]"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.parseRFC3339[[]byte]" -> "time.parseRFC3339[[]byte]$1"
  "time.parseRFC3339[[]byte]" -> "(*time.Time).addSec"
  "time.parseRFC3339[[]byte]" -> "(*time.Time).unixSec"
  "time.parseRFC3339[[]byte]" -> "(*time.Location).lookup"
  "time.parseRFC3339[[]byte]" -> "(*time.Time).setLoc"
  "time.FixedZone" -> "(*sync.Once).Do"
  "time.FixedZone" -> "time.fixedZone"
  "time.parseRFC3339[[]byte]" -> "time.FixedZone"
  "time.parseRFC3339[[]byte]" -> "(*time.Time).setLoc"
  "time.parseStrictRFC3339" -> "time.parseRFC3339[[]byte]"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "time.daysIn"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "time.Date"
  "time.parseRFC3339[string]" -> "time.isDigit[string]"
  "time.parseNanoseconds[string]" -> "time.commaOrPeriod"
  "time.atoi[string]" -> "time.leadingInt[string]"
  "time.parseNanoseconds[string]" -> "time.atoi[string]"
  "time.parseRFC3339[string]" -> "time.parseNanoseconds[string]"
  "time.parseRFC3339[string]" -> "time.isDigit[string]"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "time.parseRFC3339[string]$1"
  "time.parseRFC3339[string]" -> "(*time.Time).addSec"
  "time.parseRFC3339[string]" -> "(*time.Time).unixSec"
  "time.parseRFC3339[string]" -> "(*time.Location).lookup"
  "time.parseRFC3339[string]" -> "(*time.Time).setLoc"
  "time.parseRFC3339[string]" -> "time.FixedZone"
  "time.parseRFC3339[string]" -> "(*time.Time).setLoc"
  "time.Parse" -> "time.parseRFC3339[string]"
  "time.parse" -> "time.nextStdChunk"
  "time.skip" -> "time.cutspace"
  "time.skip" -> "time.cutspace"
  "time.parse" -> "time.skip"
  "time.newParseError" -> "time.cloneString"
  "time.newParseError" -> "time.cloneString"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.quote"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.atoi[string]"
  "time.lookup" -> "time.match"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.atoi[string]"
  "time.parse" -> "time.isDigit[string]"
  "time.parse" -> "time.lookup"
  "time.getnum" -> "time.isDigit[string]"
  "time.getnum" -> "time.isDigit[string]"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum3"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.nextStdChunk"
  "time.parse" -> "time.isDigit[string]"
  "time.parse" -> "time.commaOrPeriod"
  "time.parse" -> "time.parseNanoseconds[string]"
  "time.parse" -> "time.isDigit[string]"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.digitsLen"
  "time.parseSignedOffset" -> "time.leadingInt[string]"
  "time.parseGMT" -> "time.parseSignedOffset"
  "time.parseTimeZone" -> "time.parseGMT"
  "time.parseTimeZone" -> "time.parseSignedOffset"
  "time.parse" -> "time.parseTimeZone"
  "time.parse" -> "time.parseNanoseconds[string]"
  "time.parse" -> "time.commaOrPeriod"
  "time.parse" -> "time.parseNanoseconds[string]"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.isLeap"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.newParseError"
  "time.parse" -> "time.daysIn"
  "time.parse" -> "time.Date"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Time).addSec"
  "time.parse" -> "(*time.Time).unixSec"
  "time.parse" -> "(*time.Location).lookup"
  "time.parse" -> "(*time.Time).setLoc"
  "time.parse" -> "time.cloneString"
  "time.parse" -> "time.FixedZone"
  "time.parse" -> "(*time.Time).setLoc"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Time).unixSec"
  "(*time.Location).lookupName" -> "(*time.Location).get"
  "(*time.Location).lookupName" -> "(*time.Location).lookup"
  "time.parse" -> "(*time.Location).lookupName"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Time).addSec"
  "time.parse" -> "(*time.Time).setLoc"
  "time.parse" -> "time.atoi[string]"
  "time.parse" -> "time.cloneString"
  "time.parse" -> "time.FixedZone"
  "time.parse" -> "(*time.Time).setLoc"
  "time.Parse" -> "time.parse"
  "time.parseStrictRFC3339" -> "time.Parse"
  "time.parseStrictRFC3339" -> "time.parseStrictRFC3339$1"
  "time.parseStrictRFC3339" -> "time.parseStrictRFC3339$1"
  "os.Create" -> "os.OpenFile"
  "(*github.com/stefan-muehlebach/adagui.Window).Save" -> "os.Create"
  "(*github.com/stefan-muehlebach/adagui.Window).Save" -> "log.Fatal"
  "(*github.com/stefan-muehlebach/adagui.Window).Save" -> "(*os.File).Close"
  "(*github.com/stefan-muehlebach/adagui.Window).Save" -> "(*github.com/stefan-muehlebach/gg.Context).Image"
  "(*image/png.Encoder).Encode" -> "(*image.Uniform).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Alpha).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA64).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA).Bounds"
  "(*image/png.Encoder).Encode" -> "(image.Rectangle).Bounds"
  "(*image/png.Encoder).Encode" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.YCbCr).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Paletted).Bounds"
  "(*image/png.Encoder).Encode" -> "(image.Rectangle).Dx"
  "(*image/png.Encoder).Encode" -> "(*image.Uniform).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Alpha).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA64).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA).Bounds"
  "(*image/png.Encoder).Encode" -> "(image.Rectangle).Bounds"
  "(*image/png.Encoder).Encode" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.YCbCr).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Paletted).Bounds"
  "(*image/png.Encoder).Encode" -> "(image.Rectangle).Dy"
  "(*image/png.Encoder).Encode" -> "strconv.FormatInt"
  "(*image/png.Encoder).Encode" -> "strconv.FormatInt"
  "(*image/png.Encoder).Encode" -> "(*image.Uniform).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.Alpha).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA64).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA).ColorModel"
  "(*image/png.Encoder).Encode" -> "(image.Rectangle).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.YCbCr).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.Paletted).ColorModel"
  "(*image/png.Encoder).Encode" -> "io.WriteString"
  "(*image/png.encoder).writeIHDR" -> "(*image.Uniform).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.Alpha).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.RGBA64).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.RGBA).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(image.Rectangle).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.YCbCr).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.Paletted).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(image.Rectangle).Dx"
  "(*image/png.encoder).writeIHDR" -> "(encoding/binary.bigEndian).PutUint32"
  "(*image/png.encoder).writeIHDR" -> "(image.Rectangle).Dy"
  "(*image/png.encoder).writeIHDR" -> "(encoding/binary.bigEndian).PutUint32"
  "(*image/png.encoder).writeIHDR" -> "(*image/png.encoder).writeChunk"
  "(*image/png.encoder).writeIHDR" -> "(*image.Gray).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.CMYK).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.NRGBA).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.NRGBA64).Bounds"
  "(*image/png.encoder).writeIHDR" -> "(*image.Gray16).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image/png.encoder).writeIHDR"
  "(*image/png.Encoder).Encode" -> "(*image.Uniform).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.Alpha).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA64).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.RGBA).ColorModel"
  "(*image/png.Encoder).Encode" -> "(image.Rectangle).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.YCbCr).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.Paletted).ColorModel"
  "(*image/png.Encoder).Encode" -> "image/png.opaque"
  "(*image/png.Encoder).Encode" -> "image/png.opaque"
  "(*image/png.encoder).writePLTEAndTRNS" -> "strconv.Itoa"
  "(*image/png.encoder).writePLTEAndTRNS" -> "(*image.Uniform).Convert"
  "(*image/png.encoder).writePLTEAndTRNS" -> "(*image/color.modelFunc).Convert"
  "(*image/png.encoder).writePLTEAndTRNS" -> "(image/color.Palette).Convert"
  "(*image/png.encoder).writePLTEAndTRNS" -> "(*image/png.encoder).writeChunk"
  "(*image/png.encoder).writePLTEAndTRNS" -> "(*image/png.encoder).writeChunk"
  "(*image/png.Encoder).Encode" -> "(*image/png.encoder).writePLTEAndTRNS"
  "(*image/png.encoder).writeIDATs" -> "bufio.NewWriterSize"
  "(*image/png.encoder).writeIDATs" -> "image/png.levelToZlib"
  "compress/zlib.NewWriterLevelDict" -> "fmt.Errorf"
  "compress/zlib.NewWriterLevel" -> "compress/zlib.NewWriterLevelDict"
  "(*image/png.encoder).writeImage" -> "compress/zlib.NewWriterLevel"
  "(*image/png.encoder).writeImage" -> "(*compress/zlib.Writer).Close"
  "(*compress/zlib.Writer).Reset" -> "(*compress/flate.Writer).Reset"
  "(*compress/zlib.Writer).Reset" -> "(*hash/crc32.digest).Reset"
  "(*compress/zlib.Writer).Reset" -> "(*hash/adler32.digest).Reset"
  "(*image/png.encoder).writeImage" -> "(*compress/zlib.Writer).Reset"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).Bounds"
  "(*image/png.encoder).writeImage" -> "(*image.Alpha).Bounds"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA).At"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).Bounds"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).Bounds"
  "(*image/png.encoder).writeImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*image/png.encoder).writeImage" -> "(*image.YCbCr).Bounds"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).Bounds"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).Dx"
  "(*image/png.encoder).writeImage" -> "image/png.zeroMemory"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).Dx"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).At"
  "(*image/png.encoder).writeImage" -> "(*image.Alpha).At"
  "(*image/png.encoder).writeImage" -> "(*image.Gray16).At"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).At"
  "(*image/png.encoder).writeImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*image/png.encoder).writeImage" -> "(*image.YCbCr).At"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).At"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).Convert"
  "(*image/png.encoder).writeImage" -> "(*image/color.modelFunc).Convert"
  "(*image/png.encoder).writeImage" -> "(image/color.Palette).Convert"
  "(*image/png.encoder).writeImage" -> "(*image.Gray).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).Dx"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).At"
  "(*image/png.encoder).writeImage" -> "(*image.Alpha).At"
  "(*image/png.encoder).writeImage" -> "(*image.Gray16).At"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).At"
  "(*image/png.encoder).writeImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*image/png.encoder).writeImage" -> "(*image.YCbCr).At"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).At"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Gray16).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.RGBA).RGBA"
  "(*image/png.encoder).writeImage" -> "(image/color.RGBA64).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA).At"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Alpha16).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Alpha).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.CMYK).At"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.YCbCr).RGBA"
  "(*image/png.encoder).writeImage" -> "(image/color.Palette).Convert"
  "(*image/png.encoder).writeImage" -> "(image/color.NRGBA).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.NRGBA64).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Gray).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA).Bounds"
  "(*image/png.encoder).writeImage" -> "(image/color.NYCbCrA).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.CMYK).At"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA64).Bounds"
  "(*image/png.encoder).writeImage" -> "(image/color.CMYK).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.Gray).Bounds"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA64).Bounds"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/png.filter" -> "image/png.abs8"
  "image/png.filter" -> "image/png.abs8"
  "image/png.paeth" -> "image/png.abs"
  "image/png.paeth" -> "image/png.abs"
  "image/png.paeth" -> "image/png.abs"
  "image/png.filter" -> "image/png.paeth"
  "image/png.filter" -> "image/png.abs8"
  "image/png.filter" -> "image/png.abs8"
  "image/png.filter" -> "image/png.abs8"
  "image/png.filter" -> "image/png.abs8"
  "image/png.filter" -> "image/png.abs8"
  "image/png.filter" -> "image/png.abs8"
  "(*image/png.encoder).writeImage" -> "image/png.filter"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.CMYK).At"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.Gray).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).Dx"
  "(*image.Paletted).ColorIndexAt" -> "(image.Point).In"
  "(*image.Paletted).ColorIndexAt" -> "(*image.Paletted).PixOffset"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).ColorIndexAt"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).ColorIndexAt"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).Dx"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).PixOffset"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).PixOffset"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).At"
  "(*image/png.encoder).writeImage" -> "(*image.Alpha).At"
  "(*image/png.encoder).writeImage" -> "(*image.Gray16).At"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).At"
  "(*image/png.encoder).writeImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*image/png.encoder).writeImage" -> "(*image.YCbCr).At"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).At"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).Convert"
  "(*image/png.encoder).writeImage" -> "(*image/color.modelFunc).Convert"
  "(*image/png.encoder).writeImage" -> "(image/color.Palette).Convert"
  "(*image/png.encoder).writeImage" -> "(*image.Gray).At"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).At"
  "(*image/png.encoder).writeImage" -> "(*image.Alpha).At"
  "(*image/png.encoder).writeImage" -> "(*image.Gray16).At"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).At"
  "(*image/png.encoder).writeImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*image/png.encoder).writeImage" -> "(*image.YCbCr).At"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).At"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).Convert"
  "(*image/png.encoder).writeImage" -> "(*image/color.modelFunc).Convert"
  "(*image/png.encoder).writeImage" -> "(image/color.Palette).Convert"
  "(*image/png.encoder).writeImage" -> "(*image.Gray).At"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).At"
  "(*image/png.encoder).writeImage" -> "(*image.Alpha).At"
  "(*image/png.encoder).writeImage" -> "(*image.Gray16).At"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).At"
  "(*image/png.encoder).writeImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*image/png.encoder).writeImage" -> "(*image.YCbCr).At"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).At"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Gray16).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.RGBA).RGBA"
  "(*image/png.encoder).writeImage" -> "(image/color.RGBA64).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA).At"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Alpha16).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Alpha).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.CMYK).At"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.YCbCr).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image/color.modelFunc).Convert"
  "(*image/png.encoder).writeImage" -> "(image/color.NRGBA).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.NRGBA64).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA64).At"
  "(*image/png.encoder).writeImage" -> "(image/color.Gray).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.CMYK).At"
  "(*image/png.encoder).writeImage" -> "(image/color.NYCbCrA).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.CMYK).At"
  "(*image/png.encoder).writeImage" -> "(*image.Gray16).At"
  "(*image/png.encoder).writeImage" -> "(image/color.CMYK).RGBA"
  "(*image/png.encoder).writeImage" -> "(*compress/zlib.Writer).Write"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.NRGBA).At"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.Gray).At"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.CMYK).Bounds"
  "(*image/png.encoder).writeImage" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*image/png.encoder).writeImage" -> "(*image.Gray).At"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).At"
  "(*image/png.encoder).writeImage" -> "(*image.Alpha).At"
  "(*image/png.encoder).writeImage" -> "(*image.Gray16).Bounds"
  "(*image/png.encoder).writeImage" -> "(*image.RGBA).At"
  "(*image/png.encoder).writeImage" -> "(image.Rectangle).At"
  "(*image/png.encoder).writeImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*image/png.encoder).writeImage" -> "(*image.YCbCr).At"
  "(*image/png.encoder).writeImage" -> "(*image.Paletted).At"
  "(*image/png.encoder).writeImage" -> "(*image.Uniform).Convert"
  "(*image/png.encoder).writeIDATs" -> "(*image/png.encoder).writeImage"
  "(*image/png.encoder).writeIDATs" -> "(*bufio.Writer).Reset"
  "(*image/png.encoder).writeIDATs" -> "(*bufio.Writer).Flush"
  "(*image/png.Encoder).Encode" -> "(*image/png.encoder).writeIDATs"
  "(*image/png.encoder).writeIEND" -> "(*image/png.encoder).writeChunk"
  "(*image/png.Encoder).Encode" -> "(*image/png.encoder).writeIEND"
  "(*image/png.Encoder).Encode" -> "(*image.Gray).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Gray).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Gray).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.Gray).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.CMYK).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.CMYK).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.CMYK).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.CMYK).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA64).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA64).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA64).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.NRGBA64).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.Gray16).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Gray16).Bounds"
  "(*image/png.Encoder).Encode" -> "(*image.Gray16).ColorModel"
  "(*image/png.Encoder).Encode" -> "(*image.Gray16).ColorModel"
  "image/png.Encode" -> "(*image/png.Encoder).Encode"
  "(*github.com/stefan-muehlebach/adagui.Window).Save" -> "image/png.Encode"
  "(*github.com/stefan-muehlebach/adagui.Window).Save" -> "log.Fatal"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "(*periph.io/x/host/v3/allwinner.Pin).Halt"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "(*periph.io/x/host/v3/allwinner.Pin).FastOut"
  "(*periph.io/x/host/v3/allwinner.Pin).setFunction" -> "(*periph.io/x/host/v3/allwinner.Pin).function"
  "(*periph.io/x/host/v3/allwinner.Pin).Out" -> "(*periph.io/x/host/v3/allwinner.Pin).setFunction"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(reflect.Value).SetString" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetString" -> "(reflect.flag).mustBe"
  "runtime.bulkBarrierBitmap" -> "runtime.addb"
  "runtime.bulkBarrierBitmap" -> "runtime.getg"
  "runtime.bulkBarrierBitmap" -> "(runtime.puintptr).ptr"
  "runtime.bulkBarrierBitmap" -> "runtime.addb"
  "(*runtime.wbBuf).get1" -> "runtime.wbBufFlush"
  "runtime.bulkBarrierBitmap" -> "(*runtime.wbBuf).get1"
  "runtime.bulkBarrierBitmap" -> "(*runtime.wbBuf).get2"
  "(*image.YCbCr).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.YCbCr).SubImage" -> "(image.Rectangle).Empty"
  "(*image.YCbCr).SubImage" -> "(*image.YCbCr).YOffset"
  "(*image.YCbCr).SubImage" -> "(*image.YCbCr).COffset"
  "(*golang.org/x/image/font/sfnt.source).u16" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.source).u16" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "golang.org/x/image/font/sfnt.platformEncodingWidth"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "golang.org/x/image/font/sfnt.init$1"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat0" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat0"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndex" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12"
  "(*golang.org/x/image/font/sfnt.Font).parseCmap" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndex"
  "(reflect.Value).SetLen" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetLen" -> "(reflect.flag).mustBe"
  "(reflect.Value).SetInt" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetInt" -> "(reflect.flag).kind"
  "(reflect.Value).SetInt" -> "(reflect.flag).kind"
  "(*internal/abi.Type).InterfaceType" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.implements" -> "(*internal/abi.Type).InterfaceType"
  "internal/reflectlite.implements" -> "internal/reflectlite.toRType"
  "internal/reflectlite.implements" -> "internal/reflectlite.toRType"
  "internal/reflectlite.implements" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.implements" -> "(*internal/abi.Type).Uncommon"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "internal/reflectlite.implements" -> "(internal/abi.Name).IsExported"
  "(internal/reflectlite.rtype).typeOff" -> "internal/reflectlite.resolveTypeOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).typeOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).typeOff"
  "internal/reflectlite.pkgPath" -> "(internal/abi.Name).ReadVarint"
  "internal/reflectlite.pkgPath" -> "(internal/abi.Name).HasTag"
  "internal/reflectlite.pkgPath" -> "(internal/abi.Name).DataChecked"
  "internal/reflectlite.pkgPath" -> "(internal/abi.Name).ReadVarint"
  "internal/reflectlite.pkgPath" -> "(internal/abi.Name).DataChecked"
  "internal/reflectlite.pkgPath" -> "internal/reflectlite.resolveTypeOff"
  "(internal/reflectlite.name).data" -> "internal/reflectlite.add"
  "(internal/reflectlite.name).readVarint" -> "(internal/reflectlite.name).data"
  "(internal/reflectlite.name).name" -> "(internal/reflectlite.name).readVarint"
  "(internal/reflectlite.name).name" -> "(internal/reflectlite.name).data"
  "internal/reflectlite.pkgPath" -> "(internal/reflectlite.name).name"
  "internal/reflectlite.implements" -> "internal/reflectlite.pkgPath"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "internal/reflectlite.implements" -> "internal/reflectlite.pkgPath"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "internal/reflectlite.implements" -> "(*internal/abi.UncommonType).Methods"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "internal/reflectlite.implements" -> "(internal/abi.Name).IsExported"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).typeOff"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).typeOff"
  "internal/reflectlite.implements" -> "internal/reflectlite.pkgPath"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "internal/reflectlite.implements" -> "internal/reflectlite.pkgPath"
  "internal/reflectlite.implements" -> "(internal/reflectlite.rtype).nameOff"
  "internal/reflectlite.implements" -> "(internal/abi.Name).Name"
  "golang.org/x/image/font/sfnt.makeCachedCoverageList$1" -> "sort.Search"
  "golang.org/x/image/font/sfnt.makeCachedCoverageList$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1" -> "golang.org/x/image/font/sfnt.u16"
  "syscall.SetsockoptInt" -> "syscall.setsockopt"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Circle).Pos"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetRadius" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetRadius" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Circle).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*bufio.Reader).writeBuf" -> "(*bytes.Buffer).Write"
  "(*bufio.Reader).writeBuf" -> "(*os.File).Write"
  "(*bufio.Reader).writeBuf" -> "(*internal/poll.FD).Write"
  "(*bufio.Reader).writeBuf" -> "(io.discard).Write"
  "(*bufio.Reader).writeBuf" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*bufio.Reader).writeBuf" -> "(*fmt.pp).Write"
  "(*bufio.Reader).writeBuf" -> "(*bufio.Writer).Write"
  "(*bufio.Reader).writeBuf" -> "(*compress/flate.dictWriter).Write"
  "(*bufio.Reader).writeBuf" -> "(*strings.Builder).Write"
  "(*bufio.Reader).writeBuf" -> "(*hash/crc32.digest).Write"
  "(*bufio.Reader).writeBuf" -> "(*text/tabwriter.Writer).Write"
  "(*bufio.Reader).writeBuf" -> "(*compress/flate.Writer).Write"
  "(*bufio.Reader).writeBuf" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*bufio.Reader).writeBuf" -> "(*compress/zlib.Writer).Write"
  "(*bufio.Reader).writeBuf" -> "(*internal/godebug.runtimeStderr).Write"
  "(*bufio.Reader).writeBuf" -> "(*image/png.encoder).Write"
  "(*bufio.Reader).writeBuf" -> "(*hash/adler32.digest).Write"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).writeBuf"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).fill"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Write"
  "(*bytes.Buffer).WriteTo" -> "(*os.File).Write"
  "(*bytes.Buffer).WriteTo" -> "(*internal/poll.FD).Write"
  "(*bytes.Buffer).WriteTo" -> "(io.discard).Write"
  "(*bytes.Buffer).WriteTo" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*bytes.Buffer).WriteTo" -> "(*fmt.pp).Write"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Reset"
  "(*bytes.Buffer).WriteTo" -> "(*bufio.Writer).Write"
  "(*bytes.Buffer).WriteTo" -> "(*compress/flate.dictWriter).Write"
  "(*bytes.Buffer).WriteTo" -> "(*strings.Builder).Write"
  "(*bytes.Buffer).WriteTo" -> "(*hash/crc32.digest).Write"
  "(*bytes.Buffer).WriteTo" -> "(*text/tabwriter.Writer).Write"
  "(*bytes.Buffer).WriteTo" -> "(*compress/flate.Writer).Write"
  "(*bytes.Buffer).WriteTo" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*bytes.Buffer).WriteTo" -> "(*compress/zlib.Writer).Write"
  "(*bytes.Buffer).WriteTo" -> "(*internal/godebug.runtimeStderr).Write"
  "(*bytes.Buffer).WriteTo" -> "(*image/png.encoder).Write"
  "(*bytes.Buffer).WriteTo" -> "(*hash/adler32.digest).Write"
  "(*bufio.Reader).WriteTo" -> "(*bytes.Buffer).WriteTo"
  "(*bufio.Reader).WriteTo" -> "(os.noReadFrom).ReadFrom"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Flush"
  "(io.discard).ReadFrom" -> "(*sync.Pool).Get"
  "(io.discard).ReadFrom" -> "(*fmt.stringReader).Read"
  "(io.discard).ReadFrom" -> "(*fmt.ss).Read"
  "(io.discard).ReadFrom" -> "(*bytes.Buffer).Read"
  "(io.discard).ReadFrom" -> "(*internal/poll.FD).Read"
  "(io.discard).ReadFrom" -> "(*os.File).Read"
  "(io.discard).ReadFrom" -> "(*sync.Pool).Put"
  "(io.discard).ReadFrom" -> "(*compress/flate.decompressor).Read"
  "(io.discard).ReadFrom" -> "(*bufio.Reader).Read"
  "(io.discard).ReadFrom" -> "(*embed.openFile).Read"
  "(io.discard).ReadFrom" -> "(*golang.org/x/text/transform.Reader).Read"
  "(io.discard).ReadFrom" -> "(*compress/zlib.reader).Read"
  "(io.discard).ReadFrom" -> "(*embed.openDir).Read"
  "(io.discard).ReadFrom" -> "(*image/png.decoder).Read"
  "(io.discard).ReadFrom" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*bufio.Writer).ReadFrom" -> "(io.discard).ReadFrom"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).ReadFrom"
  "(*bytes.Buffer).ReadFrom" -> "(*bytes.Buffer).grow"
  "(*bytes.Buffer).ReadFrom" -> "(*fmt.stringReader).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*fmt.ss).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*bytes.Buffer).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*internal/poll.FD).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*os.File).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*compress/flate.decompressor).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*bufio.Reader).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*embed.openFile).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*compress/zlib.reader).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*embed.openDir).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*image/png.decoder).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*bufio.Writer).ReadFrom" -> "(*bytes.Buffer).ReadFrom"
  "(*bufio.Writer).ReadFrom" -> "(*embed.openFile).Read"
  "(*os.File).ReadFrom" -> "(*os.File).checkValid"
  "(*os.File).copyFileRange" -> "os.tryLimitedReader"
  "(*os.File).copyFileRange" -> "(*os.File).checkValid"
  "internal/poll.CopyFileRange" -> "(*sync.Once).Do"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).writeLock"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).writeUnlock"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).readLock"
  "internal/poll.copyFileRange" -> "(*internal/poll.FD).readUnlock"
  "internal/syscall/unix.CopyFileRange" -> "syscall.Syscall6"
  "internal/poll.copyFileRange" -> "internal/syscall/unix.CopyFileRange"
  "internal/poll.CopyFileRange" -> "internal/poll.copyFileRange"
  "(*os.File).copyFileRange" -> "internal/poll.CopyFileRange"
  "os.wrapSyscallError" -> "os.NewSyscallError"
  "(*os.File).copyFileRange" -> "os.wrapSyscallError"
  "(*os.File).readFrom" -> "(*os.File).copyFileRange"
  "(*os.File).spliceToFile" -> "os.tryLimitedReader"
  "(*os.File).SyscallConn" -> "(*os.File).checkValid"
  "(*os.File).SyscallConn" -> "os.newRawConn"
  "os.getPollFDAndNetwork" -> "(*os.File).SyscallConn"
  "(*os.File).spliceToFile" -> "os.getPollFDAndNetwork"
  "(*os.File).spliceToFile" -> "internal/poll.Splice"
  "(*os.File).spliceToFile" -> "os.wrapSyscallError"
  "(*os.File).readFrom" -> "(*os.File).spliceToFile"
  "(*os.File).ReadFrom" -> "(*os.File).readFrom"
  "os.genericReadFrom" -> "io.Copy"
  "(*os.File).ReadFrom" -> "os.genericReadFrom"
  "(*os.File).ReadFrom" -> "(*os.File).wrapErr"
  "(*bufio.Writer).ReadFrom" -> "(*os.File).ReadFrom"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Buffered"
  "(*bufio.Writer).ReadFrom" -> "(*fmt.stringReader).Read"
  "(*bufio.Writer).ReadFrom" -> "(*fmt.ss).Read"
  "(*bufio.Writer).ReadFrom" -> "(*bytes.Buffer).Read"
  "(*bufio.Writer).ReadFrom" -> "(*internal/poll.FD).Read"
  "(*bufio.Writer).ReadFrom" -> "(*os.File).Read"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Writer).Flush"
  "(*bufio.Writer).ReadFrom" -> "(*bufio.Reader).Read"
  "(*bufio.Writer).ReadFrom" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "(*bufio.Writer).ReadFrom" -> "(*embed.openDir).Read"
  "(*bufio.Writer).ReadFrom" -> "(os.noReadFrom).ReadFrom"
  "(*bufio.Writer).ReadFrom" -> "(*compress/zlib.reader).Read"
  "(*bufio.Writer).ReadFrom" -> "(*image/png.decoder).Read"
  "(*bufio.Writer).ReadFrom" -> "(*golang.org/x/text/transform.Reader).Read"
  "(*bufio.Writer).ReadFrom" -> "(*compress/flate.decompressor).Read"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Writer).ReadFrom"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).writeBuf"
  "(*bufio.Reader).WriteTo" -> "(os.noWriteTo).WriteTo"
  "(*os.File).WriteTo" -> "(*os.File).checkValid"
  "(*os.File).writeTo" -> "os.getPollFDAndNetwork"
  "(*os.File).writeTo" -> "(*os.File).SyscallConn"
  "(*os.File).writeTo" -> "os.isUnixOrTCP"
  "(*os.rawConn).Read" -> "(*os.File).checkValid"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).RawRead" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).RawRead" -> "(*os.File).writeTo$1"
  "(*os.rawConn).Read" -> "(*internal/poll.FD).RawRead"
  "(*os.rawConn).Read" -> "runtime.KeepAlive"
  "(*os.File).writeTo" -> "(*os.rawConn).Read"
  "(*os.File).writeTo" -> "os.wrapSyscallError"
  "(*os.File).WriteTo" -> "(*os.File).writeTo"
  "(*os.File).WriteTo" -> "(*os.File).wrapErr"
  "os.genericWriteTo" -> "io.Copy"
  "(*os.File).WriteTo" -> "os.genericWriteTo"
  "(*bufio.Reader).WriteTo" -> "(*os.File).WriteTo"
  "(*bufio.Reader).WriteTo" -> "(*os.File).ReadFrom"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).WriteTo" -> "(*bytes.Buffer).ReadFrom"
  "(*bufio.Reader).WriteTo" -> "(*bufio.Reader).WriteTo"
  "(*bufio.Reader).WriteTo" -> "(io.discard).ReadFrom"
  "io.copyBuffer" -> "(*bufio.Reader).WriteTo"
  "io.copyBuffer" -> "(*bytes.Buffer).WriteTo"
  "io.copyBuffer" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "io.copyBuffer" -> "(*image/png.encoder).Write"
  "io.copyBuffer" -> "(*hash/crc32.digest).Write"
  "io.copyBuffer" -> "(*bufio.Writer).Write"
  "io.copyBuffer" -> "(os.noWriteTo).WriteTo"
  "io.copyBuffer" -> "(*os.File).WriteTo"
  "io.copyBuffer" -> "(io.discard).Write"
  "io.copyBuffer" -> "(*strings.Builder).Write"
  "io.copyBuffer" -> "(*compress/flate.Writer).Write"
  "io.copyBuffer" -> "(io.discard).ReadFrom"
  "io.copyBuffer" -> "(*bufio.Writer).ReadFrom"
  "io.copyBuffer" -> "(*bytes.Buffer).ReadFrom"
  "io.copyBuffer" -> "(*compress/flate.dictWriter).Write"
  "io.copyBuffer" -> "(*os.File).ReadFrom"
  "io.copyBuffer" -> "(os.noReadFrom).ReadFrom"
  "io.copyBuffer" -> "(*compress/flate.decompressor).Read"
  "io.copyBuffer" -> "(*compress/zlib.Writer).Write"
  "io.copyBuffer" -> "(*bufio.Reader).Read"
  "io.copyBuffer" -> "(*hash/adler32.digest).Write"
  "io.copyBuffer" -> "(*internal/godebug.runtimeStderr).Write"
  "io.copyBuffer" -> "(*embed.openFile).Read"
  "io.copyBuffer" -> "(*internal/poll.FD).Write"
  "io.copyBuffer" -> "(*bytes.Buffer).Write"
  "io.copyBuffer" -> "(*fmt.stringReader).Read"
  "io.copyBuffer" -> "(*fmt.ss).Read"
  "io.copyBuffer" -> "(*bytes.Buffer).Read"
  "io.copyBuffer" -> "(*internal/poll.FD).Read"
  "io.copyBuffer" -> "(*os.File).Read"
  "io.copyBuffer" -> "(*compress/zlib.reader).Read"
  "io.copyBuffer" -> "(*periph.io/x/host/v3/sysfs.spiConn).Read"
  "io.copyBuffer" -> "(*golang.org/x/text/transform.Reader).Read"
  "io.copyBuffer" -> "(*fmt.pp).Write"
  "io.copyBuffer" -> "(*os.File).Write"
  "io.copyBuffer" -> "(*golang.org/x/text/transform.Writer).Write"
  "io.copyBuffer" -> "(*embed.openDir).Read"
  "io.copyBuffer" -> "(*text/tabwriter.Writer).Write"
  "io.copyBuffer" -> "(*image/png.decoder).Read"
  "io.Copy" -> "io.copyBuffer"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).CornerRadius" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).CornerRadius"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).NewSubPath"
  "(*github.com/stefan-muehlebach/gg.Context).TransformPoint" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).MoveTo" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).MoveTo" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "(*github.com/stefan-muehlebach/gg.Context).MoveTo" -> "(*github.com/golang/freetype/raster.Path).Start"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/gg.Context).LineTo" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/gg.Context).LineTo" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).LineTo" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "(*github.com/stefan-muehlebach/gg.Context).LineTo" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "math.Cos" -> "math.archCos"
  "math.cos" -> "math.IsNaN"
  "math.cos" -> "math.NaN"
  "math.cos" -> "math.Abs"
  "math.cos" -> "math.IsInf"
  "math.trigReduce" -> "math.Float64bits"
  "math.trigReduce" -> "math/bits.Mul64"
  "math.trigReduce" -> "math/bits.Mul64"
  "math.trigReduce" -> "math/bits.Add64"
  "math.trigReduce" -> "math/bits.Add64"
  "math.trigReduce" -> "math/bits.LeadingZeros64"
  "math.trigReduce" -> "math.Float64frombits"
  "math.cos" -> "math.trigReduce"
  "math.Cos" -> "math.cos"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "math.Cos"
  "math.Sin" -> "math.archSin"
  "math.sin" -> "math.NaN"
  "math.sin" -> "math.IsInf"
  "math.sin" -> "math.IsNaN"
  "math.sin" -> "math.trigReduce"
  "math.Sin" -> "math.sin"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "math.Sin"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "math.Cos"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "math.Sin"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "math.Cos"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "math.Sin"
  "(*github.com/stefan-muehlebach/gg.Context).QuadraticTo" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/gg.Context).QuadraticTo" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).QuadraticTo" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).QuadraticTo" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "(*github.com/stefan-muehlebach/gg.Context).QuadraticTo" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "(*github.com/stefan-muehlebach/gg.Context).QuadraticTo" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "(*github.com/stefan-muehlebach/gg.Context).QuadraticTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawArc" -> "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).DrawArc"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).DrawArc"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).DrawArc"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "github.com/stefan-muehlebach/gg.Radians"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).DrawArc"
  "(*github.com/stefan-muehlebach/gg.Context).ClosePath" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "(*github.com/stefan-muehlebach/gg.Context).ClosePath" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).ClosePath"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawRoundedRectangle"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).Pushed" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Get"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Pushed"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedColor"
  "(*github.com/stefan-muehlebach/gg.Context).SetFillColor" -> "github.com/stefan-muehlebach/gg.NewSolidPattern"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetFillColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderColor"
  "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor" -> "github.com/stefan-muehlebach/gg.NewSolidPattern"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/gg.Context).FillPreserve" -> "github.com/golang/freetype/raster.NewRGBAPainter"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.NRGBA64).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.Gray16).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.RGBA).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.RGBA64).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.CMYK).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.Alpha16).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(*image.Uniform).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.Alpha).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.NYCbCrA).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.YCbCr).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.Gray).RGBA"
  "(*github.com/golang/freetype/raster.RGBAPainter).SetColor" -> "(image/color.NRGBA).RGBA"
  "(*github.com/stefan-muehlebach/gg.Context).FillPreserve" -> "(*github.com/golang/freetype/raster.RGBAPainter).SetColor"
  "(*github.com/stefan-muehlebach/gg.Context).FillPreserve" -> "github.com/stefan-muehlebach/gg.newPatternPainter"
  "(*github.com/stefan-muehlebach/gg.Context).FillPreserve" -> "(*github.com/stefan-muehlebach/gg.Context).fill"
  "(*github.com/stefan-muehlebach/gg.Context).FillStroke" -> "(*github.com/stefan-muehlebach/gg.Context).FillPreserve"
  "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve" -> "github.com/golang/freetype/raster.NewRGBAPainter"
  "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve" -> "(*github.com/golang/freetype/raster.RGBAPainter).SetColor"
  "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve" -> "github.com/stefan-muehlebach/gg.newPatternPainter"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "github.com/stefan-muehlebach/gg.unfix"
  "github.com/stefan-muehlebach/gg.flattenPath" -> "log.Fatal"
  "github.com/stefan-muehlebach/gg.dashed" -> "github.com/stefan-muehlebach/gg.flattenPath"
  "github.com/stefan-muehlebach/gg.dashPath" -> "math.Mod"
  "github.com/stefan-muehlebach/gg.dashPath" -> "(github.com/stefan-muehlebach/gg/geom.Point).Distance"
  "(github.com/stefan-muehlebach/gg/geom.Point).Interpolate" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(github.com/stefan-muehlebach/gg/geom.Point).Interpolate" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(github.com/stefan-muehlebach/gg/geom.Point).Interpolate" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "github.com/stefan-muehlebach/gg.dashPath" -> "(github.com/stefan-muehlebach/gg/geom.Point).Interpolate"
  "github.com/stefan-muehlebach/gg.dashed" -> "github.com/stefan-muehlebach/gg.dashPath"
  "github.com/stefan-muehlebach/gg.rasterPath" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "github.com/stefan-muehlebach/gg.rasterPath" -> "(*github.com/golang/freetype/raster.Path).Start"
  "github.com/stefan-muehlebach/gg.rasterPath" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/stefan-muehlebach/gg.dashed" -> "github.com/stefan-muehlebach/gg.rasterPath"
  "(*github.com/stefan-muehlebach/gg.Context).stroke" -> "github.com/stefan-muehlebach/gg.dashed"
  "(*github.com/stefan-muehlebach/gg.Context).stroke" -> "(*github.com/golang/freetype/raster.Rasterizer).Clear"
  "github.com/stefan-muehlebach/gg.fix" -> "math.Round"
  "(*github.com/stefan-muehlebach/gg.Context).stroke" -> "github.com/stefan-muehlebach/gg.fix"
  "(*github.com/stefan-muehlebach/gg.Context).stroke" -> "(*github.com/stefan-muehlebach/gg.Context).capper"
  "(*github.com/stefan-muehlebach/gg.Context).stroke" -> "(*github.com/stefan-muehlebach/gg.Context).joiner"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.pLen" -> "math.Sqrt"
  "github.com/golang/freetype/raster.pNorm" -> "github.com/golang/freetype/raster.pLen"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "github.com/golang/freetype/raster.pNorm"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "github.com/golang/freetype/raster.pRot90CCW"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).Start"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(*github.com/golang/freetype/raster.Path).Start"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(*github.com/golang/freetype/raster.Path).Start"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.roundJoiner" -> "github.com/golang/freetype/raster.pRot90CW"
  "github.com/golang/freetype/raster.roundJoiner" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pRot45CW"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pRot90CW"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pRot90CW"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pNeg"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pNeg"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addArc" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addArc" -> "github.com/golang/freetype/raster.pNeg"
  "github.com/golang/freetype/raster.roundJoiner" -> "github.com/golang/freetype/raster.addArc"
  "github.com/golang/freetype/raster.roundJoiner" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.roundJoiner" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.roundJoiner" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.roundJoiner" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.roundJoiner" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.roundJoiner" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.roundJoiner" -> "github.com/golang/freetype/raster.pNeg"
  "github.com/golang/freetype/raster.roundJoiner" -> "github.com/golang/freetype/raster.pNeg"
  "github.com/golang/freetype/raster.roundJoiner" -> "github.com/golang/freetype/raster.addArc"
  "(github.com/golang/freetype/raster.JoinerFunc).Join" -> "github.com/golang/freetype/raster.roundJoiner"
  "github.com/golang/freetype/raster.bevelJoiner" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.bevelJoiner" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.bevelJoiner" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.bevelJoiner" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.bevelJoiner" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.bevelJoiner" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(github.com/golang/freetype/raster.JoinerFunc).Join" -> "github.com/golang/freetype/raster.bevelJoiner"
  "(*github.com/golang/freetype/raster.stroker).Add1" -> "(github.com/golang/freetype/raster.JoinerFunc).Join"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(*github.com/golang/freetype/raster.stroker).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pNorm"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pRot90CCW"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Rasterizer).Start"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Start"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Start"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pDot"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pDot"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(github.com/golang/freetype/raster.JoinerFunc).Join"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pNorm"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pRot90CCW"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.curviest2"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pDot"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pDot"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pNorm"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pRot90CCW"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.midpoint"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.addArc"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pNeg"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pNeg"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.addArc"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.midpoint"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.midpoint"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.midpoint"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pNorm"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pRot90CCW"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pNorm"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.pRot90CCW"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.angleGreaterThan45" -> "github.com/golang/freetype/raster.pRot45CCW"
  "github.com/golang/freetype/raster.angleGreaterThan45" -> "github.com/golang/freetype/raster.pDot"
  "github.com/golang/freetype/raster.angleGreaterThan45" -> "github.com/golang/freetype/raster.pRot90CW"
  "github.com/golang/freetype/raster.angleGreaterThan45" -> "github.com/golang/freetype/raster.pDot"
  "(*github.com/golang/freetype/raster.stroker).addNonCurvy2" -> "github.com/golang/freetype/raster.angleGreaterThan45"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.stroker).addNonCurvy2"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.interpolate"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.interpolate"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.interpolate"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pNorm"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pRot90CCW"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pDot"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pDot"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.stroker).addNonCurvy2"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.stroker).addNonCurvy2"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pRot90CW"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.addArc"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.addArc"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pRot90CW"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pNeg"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.addArc"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.pNeg"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "github.com/golang/freetype/raster.addArc"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/golang/freetype/raster.stroker).Add2" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(*github.com/golang/freetype/raster.stroker).Add2"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(*github.com/golang/freetype/raster.stroker).Add3"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(github.com/golang/freetype/raster.Path).lastPoint"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "github.com/golang/freetype/raster.pNeg"
  "github.com/golang/freetype/raster.roundCapper" -> "github.com/golang/freetype/raster.pRot90CCW"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Mul"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.roundCapper" -> "(*github.com/golang/freetype/raster.Rasterizer).Add3"
  "github.com/golang/freetype/raster.roundCapper" -> "(*github.com/golang/freetype/raster.Path).Add3"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.roundCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.roundCapper" -> "(*github.com/golang/freetype/raster.Rasterizer).Add3"
  "github.com/golang/freetype/raster.roundCapper" -> "(*github.com/golang/freetype/raster.Path).Add3"
  "(github.com/golang/freetype/raster.CapperFunc).Cap" -> "github.com/golang/freetype/raster.roundCapper"
  "github.com/golang/freetype/raster.buttCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.buttCapper" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.buttCapper" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(github.com/golang/freetype/raster.CapperFunc).Cap" -> "github.com/golang/freetype/raster.buttCapper"
  "github.com/golang/freetype/raster.squareCapper" -> "github.com/golang/freetype/raster.pRot90CCW"
  "github.com/golang/freetype/raster.squareCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.squareCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.squareCapper" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.squareCapper" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.squareCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.squareCapper" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.squareCapper" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.squareCapper" -> "(golang.org/x/image/math/fixed.Point26_6).Add"
  "github.com/golang/freetype/raster.squareCapper" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.squareCapper" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(github.com/golang/freetype/raster.CapperFunc).Cap" -> "github.com/golang/freetype/raster.squareCapper"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(github.com/golang/freetype/raster.CapperFunc).Cap"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(github.com/golang/freetype/raster.CapperFunc).Cap"
  "github.com/golang/freetype/raster.addPathReversed" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "github.com/golang/freetype/raster.addPathReversed" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "github.com/golang/freetype/raster.addPathReversed" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "github.com/golang/freetype/raster.addPathReversed" -> "(*github.com/golang/freetype/raster.Path).Add2"
  "github.com/golang/freetype/raster.addPathReversed" -> "(*github.com/golang/freetype/raster.Rasterizer).Add3"
  "github.com/golang/freetype/raster.addPathReversed" -> "(*github.com/golang/freetype/raster.Path).Add3"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "github.com/golang/freetype/raster.addPathReversed"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(github.com/golang/freetype/raster.Path).firstPoint"
  "(*github.com/golang/freetype/raster.stroker).stroke" -> "(golang.org/x/image/math/fixed.Point26_6).Sub"
  "github.com/golang/freetype/raster.Stroke" -> "(*github.com/golang/freetype/raster.stroker).stroke"
  "github.com/golang/freetype/raster.Stroke" -> "(*github.com/golang/freetype/raster.stroker).stroke"
  "(*github.com/golang/freetype/raster.Rasterizer).AddStroke" -> "github.com/golang/freetype/raster.Stroke"
  "(*github.com/stefan-muehlebach/gg.Context).stroke" -> "(*github.com/golang/freetype/raster.Rasterizer).AddStroke"
  "(*github.com/stefan-muehlebach/gg.Context).stroke" -> "(*github.com/golang/freetype/raster.Rasterizer).Rasterize"
  "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve" -> "(*github.com/stefan-muehlebach/gg.Context).stroke"
  "(*github.com/stefan-muehlebach/gg.Context).Stroke" -> "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve"
  "(*github.com/stefan-muehlebach/gg.Context).ClearPath" -> "(*github.com/golang/freetype/raster.Path).Clear"
  "(*github.com/stefan-muehlebach/gg.Context).Stroke" -> "(*github.com/stefan-muehlebach/gg.Context).ClearPath"
  "(*github.com/stefan-muehlebach/gg.Context).FillStroke" -> "(*github.com/stefan-muehlebach/gg.Context).Stroke"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).FillStroke"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SelectedColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SelectedColor"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetFillColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SelectedBorderColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SelectedBorderColor"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Color" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Color"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetFillColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor"
  "(*github.com/stefan-muehlebach/adagui.Button).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(*image/jpeg.decoder).readFull" -> "(*image/jpeg.decoder).unreadByteStuffedByte"
  "(*image/jpeg.decoder).readFull" -> "(*image/jpeg.decoder).fill"
  "(*image/jpeg.decoder).processDRI" -> "(*image/jpeg.decoder).readFull"
  "compress/flate.generateFixedLiteralEncoding" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.generateFixedLiteralEncoding" -> "compress/flate.reverseBits"
  "(*internal/poll.FD).Fchmod" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fchmod" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fchmod" -> "internal/poll.ignoringEINTR"
  "(*runtime.sigctxt).r13" -> "(*runtime.sigctxt).regs"
  "periph.io/x/conn/v3/spi/spireg.Open" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "periph.io/x/conn/v3/spi/spireg.Open" -> "strconv.Quote"
  "periph.io/x/conn/v3/spi/spireg.Open" -> "errors.New"
  "periph.io/x/host/v3/sysfs.newSPI" -> "fmt.Errorf"
  "periph.io/x/host/v3/sysfs.newSPI" -> "fmt.Errorf"
  "periph.io/x/host/v3/sysfs.newSPI" -> "fmt.Sprintf"
  "periph.io/x/host/v3/sysfs.ioctlOpenDefault" -> "periph.io/x/host/v3/fs.Open"
  "periph.io/x/host/v3/sysfs.newSPI" -> "periph.io/x/host/v3/sysfs.ioctlOpenDefault"
  "periph.io/x/host/v3/sysfs.newSPI" -> "fmt.Errorf"
  "periph.io/x/host/v3/sysfs.newSPI" -> "fmt.Sprintf"
  "periph.io/x/host/v3/sysfs.NewSPI" -> "periph.io/x/host/v3/sysfs.newSPI"
  "periph.io/x/host/v3/sysfs.NewSPI" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.openerSPI).Open" -> "periph.io/x/host/v3/sysfs.NewSPI"
  "periph.io/x/conn/v3/spi/spireg.Open" -> "(*periph.io/x/host/v3/sysfs.openerSPI).Open"
  "github.com/stefan-muehlebach/adatft/hx8357.Open" -> "periph.io/x/conn/v3/spi/spireg.Open"
  "log.Fatalf" -> "fmt.Sprintf"
  "log.Fatalf" -> "(*log.Logger).Output"
  "log.Fatalf" -> "os.Exit"
  "github.com/stefan-muehlebach/adatft/hx8357.Open" -> "log.Fatalf"
  "github.com/stefan-muehlebach/adatft/hx8357.Open" -> "log.Fatalf"
  "periph.io/x/conn/v3/gpio/gpioreg.ByName" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/gpio/gpioreg.ByName" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/gpio/gpioreg.getByNameDeep" -> "periph.io/x/conn/v3/gpio/gpioreg.getByNameDeep"
  "periph.io/x/conn/v3/gpio/gpioreg.ByName" -> "periph.io/x/conn/v3/gpio/gpioreg.getByNameDeep"
  "github.com/stefan-muehlebach/adatft/hx8357.Open" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "github.com/stefan-muehlebach/adatft/hx8357.Open" -> "log.Fatal"
  "github.com/stefan-muehlebach/adatft/hx8357.Open" -> "(*periph.io/x/host/v3/sysfs.SPI).Connect"
  "reflect.cvtFloatInt" -> "(reflect.flag).ro"
  "reflect.cvtFloatInt" -> "(reflect.Value).Float"
  "reflect.cvtFloatInt" -> "reflect.makeInt"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA_Over" -> "(image.Point).In"
  "(*encoding/json.decodeState).addErrorContext" -> "(*reflect.rtype).Name"
  "(*encoding/json.decodeState).addErrorContext" -> "strings.Join"
  "(*math/rand.lockedSource).Uint64" -> "(*sync.Mutex).Lock"
  "(*math/rand.lockedSource).Uint64" -> "(*math/rand.rngSource).Uint64"
  "(*math/rand.lockedSource).Uint64" -> "(*sync.Mutex).Unlock"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.normalize"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.normalize"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.normalize"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "github.com/golang/freetype/truetype.dotProduct" -> "github.com/golang/freetype/truetype.bool2int32"
  "github.com/golang/freetype/truetype.dotProduct" -> "github.com/golang/freetype/truetype.bool2int32"
  "github.com/golang/freetype/truetype.dotProduct" -> "github.com/golang/freetype/truetype.bool2int32"
  "github.com/golang/freetype/truetype.dotProduct" -> "github.com/golang/freetype/truetype.bool2int32"
  "github.com/golang/freetype/truetype.dotProduct" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).move" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).move" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.skipInstructionPayload"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).round"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).iupInterp" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).iupInterp"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).iupShift"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).iupInterp"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).iupInterp"
  "(*github.com/golang/freetype/truetype.hinter).displacement" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).displacement" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).displacement" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).displacement"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).displacement"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).displacement"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.mulDiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).initializeScaledCVT" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.hinter).getScaledCVT" -> "(*github.com/golang/freetype/truetype.hinter).initializeScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).getScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.fabs"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).round"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).setScaledCVT" -> "(*github.com/golang/freetype/truetype.hinter).initializeScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).setScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).getScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).round"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.bool2int32"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.fmul"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.fdiv"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).round"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).setScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.normalize"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.normalize"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).getScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.fabs"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.fabs"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).round"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.dotProduct"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).round"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.fabs"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "github.com/golang/freetype/truetype.skipInstructionPayload"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).initializeScaledCVT"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).point"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "errors.New"
  "(*github.com/golang/freetype/truetype.hinter).run" -> "(*github.com/golang/freetype/truetype.hinter).move"
  "github.com/stefan-muehlebach/adatft.init" -> "errors.init"
  "github.com/stefan-muehlebach/adatft.init" -> "io/fs.init"
  "github.com/stefan-muehlebach/adatft.init" -> "log.init"
  "github.com/stefan-muehlebach/adatft.init" -> "os.init"
  "github.com/stefan-muehlebach/adatft.init" -> "path/filepath.init"
  "github.com/stefan-muehlebach/adatft.init" -> "periph.io/x/conn/v3/driver/driverreg.init"
  "periph.io/x/host/v3.init" -> "periph.io/x/conn/v3/driver/driverreg.init"
  "periph.io/x/host/v3.init" -> "periph.io/x/host/v3/allwinner.init"
  "periph.io/x/host/v3/bcm283x.init" -> "errors.init"
  "periph.io/x/host/v3/bcm283x.init" -> "fmt.init"
  "periph.io/x/host/v3/bcm283x.init" -> "strings.init"
  "periph.io/x/host/v3/bcm283x.init" -> "time.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/conn/v3/physic.init"
  "periph.io/x/host/v3/bcm283x.init" -> "log.init"
  "periph.io/x/host/v3/bcm283x.init" -> "os.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/conn/v3/driver/driverreg.init"
  "periph.io/x/conn/v3/gpio/gpiostream.init" -> "fmt.init"
  "periph.io/x/conn/v3/gpio/gpiostream.init" -> "time.init"
  "periph.io/x/conn/v3/gpio/gpiostream.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/conn/v3/gpio/gpiostream.init" -> "periph.io/x/conn/v3/physic.init"
  "periph.io/x/conn/v3/gpio/gpiostream.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/conn/v3/gpio/gpiostream.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/pmem.init"
  "periph.io/x/host/v3/videocore.init" -> "fmt.init"
  "periph.io/x/host/v3/videocore.init" -> "os.init"
  "periph.io/x/host/v3/videocore.init" -> "sync.init"
  "periph.io/x/host/v3/videocore.init" -> "unsafe.init"
  "periph.io/x/host/v3/videocore.init" -> "periph.io/x/host/v3/fs.init"
  "periph.io/x/host/v3/videocore.init" -> "periph.io/x/host/v3/pmem.init"
  "periph.io/x/host/v3/fs.IOWR" -> "periph.io/x/host/v3/fs.ioc"
  "periph.io/x/host/v3/videocore.init" -> "periph.io/x/host/v3/fs.IOWR"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/videocore.init"
  "periph.io/x/host/v3/bcm283x.init" -> "strconv.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/conn/v3/gpio/gpioreg.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/distro.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/sysfs.init"
  "periph.io/x/host/v3/bcm283x.init" -> "encoding/binary.init"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/cpu.init"
  "periph.io/x/host/v3/bcm283x.init" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.init#1" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/bcm283x.init#1"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/bcm283x.init#2"
  "periph.io/x/host/v3/bcm283x.init#3" -> "periph.io/x/conn/v3/driver/driverreg.MustRegister"
  "periph.io/x/host/v3/bcm283x.init" -> "periph.io/x/host/v3/bcm283x.init#3"
  "periph.io/x/host/v3.init" -> "periph.io/x/host/v3/bcm283x.init"
  "periph.io/x/host/v3.init" -> "periph.io/x/host/v3/pine64.init"
  "periph.io/x/host/v3/rpi.init" -> "errors.init"
  "periph.io/x/host/v3/rpi.init" -> "fmt.init"
  "periph.io/x/host/v3/rpi.init" -> "os.init"
  "periph.io/x/host/v3/rpi.init" -> "periph.io/x/conn/v3/driver/driverreg.init"
  "periph.io/x/host/v3/rpi.init" -> "periph.io/x/conn/v3/gpio.init"
  "periph.io/x/host/v3/rpi.init" -> "periph.io/x/conn/v3/pin.init"
  "periph.io/x/host/v3/rpi.init" -> "periph.io/x/conn/v3/pin/pinreg.init"
  "periph.io/x/host/v3/rpi.init" -> "periph.io/x/host/v3/bcm283x.init"
  "periph.io/x/host/v3/rpi.init" -> "periph.io/x/host/v3/distro.init"
  "periph.io/x/host/v3/rpi.init" -> "periph.io/x/host/v3/rpi.init#1"
  "periph.io/x/host/v3.init" -> "periph.io/x/host/v3/rpi.init"
  "periph.io/x/host/v3.init" -> "periph.io/x/host/v3/sysfs.init"
  "github.com/stefan-muehlebach/adatft.init" -> "periph.io/x/host/v3.init"
  "bufio.init" -> "bytes.init"
  "bufio.init" -> "errors.init"
  "bufio.init" -> "io.init"
  "bufio.init" -> "strings.init"
  "bufio.init" -> "unicode/utf8.init"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "bufio.init" -> "errors.New"
  "image.init" -> "bufio.init"
  "image.init" -> "errors.init"
  "image.init" -> "io.init"
  "image.init" -> "sync.init"
  "image.init" -> "sync/atomic.init"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image/color.init" -> "image/color.ModelFunc"
  "image.init" -> "image/color.init"
  "image.init" -> "math/bits.init"
  "image.init" -> "strconv.init"
  "image.init" -> "errors.New"
  "image.init" -> "image.NewUniform"
  "image.init" -> "image.NewUniform"
  "image.init" -> "image.NewUniform"
  "image.init" -> "image.NewUniform"
  "github.com/stefan-muehlebach/adatft.init" -> "image.init"
  "github.com/stefan-muehlebach/adatft.init" -> "periph.io/x/conn/v3/physic.init"
  "github.com/stefan-muehlebach/adatft/hx8357.init" -> "periph.io/x/conn/v3/gpio.init"
  "github.com/stefan-muehlebach/adatft/hx8357.init" -> "periph.io/x/conn/v3/physic.init"
  "github.com/stefan-muehlebach/adatft/hx8357.init" -> "periph.io/x/conn/v3/spi.init"
  "github.com/stefan-muehlebach/adatft/hx8357.init" -> "log.init"
  "github.com/stefan-muehlebach/adatft/hx8357.init" -> "periph.io/x/conn/v3/gpio/gpioreg.init"
  "github.com/stefan-muehlebach/adatft/hx8357.init" -> "periph.io/x/conn/v3/spi/spireg.init"
  "github.com/stefan-muehlebach/adatft/hx8357.init" -> "time.init"
  "github.com/stefan-muehlebach/adatft.init" -> "github.com/stefan-muehlebach/adatft/hx8357.init"
  "encoding/json.init" -> "encoding.init"
  "encoding/base64.init" -> "encoding/binary.init"
  "encoding/base64.init" -> "io.init"
  "encoding/base64.init" -> "slices.init"
  "encoding/base64.init" -> "strconv.init"
  "encoding/base64.init" -> "encoding/base64.NewEncoding"
  "encoding/base64.init" -> "encoding/base64.NewEncoding"
  "encoding/base64.init" -> "(encoding/base64.Encoding).WithPadding"
  "encoding/base64.init" -> "(encoding/base64.Encoding).WithPadding"
  "encoding/json.init" -> "encoding/base64.init"
  "encoding/json.init" -> "fmt.init"
  "encoding/json.init" -> "reflect.init"
  "encoding/json.init" -> "strconv.init"
  "encoding/json.init" -> "strings.init"
  "encoding/json.init" -> "unicode.init"
  "encoding/json.init" -> "unicode/utf16.init"
  "encoding/json.init" -> "unicode/utf8.init"
  "encoding/json.init" -> "bytes.init"
  "encoding/json.init" -> "math.init"
  "encoding/json.init" -> "slices.init"
  "encoding/json.init" -> "sort.init"
  "encoding/json.init" -> "sync.init"
  "encoding/json.init" -> "errors.init"
  "encoding/json.init" -> "io.init"
  "reflect.TypeFor[encoding.TextUnmarshaler]" -> "reflect.TypeOf"
  "reflect.TypeFor[encoding.TextUnmarshaler]" -> "(*reflect.rtype).Elem"
  "encoding/json.init" -> "reflect.TypeFor[encoding.TextUnmarshaler]"
  "reflect.TypeFor[encoding/json.Number]" -> "reflect.TypeOf"
  "reflect.TypeFor[encoding/json.Number]" -> "(*reflect.rtype).Elem"
  "encoding/json.init" -> "reflect.TypeFor[encoding/json.Number]"
  "reflect.TypeFor[encoding/json.Marshaler]" -> "reflect.TypeOf"
  "reflect.TypeFor[encoding/json.Marshaler]" -> "(*reflect.rtype).Elem"
  "encoding/json.init" -> "reflect.TypeFor[encoding/json.Marshaler]"
  "reflect.TypeFor[encoding.TextMarshaler]" -> "reflect.TypeOf"
  "reflect.TypeFor[encoding.TextMarshaler]" -> "(*reflect.rtype).Elem"
  "encoding/json.init" -> "reflect.TypeFor[encoding.TextMarshaler]"
  "github.com/stefan-muehlebach/adatft.init" -> "encoding/json.init"
  "github.com/stefan-muehlebach/adatft.init" -> "math.init"
  "github.com/stefan-muehlebach/adatft.init" -> "image/color.init"
  "github.com/stefan-muehlebach/adatft.init" -> "fmt.init"
  "github.com/stefan-muehlebach/adatft.init" -> "time.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "periph.io/x/conn/v3/gpio.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "periph.io/x/conn/v3/physic.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "periph.io/x/conn/v3/spi.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "fmt.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "log.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "time.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "periph.io/x/conn/v3/gpio/gpioreg.init"
  "github.com/stefan-muehlebach/adatft/stmpe610.init" -> "periph.io/x/conn/v3/spi/spireg.init"
  "github.com/stefan-muehlebach/adatft.init" -> "github.com/stefan-muehlebach/adatft/stmpe610.init"
  "github.com/stefan-muehlebach/adatft.init" -> "image/color.ModelFunc"
  "github.com/stefan-muehlebach/adatft.init" -> "github.com/stefan-muehlebach/adatft.NewStopwatch"
  "github.com/stefan-muehlebach/adatft.init" -> "github.com/stefan-muehlebach/adatft.NewStopwatch"
  "github.com/stefan-muehlebach/adatft.init" -> "github.com/stefan-muehlebach/adatft.NewStopwatch"
  "github.com/stefan-muehlebach/adatft.init" -> "github.com/stefan-muehlebach/adatft.NewStopwatch"
  "internal/testlog.Getenv" -> "internal/testlog.Logger"
  "os.Getenv" -> "internal/testlog.Getenv"
  "os.Getenv" -> "syscall.Getenv"
  "os.UserConfigDir" -> "os.Getenv"
  "os.UserConfigDir" -> "os.Getenv"
  "os.UserConfigDir" -> "errors.New"
  "os.UserConfigDir" -> "os.Getenv"
  "os.UserConfigDir" -> "errors.New"
  "os.UserConfigDir" -> "os.Getenv"
  "os.UserConfigDir" -> "errors.New"
  "os.UserConfigDir" -> "os.Getenv"
  "os.UserConfigDir" -> "errors.New"
  "github.com/stefan-muehlebach/adatft.init#1" -> "os.UserConfigDir"
  "github.com/stefan-muehlebach/adatft.init#1" -> "log.Fatalf"
  "github.com/stefan-muehlebach/adatft.init#1" -> "path/filepath.Join"
  "os.MkdirAll" -> "os.Stat"
  "os.MkdirAll" -> "(*os.fileStat).IsDir"
  "os.MkdirAll" -> "os.IsPathSeparator"
  "os.MkdirAll" -> "os.IsPathSeparator"
  "os.MkdirAll" -> "os.volumeName"
  "os.MkdirAll" -> "os.MkdirAll"
  "os.Mkdir" -> "os.fixLongPath"
  "os.Mkdir" -> "os.ignoringEINTR"
  "os.Mkdir" -> "os.setStickyBit"
  "os.Remove" -> "os.ignoringEINTR"
  "os.Remove" -> "os.ignoringEINTR"
  "os.Mkdir" -> "os.Remove"
  "os.MkdirAll" -> "os.Mkdir"
  "os.MkdirAll" -> "os.Lstat"
  "os.MkdirAll" -> "(*os.fileStat).IsDir"
  "os.MkdirAll" -> "(*embed.file).IsDir"
  "os.MkdirAll" -> "(*embed.file).IsDir"
  "github.com/stefan-muehlebach/adatft.init#1" -> "os.MkdirAll"
  "github.com/stefan-muehlebach/adatft.init#1" -> "log.Fatalf"
  "os.UserCacheDir" -> "os.Getenv"
  "os.UserCacheDir" -> "os.Getenv"
  "os.UserCacheDir" -> "errors.New"
  "os.UserCacheDir" -> "os.Getenv"
  "os.UserCacheDir" -> "errors.New"
  "os.UserCacheDir" -> "os.Getenv"
  "os.UserCacheDir" -> "errors.New"
  "os.UserCacheDir" -> "os.Getenv"
  "os.UserCacheDir" -> "errors.New"
  "github.com/stefan-muehlebach/adatft.init#1" -> "os.UserCacheDir"
  "github.com/stefan-muehlebach/adatft.init#1" -> "errors.Is"
  "github.com/stefan-muehlebach/adatft.init#1" -> "log.Fatalf"
  "github.com/stefan-muehlebach/adatft.init#1" -> "path/filepath.Join"
  "github.com/stefan-muehlebach/adatft.init#1" -> "os.MkdirAll"
  "github.com/stefan-muehlebach/adatft.init#1" -> "log.Fatalf"
  "github.com/stefan-muehlebach/adatft.init#1" -> "path/filepath.Join"
  "github.com/stefan-muehlebach/adatft.init#1" -> "os.OpenFile"
  "github.com/stefan-muehlebach/adatft.init#1" -> "errors.Is"
  "github.com/stefan-muehlebach/adatft.init#1" -> "log.Fatalf"
  "github.com/stefan-muehlebach/adatft.init#1" -> "log.New"
  "periph.io/x/conn/v3/driver/driverreg.Init" -> "(*sync.Mutex).Lock"
  "periph.io/x/conn/v3/driver/driverreg.Init" -> "(*sync.Mutex).Unlock"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "(*sync.WaitGroup).Add"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "(*sync.WaitGroup).Add"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "(*sync.WaitGroup).Add"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/allwinner.driverDMA).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/pine64.driver).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/rpi.driver).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverI2C).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverLED).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverSPI).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).Prerequisites"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/allwinner.driverDMA).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/pine64.driver).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/rpi.driver).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverI2C).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverLED).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverSPI).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).After"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "strconv.Quote"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "strconv.Quote"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "errors.New"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "strings.Join"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "errors.New"
  "periph.io/x/conn/v3/driver/driverreg.insertString" -> "periph.io/x/conn/v3/driver/driverreg.search"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "periph.io/x/conn/v3/driver/driverreg.insertString"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "strings.Join"
  "periph.io/x/conn/v3/driver/driverreg.explodeStages" -> "periph.io/x/conn/v3/driver/driverreg.insertString"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "periph.io/x/conn/v3/driver/driverreg.explodeStages"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel" -> "(*sync.Map).Store"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel"
  "periph.io/x/conn/v3/driver/driverreg.initImpl" -> "(*sync.WaitGroup).Wait"
  "periph.io/x/conn/v3/driver/driverreg.Init" -> "periph.io/x/conn/v3/driver/driverreg.initImpl"
  "periph.io/x/host/v3.Init" -> "periph.io/x/conn/v3/driver/driverreg.Init"
  "github.com/stefan-muehlebach/adatft.init#1" -> "periph.io/x/host/v3.Init"
  "github.com/stefan-muehlebach/adatft.init#1" -> "log.Fatalf"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/allwinner.driverDMA).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/allwinner.driverGPIO).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/allwinner.driverGPIOPL).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/bcm283x.driverDMA).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/bcm283x.driverGPIO).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/pine64.driver).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/rpi.driver).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/sysfs.driverGPIO).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/sysfs.driverI2C).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/sysfs.driverLED).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/sysfs.driverSPI).String"
  "github.com/stefan-muehlebach/adatft.init#1" -> "(*periph.io/x/host/v3/sysfs.driverThermalSensor).String"
  "github.com/stefan-muehlebach/adatft.init" -> "github.com/stefan-muehlebach/adatft.init#1"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).setLoc"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).unixSec"
  "(*time.Time).UnmarshalBinary" -> "(*time.Location).lookup"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).setLoc"
  "(*time.Time).UnmarshalBinary" -> "time.FixedZone"
  "(*time.Time).UnmarshalBinary" -> "(*time.Time).setLoc"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateBeginValue"
  "(*encoding/json.decodeState).scanWhile" -> "(*encoding/json.scanner).eof"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateBeginStringOrEmpty"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateBeginValueOrEmpty"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateInString"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateNeg"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.state0"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateT"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateF"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateN"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.state1"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateEndValue"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateInStringEsc"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateDot"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateE"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateTr"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateFa"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateNu"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateError"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateEndTop"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateBeginString"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateInStringEscU"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateDot0"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateESign"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateTru"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateFal"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateNul"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateInStringEscU1"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateE0"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateFals"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateInStringEscU12"
  "(*encoding/json.decodeState).scanWhile" -> "encoding/json.stateInStringEscU123"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.openMailbox" -> "(*sync.Mutex).Lock"
  "periph.io/x/host/v3/videocore.openMailbox" -> "(*sync.Mutex).Unlock"
  "periph.io/x/host/v3/videocore.openMailbox" -> "periph.io/x/host/v3/fs.Open"
  "periph.io/x/host/v3/videocore.smokeTest" -> "periph.io/x/host/v3/videocore.mailboxTx32"
  "periph.io/x/host/v3/videocore.openMailbox" -> "periph.io/x/host/v3/videocore.smokeTest"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.openMailbox"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.mailboxTx32"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.mailboxTx32"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/pmem.Map"
  "periph.io/x/host/v3/videocore.Alloc" -> "periph.io/x/host/v3/videocore.wrapf"
  "periph.io/x/host/v3/bcm283x.allocateCB" -> "periph.io/x/host/v3/videocore.Alloc"
  "periph.io/x/host/v3/bcm283x.allocateCB" -> "(*periph.io/x/host/v3/pmem.Slice).AsPOD"
  "periph.io/x/host/v3/bcm283x.allocateCB" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "math.Atan2" -> "math.archAtan2"
  "math.atan2" -> "math.IsNaN"
  "math.atan2" -> "math.NaN"
  "math.atan2" -> "math.IsNaN"
  "math.atan2" -> "math.Copysign"
  "math.atan2" -> "math.Copysign"
  "math.atan2" -> "math.Copysign"
  "math.Signbit" -> "math.Float64bits"
  "math.atan2" -> "math.Signbit"
  "math.atan2" -> "math.IsInf"
  "math.atan2" -> "math.IsInf"
  "math.atan2" -> "math.Copysign"
  "math.atan2" -> "math.IsInf"
  "math.atan2" -> "math.IsInf"
  "math.atan2" -> "math.IsInf"
  "math.atan2" -> "math.Copysign"
  "math.atan2" -> "math.Copysign"
  "math.atan2" -> "math.Copysign"
  "math.atan2" -> "math.Copysign"
  "math.atan2" -> "math.Atan"
  "math.Atan2" -> "math.atan2"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadMsgInet6" -> "internal/syscall/unix.RecvmsgInet6"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadMsgInet6" -> "(*internal/poll.pollDesc).pollable"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.pollDesc).prepareWrite"
  "syscall.Sendto" -> "(*syscall.SockaddrInet4).sockaddr"
  "syscall.Sendto" -> "(*syscall.SockaddrInet6).sockaddr"
  "syscall.sendto" -> "syscall.Syscall6"
  "syscall.sendto" -> "syscall.errnoErr"
  "syscall.Sendto" -> "syscall.sendto"
  "syscall.Sendto" -> "(*syscall.SockaddrNetlink).sockaddr"
  "syscall.Sendto" -> "(*syscall.SockaddrLinklayer).sockaddr"
  "syscall.Sendto" -> "(*syscall.SockaddrUnix).sockaddr"
  "(*internal/poll.FD).WriteTo" -> "syscall.Sendto"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteTo" -> "(*internal/poll.pollDesc).pollable"
  "github.com/stefan-muehlebach/adagui.NewLine" -> "(*github.com/stefan-muehlebach/adagui.Shape).Init"
  "github.com/stefan-muehlebach/adagui.NewLine" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "(github.com/stefan-muehlebach/gg/geom.Point).Min" -> "github.com/stefan-muehlebach/gg/geom.min"
  "(github.com/stefan-muehlebach/gg/geom.Point).Min" -> "github.com/stefan-muehlebach/gg/geom.min"
  "github.com/stefan-muehlebach/adagui.NewLine" -> "(github.com/stefan-muehlebach/gg/geom.Point).Min"
  "github.com/stefan-muehlebach/adagui.NewLine" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "github.com/stefan-muehlebach/gg/geom.Rect" -> "github.com/stefan-muehlebach/gg/geom.NewRectangle"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "github.com/stefan-muehlebach/gg/geom.Rect"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Size"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP0" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "github.com/stefan-muehlebach/adagui.NewLine" -> "(*github.com/stefan-muehlebach/adagui.Line).SetP0"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "github.com/stefan-muehlebach/gg/geom.Rect"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Size"
  "(*github.com/stefan-muehlebach/adagui.Line).SetP1" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "github.com/stefan-muehlebach/adagui.NewLine" -> "(*github.com/stefan-muehlebach/adagui.Line).SetP1"
  "command-line-arguments.NewLine" -> "github.com/stefan-muehlebach/adagui.NewLine"
  "command-line-arguments.NewLine" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnPress"
  "command-line-arguments.NewLine" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDrag"
  "command-line-arguments.NewLine" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnRelease"
  "command-line-arguments.NewCanvas$1" -> "command-line-arguments.NewLine"
  "command-line-arguments.NewCanvas$1" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add"
  "command-line-arguments.NewCanvas$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewCanvas$1"
  "command-line-arguments.NewCanvas$2" -> "(*github.com/stefan-muehlebach/adagui.Line).SetP1"
  "command-line-arguments.NewCanvas$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewCanvas$2"
  "command-line-arguments.NewCanvas$3" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewCanvas$3"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewCanvas$4"
  "command-line-arguments.NewCircle$1" -> "(*github.com/stefan-muehlebach/adagui.Circle).Pos"
  "command-line-arguments.NewCircle$1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewCircle$1" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewCircle$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewCircle$1"
  "command-line-arguments.NewCircle$2" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewCircle$2" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewCircle$2" -> "(*github.com/stefan-muehlebach/adagui.Circle).SetPos"
  "command-line-arguments.NewCircle$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewCircle$2"
  "command-line-arguments.NewCircle$3" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewCircle$3"
  "command-line-arguments.NewLine$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "command-line-arguments.NewLine$1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewLine$1" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewLine$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewLine$1"
  "command-line-arguments.NewLine$2" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewLine$2" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewLine$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "command-line-arguments.NewLine$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewLine$2"
  "command-line-arguments.NewLine$3" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewLine$3"
  "command-line-arguments.NewRectangle$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "command-line-arguments.NewRectangle$1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewRectangle$1" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewRectangle$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewRectangle$1"
  "command-line-arguments.NewRectangle$2" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewRectangle$2" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewRectangle$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "command-line-arguments.NewRectangle$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewRectangle$2"
  "command-line-arguments.NewRectangle$3" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewRectangle$3"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewPoint$1"
  "command-line-arguments.NewPoint$2" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewPoint$2" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewPoint$2" -> "(*github.com/stefan-muehlebach/adagui.Point).SetPos"
  "command-line-arguments.NewPoint$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewPoint$2"
  "command-line-arguments.NewPoint$3" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewPoint$3"
  "command-line-arguments.NewEllipse$1" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Pos"
  "command-line-arguments.NewEllipse$1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewEllipse$1" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewEllipse$1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewEllipse$1"
  "command-line-arguments.NewEllipse$2" -> "github.com/stefan-muehlebach/adagui.init$1"
  "command-line-arguments.NewEllipse$2" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "command-line-arguments.NewEllipse$2" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos"
  "command-line-arguments.NewEllipse$2" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewEllipse$2"
  "command-line-arguments.NewEllipse$3" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc" -> "command-line-arguments.NewEllipse$3"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).error"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).okVerb" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).getRune"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).error"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).error"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBool" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanBool"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).floatToken" -> "(*fmt.ss).accept"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).error"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).error"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).error"
  "(*fmt.ss).complexTokens" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).complexTokens"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).scanComplex" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanComplex"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanComplex"
  "(*fmt.ss).scanRune" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanRune" -> "(*fmt.ss).getRune"
  "(*fmt.ss).scanRune" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).scanRune"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).getBase" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).getBase"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanNumber" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).scanNumber"
  "(*fmt.ss).scanInt" -> "strconv.ParseInt"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).accept"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanBasePrefix" -> "(*fmt.ss).peek"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).scanBasePrefix"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).error"
  "(*fmt.ss).scanInt" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).scanRune"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).getBase"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).scanNumber"
  "(*fmt.ss).scanUint" -> "strconv.ParseUint"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).consume"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).scanBasePrefix"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).error"
  "(*fmt.ss).scanUint" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertFloat"
  "(*fmt.ss).convertString" -> "(*fmt.ss).okVerb"
  "(*fmt.ss).convertString" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).convertString" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).getRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeByte"
  "(*fmt.ss).mustReadRune" -> "(*fmt.ss).getRune"
  "(*fmt.ss).mustReadRune" -> "(*fmt.ss).error"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).errorString"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).quotedString" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).quotedString" -> "strconv.Unquote"
  "(*fmt.ss).quotedString" -> "(*fmt.ss).error"
  "(*fmt.ss).convertString" -> "(*fmt.ss).quotedString"
  "(*fmt.ss).hexString" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).getRune"
  "(*fmt.ss).hexByte" -> "fmt.hexDigit"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).hexByte" -> "fmt.hexDigit"
  "(*fmt.ss).hexByte" -> "(*fmt.ss).errorString"
  "(*fmt.ss).hexString" -> "(*fmt.ss).hexByte"
  "(*fmt.ss).hexString" -> "(*fmt.buffer).writeByte"
  "(*fmt.ss).hexString" -> "(*fmt.ss).errorString"
  "(*fmt.ss).convertString" -> "(*fmt.ss).hexString"
  "(*fmt.ss).token" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).token" -> "(*fmt.ss).getRune"
  "(*fmt.ss).token" -> "fmt.notSpace"
  "(*fmt.ss).token" -> "unicode.IsSpace"
  "(*fmt.ss).token" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).token" -> "(*fmt.buffer).writeRune"
  "(*fmt.ss).token" -> "periph.io/x/conn/v3/pin.isNum"
  "(*fmt.ss).convertString" -> "(*fmt.ss).token"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "(*fmt.ss).scanOne" -> "reflect.ValueOf"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Kind"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).String"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Elem"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Kind"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanBool"
  "(reflect.Value).SetBool" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetBool" -> "(reflect.flag).mustBe"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetBool"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*reflect.rtype).Bits" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Bits" -> "(*reflect.rtype).String"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanInt"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetInt"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanUint"
  "(reflect.Value).SetUint" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetUint" -> "(reflect.flag).kind"
  "(reflect.Value).SetUint" -> "(reflect.flag).kind"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetUint"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetString"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Elem"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Kind"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).notEOF"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).floatToken"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertFloat"
  "(reflect.Value).SetFloat" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetFloat" -> "(reflect.flag).kind"
  "(reflect.Value).SetFloat" -> "(reflect.flag).kind"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetFloat"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).String"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).errorString"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).convertString"
  "reflect.MakeSlice" -> "(*reflect.rtype).Kind"
  "reflect.MakeSlice" -> "(*reflect.rtype).Elem"
  "reflect.MakeSlice" -> "reflect.unsafe_NewArray"
  "(*fmt.ss).scanOne" -> "reflect.MakeSlice"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Set"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Index"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetUint"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).Bits"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).scanComplex"
  "(reflect.Value).SetComplex" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetComplex" -> "(reflect.flag).kind"
  "(reflect.Value).SetComplex" -> "(reflect.flag).kind"
  "(*fmt.ss).scanOne" -> "(reflect.Value).SetComplex"
  "(*fmt.ss).scanOne" -> "(reflect.Value).Type"
  "(*fmt.ss).scanOne" -> "(*reflect.rtype).String"
  "(*fmt.ss).scanOne" -> "(*fmt.ss).errorString"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.huffmanBitWriter).writeStoredHeader"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.huffmanBitWriter).flush"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.compressor).store"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.compressor).storeHuff"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.compressor).encSpeed"
  "(*compress/flate.compressor).syncFlush" -> "(*compress/flate.compressor).deflate"
  "(reflect.Value).FieldByName" -> "(reflect.flag).mustBe"
  "(reflect.Value).FieldByName" -> "(reflect.Value).typ"
  "(reflect.Value).FieldByName" -> "reflect.toRType"
  "(*reflect.rtype).FieldByName" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).FieldByName" -> "(*reflect.rtype).String"
  "(*reflect.structType).FieldByName" -> "(internal/abi.Name).Name"
  "(*reflect.structType).FieldByName" -> "(*reflect.structType).Field"
  "(*reflect.structType).FieldByName" -> "(*internal/abi.StructField).Embedded"
  "(*reflect.structType).FieldByNameFunc" -> "(internal/abi.Name).Name"
  "(*reflect.structType).FieldByNameFunc" -> "(*internal/abi.StructField).Embedded"
  "(*reflect.structType).FieldByNameFunc" -> "(*internal/abi.Type).Kind"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.structType).FieldByName$1"
  "(*reflect.structType).FieldByNameFunc" -> "(*internal/abi.Type).Elem"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.structType).Field"
  "(*reflect.structType).FieldByNameFunc" -> "(*internal/abi.Type).Kind"
  "(*reflect.structType).FieldByName" -> "(*reflect.structType).FieldByNameFunc"
  "(*reflect.rtype).FieldByName" -> "(*reflect.structType).FieldByName"
  "(reflect.Value).FieldByName" -> "(*reflect.rtype).FieldByName"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Field"
  "(reflect.Value).FieldByIndex" -> "(reflect.flag).mustBe"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Kind"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Field"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).IsNil"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).typ"
  "(reflect.Value).FieldByIndex" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).FieldByIndex" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Elem"
  "(reflect.Value).FieldByName" -> "(reflect.Value).FieldByIndex"
  "(reflect.Value).Slice" -> "(reflect.flag).kind"
  "(reflect.Value).Slice" -> "(reflect.Value).typ"
  "(reflect.Value).Slice" -> "(reflect.Value).typ"
  "(reflect.Value).Slice" -> "(reflect.flag).kind"
  "(reflect.Value).Slice" -> "reflect.arrayAt"
  "(reflect.Value).Slice" -> "(reflect.Value).typ"
  "(reflect.Value).Slice" -> "(*internal/abi.Type).Size"
  "(reflect.Value).Slice" -> "reflect.arrayAt"
  "(reflect.Value).Slice" -> "(reflect.flag).ro"
  "(reflect.Value).Slice" -> "(*internal/abi.Type).Common"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*runtime.sigctxt).r15" -> "(*runtime.sigctxt).regs"
  "(*image/jpeg.encoder).write" -> "(*bufio.Writer).Write"
  "(*image/jpeg.encoder).writeMarkerHeader" -> "(*image/jpeg.encoder).write"
  "reflect.cvtT2I" -> "(*reflect.rtype).common"
  "reflect.cvtT2I" -> "reflect.unsafe_New"
  "reflect.cvtT2I" -> "reflect.valueInterface"
  "reflect.cvtT2I" -> "(*reflect.rtype).NumMethod"
  "reflect.cvtT2I" -> "(*reflect.rtype).common"
  "reflect.cvtT2I" -> "(reflect.flag).ro"
  "reflect.cvtT2I" -> "(*reflect.rtype).common"
  "reflect.cvtT2I" -> "reflect.ifaceE2I"
  "(*github.com/stefan-muehlebach/adagui/binding.base).RemoveCallback" -> "(*sync.Map).Delete"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).InnerPadding" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*reflect.rtype).NumOut" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).NumOut" -> "(*reflect.rtype).String"
  "(*reflect.rtype).NumOut" -> "(*internal/abi.FuncType).NumOut"
  "(*github.com/stefan-muehlebach/gg.Context).StrokeFill" -> "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve"
  "(*github.com/stefan-muehlebach/gg.Context).Fill" -> "(*github.com/stefan-muehlebach/gg.Context).FillPreserve"
  "(*github.com/stefan-muehlebach/gg.Context).Fill" -> "(*github.com/stefan-muehlebach/gg.Context).ClearPath"
  "(*github.com/stefan-muehlebach/gg.Context).StrokeFill" -> "(*github.com/stefan-muehlebach/gg.Context).Fill"
  "reflect.MakeMapWithSize" -> "(*reflect.rtype).Kind"
  "reflect.MakeMapWithSize" -> "(*reflect.rtype).common"
  "reflect.MakeMapWithSize" -> "reflect.makemap"
  "reflect.MakeMap" -> "reflect.MakeMapWithSize"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetSelectedTextColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*runtime.sigctxt).set_r28" -> "(*runtime.sigctxt).regs"
  "(reflect.Value).MapIndex" -> "(reflect.flag).mustBe"
  "(reflect.Value).MapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).MapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).MapIndex" -> "(reflect.Value).pointer"
  "(reflect.Value).MapIndex" -> "reflect.mapaccess_faststr"
  "(reflect.Value).MapIndex" -> "(reflect.Value).assignTo"
  "(reflect.Value).MapIndex" -> "(*internal/abi.Type).Size"
  "(reflect.Value).MapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).MapIndex" -> "(reflect.flag).kind"
  "(reflect.Value).MapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).MapIndex" -> "(reflect.Value).pointer"
  "(reflect.Value).MapIndex" -> "reflect.mapaccess"
  "(reflect.Value).MapIndex" -> "(reflect.flag).ro"
  "(reflect.Value).MapIndex" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).MapIndex" -> "reflect.copyVal"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "time.Now"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "github.com/stefan-muehlebach/gg/geom.NewPoint"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread$1" -> "time.Sleep"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread$1" -> "time.Now"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread$1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Distance"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Screen).eventThread$1"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "time.Now"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "github.com/stefan-muehlebach/gg/geom.NewPoint"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "time.Now"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "github.com/stefan-muehlebach/gg/geom.NewPoint"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "(github.com/stefan-muehlebach/gg/geom.Point).Distance"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "(github.com/stefan-muehlebach/gg/geom.Point).Distance"
  "(*github.com/stefan-muehlebach/adagui.Screen).eventThread" -> "(time.Time).Sub"
  "(*github.com/stefan-muehlebach/adagui.Screen).Run" -> "(*github.com/stefan-muehlebach/adagui.Screen).eventThread"
  "(*github.com/stefan-muehlebach/adagui.Screen).Run" -> "(*github.com/stefan-muehlebach/adagui.Window).Close"
  "(*github.com/stefan-muehlebach/adatft.Display).Close" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Clear"
  "(*github.com/stefan-muehlebach/adatft.Stopwatch).Start" -> "time.Now"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft.Stopwatch).Start"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(image.Rectangle).Dx"
  "(*periph.io/x/host/v3/bcm283x.Pin).Out" -> "(*periph.io/x/host/v3/bcm283x.Pin).Halt"
  "(*periph.io/x/host/v3/bcm283x.Pin).Out" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).Out" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).Out" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*periph.io/x/host/v3/bcm283x.Pin).Out" -> "(*periph.io/x/host/v3/bcm283x.Pin).FastOut"
  "(*periph.io/x/host/v3/bcm283x.Pin).Out" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd" -> "(periph.io/x/conn/v3/gpio.invalidPin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd" -> "(*periph.io/x/host/v3/allwinner.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd" -> "(*periph.io/x/host/v3/allwinner.PinPL).Out"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32" -> "(periph.io/x/conn/v3/gpio.invalidPin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32" -> "(*periph.io/x/host/v3/allwinner.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32" -> "(*periph.io/x/host/v3/allwinner.PinPL).Out"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).Data32"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).Cmd"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data32"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).Data32"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).Cmd"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(image.Rectangle).Dy"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray" -> "(periph.io/x/conn/v3/gpio.invalidPin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray" -> "(*periph.io/x/host/v3/allwinner.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray" -> "(*periph.io/x/host/v3/allwinner.PinPL).Out"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).DataArray"
  "(*github.com/stefan-muehlebach/adatft.Stopwatch).Stop" -> "time.Since"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft.Stopwatch).Stop"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray"
  "(*github.com/stefan-muehlebach/adatft.Display).sendImage" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).DataArray"
  "(*github.com/stefan-muehlebach/adatft.Display).Close" -> "(*github.com/stefan-muehlebach/adatft.Display).sendImage"
  "(*github.com/stefan-muehlebach/adatft.Display).Close" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Close"
  "(*github.com/stefan-muehlebach/adatft.Display).Close" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).Close"
  "(*github.com/stefan-muehlebach/adagui.Screen).Run" -> "(*github.com/stefan-muehlebach/adatft.Display).Close"
  "(*runtime/internal/atomic.Uint64).Swap" -> "runtime/internal/atomic.Xchg64"
  "log.SetFlags" -> "(*log.Logger).SetFlags"
  "github.com/stefan-muehlebach/adagui.init#2" -> "log.SetFlags"
  "log.SetPrefix" -> "(*log.Logger).SetPrefix"
  "github.com/stefan-muehlebach/adagui.init#2" -> "log.SetPrefix"
  "hash/crc32.ChecksumIEEE" -> "(*sync.Once).Do"
  "hash/crc32.ChecksumIEEE" -> "hash/crc32.archUpdateIEEE"
  "hash/crc32.ChecksumIEEE" -> "hash/crc32.ieeeInit$1"
  "hash/crc32.tableSum" -> "hash/crc32.ChecksumIEEE"
  "hash/crc32.tableSum" -> "hash/crc32.appendUint32"
  "internal/poll.dupCloseOnExecOld" -> "(*sync.RWMutex).RLock"
  "internal/poll.dupCloseOnExecOld" -> "(*sync.RWMutex).RUnlock"
  "syscall.Dup" -> "syscall.Syscall"
  "syscall.Dup" -> "syscall.errnoErr"
  "internal/poll.dupCloseOnExecOld" -> "syscall.Dup"
  "internal/poll.dupCloseOnExecOld" -> "syscall.CloseOnExec"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.source).varLenView" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.source).varLenView" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.source).varLenView" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.Font).parseGPOSScriptFeatures"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSFeaturesLookup" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSFeaturesLookup" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSFeaturesLookup" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSFeaturesLookup" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSFeaturesLookup" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.Font).parseGPOSFeaturesLookup"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedCoverageLookup" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedCoverageLookup" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedCoverageLookup" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedCoverageLookup" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "golang.org/x/image/font/sfnt.makeCachedCoverageList" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedCoverageLookup" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList"
  "golang.org/x/image/font/sfnt.makeCachedCoverageRange" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedCoverageLookup" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedCoverageLookup"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1" -> "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat1"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup" -> "(*golang.org/x/image/font/sfnt.source).varLenView"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat1" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat1"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedClassLookup"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2" -> "golang.org/x/image/font/sfnt.makeCachedPairPosClass"
  "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern" -> "(*golang.org/x/image/font/sfnt.Font).parsePairPosFormat2"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.spiConn).initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "(*periph.io/x/host/v3/sysfs.spiConn).MOSI" -> "(*periph.io/x/host/v3/sysfs.spiConn).initPins"
  "reflect.initFuncTypes" -> "(*sync.Mutex).Lock"
  "reflect.initFuncTypes" -> "(*sync.Mutex).Unlock"
  "reflect.initFuncTypes" -> "reflect.TypeOf"
  "reflect.initFuncTypes" -> "reflect.TypeOf"
  "reflect.ArrayOf" -> "(*reflect.rtype).common"
  "reflect.ArrayOf" -> "(*sync.Map).Load"
  "reflect.ArrayOf" -> "strconv.Itoa"
  "reflect.ArrayOf" -> "reflect.stringFor"
  "reflect.ArrayOf" -> "reflect.typesByString"
  "reflect.ArrayOf" -> "reflect.newName"
  "reflect.ArrayOf" -> "reflect.resolveReflectName"
  "reflect.ArrayOf" -> "reflect.fnv1"
  "reflect.ArrayOf" -> "reflect.toRType"
  "reflect.ArrayOf" -> "(*sync.Map).LoadOrStore"
  "reflect.ArrayOf" -> "reflect.fnv1"
  "reflect.ArrayOf" -> "reflect.fnv1"
  "reflect.SliceOf" -> "(*reflect.rtype).common"
  "reflect.SliceOf" -> "(*sync.Map).Load"
  "reflect.SliceOf" -> "reflect.stringFor"
  "reflect.SliceOf" -> "reflect.typesByString"
  "reflect.SliceOf" -> "reflect.newName"
  "reflect.SliceOf" -> "reflect.resolveReflectName"
  "reflect.SliceOf" -> "reflect.fnv1"
  "reflect.SliceOf" -> "reflect.toRType"
  "reflect.SliceOf" -> "(*sync.Map).LoadOrStore"
  "reflect.SliceOf" -> "reflect.toRType"
  "reflect.SliceOf" -> "(*sync.Map).LoadOrStore"
  "reflect.ArrayOf" -> "reflect.SliceOf"
  "reflect.ArrayOf" -> "(*internal/abi.Type).Size"
  "reflect.emitGCMask" -> "(*internal/abi.Type).GcSlice"
  "reflect.ArrayOf" -> "reflect.emitGCMask"
  "reflect.appendGCProg" -> "(*internal/abi.Type).GcSlice"
  "reflect.appendGCProg" -> "(*internal/abi.Type).GcSlice"
  "reflect.ArrayOf" -> "reflect.appendGCProg"
  "reflect.ArrayOf" -> "reflect.appendVarint"
  "reflect.ArrayOf" -> "reflect.appendVarint"
  "reflect.ArrayOf" -> "reflect.appendVarint"
  "reflect.ArrayOf" -> "reflect.toRType"
  "reflect.ArrayOf" -> "(*sync.Map).LoadOrStore"
  "reflect.ArrayOf" -> "reflect.ifaceIndir"
  "reflect.initFuncTypes" -> "reflect.ArrayOf"
  "reflect.StructOf" -> "reflect.fnv1"
  "reflect.StructOf" -> "strconv.Itoa"
  "reflect.isLetter" -> "unicode.IsLetter"
  "reflect.isValidFieldName" -> "reflect.isLetter"
  "reflect.isValidFieldName" -> "reflect.isLetter"
  "reflect.isValidFieldName" -> "unicode.IsDigit"
  "reflect.StructOf" -> "reflect.isValidFieldName"
  "reflect.StructOf" -> "strconv.Itoa"
  "reflect.StructOf" -> "strconv.Itoa"
  "reflect.runtimeStructField" -> "(reflect.StructField).IsExported"
  "reflect.runtimeStructField" -> "(*reflect.rtype).common"
  "reflect.resolveReflectType" -> "reflect.addReflectOff"
  "reflect.runtimeStructField" -> "reflect.resolveReflectType"
  "reflect.runtimeStructField" -> "(reflect.StructField).IsExported"
  "reflect.runtimeStructField" -> "reflect.newName"
  "reflect.runtimeStructField" -> "(*reflect.rtype).common"
  "reflect.StructOf" -> "reflect.runtimeStructField"
  "reflect.StructOf" -> "(internal/abi.Name).Name"
  "reflect.StructOf" -> "reflect.fnv1"
  "reflect.StructOf" -> "(*internal/abi.StructField).Embedded"
  "reflect.StructOf" -> "(*internal/abi.Type).Kind"
  "reflect.StructOf" -> "(*internal/abi.Type).Elem"
  "reflect.StructOf" -> "(*internal/abi.Type).Kind"
  "reflect.StructOf" -> "(*internal/abi.Type).Kind"
  "reflect.StructOf" -> "reflect.stringFor"
  "reflect.StructOf" -> "(*internal/abi.Type).Uncommon"
  "reflect.StructOf" -> "(*reflect.interfaceType).nameOff"
  "reflect.StructOf" -> "reflect.pkgPath"
  "reflect.StructOf" -> "internal/abi.FuncPCABIInternal"
  "reflect.resolveReflectText" -> "reflect.addReflectOff"
  "reflect.StructOf" -> "reflect.resolveReflectText"
  "reflect.StructOf" -> "(*reflect.interfaceType).nameOff"
  "reflect.StructOf" -> "reflect.resolveReflectName"
  "reflect.StructOf" -> "(*reflect.interfaceType).typeOff"
  "reflect.StructOf" -> "reflect.resolveReflectType"
  "reflect.StructOf" -> "(*internal/abi.Type).Uncommon"
  "reflect.StructOf" -> "(*internal/abi.Type).Uncommon"
  "reflect.StructOf" -> "(*internal/abi.UncommonType).Methods"
  "reflect.StructOf" -> "reflect.nameOffFor"
  "reflect.StructOf" -> "reflect.pkgPath"
  "reflect.StructOf" -> "reflect.resolveReflectName"
  "reflect.StructOf" -> "reflect.typeOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectType"
  "reflect.StructOf" -> "reflect.textOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectText"
  "reflect.StructOf" -> "reflect.textOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectText"
  "reflect.StructOf" -> "(*internal/abi.UncommonType).Methods"
  "reflect.StructOf" -> "reflect.nameOffFor"
  "reflect.StructOf" -> "reflect.pkgPath"
  "reflect.StructOf" -> "reflect.resolveReflectName"
  "reflect.StructOf" -> "reflect.typeOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectType"
  "reflect.StructOf" -> "reflect.textOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectText"
  "reflect.StructOf" -> "reflect.textOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectText"
  "reflect.StructOf" -> "(*internal/abi.UncommonType).Methods"
  "reflect.StructOf" -> "reflect.nameOffFor"
  "reflect.StructOf" -> "reflect.pkgPath"
  "reflect.StructOf" -> "reflect.resolveReflectName"
  "reflect.StructOf" -> "reflect.typeOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectType"
  "reflect.StructOf" -> "reflect.textOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectText"
  "reflect.StructOf" -> "reflect.textOffFor"
  "reflect.StructOf" -> "reflect.resolveReflectText"
  "reflect.StructOf" -> "reflect.fnv1"
  "reflect.StructOf" -> "reflect.stringFor"
  "reflect.StructOf" -> "(internal/abi.Name).HasTag"
  "reflect.StructOf" -> "(internal/abi.Name).Tag"
  "reflect.StructOf" -> "reflect.fnv1"
  "reflect.StructOf" -> "(internal/abi.Name).Tag"
  "reflect.StructOf" -> "strconv.Quote"
  "reflect.StructOf" -> "reflect.align"
  "reflect.StructOf" -> "reflect.TypeOf"
  "reflect.StructOf" -> "reflect.TypeOf"
  "reflect.StructOf" -> "reflect.TypeOf"
  "reflect.StructOf" -> "reflect.ArrayOf"
  "reflect.StructOf" -> "reflect.StructOf"
  "reflect.StructOf" -> "reflect.New"
  "reflect.StructOf" -> "(reflect.Value).Elem"
  "reflect.StructOf" -> "(reflect.Value).Field"
  "reflect.StructOf" -> "(reflect.Value).Addr"
  "reflect.StructOf" -> "(reflect.Value).UnsafePointer"
  "reflect.StructOf" -> "(reflect.Value).Elem"
  "reflect.StructOf" -> "(reflect.Value).Field"
  "reflect.StructOf" -> "(reflect.Value).Addr"
  "reflect.StructOf" -> "(reflect.Value).UnsafePointer"
  "reflect.StructOf" -> "(reflect.Value).Elem"
  "reflect.StructOf" -> "(reflect.Value).Field"
  "reflect.StructOf" -> "(reflect.Value).Slice"
  "reflect.StructOf" -> "(reflect.Value).Interface"
  "reflect.StructOf" -> "reflect.fnv1"
  "reflect.StructOf" -> "reflect.align"
  "reflect.StructOf" -> "reflect.newName"
  "reflect.StructOf" -> "(*sync.Map).Load"
  "reflect.StructOf" -> "(*sync.Mutex).Lock"
  "reflect.StructOf" -> "(*sync.Mutex).Unlock"
  "reflect.StructOf" -> "(*sync.Map).Load"
  "reflect.StructOf" -> "(*reflect.rtype).common"
  "reflect.StructOf" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.StructOf" -> "reflect.toType"
  "reflect.StructOf" -> "reflect.typesByString"
  "reflect.StructOf" -> "(*reflect.rtype).common"
  "reflect.StructOf" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.StructOf" -> "reflect.toType"
  "reflect.StructOf" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.StructOf" -> "reflect.newName"
  "reflect.StructOf" -> "reflect.resolveReflectName"
  "reflect.typeptrdata" -> "(*internal/abi.Type).Kind"
  "reflect.typeptrdata" -> "reflect.stringFor"
  "reflect.typeptrdata" -> "(*internal/abi.Type).Pointers"
  "reflect.StructOf" -> "reflect.typeptrdata"
  "reflect.StructOf" -> "reflect.toType"
  "reflect.StructOf$1" -> "(*sync.Map).Load"
  "reflect.StructOf$1" -> "(*sync.Map).Store"
  "reflect.StructOf" -> "reflect.StructOf$1"
  "reflect.StructOf" -> "reflect.addTypeBits"
  "reflect.StructOf" -> "(*internal/abi.Type).Pointers"
  "reflect.StructOf" -> "(*internal/abi.Type).Pointers"
  "reflect.StructOf" -> "reflect.appendGCProg"
  "reflect.StructOf" -> "reflect.appendVarint"
  "reflect.StructOf" -> "reflect.toType"
  "reflect.StructOf" -> "reflect.StructOf$1"
  "reflect.StructOf" -> "reflect.ifaceIndir"
  "reflect.initFuncTypes" -> "reflect.StructOf"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Pos"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetRadius" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetRadius" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).SetRadius" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_NRGBA_Over" -> "(image.Point).In"
  "(*container/list.List).Remove" -> "(*container/list.List).remove"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).TransformRect" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Transform"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).TransformRect" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Transform"
  "(*runtime/internal/atomic.Uint32).LoadAcquire" -> "runtime/internal/atomic.LoadAcq"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.source).valid"
  "(*golang.org/x/image/font/sfnt.Font).initializeTables" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).initializeTables" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).initializeTables" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).initializeTables" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).initializeTables" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).initializeTables" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).initializeTables" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).initializeTables"
  "(*golang.org/x/image/font/sfnt.Font).parseHead" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseHead" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseHead" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseHead"
  "(*golang.org/x/image/font/sfnt.Font).parseMaxp" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseMaxp"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseGlyphData"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseCmap"
  "(*golang.org/x/image/font/sfnt.Font).parseKern" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseKern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseKernVersion0" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseKernVersion0" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseKernVersion0" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseKernFormat0" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.Font).parseKernFormat0" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).parseKernVersion0" -> "(*golang.org/x/image/font/sfnt.Font).parseKernFormat0"
  "(*golang.org/x/image/font/sfnt.Font).parseKern" -> "(*golang.org/x/image/font/sfnt.Font).parseKernVersion0"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseKern"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseGPOSKern"
  "(*golang.org/x/image/font/sfnt.Font).parseHhea" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseHhea" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseHhea" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseHhea" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseHhea" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseHhea" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseHhea"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseHmtx"
  "(*golang.org/x/image/font/sfnt.Font).parseOS2" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseOS2" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parseOS2" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parseOS2"
  "(*golang.org/x/image/font/sfnt.source).u32" -> "(*golang.org/x/image/font/sfnt.source).view"
  "(*golang.org/x/image/font/sfnt.source).u32" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).parsePost" -> "(*golang.org/x/image/font/sfnt.source).u32"
  "(*golang.org/x/image/font/sfnt.Font).parsePost" -> "(*golang.org/x/image/font/sfnt.source).u32"
  "(*golang.org/x/image/font/sfnt.Font).parsePost" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePost" -> "(*golang.org/x/image/font/sfnt.source).u16"
  "(*golang.org/x/image/font/sfnt.Font).parsePost" -> "(*golang.org/x/image/font/sfnt.source).u32"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).parsePost"
  "(*golang.org/x/image/font/sfnt.Font).initOS2VersionBelow2" -> "(*golang.org/x/image/font/sfnt.Font).UnitsPerEm"
  "(*golang.org/x/image/font/sfnt.Font).glyphTopOS2" -> "(*golang.org/x/image/font/sfnt.Font).GlyphIndex"
  "(*golang.org/x/image/font/sfnt.Font).viewGlyphData" -> "(*golang.org/x/image/font/sfnt.Font).NumGlyphs"
  "(*golang.org/x/image/font/sfnt.Font).viewGlyphData" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).LoadGlyph" -> "(*golang.org/x/image/font/sfnt.Font).viewGlyphData"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "(*golang.org/x/image/font/sfnt.Font).viewGlyphData"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.loadGlyf"
  "golang.org/x/image/font/sfnt.transformArgs" -> "golang.org/x/image/font/sfnt.tform"
  "golang.org/x/image/font/sfnt.transformArgs" -> "golang.org/x/image/font/sfnt.tform"
  "golang.org/x/image/font/sfnt.transformArgs" -> "golang.org/x/image/font/sfnt.tform"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.transformArgs"
  "golang.org/x/image/font/sfnt.loadCompoundGlyf" -> "golang.org/x/image/font/sfnt.translateArgs"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "golang.org/x/image/font/sfnt.loadCompoundGlyf"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "golang.org/x/image/font/sfnt.findXYIndexes"
  "(*golang.org/x/image/font/sfnt.glyfIter).nextContour" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "(*golang.org/x/image/font/sfnt.glyfIter).nextContour"
  "(*golang.org/x/image/font/sfnt.glyfIter).nextSegment" -> "(*golang.org/x/image/font/sfnt.glyfIter).close"
  "(*golang.org/x/image/font/sfnt.glyfIter).nextPoint" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.glyfIter).nextPoint" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.glyfIter).nextSegment" -> "(*golang.org/x/image/font/sfnt.glyfIter).nextPoint"
  "(*golang.org/x/image/font/sfnt.glyfIter).nextSegment" -> "golang.org/x/image/font/sfnt.midPoint"
  "(*golang.org/x/image/font/sfnt.glyfIter).nextSegment" -> "golang.org/x/image/font/sfnt.midPoint"
  "golang.org/x/image/font/sfnt.loadGlyf" -> "(*golang.org/x/image/font/sfnt.glyfIter).nextSegment"
  "(*golang.org/x/image/font/sfnt.Font).LoadGlyph" -> "golang.org/x/image/font/sfnt.loadGlyf"
  "(*golang.org/x/image/font/sfnt.Font).LoadGlyph" -> "(*golang.org/x/image/font/sfnt.psType2CharstringsData).initialize"
  "(*golang.org/x/image/font/sfnt.Font).LoadGlyph" -> "(*golang.org/x/image/font/sfnt.psInterpreter).run"
  "(*golang.org/x/image/font/sfnt.Font).LoadGlyph" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).LoadGlyph" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).glyphTopOS2" -> "(*golang.org/x/image/font/sfnt.Font).LoadGlyph"
  "(*golang.org/x/image/font/sfnt.Font).initOS2VersionBelow2" -> "(*golang.org/x/image/font/sfnt.Font).glyphTopOS2"
  "(*golang.org/x/image/font/sfnt.Font).initOS2VersionBelow2" -> "(*golang.org/x/image/font/sfnt.Font).glyphTopOS2"
  "(*golang.org/x/image/font/sfnt.Font).initialize" -> "(*golang.org/x/image/font/sfnt.Font).initOS2VersionBelow2"
  "golang.org/x/image/font/sfnt.Parse" -> "(*golang.org/x/image/font/sfnt.Font).initialize"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Center"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Point).AsCoord"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipse" -> "(*github.com/stefan-muehlebach/gg.Context).NewSubPath"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipse" -> "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc"
  "(*github.com/stefan-muehlebach/gg.Context).DrawEllipse" -> "(*github.com/stefan-muehlebach/gg.Context).ClosePath"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawEllipse"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Pushed"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderColor"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Stroke"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Selected" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Get"
  "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Selected"
  "(*image/jpeg.decoder).ensureNBits" -> "(*image/jpeg.decoder).readByteStuffedByte"
  "compress/gzip.init" -> "bufio.init"
  "compress/flate.init" -> "errors.init"
  "compress/flate.init" -> "fmt.init"
  "compress/flate.init" -> "io.init"
  "compress/flate.init" -> "math.init"
  "compress/flate.init" -> "math/bits.init"
  "compress/flate.init" -> "sort.init"
  "compress/flate.init" -> "bufio.init"
  "compress/flate.init" -> "strconv.init"
  "compress/flate.init" -> "sync.init"
  "compress/flate.init" -> "errors.New"
  "compress/flate.generateFixedOffsetEncoding" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.generateFixedOffsetEncoding" -> "compress/flate.reverseBits"
  "compress/flate.init" -> "compress/flate.generateFixedOffsetEncoding"
  "compress/flate.init" -> "compress/flate.generateFixedLiteralEncoding"
  "compress/flate.init#1" -> "compress/flate.newHuffmanEncoder"
  "compress/flate.init#1" -> "(*compress/flate.huffmanEncoder).generate"
  "compress/flate.init" -> "compress/flate.init#1"
  "compress/gzip.init" -> "compress/flate.init"
  "compress/gzip.init" -> "encoding/binary.init"
  "compress/gzip.init" -> "errors.init"
  "hash/crc32.init" -> "errors.init"
  "hash.init" -> "io.init"
  "hash/crc32.init" -> "hash.init"
  "hash/crc32.init" -> "sync.init"
  "hash/crc32.init" -> "sync/atomic.init"
  "hash/crc32.init" -> "internal/cpu.init"
  "hash/crc32.simpleMakeTable" -> "hash/crc32.simplePopulateTable"
  "hash/crc32.init" -> "hash/crc32.simpleMakeTable"
  "compress/gzip.init" -> "hash/crc32.init"
  "compress/gzip.init" -> "io.init"
  "compress/gzip.init" -> "time.init"
  "compress/gzip.init" -> "fmt.init"
  "compress/gzip.init" -> "errors.New"
  "compress/gzip.init" -> "errors.New"
  "(*sync/atomic.Pointer[internal/godebug.value]).Swap[internal/godebug.value]" -> "sync/atomic.SwapPointer"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(*github.com/golang/freetype/truetype.face).Metrics" -> "(*github.com/golang/freetype/truetype.Font).FUnitsPerEm"
  "math.Ceil" -> "math.archCeil"
  "math.Floor" -> "math.archFloor"
  "math.floor" -> "math.IsInf"
  "math.floor" -> "math.IsNaN"
  "math.Modf" -> "math.archModf"
  "math.modf" -> "math.Float64bits"
  "math.modf" -> "math.Modf"
  "math.modf" -> "math.Float64frombits"
  "math.Modf" -> "math.modf"
  "math.floor" -> "math.Modf"
  "math.floor" -> "math.Modf"
  "math.Floor" -> "math.floor"
  "math.ceil" -> "math.Floor"
  "math.Ceil" -> "math.ceil"
  "(*github.com/golang/freetype/truetype.face).Metrics" -> "math.Ceil"
  "(*github.com/golang/freetype/truetype.face).Metrics" -> "math.Ceil"
  "(*github.com/stefan-muehlebach/gg.Context).SetFontFace" -> "(*github.com/golang/freetype/truetype.face).Metrics"
  "(*golang.org/x/image/font/basicfont.Face).Metrics" -> "golang.org/x/image/math/fixed.I"
  "(*golang.org/x/image/font/basicfont.Face).Metrics" -> "golang.org/x/image/math/fixed.I"
  "(*golang.org/x/image/font/basicfont.Face).Metrics" -> "golang.org/x/image/math/fixed.I"
  "(*golang.org/x/image/font/basicfont.Face).Metrics" -> "golang.org/x/image/math/fixed.I"
  "(*golang.org/x/image/font/basicfont.Face).Metrics" -> "golang.org/x/image/math/fixed.I"
  "(*github.com/stefan-muehlebach/gg.Context).SetFontFace" -> "(*golang.org/x/image/font/basicfont.Face).Metrics"
  "(*time.Time).UnmarshalText" -> "time.parseStrictRFC3339"
  "syscall.recvfrom" -> "syscall.Syscall6"
  "syscall.recvfrom" -> "syscall.errnoErr"
  "syscall.Recvfrom" -> "syscall.recvfrom"
  "syscall.Recvfrom" -> "syscall.anyToSockaddr"
  "(*github.com/stefan-muehlebach/gg.Context).EncodePNG" -> "image/png.Encode"
  "embed.init" -> "errors.init"
  "embed.init" -> "io.init"
  "embed.init" -> "io/fs.init"
  "embed.init" -> "time.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "embed.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/goregular.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/goitalic.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gomedium.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gomediumitalic.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gobold.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gobolditalic.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gomono.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gomonoitalic.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gomonobold.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gomonobolditalic.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gosmallcaps.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/gofont/gosmallcapsitalic.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "errors.init"
  "golang.org/x/image/font.init" -> "image.init"
  "image/draw.init" -> "image.init"
  "image/draw.init" -> "image/color.init"
  "image/internal/imageutil.init" -> "image.init"
  "image/draw.init" -> "image/internal/imageutil.init"
  "golang.org/x/image/font.init" -> "image/draw.init"
  "golang.org/x/image/font.init" -> "io.init"
  "golang.org/x/image/font.init" -> "unicode/utf8.init"
  "golang.org/x/image/math/fixed.init" -> "fmt.init"
  "golang.org/x/image/font.init" -> "golang.org/x/image/math/fixed.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font.init"
  "golang.org/x/image/font/opentype.init" -> "image.init"
  "golang.org/x/image/font/opentype.init" -> "image/draw.init"
  "golang.org/x/image/font/opentype.init" -> "io.init"
  "golang.org/x/image/font/opentype.init" -> "golang.org/x/image/font.init"
  "golang.org/x/text/encoding/charmap.init" -> "unicode/utf8.init"
  "golang.org/x/text/encoding.init" -> "errors.init"
  "golang.org/x/text/encoding.init" -> "io.init"
  "golang.org/x/text/encoding.init" -> "strconv.init"
  "golang.org/x/text/encoding.init" -> "unicode/utf8.init"
  "golang.org/x/text/encoding.init" -> "golang.org/x/text/encoding/internal/identifier.init"
  "golang.org/x/text/transform.init" -> "bytes.init"
  "golang.org/x/text/transform.init" -> "errors.init"
  "golang.org/x/text/transform.init" -> "io.init"
  "golang.org/x/text/transform.init" -> "unicode/utf8.init"
  "golang.org/x/text/transform.init" -> "errors.New"
  "golang.org/x/text/transform.init" -> "errors.New"
  "golang.org/x/text/transform.init" -> "errors.New"
  "golang.org/x/text/transform.init" -> "errors.New"
  "golang.org/x/text/transform.init" -> "errors.New"
  "golang.org/x/text/encoding.init" -> "golang.org/x/text/transform.init"
  "golang.org/x/text/encoding.init" -> "errors.New"
  "golang.org/x/text/encoding/charmap.init" -> "golang.org/x/text/encoding.init"
  "golang.org/x/text/encoding/internal.init" -> "golang.org/x/text/encoding.init"
  "golang.org/x/text/encoding/internal.init" -> "golang.org/x/text/encoding/internal/identifier.init"
  "golang.org/x/text/encoding/internal.init" -> "golang.org/x/text/transform.init"
  "golang.org/x/text/encoding/charmap.init" -> "golang.org/x/text/encoding/internal.init"
  "golang.org/x/text/encoding/charmap.init" -> "golang.org/x/text/encoding/internal/identifier.init"
  "golang.org/x/text/encoding/charmap.init" -> "golang.org/x/text/transform.init"
  "golang.org/x/image/font/sfnt.init" -> "golang.org/x/text/encoding/charmap.init"
  "golang.org/x/image/font/sfnt.init" -> "sort.init"
  "golang.org/x/image/font/sfnt.init" -> "fmt.init"
  "golang.org/x/image/font/sfnt.init" -> "math.init"
  "golang.org/x/image/font/sfnt.init" -> "strconv.init"
  "golang.org/x/image/font/sfnt.init" -> "golang.org/x/image/math/fixed.init"
  "golang.org/x/image/font/sfnt.init" -> "errors.init"
  "golang.org/x/image/font/sfnt.init" -> "image.init"
  "golang.org/x/image/font/sfnt.init" -> "io.init"
  "golang.org/x/image/font/sfnt.init" -> "golang.org/x/image/font.init"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/sfnt.init" -> "errors.New"
  "golang.org/x/image/font/opentype.init" -> "golang.org/x/image/font/sfnt.init"
  "golang.org/x/image/font/opentype.init" -> "golang.org/x/image/math/fixed.init"
  "golang.org/x/image/vector.init" -> "math.init"
  "golang.org/x/image/vector.init" -> "image.init"
  "golang.org/x/image/vector.init" -> "image/color.init"
  "golang.org/x/image/vector.init" -> "image/draw.init"
  "golang.org/x/image/font/opentype.init" -> "golang.org/x/image/vector.init"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "golang.org/x/image/font/opentype.init"
  "(embed.FS).ReadFile" -> "(embed.FS).Open"
  "(embed.FS).ReadFile" -> "errors.New"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "(embed.FS).ReadFile"
  "golang.org/x/image/font/opentype.Parse" -> "golang.org/x/image/font/sfnt.Parse"
  "github.com/stefan-muehlebach/gg/fonts.Parse" -> "golang.org/x/image/font/opentype.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "github.com/stefan-muehlebach/gg/fonts.init" -> "github.com/stefan-muehlebach/gg/fonts.Parse"
  "runtime/pprof.writeThreadCreate" -> "runtime/pprof.writeRuntimeProfile"
  "(*github.com/stefan-muehlebach/adagui.Embed).IsAtFront" -> "log.Fatal"
  "(*github.com/stefan-muehlebach/adagui.Embed).IsAtFront" -> "(*container/list.List).Back"
  "internal/godebug.update" -> "(*sync.Mutex).Lock"
  "internal/godebug.update" -> "(*sync.Mutex).Unlock"
  "internal/godebug.parse" -> "internal/godebug.lookup"
  "internal/godebug.parse" -> "(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]"
  "internal/godebug.parse" -> "internal/bisect.New"
  "internal/godebug.update" -> "internal/godebug.parse"
  "internal/godebug.update" -> "internal/godebug.parse"
  "internal/godebug.update" -> "(*sync.Map).Range"
  "fmt.newScanState" -> "(*sync.Pool).Get"
  "github.com/stefan-muehlebach/adagui.NewGroup" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewGroup" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "(*encoding/json.decodeState).convertNumber" -> "strconv.ParseFloat"
  "reflect.TypeFor[float64]" -> "reflect.TypeOf"
  "reflect.TypeFor[float64]" -> "(*reflect.rtype).Elem"
  "(*encoding/json.decodeState).convertNumber" -> "reflect.TypeFor[float64]"
  "golang.org/x/image/draw.transform_Uniform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Gray16).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.CMYK).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.YCbCr).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Uniform).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.NRGBA).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA).PixOffset"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.YCbCr).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA64).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.CMYK).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NYCbCrA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Gray).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.CMYK).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Alpha).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.CMYK).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.NRGBA64).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Uniform).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.NRGBA).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NYCbCrA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.YCbCr).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.CMYK).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA64).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Uniform).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NYCbCrA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Gray).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.CMYK).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.YCbCr).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Paletted).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA).PixOffset"
  "golang.org/x/image/draw.transform_Uniform" -> "(image.Point).In"
  "golang.org/x/image/draw.transform_Uniform" -> "(image.Point).In"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Alpha).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Paletted).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(image.Point).In"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.NRGBA64).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Gray16).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Uniform).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.CMYK).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Gray16).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.YCbCr).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Uniform).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA64).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Alpha16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NYCbCrA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Gray).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.CMYK).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NYCbCrA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.NRGBA).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.RGBA).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Alpha).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.Paletted).Set"
  "golang.org/x/image/draw.transform_Uniform" -> "(image.Point).In"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.Gray16).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(*image.NRGBA64).At"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.RGBA64).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(image/color.NRGBA).RGBA"
  "golang.org/x/image/draw.transform_Uniform" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.u32"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.u16"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.u32"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.u32"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.u32"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.parse"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHead" -> "fmt.Sprintf"
  "github.com/golang/freetype/truetype.parse" -> "(*github.com/golang/freetype/truetype.Font).parseHead"
  "github.com/golang/freetype/truetype.readTable" -> "github.com/golang/freetype/truetype.u32"
  "github.com/golang/freetype/truetype.readTable" -> "fmt.Sprintf"
  "github.com/golang/freetype/truetype.readTable" -> "github.com/golang/freetype/truetype.u32"
  "github.com/golang/freetype/truetype.readTable" -> "fmt.Sprintf"
  "github.com/golang/freetype/truetype.readTable" -> "fmt.Sprintf"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "github.com/golang/freetype/truetype.parse" -> "github.com/golang/freetype/truetype.readTable"
  "(*github.com/golang/freetype/truetype.Font).parseMaxp" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseMaxp" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseMaxp" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseMaxp" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseMaxp" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseMaxp" -> "github.com/golang/freetype/truetype.u16"
  "github.com/golang/freetype/truetype.parse" -> "(*github.com/golang/freetype/truetype.Font).parseMaxp"
  "github.com/golang/freetype/truetype.parseSubtables" -> "github.com/golang/freetype/truetype.u16"
  "github.com/golang/freetype/truetype.parseSubtables" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).Name$1" -> "github.com/golang/freetype/truetype.u16"
  "github.com/golang/freetype/truetype.parseSubtables" -> "(*github.com/golang/freetype/truetype.Font).Name$1"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.parseSubtables"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).parseCmap" -> "github.com/golang/freetype/truetype.u32"
  "github.com/golang/freetype/truetype.parse" -> "(*github.com/golang/freetype/truetype.Font).parseCmap"
  "(*github.com/golang/freetype/truetype.Font).parseKern" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseKern" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseKern" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseKern" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseKern" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseKern" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseKern" -> "github.com/golang/freetype/truetype.u16"
  "github.com/golang/freetype/truetype.parse" -> "(*github.com/golang/freetype/truetype.Font).parseKern"
  "(*github.com/golang/freetype/truetype.Font).parseHhea" -> "fmt.Sprintf"
  "(*github.com/golang/freetype/truetype.Font).parseHhea" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHhea" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHhea" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).parseHhea" -> "fmt.Sprintf"
  "github.com/golang/freetype/truetype.parse" -> "(*github.com/golang/freetype/truetype.Font).parseHhea"
  "github.com/golang/freetype/truetype.Parse" -> "github.com/golang/freetype/truetype.parse"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromUser" -> "os.ReadFile"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromUser" -> "log.Fatal"
  "encoding/json.checkValid" -> "(*encoding/json.scanner).reset"
  "encoding/json.checkValid" -> "(*encoding/json.scanner).eof"
  "encoding/json.checkValid" -> "encoding/json.stateBeginValue"
  "encoding/json.checkValid" -> "encoding/json.stateBeginStringOrEmpty"
  "encoding/json.checkValid" -> "encoding/json.stateBeginValueOrEmpty"
  "encoding/json.checkValid" -> "encoding/json.stateInString"
  "encoding/json.checkValid" -> "encoding/json.stateNeg"
  "encoding/json.checkValid" -> "encoding/json.state0"
  "encoding/json.checkValid" -> "encoding/json.stateT"
  "encoding/json.checkValid" -> "encoding/json.stateF"
  "encoding/json.checkValid" -> "encoding/json.stateN"
  "encoding/json.checkValid" -> "encoding/json.state1"
  "encoding/json.checkValid" -> "encoding/json.stateEndValue"
  "encoding/json.checkValid" -> "encoding/json.stateInStringEsc"
  "encoding/json.checkValid" -> "encoding/json.stateDot"
  "encoding/json.checkValid" -> "encoding/json.stateE"
  "encoding/json.checkValid" -> "encoding/json.stateTr"
  "encoding/json.checkValid" -> "encoding/json.stateFa"
  "encoding/json.checkValid" -> "encoding/json.stateNu"
  "encoding/json.checkValid" -> "encoding/json.stateError"
  "encoding/json.checkValid" -> "encoding/json.stateEndTop"
  "encoding/json.checkValid" -> "encoding/json.stateBeginString"
  "encoding/json.checkValid" -> "encoding/json.stateInStringEscU"
  "encoding/json.checkValid" -> "encoding/json.stateDot0"
  "encoding/json.checkValid" -> "encoding/json.stateESign"
  "encoding/json.checkValid" -> "encoding/json.stateTru"
  "encoding/json.checkValid" -> "encoding/json.stateFal"
  "encoding/json.checkValid" -> "encoding/json.stateNul"
  "encoding/json.checkValid" -> "encoding/json.stateInStringEscU1"
  "encoding/json.checkValid" -> "encoding/json.stateE0"
  "encoding/json.checkValid" -> "encoding/json.stateFals"
  "encoding/json.checkValid" -> "encoding/json.stateInStringEscU12"
  "encoding/json.checkValid" -> "encoding/json.stateInStringEscU123"
  "encoding/json.Unmarshal" -> "encoding/json.checkValid"
  "encoding/json.Unmarshal" -> "(*encoding/json.decodeState).init"
  "(*encoding/json.decodeState).unmarshal" -> "reflect.ValueOf"
  "(*encoding/json.decodeState).unmarshal" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).unmarshal" -> "reflect.TypeOf"
  "(*encoding/json.decodeState).unmarshal" -> "(*encoding/json.scanner).reset"
  "(*encoding/json.decodeState).unmarshal" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).value" -> "(reflect.Value).IsValid"
  "(*encoding/json.decodeState).value" -> "(reflect.Value).IsValid"
  "encoding/json.indirect" -> "(reflect.Value).Kind"
  "encoding/json.indirect" -> "(reflect.Value).Addr"
  "encoding/json.indirect" -> "(reflect.Value).CanAddr"
  "encoding/json.indirect" -> "(reflect.Value).Type"
  "encoding/json.indirect" -> "(*reflect.rtype).Name"
  "encoding/json.indirect" -> "(reflect.Value).Kind"
  "encoding/json.indirect" -> "(reflect.Value).Elem"
  "encoding/json.indirect" -> "(reflect.Value).Kind"
  "encoding/json.indirect" -> "(reflect.Value).Kind"
  "encoding/json.indirect" -> "(reflect.Value).IsNil"
  "encoding/json.indirect" -> "(reflect.Value).IsNil"
  "encoding/json.indirect" -> "(reflect.Value).Elem"
  "encoding/json.indirect" -> "(reflect.Value).Kind"
  "encoding/json.indirect" -> "(reflect.Value).Elem"
  "encoding/json.indirect" -> "(reflect.Value).Kind"
  "encoding/json.indirect" -> "(reflect.Value).CanSet"
  "encoding/json.indirect" -> "(reflect.Value).Elem"
  "encoding/json.indirect" -> "(reflect.Value).IsNil"
  "encoding/json.indirect" -> "(reflect.Value).Elem"
  "encoding/json.indirect" -> "(reflect.Value).Elem"
  "encoding/json.indirect" -> "(reflect.Value).Type"
  "encoding/json.indirect" -> "(*reflect.rtype).Elem"
  "encoding/json.indirect" -> "reflect.New"
  "encoding/json.indirect" -> "(reflect.Value).Set"
  "encoding/json.indirect" -> "(reflect.Value).Type"
  "encoding/json.indirect" -> "(*reflect.rtype).NumMethod"
  "encoding/json.indirect" -> "(reflect.Value).Interface"
  "encoding/json.indirect" -> "(reflect.Value).CanInterface"
  "encoding/json.indirect" -> "(reflect.Value).Interface"
  "encoding/json.indirect" -> "(reflect.Value).Elem"
  "(*encoding/json.decodeState).array" -> "encoding/json.indirect"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateBeginStringOrEmpty"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateT"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateN"
  "(*encoding/json.decodeState).skip" -> "encoding/json.state1"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateF"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateBeginValue"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateBeginValueOrEmpty"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateInString"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateNeg"
  "(*encoding/json.decodeState).skip" -> "encoding/json.state0"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateEndValue"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateInStringEsc"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateDot"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateE"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateTr"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateFa"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateNu"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateError"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateEndTop"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateBeginString"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateInStringEscU"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateDot0"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateESign"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateTru"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateFal"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateNul"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateInStringEscU1"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateE0"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateFals"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateInStringEscU12"
  "(*encoding/json.decodeState).skip" -> "encoding/json.stateInStringEscU123"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).skip"
  "(*time.Time).UnmarshalJSON" -> "errors.New"
  "(*time.Time).UnmarshalJSON" -> "time.parseStrictRFC3339"
  "(*encoding/json.decodeState).array" -> "(*time.Time).UnmarshalJSON"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).saveError" -> "(*encoding/json.decodeState).addErrorContext"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).NumMethod"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).arrayInterface" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).valueInterface" -> "(*encoding/json.decodeState).arrayInterface"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateT"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateN"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.state1"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateBeginStringOrEmpty"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateBeginValueOrEmpty"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateInString"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateNeg"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.state0"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateF"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateBeginValue"
  "(*encoding/json.decodeState).scanNext" -> "(*encoding/json.scanner).eof"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateEndValue"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateInStringEsc"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateDot"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateE"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateTr"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateFa"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateNu"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateError"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateEndTop"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateBeginString"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateInStringEscU"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateDot0"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateESign"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateTru"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateFal"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateNul"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateInStringEscU1"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateE0"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateFals"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateInStringEscU12"
  "(*encoding/json.decodeState).scanNext" -> "encoding/json.stateInStringEscU123"
  "(*encoding/json.decodeState).valueInterface" -> "(*encoding/json.decodeState).scanNext"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).rescanLiteral"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).objectInterface" -> "encoding/json.unquote"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).valueInterface"
  "(*encoding/json.decodeState).objectInterface" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).valueInterface" -> "(*encoding/json.decodeState).objectInterface"
  "(*encoding/json.decodeState).valueInterface" -> "(*encoding/json.decodeState).scanNext"
  "(*encoding/json.decodeState).literalInterface" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalInterface" -> "(*encoding/json.decodeState).rescanLiteral"
  "(*encoding/json.decodeState).literalInterface" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalInterface" -> "encoding/json.unquote"
  "(*encoding/json.decodeState).literalInterface" -> "(*encoding/json.decodeState).convertNumber"
  "(*encoding/json.decodeState).literalInterface" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).valueInterface" -> "(*encoding/json.decodeState).literalInterface"
  "(*encoding/json.decodeState).arrayInterface" -> "(*encoding/json.decodeState).valueInterface"
  "(*encoding/json.decodeState).arrayInterface" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).arrayInterface"
  "(*encoding/json.decodeState).array" -> "reflect.ValueOf"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Len"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Kind"
  "(reflect.Value).Cap" -> "(reflect.flag).kind"
  "(reflect.Value).capNonSlice" -> "(reflect.flag).kind"
  "(reflect.Value).capNonSlice" -> "(reflect.Value).typ"
  "(reflect.Value).capNonSlice" -> "(*internal/abi.Type).Len"
  "(reflect.Value).capNonSlice" -> "(reflect.Value).pointer"
  "(reflect.Value).capNonSlice" -> "reflect.chancap"
  "(reflect.Value).capNonSlice" -> "(reflect.Value).typ"
  "(reflect.Value).capNonSlice" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).capNonSlice" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).capNonSlice" -> "(reflect.flag).kind"
  "(reflect.Value).capNonSlice" -> "(reflect.Value).typ"
  "(reflect.Value).capNonSlice" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).capNonSlice" -> "(*internal/abi.Type).Len"
  "(reflect.Value).Cap" -> "(reflect.Value).capNonSlice"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Cap"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Len"
  "(reflect.Value).Grow" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).Grow" -> "(reflect.flag).mustBe"
  "(reflect.Value).grow" -> "(reflect.Value).typ"
  "(reflect.Value).grow" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).grow" -> "reflect.growslice"
  "(reflect.Value).Grow" -> "(reflect.Value).grow"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Grow"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Len"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).SetLen"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Index"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).value"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).value"
  "(*encoding/json.decodeState).array" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).SetLen"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Index"
  "(reflect.Value).SetZero" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetZero" -> "(reflect.flag).kind"
  "(reflect.Value).SetZero" -> "(reflect.Value).typ"
  "(reflect.Value).SetZero" -> "reflect.typedmemclr"
  "(reflect.Value).SetZero" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).SetZero"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Len"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).array" -> "reflect.MakeSlice"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).array" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).array"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).scanNext"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).rescanLiteral"
  "(*encoding/json.decodeState).value" -> "(reflect.Value).IsValid"
  "(*encoding/json.decodeState).object" -> "encoding/json.indirect"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).object" -> "(*time.Time).UnmarshalJSON"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).objectInterface"
  "(*encoding/json.decodeState).object" -> "reflect.ValueOf"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).NumMethod"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Key"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Kind"
  "(*encoding/json.decodeState).object" -> "encoding/json.cachedTypeFields"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).IsNil"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Key"
  "(*encoding/json.decodeState).object" -> "reflect.PointerTo"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Implements"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).object" -> "reflect.MakeMap"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).rescanLiteral"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).object" -> "encoding/json.unquoteBytes"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Elem"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).IsValid"
  "(*encoding/json.decodeState).object" -> "reflect.New"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Elem"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).SetZero"
  "(*encoding/json.decodeState).object" -> "encoding/json.foldName"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).IsNil"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Field"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).CanSet"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Elem"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Elem"
  "(*encoding/json.decodeState).object" -> "fmt.Errorf"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Elem"
  "(*encoding/json.decodeState).object" -> "reflect.New"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).object" -> "fmt.Errorf"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).valueQuoted" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).valueQuoted" -> "(*encoding/json.decodeState).scanNext"
  "(*encoding/json.decodeState).valueQuoted" -> "(*encoding/json.decodeState).literalInterface"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).valueQuoted"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).value"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "encoding/json.indirect"
  "(*encoding/json.decodeState).literalStore" -> "(*time.Time).UnmarshalJSON"
  "(*encoding/json.decodeState).literalStore" -> "encoding/json.unquoteBytes"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(*time.Time).UnmarshalText"
  "(*github.com/stefan-muehlebach/adagui/props.ColorPropertyName).UnmarshalText" -> "fmt.Sprintf"
  "(*github.com/stefan-muehlebach/adagui/props.ColorPropertyName).UnmarshalText" -> "errors.New"
  "(*encoding/json.decodeState).literalStore" -> "(*github.com/stefan-muehlebach/adagui/props.ColorPropertyName).UnmarshalText"
  "(*github.com/stefan-muehlebach/adagui/props.FontPropertyName).UnmarshalText" -> "fmt.Sprintf"
  "(*github.com/stefan-muehlebach/adagui/props.FontPropertyName).UnmarshalText" -> "errors.New"
  "(*encoding/json.decodeState).literalStore" -> "(*github.com/stefan-muehlebach/adagui/props.FontPropertyName).UnmarshalText"
  "(*github.com/stefan-muehlebach/adagui/props.SizePropertyName).UnmarshalText" -> "fmt.Sprintf"
  "(*github.com/stefan-muehlebach/adagui/props.SizePropertyName).UnmarshalText" -> "errors.New"
  "(*encoding/json.decodeState).literalStore" -> "(*github.com/stefan-muehlebach/adagui/props.SizePropertyName).UnmarshalText"
  "(*github.com/stefan-muehlebach/gg/fonts.Font).UnmarshalText" -> "errors.New"
  "(*encoding/json.decodeState).literalStore" -> "(*github.com/stefan-muehlebach/gg/fonts.Font).UnmarshalText"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetZero"
  "(*encoding/json.decodeState).literalStore" -> "encoding/json.unquoteBytes"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetBool"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).NumMethod"
  "(*encoding/json.decodeState).literalStore" -> "reflect.ValueOf"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*reflect.rtype).Elem"
  "(*encoding/json.decodeState).literalStore" -> "(*reflect.rtype).Kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/base64.Encoding).DecodedLen" -> "encoding/base64.decodedLen"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/base64.Encoding).DecodedLen"
  "(*encoding/base64.Encoding).Decode" -> "encoding/base64.assemble64"
  "(*encoding/base64.Encoding).Decode" -> "(encoding/binary.bigEndian).PutUint64"
  "(*encoding/base64.Encoding).Decode" -> "(*encoding/base64.Encoding).decodeQuantum"
  "(*encoding/base64.Encoding).Decode" -> "encoding/base64.assemble32"
  "(*encoding/base64.Encoding).Decode" -> "(encoding/binary.bigEndian).PutUint32"
  "(*encoding/base64.Encoding).Decode" -> "(*encoding/base64.Encoding).decodeQuantum"
  "(*encoding/base64.Encoding).Decode" -> "(*encoding/base64.Encoding).decodeQuantum"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/base64.Encoding).Decode"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(reflect.Value).SetBytes" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetBytes" -> "(reflect.flag).mustBe"
  "(reflect.Value).SetBytes" -> "(reflect.Value).typ"
  "(reflect.Value).SetBytes" -> "reflect.toRType"
  "(reflect.Value).SetBytes" -> "(*reflect.rtype).Elem"
  "(reflect.Value).SetBytes" -> "(*reflect.rtype).Kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetBytes"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).NumMethod"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetString"
  "(*encoding/json.decodeState).literalStore" -> "encoding/json.isValidNumber"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "reflect.ValueOf"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).convertNumber"
  "(*encoding/json.decodeState).literalStore" -> "strconv.ParseInt"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).NumMethod"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "reflect.ValueOf"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Set"
  "(*encoding/json.decodeState).literalStore" -> "strconv.ParseUint"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetInt"
  "(reflect.Value).OverflowInt" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowInt" -> "(reflect.Value).typ"
  "(reflect.Value).OverflowInt" -> "(*internal/abi.Type).Size"
  "(reflect.Value).OverflowInt" -> "(reflect.flag).kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).OverflowInt"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*reflect.rtype).Bits"
  "(*encoding/json.decodeState).literalStore" -> "strconv.ParseFloat"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetUint"
  "(reflect.Value).OverflowUint" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowUint" -> "(*internal/abi.Type).Size"
  "(reflect.Value).OverflowUint" -> "(reflect.flag).kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).OverflowUint"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetFloat"
  "(reflect.Value).OverflowFloat" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowFloat" -> "reflect.overflowFloat32"
  "(reflect.Value).OverflowFloat" -> "(reflect.flag).kind"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).OverflowFloat"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).SetString"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "fmt.Errorf"
  "(*encoding/json.decodeState).literalStore" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).literalStore" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).literalStore"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).literalStore"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Type"
  "(*encoding/json.decodeState).object" -> "fmt.Errorf"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Key"
  "(*encoding/json.decodeState).object" -> "reflect.PointerTo"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Implements"
  "(*encoding/json.decodeState).object" -> "reflect.New"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).literalStore"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).IsValid"
  "(*encoding/json.decodeState).object" -> "(*reflect.rtype).Kind"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Elem"
  "(*encoding/json.decodeState).object" -> "reflect.New"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Elem"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).SetString"
  "(*encoding/json.decodeState).object" -> "strconv.ParseInt"
  "(*encoding/json.decodeState).object" -> "strconv.ParseUint"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "reflect.New"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Elem"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).SetInt"
  "(*encoding/json.decodeState).object" -> "reflect.Zero"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).OverflowInt"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).saveError"
  "(*encoding/json.decodeState).object" -> "reflect.New"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).Elem"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).SetUint"
  "(*encoding/json.decodeState).object" -> "reflect.Zero"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).OverflowUint"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBe"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).assignTo"
  "(reflect.Value).SetMapIndex" -> "(*internal/abi.Type).Size"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).kind"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).pointer"
  "(reflect.Value).SetMapIndex" -> "reflect.mapdelete_faststr"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).assignTo"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).pointer"
  "reflect.contentEscapes" -> "reflect.escapes"
  "reflect.mapassign_faststr" -> "reflect.contentEscapes"
  "reflect.mapassign_faststr" -> "reflect.contentEscapes"
  "reflect.mapassign_faststr" -> "reflect.mapassign_faststr0"
  "(reflect.Value).SetMapIndex" -> "reflect.mapassign_faststr"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).pointer"
  "(reflect.Value).SetMapIndex" -> "reflect.mapdelete"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).assignTo"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).typ"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).pointer"
  "reflect.mapassign" -> "reflect.contentEscapes"
  "reflect.mapassign" -> "reflect.contentEscapes"
  "reflect.mapassign" -> "reflect.mapassign0"
  "(reflect.Value).SetMapIndex" -> "reflect.mapassign"
  "(*encoding/json.decodeState).object" -> "(reflect.Value).SetMapIndex"
  "(*encoding/json.decodeState).object" -> "(*encoding/json.decodeState).scanWhile"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).object"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).scanNext"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).skip"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).readIndex"
  "(*encoding/json.decodeState).value" -> "(*encoding/json.decodeState).literalStore"
  "(*encoding/json.decodeState).unmarshal" -> "(*encoding/json.decodeState).value"
  "(*encoding/json.decodeState).unmarshal" -> "(reflect.Value).IsNil"
  "(*encoding/json.decodeState).unmarshal" -> "(*encoding/json.decodeState).addErrorContext"
  "encoding/json.Unmarshal" -> "(*encoding/json.decodeState).unmarshal"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromData" -> "encoding/json.Unmarshal"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromData" -> "log.Fatal"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromData" -> "github.com/stefan-muehlebach/adagui/props.NewProperties"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromUser" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromData"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromUser"
  "(*flag.FlagSet).sprintf" -> "fmt.Sprintf"
  "(*flag.FlagSet).sprintf" -> "(*flag.FlagSet).Output"
  "(*flag.FlagSet).sprintf" -> "fmt.Fprintln"
  "(*flag.FlagSet).failf" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).usage" -> "(*flag.FlagSet).defaultUsage"
  "(*flag.FlagSet).usage" -> "(*flag.FlagSet).defaultUsage"
  "(*flag.FlagSet).usage" -> "time.initLocal"
  "(*flag.FlagSet).usage" -> "sync.poolCleanup"
  "(*flag.FlagSet).usage" -> "runtime.chanrecv$1"
  "(*flag.FlagSet).usage" -> "runtime.asyncPreempt2"
  "(*flag.FlagSet).usage" -> "internal/poll.runtime_pollServerInit"
  "(*flag.FlagSet).usage" -> "runtime.throw$1"
  "(*flag.FlagSet).usage" -> "os/signal.loop"
  "(*flag.FlagSet).usage" -> "time.FixedZone$1"
  "(*flag.FlagSet).usage" -> "(*fmt.ss).Token$1"
  "(*flag.FlagSet).usage" -> "reflect.methodValueCall"
  "(*flag.FlagSet).usage" -> "runtime.SetFinalizer$1"
  "(*flag.FlagSet).usage" -> "runtime.SetFinalizer$2"
  "(*flag.FlagSet).usage" -> "flag.commandLineUsage"
  "(*flag.FlagSet).usage" -> "runtime.asyncPreempt"
  "(*flag.FlagSet).usage" -> "flag.init$1"
  "(*flag.FlagSet).usage" -> "runtime.init$1"
  "(*flag.FlagSet).usage" -> "internal/poll.CopyFileRange$1"
  "(*flag.FlagSet).usage" -> "runtime.chansend$1"
  "(*flag.FlagSet).usage" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "(*flag.FlagSet).usage" -> "os/signal.Notify$1$1"
  "(*flag.FlagSet).usage" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "(*flag.FlagSet).usage" -> "syscall.copyenv"
  "(*flag.FlagSet).usage" -> "(*encoding/json.encodeState).marshal$1"
  "(*flag.FlagSet).usage" -> "runtime.fatalthrow$1"
  "(*flag.FlagSet).usage" -> "runtime.goready$1"
  "(*flag.FlagSet).usage" -> "runtime.gcResetMarkState"
  "(*flag.FlagSet).usage" -> "runtime.gcStart$1"
  "(*flag.FlagSet).usage" -> "runtime.gcStart$2"
  "(*flag.FlagSet).usage" -> "runtime.gcStart$3"
  "(*flag.FlagSet).usage" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "(*flag.FlagSet).usage" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "(*flag.FlagSet).usage" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "(*flag.FlagSet).usage" -> "runtime.Stack$1"
  "(*flag.FlagSet).usage" -> "runtime/pprof.printCountProfile$2"
  "(*flag.FlagSet).usage" -> "runtime.ReadMemStats$1"
  "(*flag.FlagSet).usage" -> "runtime/pprof.writeHeapProto$1"
  "(*flag.FlagSet).usage" -> "(*internal/godebug.Setting).IncNonDefault"
  "(*flag.FlagSet).usage" -> "hash/crc32.ieeeInit"
  "(*flag.FlagSet).usage" -> "runtime.sweepone$1"
  "(*flag.FlagSet).usage" -> "runtime.casgstatus$1"
  "(*flag.FlagSet).usage" -> "runtime.osyield"
  "(*flag.FlagSet).usage" -> "runtime.cgoCheckTypedBlock$1"
  "(*flag.FlagSet).usage" -> "runtime.callers$1"
  "(*flag.FlagSet).usage" -> "flag.isZeroValue$1"
  "(*flag.FlagSet).usage" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "(*flag.FlagSet).usage" -> "runtime.stopTheWorld$1"
  "(*flag.FlagSet).usage" -> "runtime.startTheWorld$1"
  "(*flag.FlagSet).usage" -> "(*runtime/pprof.profileBuilder).build$1"
  "(*flag.FlagSet).usage" -> "(*internal/godebug.Setting).Value$1"
  "(*flag.FlagSet).usage" -> "(*runtime.sweepLocked).sweep$1"
  "(*flag.FlagSet).usage" -> "(*runtime.sweepLocked).sweep$2"
  "(*flag.FlagSet).usage" -> "reflect.embeddedIfaceMethStub"
  "(*flag.FlagSet).usage" -> "runtime.futexwakeup$1"
  "(*flag.FlagSet).usage" -> "runtime.wbBufFlush$1"
  "(*flag.FlagSet).usage" -> "runtime.gcBgMarkWorker$2"
  "(*flag.FlagSet).usage" -> "runtime.mspinning"
  "(*flag.FlagSet).usage" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "(*flag.FlagSet).usage" -> "runtime.flushallmcaches"
  "(*flag.FlagSet).usage" -> "(*internal/godebug.Setting).register"
  "(*flag.FlagSet).usage" -> "runtime.persistentalloc$1"
  "(*flag.FlagSet).usage" -> "runtime.tracefree$1"
  "(*flag.FlagSet).usage" -> "(*runtime.mheap).freeSpan$1"
  "(*flag.FlagSet).usage" -> "runtime.doRecordGoroutineProfile$1"
  "(*flag.FlagSet).usage" -> "runtime._LostContendedRuntimeLock"
  "(*flag.FlagSet).usage" -> "(*runtime.mLockProfile).captureStack$1"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkDone$2"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkDone$3"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkDone$4"
  "(*flag.FlagSet).usage" -> "runtime.entersyscallblock$1"
  "(*flag.FlagSet).usage" -> "runtime.entersyscallblock$2"
  "(*flag.FlagSet).usage" -> "runtime.entersyscallblock_handoff"
  "(*flag.FlagSet).usage" -> "runtime.exitsyscall$1"
  "(*flag.FlagSet).usage" -> "runtime.exitsyscall$2"
  "(*flag.FlagSet).usage" -> "runtime.cgoCheckPtrWrite$1"
  "(*flag.FlagSet).usage" -> "runtime.unreachableMethod"
  "(*flag.FlagSet).usage" -> "runtime.heapSetType$1"
  "(*flag.FlagSet).usage" -> "runtime.tracealloc$1"
  "(*flag.FlagSet).usage" -> "runtime.wirep$1"
  "(*flag.FlagSet).usage" -> "runtime.wirep$2"
  "(*flag.FlagSet).usage" -> "runtime.sigreturn__sigaction"
  "(*flag.FlagSet).usage" -> "runtime.cgoSigtramp"
  "(*flag.FlagSet).usage" -> "runtime.sigtramp"
  "(*flag.FlagSet).usage" -> "runtime.forEachP$1"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkTermination$1"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkTermination$2"
  "(*flag.FlagSet).usage" -> "runtime.gcControllerCommit"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkTermination$3"
  "(*flag.FlagSet).usage" -> "runtime.freeStackSpans"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkTermination$5"
  "(*flag.FlagSet).usage" -> "runtime.exitsyscallfast$1"
  "(*flag.FlagSet).usage" -> "runtime.allocm$1"
  "(*flag.FlagSet).usage" -> "runtime.mstart"
  "(*flag.FlagSet).usage" -> "runtime.getempty$1"
  "(*flag.FlagSet).usage" -> "(*runtime.p).destroy$1"
  "(*flag.FlagSet).usage" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "(*flag.FlagSet).usage" -> "runtime.gcAssistAlloc$1"
  "(*flag.FlagSet).usage" -> "(*runtime.mheap).alloc$1"
  "(*flag.FlagSet).usage" -> "runtime.mProf_Malloc$1"
  "(*flag.FlagSet).usage" -> "runtime.mmap$1"
  "(*flag.FlagSet).usage" -> "(*runtime.traceMap).put$1"
  "(*flag.FlagSet).usage" -> "runtime.fatal$1"
  "(*flag.FlagSet).usage" -> "(runtime.traceWriter).refill$1"
  "(*flag.FlagSet).usage" -> "runtime.sigaction$1"
  "(*flag.FlagSet).usage" -> "runtime.gcMarkTermination$4$1"
  "(*flag.FlagSet).usage" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "(*flag.FlagSet).usage" -> "runtime.exitsyscallfast_reacquired$1"
  "(*flag.FlagSet).usage" -> "(*runtime.traceStringTable).put$1"
  "(*flag.FlagSet).usage" -> "(*runtime.rwmutex).rlock$1"
  "(*flag.FlagSet).usage" -> "runtime.traceThreadDestroy$1"
  "(*flag.FlagSet).usage" -> "runtime.malg$1"
  "(*flag.FlagSet).usage" -> "runtime.allocmcache$1"
  "(*flag.FlagSet).usage" -> "runtime.freemcache$1"
  "(*flag.FlagSet).usage" -> "runtime.reentersyscall$1"
  "(*flag.FlagSet).usage" -> "runtime.reentersyscall$2"
  "(*flag.FlagSet).usage" -> "runtime.entersyscall_sysmon"
  "(*flag.FlagSet).usage" -> "runtime.runSafePointFn"
  "(*flag.FlagSet).usage" -> "runtime.entersyscall_gcwait"
  "(*flag.FlagSet).usage" -> "runtime._VDSO"
  "(*flag.FlagSet).usage" -> "runtime._ExternalCode"
  "(*flag.FlagSet).usage" -> "runtime._GC"
  "(*flag.FlagSet).usage" -> "runtime._System"
  "(*flag.FlagSet).usage" -> "runtime.sigpanic"
  "(*flag.FlagSet).usage" -> "runtime.sysSigaction$1"
  "(*flag.FlagSet).usage" -> "runtime.markrootFreeGStacks"
  "(*flag.FlagSet).usage" -> "runtime.markroot$1"
  "(*flag.FlagSet).usage" -> "runtime.printArgs$3"
  "(*flag.FlagSet).usage" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "(*flag.FlagSet).usage" -> "runtime.freeSomeWbufs$1"
  "(*flag.FlagSet).usage" -> "(*runtime.pageAlloc).scavenge$1"
  "(*flag.FlagSet).usage" -> "runtime._LostExternalCode"
  "(*flag.FlagSet).usage" -> "runtime._LostSIGPROFDuringAtomic64"
  "(*flag.FlagSet).usage" -> "runtime.munmap$1"
  "(*flag.FlagSet).failf" -> "(*flag.FlagSet).usage"
  "(*flag.FlagSet).failf" -> "errors.New"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).usage"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).IsBoolFlag"
  "strconv.ParseBool" -> "strconv.syntaxError"
  "(*flag.boolValue).Set" -> "strconv.ParseBool"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "fmt.Fscanf" -> "fmt.newScanState"
  "(*fmt.ss).doScanf" -> "fmt.errorHandler"
  "(*fmt.ss).advance" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "(*fmt.ss).getRune"
  "(*fmt.ss).advance" -> "fmt.isSpace"
  "(*fmt.ss).advance" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).advance" -> "(*fmt.ss).mustReadRune"
  "(*fmt.ss).advance" -> "(*fmt.ss).errorString"
  "(*fmt.ss).advance" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).advance" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).advance"
  "(*fmt.ss).doScanf" -> "fmt.parsenum"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).errorString"
  "(*fmt.ss).doScanf" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).SkipSpace"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).scanPercent"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).errorString"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).scanOne"
  "(*fmt.ss).doScanf" -> "(*fmt.ss).errorString"
  "fmt.Fscanf" -> "(*fmt.ss).doScanf"
  "(*fmt.ss).free" -> "(*sync.Pool).Put"
  "fmt.Fscanf" -> "(*fmt.ss).free"
  "fmt.Sscanf" -> "fmt.Fscanf"
  "(*github.com/stefan-muehlebach/gg/geom.Rectangle).Set" -> "fmt.Sscanf"
  "(*flag.FlagSet).parseOne" -> "(*github.com/stefan-muehlebach/gg/geom.Rectangle).Set"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.valueOfUnitString"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.hasSuffixes"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "(periph.io/x/conn/v3/physic.Frequency).String"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.maxValueErr"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.notNumberUnitErr"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "(periph.io/x/conn/v3/physic.Frequency).String"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.minValueErr"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.hasSuffixes"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.unknownUnitPrefixErr"
  "(*periph.io/x/conn/v3/physic.Frequency).Set" -> "periph.io/x/conn/v3/physic.incorrectUnitErr"
  "(*flag.FlagSet).parseOne" -> "(*periph.io/x/conn/v3/physic.Frequency).Set"
  "(*github.com/stefan-muehlebach/gg/geom.Point).Set" -> "fmt.Sscanf"
  "(*flag.FlagSet).parseOne" -> "(*github.com/stefan-muehlebach/gg/geom.Point).Set"
  "(*flag.FlagSet).parseOne" -> "(*periph.io/x/conn/v3/physic.ElectricCurrent).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.boolValue).Set"
  "(*flag.FlagSet).parseOne" -> "(*flag.FlagSet).failf"
  "(*flag.FlagSet).Parse" -> "(*flag.FlagSet).parseOne"
  "(*flag.FlagSet).Parse" -> "os.Exit"
  "(*flag.FlagSet).Parse" -> "os.Exit"
  "flag.Parse" -> "(*flag.FlagSet).Parse"
  "command-line-arguments.main" -> "flag.Parse"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewDebugDomain"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.AddDebugDomain"
  "github.com/stefan-muehlebach/adagui.NewScreen" -> "log.Fatal"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "github.com/stefan-muehlebach/adatft/hx8357.Open"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "time.Sleep"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8" -> "(*periph.io/x/host/v3/sysfs.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8" -> "(periph.io/x/conn/v3/gpio.invalidPin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8" -> "(*periph.io/x/host/v3/allwinner.Pin).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8" -> "(*periph.io/x/host/v3/allwinner.PinPL).Out"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "time.Sleep"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Data8"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).DataArray"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "time.Sleep"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Cmd"
  "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init" -> "time.Sleep"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357).Init"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "github.com/stefan-muehlebach/adatft/hx8357.OpenDummy"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "(*github.com/stefan-muehlebach/adatft/hx8357.HX8357Dummy).Init"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "image.Rect"
  "github.com/stefan-muehlebach/adatft.NewILIImage" -> "(image.Rectangle).Dx"
  "github.com/stefan-muehlebach/adatft.NewILIImage" -> "(image.Rectangle).Dy"
  "github.com/stefan-muehlebach/adatft.NewILIImage" -> "(image.Rectangle).Dx"
  "github.com/stefan-muehlebach/adatft.NewILIImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Clear"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "github.com/stefan-muehlebach/adatft.NewILIImage"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "github.com/stefan-muehlebach/adatft.NewILIImage"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "github.com/stefan-muehlebach/adatft.NewILIImage"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "(*github.com/stefan-muehlebach/adatft.Display).sendImage"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Diff" -> "(image.Rectangle).Dx"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Diff" -> "(image.Rectangle).Dy"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Diff" -> "(image.Rectangle).Dx"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Diff" -> "image.Rect"
  "(*github.com/stefan-muehlebach/adatft.Display).displayer" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Diff"
  "(*github.com/stefan-muehlebach/adatft.Display).displayer" -> "(image.Rectangle).Empty"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).SubImage" -> "(image.Rectangle).Intersect"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).SubImage" -> "(image.Rectangle).Empty"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).SubImage" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).PixOffset"
  "(*github.com/stefan-muehlebach/adatft.Display).displayer" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).SubImage"
  "(*github.com/stefan-muehlebach/adatft.Display).displayer" -> "(*github.com/stefan-muehlebach/adatft.Display).sendImage"
  "github.com/stefan-muehlebach/adatft.OpenDisplay" -> "(*github.com/stefan-muehlebach/adatft.Display).displayer"
  "github.com/stefan-muehlebach/adagui.NewScreen" -> "github.com/stefan-muehlebach/adatft.OpenDisplay"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "periph.io/x/conn/v3/spi/spireg.Open"
  "github.com/stefan-muehlebach/adatft/stmpe610.check" -> "log.Fatalf"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "github.com/stefan-muehlebach/adatft/stmpe610.check"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "github.com/stefan-muehlebach/adatft/stmpe610.check"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "log.Fatal"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).Halt"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).haltClock"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "periph.io/x/host/v3/bcm283x.sleep150cycles"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "periph.io/x/host/v3/bcm283x.sleep150cycles"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/bcm283x.Pin).In" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "(*periph.io/x/host/v3/bcm283x.Pin).In"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "github.com/stefan-muehlebach/adatft/stmpe610.check"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "(periph.io/x/conn/v3/gpio.invalidPin).In"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "(*periph.io/x/host/v3/allwinner.PinPL).In"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "(*periph.io/x/host/v3/sysfs.SPI).Connect"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).Halt"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).setFunction"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).Number"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/sysfs.Pin).In"
  "(*periph.io/x/host/v3/allwinner.Pin).In" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "github.com/stefan-muehlebach/adatft/stmpe610.Open" -> "(*periph.io/x/host/v3/allwinner.Pin).In"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "github.com/stefan-muehlebach/adatft/stmpe610.Open"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg16" -> "(*periph.io/x/host/v3/sysfs.spiConn).Tx"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg16"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "github.com/stefan-muehlebach/adatft/stmpe610.OpenDummy"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadReg8"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).ReadReg16"
  "(*log.Logger).Fatalf" -> "fmt.Sprintf"
  "(*log.Logger).Fatalf" -> "(*log.Logger).Output"
  "(*log.Logger).Fatalf" -> "os.Exit"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*log.Logger).Fatalf"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).SetCallback"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "time.Sleep"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).ReadReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).WriteReg8"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Init"
  "github.com/stefan-muehlebach/adatft.OpenTouch" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).Init"
  "github.com/stefan-muehlebach/adagui.NewScreen" -> "github.com/stefan-muehlebach/adatft.OpenTouch"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfig" -> "path/filepath.Join"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfigFile" -> "os.ReadFile"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfigFile" -> "(*log.Logger).Fatal"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfigFile" -> "encoding/json.Unmarshal"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfigFile" -> "(*log.Logger).Fatal"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfigFile" -> "(*github.com/stefan-muehlebach/adatft.DistortedPlane).update"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfig" -> "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfigFile"
  "github.com/stefan-muehlebach/adagui.NewScreen" -> "(*github.com/stefan-muehlebach/adatft.DistortedPlane).ReadConfig"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewScreen"
  "github.com/stefan-muehlebach/gg/geom.NewRectangleWH" -> "github.com/stefan-muehlebach/gg/geom.NewRectangle"
  "github.com/stefan-muehlebach/adagui.newWindow" -> "github.com/stefan-muehlebach/gg/geom.NewRectangleWH"
  "github.com/stefan-muehlebach/gg.NewContext" -> "image.Rect"
  "github.com/stefan-muehlebach/gg.NewContext" -> "image.NewRGBA"
  "github.com/stefan-muehlebach/gg.NewContextForRGBA" -> "(*image.RGBA).Bounds"
  "github.com/stefan-muehlebach/gg.NewContextForRGBA" -> "(image.Rectangle).Size"
  "github.com/stefan-muehlebach/gg.NewContextForRGBA" -> "(*image.RGBA).Bounds"
  "github.com/stefan-muehlebach/gg.NewContextForRGBA" -> "(image.Rectangle).Size"
  "(*github.com/golang/freetype/raster.Rasterizer).SetBounds" -> "(*github.com/golang/freetype/raster.Rasterizer).Clear"
  "github.com/golang/freetype/raster.NewRasterizer" -> "(*github.com/golang/freetype/raster.Rasterizer).SetBounds"
  "github.com/stefan-muehlebach/gg.NewContextForRGBA" -> "github.com/golang/freetype/raster.NewRasterizer"
  "github.com/stefan-muehlebach/gg.NewContextForRGBA" -> "github.com/stefan-muehlebach/gg/geom.Identity"
  "github.com/stefan-muehlebach/gg.NewContext" -> "github.com/stefan-muehlebach/gg.NewContextForRGBA"
  "github.com/stefan-muehlebach/adagui.newWindow" -> "github.com/stefan-muehlebach/gg.NewContext"
  "time.when" -> "time.runtimeNano"
  "time.when" -> "time.runtimeNano"
  "time.NewTicker" -> "time.when"
  "time.NewTicker" -> "time.startTimer"
  "github.com/stefan-muehlebach/adagui.newWindow" -> "time.NewTicker"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Point).Contains"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*container/list.List).Back"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Embed).Contains"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Line).Contains"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Circle).Contains"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Rectangle).Contains"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Embed).Parent2Local"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*github.com/stefan-muehlebach/adagui.LeafEmbed).SelectTarget"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget" -> "(*container/list.Element).Prev"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SelectTarget"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Rectangle).Contains"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*sync.Mutex).Unlock"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*sync.Mutex).Lock"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*sync.Mutex).Lock"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).OnInputEvent" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set"
  "(*github.com/stefan-muehlebach/adagui.PushEmbed).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set"
  "(*github.com/stefan-muehlebach/adagui.Button).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Button).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc"
  "(*github.com/stefan-muehlebach/adagui.IconButton).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui.Button).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.IconButton).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Set" -> "(*sync.RWMutex).Lock"
  "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Set" -> "(*sync.RWMutex).Unlock"
  "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Set" -> "(*github.com/stefan-muehlebach/adagui/binding.base).trigger"
  "(*github.com/stefan-muehlebach/adagui.IconButton).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Set"
  "(*github.com/stefan-muehlebach/adagui.IconButton).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/binding.boundInt).Set"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.IconButton).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Button).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Shape).OnInputEvent" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Shape).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).OnInputEvent" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Get"
  "(*github.com/stefan-muehlebach/adagui.SelectEmbed).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/binding.boundBool).Set"
  "(*github.com/stefan-muehlebach/adagui.Shape).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Shape).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Shape).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Shape).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).OnInputEvent" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).CallTouchFunc"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Button).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local" -> "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local"
  "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local" -> "(*github.com/stefan-muehlebach/adagui.Embed).Matrix"
  "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Transform"
  "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Inv"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Screen2Local" -> "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Screen2Local"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Circle).Contains"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Embed).Contains"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Shape).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*sync.Mutex).Unlock"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.IconButton).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.IconButton).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Point).Contains"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*sync.Mutex).Lock"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Line).Contains"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Screen2Local"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Embed).Screen2Local"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*sync.Mutex).Unlock"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Contains"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui.Button).OnInputEvent"
  "(*github.com/stefan-muehlebach/adagui.Window).eventThread" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).OnInputEvent"
  "github.com/stefan-muehlebach/adagui.newWindow" -> "(*github.com/stefan-muehlebach/adagui.Window).eventThread"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*sync.Mutex).Lock"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Marks).UnmarkNeedsPaint"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Push"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Matrix"
  "(*github.com/stefan-muehlebach/gg.Context).Multiply" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Multiply"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Paint"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Marks).UnmarkNeedsPaint"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Visible"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Paint"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Overlaps" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Overlaps" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Overlaps"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Center"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Width"
  "(*github.com/stefan-muehlebach/gg.Context).DrawPoint" -> "(*github.com/stefan-muehlebach/gg.Context).Push"
  "(*github.com/stefan-muehlebach/gg.Context).DrawPoint" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).DrawPoint" -> "github.com/stefan-muehlebach/gg/geom.Identity"
  "(*github.com/stefan-muehlebach/gg.Context).DrawCircle" -> "(*github.com/stefan-muehlebach/gg.Context).NewSubPath"
  "(*github.com/stefan-muehlebach/gg.Context).DrawCircle" -> "(*github.com/stefan-muehlebach/gg.Context).DrawEllipticalArc"
  "(*github.com/stefan-muehlebach/gg.Context).DrawCircle" -> "(*github.com/stefan-muehlebach/gg.Context).ClosePath"
  "(*github.com/stefan-muehlebach/gg.Context).DrawPoint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawCircle"
  "(*github.com/stefan-muehlebach/gg.Context).DrawPoint" -> "(*github.com/stefan-muehlebach/gg.Context).Pop"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawPoint"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Pushed"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderColor"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Stroke"
  "(*github.com/stefan-muehlebach/adagui.Point).Paint" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Selected"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Point).Paint"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).AsCoord" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Dx"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).AsCoord" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Dy"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).AsCoord"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).NewSubPath"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle" -> "(*github.com/stefan-muehlebach/gg.Context).ClosePath"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Image"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Matrix"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).AsAff3"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Int" -> "(github.com/stefan-muehlebach/gg/geom.Point).Int"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Int" -> "(github.com/stefan-muehlebach/gg/geom.Point).Int"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Int"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "image.Rect"
  "image.NewAlpha" -> "image.pixelBufferLength"
  "image.NewAlpha" -> "(image.Rectangle).Dx"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "image.NewAlpha"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "github.com/golang/freetype/raster.NewAlphaOverPainter"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "(*github.com/stefan-muehlebach/gg.Context).fill"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "image.Rect"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "image.NewAlpha"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "(*image.Alpha).Bounds"
  "golang.org/x/image/draw.DrawMask" -> "image/draw.DrawMask"
  "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve" -> "golang.org/x/image/draw.DrawMask"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Stroke"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).ResetClip"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Color"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetFillColor"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).FillPreserve"
  "golang.org/x/image/draw.Copy" -> "(image.Point).Sub"
  "golang.org/x/image/draw.Copy" -> "(image.Rectangle).Add"
  "golang.org/x/image/draw.Copy" -> "(image.Point).Add"
  "golang.org/x/image/draw.Copy" -> "golang.org/x/image/draw.DrawMask"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Size"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Size"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "golang.org/x/image/draw.Copy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Intersect"
  "golang.org/x/image/draw.clipAffectedDestRect" -> "(image.Rectangle).Sub"
  "golang.org/x/image/draw.clipAffectedDestRect" -> "(image.Rectangle).Intersect"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "golang.org/x/image/draw.clipAffectedDestRect"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Sub"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Empty"
  "golang.org/x/image/draw.opaque" -> "(*image.Paletted).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.Uniform).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.YCbCr).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.Alpha).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.RGBA).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.Gray).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.CMYK).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.NRGBA).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.NRGBA64).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.Gray16).Opaque"
  "golang.org/x/image/draw.opaque" -> "(*image.RGBA64).Opaque"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "golang.org/x/image/draw.opaque"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Uniform).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.RGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.YCbCr).Bounds"
  "(image.Rectangle).In" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).In"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Uniform).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.RGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(image.Rectangle).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.YCbCr).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "golang.org/x/image/draw.Draw"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Over"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Over"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Gray_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_NRGBA_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr444_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr422_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr420_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_YCbCr440_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_RGBA64Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_Image_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(golang.org/x/image/draw.nnInterpolator).scale_RGBA64Image_RGBA64Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Scale" -> "(*image.RGBA64).Bounds"
  "golang.org/x/image/draw.Copy" -> "(golang.org/x/image/draw.nnInterpolator).Scale"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Size"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Size"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "golang.org/x/image/draw.Copy"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Intersect"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "golang.org/x/image/draw.clipAffectedDestRect"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Sub"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "golang.org/x/image/draw.opaque"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Uniform).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.RGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.YCbCr).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).In"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Uniform).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.RGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(image.Rectangle).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.YCbCr).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "golang.org/x/image/draw.Draw"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Over"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Over"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Gray_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Gray_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_NRGBA_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr444_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr444_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr422_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr422_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr420_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr420_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr440_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_YCbCr440_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_RGBA64Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_Image_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dy"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).Dx"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(golang.org/x/image/draw.ablInterpolator).scale_RGBA64Image_RGBA64Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Scale" -> "(*image.RGBA64).Bounds"
  "golang.org/x/image/draw.Copy" -> "(golang.org/x/image/draw.ablInterpolator).Scale"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "golang.org/x/image/draw.Copy"
  "golang.org/x/image/draw.transformRect" -> "math.Floor"
  "golang.org/x/image/draw.transformRect" -> "math.Floor"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "golang.org/x/image/draw.transformRect"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(image.Rectangle).Intersect"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "golang.org/x/image/draw.clipAffectedDestRect"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "golang.org/x/image/draw.invert"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "golang.org/x/image/draw.transformRect"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(image.Rectangle).Sub"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "golang.org/x/image/draw.opaque"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Uniform).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.RGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(image.Rectangle).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.YCbCr).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(image.Rectangle).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "golang.org/x/image/draw.transform_Uniform"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_NRGBA_Over"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA_Over"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Over"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Gray_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Gray_Src"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_NRGBA_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_NRGBA_Src"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA_Src"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr444_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr444_Src"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr422_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr422_Src"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr420_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr420_Src"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr440_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_YCbCr440_Src"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_RGBA64Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_Image_Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(golang.org/x/image/draw.nnInterpolator).transform_RGBA64Image_RGBA64Image_Src"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.nnInterpolator).Transform" -> "(*image.RGBA64).Bounds"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(golang.org/x/image/draw.nnInterpolator).Transform"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "golang.org/x/image/draw.Copy"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "golang.org/x/image/draw.transformRect"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(image.Rectangle).Intersect"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "golang.org/x/image/draw.clipAffectedDestRect"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(image.Rectangle).Empty"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "golang.org/x/image/draw.invert"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "golang.org/x/image/draw.transformRect"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(image.Rectangle).Sub"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "golang.org/x/image/draw.opaque"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Uniform).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Alpha).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.RGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.RGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(image.Rectangle).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.YCbCr).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(image.Rectangle).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "golang.org/x/image/draw.transform_Uniform"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_NRGBA_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_NRGBA_Over"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA_Over"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Over"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Gray_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Gray_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_NRGBA_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_NRGBA_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr444_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr444_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr422_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr422_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr420_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr420_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr440_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_YCbCr440_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_RGBA64Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_Image_Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Point).In"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).Set"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(golang.org/x/image/draw.ablInterpolator).transform_RGBA64Image_RGBA64Image_Src"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Paletted).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Gray).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.CMYK).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.NRGBA).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.NRGBA64).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.Gray16).Bounds"
  "(golang.org/x/image/draw.ablInterpolator).Transform" -> "(*image.RGBA64).Bounds"
  "(*github.com/stefan-muehlebach/adagui.Panel).Paint" -> "(golang.org/x/image/draw.ablInterpolator).Transform"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Panel).Paint"
  "(*github.com/stefan-muehlebach/adagui.IconButton).Paint" -> "(*github.com/stefan-muehlebach/adagui.Button).Paint"
  "(*github.com/stefan-muehlebach/adagui.IconButton).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Bounds"
  "(*github.com/stefan-muehlebach/adagui.IconButton).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Center"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Uniform).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Alpha).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.RGBA64).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(image.Rectangle).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(image.Rectangle).Size"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).Translate" -> "github.com/stefan-muehlebach/gg/geom.Translate"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).Translate" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Translate"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Uniform).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Alpha).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.RGBA64).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(image.Rectangle).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.transformRect"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.RGBA).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Alpha).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).Intersect"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.clipAffectedDestRect"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).Empty"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).Empty"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.invert"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.transformRect"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).Sub"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.opaque"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.transform_Uniform"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Uniform).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Alpha).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.RGBA64).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.RGBA).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).In"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Uniform).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Alpha).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.RGBA64).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.RGBA).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(image.Rectangle).In"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray16).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA64).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Alpha).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.CMYK).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA64).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Paletted).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.RGBA).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over" -> "(*image.NRGBA).Set"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Paletted).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray16).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA64).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.CMYK).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Paletted).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Alpha).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray16).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.CMYK).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Alpha).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA64).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.NRGBA).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Set"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src" -> "(*image.Gray).Set"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Over"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Over"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Over"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Over"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Over"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.RGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.Gray16).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Over"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_Gray_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_NRGBA_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr444_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr422_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr420_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_YCbCr440_Src"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.YCbCr).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.YCbCr).Bounds"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_RGBA64Image_Src"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA_Image_Src"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_Image_Image_Src"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Point).In"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "math.Floor"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "math.Ceil"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.abs"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.init$1"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.init$2"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image.Rectangle).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.YCbCr).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.RGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha16).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Uniform).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Alpha).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.YCbCr).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA64).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NRGBA64).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA64).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.Gray).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.NYCbCrA).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.CMYK).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray16).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(image/color.CMYK).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.NRGBA).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Gray).RGBA64At"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.RGBA).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Paletted).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "(*image.Alpha).SetRGBA64"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src" -> "golang.org/x/image/draw.fffftou"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*golang.org/x/image/draw.Kernel).transform_RGBA64Image_RGBA64Image_Src"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Paletted).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Paletted).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Paletted).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Gray).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Gray).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Gray).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.CMYK).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.CMYK).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.CMYK).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.NRGBA).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.NRGBA).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.NRGBA).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.NRGBA64).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.NRGBA64).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.NRGBA64).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Gray16).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Gray16).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.Gray16).Bounds"
  "(*golang.org/x/image/draw.Kernel).Transform" -> "(*image.RGBA64).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*golang.org/x/image/draw.Kernel).Transform"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Uniform).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Alpha).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.RGBA64).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(image.Rectangle).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*golang.org/x/image/draw.Kernel).Transform"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.YCbCr).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.YCbCr).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.YCbCr).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Paletted).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Paletted).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Paletted).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Gray).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Gray).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Gray).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.CMYK).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.CMYK).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.CMYK).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.NRGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.NRGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.NRGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.NRGBA64).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.NRGBA64).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.NRGBA64).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Gray16).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Gray16).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored" -> "(*image.Gray16).Bounds"
  "(*github.com/stefan-muehlebach/adagui.IconButton).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.IconButton).Paint"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Pop"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Button).Paint"
  "(*github.com/stefan-muehlebach/adagui.Group).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Group).Paint" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Paint"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Group).Paint"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).Paint"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Point).AsCoord"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Point).AsCoord"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Pushed"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderColor"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Stroke"
  "(*github.com/stefan-muehlebach/adagui.Line).Paint" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Selected"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Line).Paint"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Center"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawCircle"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Pushed"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderColor"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Stroke"
  "(*github.com/stefan-muehlebach/adagui.Circle).Paint" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Selected"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Circle).Paint"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/adagui.Embed).LocalBounds"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).AsCoord"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).DrawRectangle"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Pushed"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBorderColor"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).StrokePreserve"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderWidth"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeWidth"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BorderColor"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).SetStrokeColor"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/gg.Context).Stroke"
  "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint" -> "(*github.com/stefan-muehlebach/adagui.SelectEmbed).Selected"
  "(*github.com/stefan-muehlebach/adagui.Embed).Paint" -> "(*github.com/stefan-muehlebach/adagui.Rectangle).Paint"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/adagui.Embed).Paint"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/gg.Context).Image"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Convert" -> "(*github.com/stefan-muehlebach/adatft.Stopwatch).Start"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).Convert" -> "(*github.com/stefan-muehlebach/adatft.Stopwatch).Stop"
  "(*github.com/stefan-muehlebach/adatft.Display).Draw" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Convert"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/adatft.Display).Draw"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*sync.Mutex).Unlock"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/gg.Context).Clear"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/gg.Context).SetFillColor"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(github.com/stefan-muehlebach/adagui.Marks).NeedsPaint"
  "(*github.com/stefan-muehlebach/gg.Context).Identity" -> "github.com/stefan-muehlebach/gg/geom.Identity"
  "(*github.com/stefan-muehlebach/adagui.Window).paintThread" -> "(*github.com/stefan-muehlebach/gg.Context).Identity"
  "github.com/stefan-muehlebach/adagui.newWindow" -> "(*github.com/stefan-muehlebach/adagui.Window).paintThread"
  "(*github.com/stefan-muehlebach/adagui.Screen).NewWindow" -> "github.com/stefan-muehlebach/adagui.newWindow"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Screen).NewWindow"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewGroup"
  "github.com/stefan-muehlebach/adagui.NewPaddedLayout" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewPaddedLayout"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Size"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).SetSize"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(*github.com/stefan-muehlebach/adagui.Circle).SetPos"
  "(*github.com/stefan-muehlebach/adagui.Window).SetRoot" -> "(*github.com/stefan-muehlebach/adagui.Point).SetPos"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Window).SetRoot"
  "github.com/stefan-muehlebach/adagui.NewVBoxLayout" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewVBoxLayout"
  "github.com/stefan-muehlebach/adagui.NewGroupPL" -> "github.com/stefan-muehlebach/adagui.NewGroup"
  "github.com/stefan-muehlebach/adagui.NewGroupPL" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewGroupPL"
  "command-line-arguments.NewCanvas" -> "github.com/stefan-muehlebach/adagui.NewPanel"
  "command-line-arguments.NewCanvas" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnPress"
  "command-line-arguments.NewCanvas" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDrag"
  "command-line-arguments.NewCanvas" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnRelease"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnTap" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "command-line-arguments.NewCanvas" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnTap"
  "command-line-arguments.main" -> "command-line-arguments.NewCanvas"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetBorderWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetBorderWidth"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewGroup"
  "github.com/stefan-muehlebach/adagui.NewHBoxLayout" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewHBoxLayout"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add"
  "command-line-arguments.main" -> "fmt.Sprintf"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*github.com/stefan-muehlebach/adagui.Embed).Init"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*github.com/stefan-muehlebach/adagui.PushEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "github.com/stefan-muehlebach/gg.LoadPNG" -> "os.Open"
  "github.com/stefan-muehlebach/gg.LoadPNG" -> "(*os.File).Close"
  "image/png.Decode" -> "hash/crc32.NewIEEE"
  "image/png.Decode" -> "(*image/png.decoder).checkHeader"
  "image/png.Decode" -> "(*image/png.decoder).parseChunk"
  "github.com/stefan-muehlebach/gg.LoadPNG" -> "image/png.Decode"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "github.com/stefan-muehlebach/gg.LoadPNG"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).InnerPadding"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.Uniform).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.Alpha).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.RGBA64).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.RGBA).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(image.Rectangle).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "github.com/stefan-muehlebach/gg/geom.NewRectangleIMG" -> "github.com/stefan-muehlebach/gg/geom.NewPointIMG"
  "github.com/stefan-muehlebach/gg/geom.NewRectangleIMG" -> "github.com/stefan-muehlebach/gg/geom.NewPointIMG"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "github.com/stefan-muehlebach/gg/geom.NewRectangleIMG"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Inset"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Size"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "github.com/stefan-muehlebach/adagui/binding.NewInt" -> "(*github.com/stefan-muehlebach/adagui/binding.base).Init"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "github.com/stefan-muehlebach/adagui/binding.NewInt"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.YCbCr).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.Paletted).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.Gray).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.CMYK).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.NRGBA).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.NRGBA64).Bounds"
  "github.com/stefan-muehlebach/adagui.NewIconButton" -> "(*image.Gray16).Bounds"
  "command-line-arguments.main" -> "github.com/stefan-muehlebach/adagui.NewIconButton"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add"
  "github.com/stefan-muehlebach/adagui.NewCircle" -> "(*github.com/stefan-muehlebach/adagui.Shape).Init"
  "github.com/stefan-muehlebach/adagui.NewCircle" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewCircle" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "command-line-arguments.NewCircle" -> "github.com/stefan-muehlebach/adagui.NewCircle"
  "command-line-arguments.NewCircle" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnPress"
  "command-line-arguments.NewCircle" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDrag"
  "command-line-arguments.NewCircle" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnRelease"
  "command-line-arguments.main" -> "command-line-arguments.NewCircle"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Circle).SetPos"
  "command-line-arguments.main" -> "command-line-arguments.NewCircle"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Circle).SetPos"
  "command-line-arguments.main" -> "command-line-arguments.NewLine"
  "github.com/stefan-muehlebach/adagui.NewRectangle" -> "(*github.com/stefan-muehlebach/adagui.Shape).Init"
  "github.com/stefan-muehlebach/adagui.NewRectangle" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewRectangle" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "command-line-arguments.NewRectangle" -> "github.com/stefan-muehlebach/adagui.NewRectangle"
  "command-line-arguments.NewRectangle" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnPress"
  "command-line-arguments.NewRectangle" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDrag"
  "command-line-arguments.NewRectangle" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnRelease"
  "command-line-arguments.main" -> "command-line-arguments.NewRectangle"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetPos"
  "command-line-arguments.main" -> "command-line-arguments.NewPoint"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Point).SetPos"
  "command-line-arguments.main" -> "command-line-arguments.NewPoint"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Point).SetPos"
  "github.com/stefan-muehlebach/adagui.NewEllipse" -> "(*github.com/stefan-muehlebach/adagui.Shape).Init"
  "github.com/stefan-muehlebach/adagui.NewEllipse" -> "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init"
  "github.com/stefan-muehlebach/adagui.NewEllipse" -> "(*github.com/stefan-muehlebach/adagui.Embed).SetMinSize"
  "command-line-arguments.NewEllipse" -> "github.com/stefan-muehlebach/adagui.NewEllipse"
  "command-line-arguments.NewEllipse" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnPress"
  "command-line-arguments.NewEllipse" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDrag"
  "command-line-arguments.NewEllipse" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnRelease"
  "command-line-arguments.main" -> "command-line-arguments.NewEllipse"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Ellipse).SetPos"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Add"
  "os/signal.Notify" -> "(*sync.Mutex).Lock"
  "os/signal.Notify" -> "(*sync.Mutex).Unlock"
  "os/signal.Notify$1" -> "(*os/signal.handler).want"
  "os/signal.Notify$1" -> "(*os/signal.handler).set"
  "os/signal.enableSignal" -> "os/signal.signal_enable"
  "os/signal.Notify$1" -> "os/signal.enableSignal"
  "os/signal.Notify$1" -> "(*sync.Once).Do"
  "os/signal.Notify" -> "os/signal.Notify$1"
  "os/signal.Notify" -> "os/signal.signum"
  "os/signal.Notify" -> "os/signal.Notify$1"
  "command-line-arguments.SignalHandler" -> "os/signal.Notify"
  "(*github.com/stefan-muehlebach/adatft.Touch).Close" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).Close"
  "(*github.com/stefan-muehlebach/adatft.Touch).Close" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610Dummy).Close"
  "(*github.com/stefan-muehlebach/adagui.Screen).Quit" -> "(*github.com/stefan-muehlebach/adatft.Touch).Close"
  "command-line-arguments.SignalHandler" -> "(*github.com/stefan-muehlebach/adagui.Screen).Quit"
  "command-line-arguments.main" -> "command-line-arguments.SignalHandler"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Window).SetRoot"
  "(*github.com/stefan-muehlebach/adagui.Screen).SetWindow" -> "(*github.com/stefan-muehlebach/adagui.Window).Repaint"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Screen).SetWindow"
  "command-line-arguments.main" -> "(*github.com/stefan-muehlebach/adagui.Screen).Run"
  "(*container/list.List).InsertAfter" -> "(*container/list.List).insertValue"
  "io/ioutil.ReadFile" -> "os.ReadFile"
  "github.com/stefan-muehlebach/gg.LoadFontFace" -> "io/ioutil.ReadFile"
  "github.com/stefan-muehlebach/gg.LoadFontFace" -> "github.com/golang/freetype/truetype.Parse"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/truetype.Options).hinting"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/truetype.Options).size"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/truetype.Options).dpi"
  "(*github.com/golang/freetype/truetype.Options).glyphCacheEntries" -> "github.com/golang/freetype/truetype.powerOf2"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/truetype.Options).glyphCacheEntries"
  "(*github.com/golang/freetype/truetype.Options).subPixelsX" -> "github.com/golang/freetype/truetype.subPixels"
  "(*github.com/golang/freetype/truetype.Options).subPixelsX" -> "github.com/golang/freetype/truetype.subPixels"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/truetype.Options).subPixelsX"
  "(*github.com/golang/freetype/truetype.Options).subPixelsY" -> "github.com/golang/freetype/truetype.subPixels"
  "(*github.com/golang/freetype/truetype.Options).subPixelsY" -> "github.com/golang/freetype/truetype.subPixels"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/truetype.Options).subPixelsY"
  "(*github.com/golang/freetype/truetype.Font).Bounds" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.Font).Bounds" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.Font).Bounds" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.Font).Bounds" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/truetype.Font).Bounds"
  "github.com/golang/freetype/truetype.NewFace" -> "image.Rect"
  "github.com/golang/freetype/truetype.NewFace" -> "image.NewAlpha"
  "github.com/golang/freetype/truetype.NewFace" -> "(*github.com/golang/freetype/raster.Rasterizer).SetBounds"
  "github.com/stefan-muehlebach/gg.LoadFontFace" -> "github.com/golang/freetype/truetype.NewFace"
  "(*github.com/stefan-muehlebach/gg.Context).LoadFontFace" -> "github.com/stefan-muehlebach/gg.LoadFontFace"
  "reflect.cvtIntFloat" -> "(reflect.flag).ro"
  "reflect.cvtIntFloat" -> "(reflect.Value).Int"
  "reflect.makeFloat" -> "(*reflect.rtype).common"
  "reflect.makeFloat" -> "reflect.unsafe_New"
  "reflect.makeFloat" -> "(*internal/abi.Type).Size"
  "reflect.makeFloat" -> "(*internal/abi.Type).Kind"
  "reflect.cvtIntFloat" -> "reflect.makeFloat"
  "(github.com/stefan-muehlebach/gg/color.HSP).Dark" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*runtime.sigctxt).r24" -> "(*runtime.sigctxt).regs"
  "(*github.com/stefan-muehlebach/gg.Context).DrawImage" -> "(*github.com/stefan-muehlebach/gg.Context).DrawImageAnchored"
  "github.com/stefan-muehlebach/gg.wordWrap" -> "strings.Split"
  "github.com/stefan-muehlebach/gg.splitOnSpace" -> "unicode.IsSpace"
  "github.com/stefan-muehlebach/gg.wordWrap" -> "github.com/stefan-muehlebach/gg.splitOnSpace"
  "(*github.com/golang/freetype/truetype.Font).Index" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.face).index" -> "(*github.com/golang/freetype/truetype.Font).Index"
  "(*github.com/golang/freetype/truetype.face).Kern" -> "(*github.com/golang/freetype/truetype.face).index"
  "(*github.com/golang/freetype/truetype.face).Kern" -> "(*github.com/golang/freetype/truetype.face).index"
  "(*github.com/golang/freetype/truetype.Font).Kern" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.Font).Kern" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).Kern" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.face).Kern" -> "(*github.com/golang/freetype/truetype.Font).Kern"
  "golang.org/x/image/font.MeasureString" -> "(*github.com/golang/freetype/truetype.face).Kern"
  "(*github.com/golang/freetype/truetype.face).GlyphAdvance" -> "(*github.com/golang/freetype/truetype.face).index"
  "(*github.com/golang/freetype/truetype.hinter).init" -> "github.com/golang/freetype/truetype.resetTwilightPoints"
  "(*github.com/golang/freetype/truetype.hinter).init" -> "github.com/golang/freetype/truetype.resetTwilightPoints"
  "(*github.com/golang/freetype/truetype.hinter).init" -> "github.com/golang/freetype/truetype.resetTwilightPoints"
  "(*github.com/golang/freetype/truetype.hinter).init" -> "(*github.com/golang/freetype/truetype.hinter).run"
  "(*github.com/golang/freetype/truetype.hinter).init" -> "(*github.com/golang/freetype/truetype.hinter).run"
  "(*github.com/golang/freetype/truetype.GlyphBuf).Load" -> "(*github.com/golang/freetype/truetype.hinter).init"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).unscaledHMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).unscaledHMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).unscaledHMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).unscaledHMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.Font).unscaledHMetric"
  "(*github.com/golang/freetype/truetype.Font).unscaledVMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).unscaledVMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).unscaledVMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).unscaledVMetric" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.Font).unscaledVMetric"
  "(*github.com/golang/freetype/truetype.GlyphBuf).addPhantomsAndScale" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).addPhantomsAndScale" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.GlyphBuf).addPhantomsAndScale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadSimple" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadSimple" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadSimple" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadSimple" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.GlyphBuf).loadSimple"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.GlyphBuf).addPhantomsAndScale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "(*github.com/golang/freetype/truetype.GlyphBuf).load"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "(*github.com/golang/freetype/truetype.GlyphBuf).addPhantomsAndScale"
  "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound" -> "(*github.com/golang/freetype/truetype.hinter).run"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.GlyphBuf).loadCompound"
  "(*github.com/golang/freetype/truetype.GlyphBuf).load" -> "(*github.com/golang/freetype/truetype.hinter).run"
  "(*github.com/golang/freetype/truetype.GlyphBuf).Load" -> "(*github.com/golang/freetype/truetype.GlyphBuf).load"
  "(*github.com/golang/freetype/truetype.GlyphBuf).Load" -> "github.com/golang/freetype/truetype.u32"
  "(*github.com/golang/freetype/truetype.face).GlyphAdvance" -> "(*github.com/golang/freetype/truetype.GlyphBuf).Load"
  "golang.org/x/image/font.MeasureString" -> "(*github.com/golang/freetype/truetype.face).GlyphAdvance"
  "golang.org/x/image/font.MeasureString" -> "(*golang.org/x/image/font/basicfont.Face).Kern"
  "(*golang.org/x/image/font/basicfont.Face).GlyphAdvance" -> "(*golang.org/x/image/font/basicfont.Face).find"
  "(*golang.org/x/image/font/basicfont.Face).GlyphAdvance" -> "golang.org/x/image/math/fixed.I"
  "golang.org/x/image/font.MeasureString" -> "(*golang.org/x/image/font/basicfont.Face).GlyphAdvance"
  "(*golang.org/x/image/font.Drawer).MeasureString" -> "golang.org/x/image/font.MeasureString"
  "(*github.com/stefan-muehlebach/gg.Context).MeasureString" -> "(*golang.org/x/image/font.Drawer).MeasureString"
  "github.com/stefan-muehlebach/gg.wordWrap" -> "(*github.com/stefan-muehlebach/gg.Context).MeasureString"
  "github.com/stefan-muehlebach/gg.wordWrap" -> "strings.TrimSpace"
  "(*github.com/stefan-muehlebach/adagui.Animation).Start" -> "github.com/stefan-muehlebach/adagui.CurrentScreen"
  "(*github.com/stefan-muehlebach/adagui.Animation).Start" -> "(*github.com/stefan-muehlebach/adagui.Screen).StartAnimation"
  "(reflect.Value).Call" -> "fmt.init$1"
  "(reflect.Value).Call" -> "fmt.init$2"
  "(reflect.Value).Call" -> "flag.init$1"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adatft.iliModel"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adagui.animationEaseInOut"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adagui.animationEaseIn"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adagui.animationEaseOut"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adagui.animationLinear"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adagui.init$1"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adagui/props.newProps"
  "(reflect.Value).Call" -> "os.init$1"
  "(reflect.Value).Call" -> "os.Lstat"
  "(reflect.Value).Call" -> "internal/poll.CopyFileRange"
  "(reflect.Value).Call" -> "internal/poll.Splice"
  "(reflect.Value).Call" -> "internal/poll.SendFile"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.stringifyMacintosh"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.stringifyUCS2"
  "(reflect.Value).Call" -> "command-line-arguments.NewCanvas$1"
  "(reflect.Value).Call" -> "command-line-arguments.NewCanvas$2"
  "(reflect.Value).Call" -> "command-line-arguments.NewCanvas$3"
  "(reflect.Value).Call" -> "command-line-arguments.NewCanvas$4"
  "(reflect.Value).Call" -> "command-line-arguments.NewCircle$1"
  "(reflect.Value).Call" -> "command-line-arguments.NewCircle$2"
  "(reflect.Value).Call" -> "command-line-arguments.NewCircle$3"
  "(reflect.Value).Call" -> "command-line-arguments.NewLine$1"
  "(reflect.Value).Call" -> "command-line-arguments.NewLine$2"
  "(reflect.Value).Call" -> "command-line-arguments.NewLine$3"
  "(reflect.Value).Call" -> "command-line-arguments.NewRectangle$1"
  "(reflect.Value).Call" -> "command-line-arguments.NewRectangle$2"
  "(reflect.Value).Call" -> "command-line-arguments.NewRectangle$3"
  "(reflect.Value).Call" -> "command-line-arguments.NewPoint$1"
  "(reflect.Value).Call" -> "command-line-arguments.NewPoint$2"
  "(reflect.Value).Call" -> "command-line-arguments.NewPoint$3"
  "(reflect.Value).Call" -> "command-line-arguments.NewEllipse$1"
  "(reflect.Value).Call" -> "command-line-arguments.NewEllipse$2"
  "(reflect.Value).Call" -> "command-line-arguments.NewEllipse$3"
  "(reflect.Value).Call" -> "io.init$1"
  "(reflect.Value).Call" -> "runtime.init$1"
  "runtime.chansend" -> "runtime.gopark"
  "runtime.chansend" -> "runtime.throw"
  "runtime.chansend" -> "(*runtime.hchan).raceaddr"
  "runtime.chansend" -> "internal/abi.FuncPCABIInternal"
  "runtime.racereadpc" -> "runtime.throw"
  "runtime.chansend" -> "runtime.racereadpc"
  "runtime.chansend" -> "runtime.full"
  "runtime.chansend" -> "runtime.cputicks"
  "runtime.chansend" -> "runtime.lock"
  "runtime.chansend" -> "runtime.unlock"
  "(*runtime.waitq).dequeue" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.chansend" -> "(*runtime.waitq).dequeue"
  "runtime.racesync" -> "runtime.chanbuf"
  "runtime.racesync" -> "runtime.racerelease"
  "runtime.racesync" -> "runtime.chanbuf"
  "runtime.racesync" -> "runtime.raceacquireg"
  "runtime.racesync" -> "runtime.chanbuf"
  "runtime.racesync" -> "runtime.racereleaseg"
  "runtime.racesync" -> "runtime.chanbuf"
  "runtime.racesync" -> "runtime.raceacquire"
  "runtime.send" -> "runtime.racesync"
  "runtime.send" -> "runtime.racenotify"
  "runtime.send" -> "runtime.racenotify"
  "runtime.send" -> "runtime.sendDirect"
  "runtime.send" -> "os/signal.loop"
  "runtime.send" -> "time.FixedZone$1"
  "runtime.send" -> "(*fmt.ss).Token$1"
  "runtime.send" -> "reflect.methodValueCall"
  "runtime.send" -> "flag.commandLineUsage"
  "runtime.send" -> "runtime.asyncPreempt"
  "runtime.send" -> "flag.init$1"
  "runtime.send" -> "runtime.init$1"
  "runtime.send" -> "internal/poll.CopyFileRange$1"
  "runtime.send" -> "runtime.chansend$1"
  "runtime.send" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "runtime.send" -> "os/signal.Notify$1$1"
  "runtime.send" -> "(*flag.FlagSet).defaultUsage"
  "runtime.send" -> "time.initLocal"
  "runtime.send" -> "sync.poolCleanup"
  "runtime.send" -> "runtime.chanrecv$1"
  "runtime.send" -> "runtime.asyncPreempt2"
  "runtime.send" -> "internal/poll.runtime_pollServerInit"
  "runtime.send" -> "runtime.throw$1"
  "runtime.send" -> "runtime.cputicks"
  "runtime.send" -> "runtime.goready"
  "runtime.send" -> "runtime.SetFinalizer$1"
  "runtime.send" -> "runtime.SetFinalizer$2"
  "runtime.send" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "runtime.send" -> "syscall.copyenv"
  "runtime.send" -> "(*encoding/json.encodeState).marshal$1"
  "runtime.send" -> "runtime.fatalthrow$1"
  "runtime.send" -> "runtime.goready$1"
  "runtime.send" -> "runtime.gcResetMarkState"
  "runtime.send" -> "runtime.gcStart$1"
  "runtime.send" -> "runtime.gcStart$2"
  "runtime.send" -> "runtime.gcStart$3"
  "runtime.send" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "runtime.send" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "runtime.send" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "runtime.send" -> "runtime.Stack$1"
  "runtime.send" -> "runtime/pprof.printCountProfile$2"
  "runtime.send" -> "runtime.ReadMemStats$1"
  "runtime.send" -> "runtime/pprof.writeHeapProto$1"
  "runtime.send" -> "(*internal/godebug.Setting).IncNonDefault"
  "runtime.send" -> "hash/crc32.ieeeInit"
  "runtime.send" -> "runtime.sweepone$1"
  "runtime.send" -> "runtime.casgstatus$1"
  "runtime.send" -> "runtime.osyield"
  "runtime.send" -> "runtime.cgoCheckTypedBlock$1"
  "runtime.send" -> "runtime.callers$1"
  "runtime.send" -> "flag.isZeroValue$1"
  "runtime.send" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "runtime.send" -> "runtime.stopTheWorld$1"
  "runtime.send" -> "runtime.startTheWorld$1"
  "runtime.send" -> "(*runtime/pprof.profileBuilder).build$1"
  "runtime.send" -> "(*internal/godebug.Setting).Value$1"
  "runtime.send" -> "(*runtime.sweepLocked).sweep$1"
  "runtime.send" -> "(*runtime.sweepLocked).sweep$2"
  "runtime.send" -> "reflect.embeddedIfaceMethStub"
  "runtime.send" -> "runtime.futexwakeup$1"
  "runtime.send" -> "runtime.wbBufFlush$1"
  "runtime.send" -> "runtime.gcBgMarkWorker$2"
  "runtime.send" -> "runtime.mspinning"
  "runtime.send" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "runtime.send" -> "runtime.flushallmcaches"
  "runtime.send" -> "(*internal/godebug.Setting).register"
  "runtime.send" -> "runtime.persistentalloc$1"
  "runtime.send" -> "runtime.tracefree$1"
  "runtime.send" -> "(*runtime.mheap).freeSpan$1"
  "runtime.send" -> "runtime.doRecordGoroutineProfile$1"
  "runtime.send" -> "runtime._LostContendedRuntimeLock"
  "runtime.send" -> "(*runtime.mLockProfile).captureStack$1"
  "runtime.send" -> "runtime.gcMarkDone$2"
  "runtime.send" -> "runtime.gcMarkDone$3"
  "runtime.send" -> "runtime.gcMarkDone$4"
  "runtime.send" -> "runtime.entersyscallblock$1"
  "runtime.send" -> "runtime.entersyscallblock$2"
  "runtime.send" -> "runtime.entersyscallblock_handoff"
  "runtime.send" -> "runtime.exitsyscall$1"
  "runtime.send" -> "runtime.exitsyscall$2"
  "runtime.send" -> "runtime.cgoCheckPtrWrite$1"
  "runtime.send" -> "runtime.unreachableMethod"
  "runtime.send" -> "runtime.heapSetType$1"
  "runtime.send" -> "runtime.tracealloc$1"
  "runtime.send" -> "runtime.wirep$1"
  "runtime.send" -> "runtime.wirep$2"
  "runtime.send" -> "runtime.sigreturn__sigaction"
  "runtime.send" -> "runtime.cgoSigtramp"
  "runtime.send" -> "runtime.sigtramp"
  "runtime.send" -> "runtime.forEachP$1"
  "runtime.send" -> "runtime.gcMarkTermination$1"
  "runtime.send" -> "runtime.gcMarkTermination$2"
  "runtime.send" -> "runtime.gcControllerCommit"
  "runtime.send" -> "runtime.gcMarkTermination$3"
  "runtime.send" -> "runtime.freeStackSpans"
  "runtime.send" -> "runtime.gcMarkTermination$5"
  "runtime.send" -> "runtime.exitsyscallfast$1"
  "runtime.send" -> "runtime.allocm$1"
  "runtime.send" -> "runtime.mstart"
  "runtime.send" -> "runtime.getempty$1"
  "runtime.send" -> "(*runtime.p).destroy$1"
  "runtime.send" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "runtime.send" -> "runtime.gcAssistAlloc$1"
  "runtime.send" -> "(*runtime.mheap).alloc$1"
  "runtime.send" -> "runtime.mProf_Malloc$1"
  "runtime.send" -> "runtime.mmap$1"
  "runtime.send" -> "(*runtime.traceMap).put$1"
  "runtime.send" -> "runtime.fatal$1"
  "runtime.send" -> "(runtime.traceWriter).refill$1"
  "runtime.send" -> "runtime.sigaction$1"
  "runtime.send" -> "runtime.gcMarkTermination$4$1"
  "runtime.send" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "runtime.send" -> "runtime.exitsyscallfast_reacquired$1"
  "runtime.send" -> "(*runtime.traceStringTable).put$1"
  "runtime.send" -> "(*runtime.rwmutex).rlock$1"
  "runtime.send" -> "runtime.traceThreadDestroy$1"
  "runtime.send" -> "runtime.malg$1"
  "runtime.send" -> "runtime.allocmcache$1"
  "runtime.send" -> "runtime.freemcache$1"
  "runtime.send" -> "runtime.reentersyscall$1"
  "runtime.send" -> "runtime.reentersyscall$2"
  "runtime.send" -> "runtime.entersyscall_sysmon"
  "runtime.send" -> "runtime.runSafePointFn"
  "runtime.send" -> "runtime.entersyscall_gcwait"
  "runtime.send" -> "runtime._VDSO"
  "runtime.send" -> "runtime._ExternalCode"
  "runtime.send" -> "runtime._GC"
  "runtime.send" -> "runtime._System"
  "runtime.send" -> "runtime.sigpanic"
  "runtime.send" -> "runtime.sysSigaction$1"
  "runtime.send" -> "runtime.markrootFreeGStacks"
  "runtime.send" -> "runtime.markroot$1"
  "runtime.send" -> "runtime.printArgs$3"
  "runtime.send" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "runtime.send" -> "runtime.freeSomeWbufs$1"
  "runtime.send" -> "(*runtime.pageAlloc).scavenge$1"
  "runtime.send" -> "runtime._LostExternalCode"
  "runtime.send" -> "runtime._LostSIGPROFDuringAtomic64"
  "runtime.send" -> "runtime.munmap$1"
  "runtime.chansend" -> "runtime.send"
  "runtime.chansend" -> "runtime.chanbuf"
  "runtime.chansend" -> "runtime.racenotify"
  "runtime.bulkBarrierPreWrite" -> "runtime.throw"
  "runtime.bulkBarrierPreWrite" -> "runtime.spanOf"
  "runtime.bulkBarrierPreWrite" -> "runtime.activeModules"
  "runtime.bulkBarrierPreWrite" -> "(*runtime.mSpanStateBox).get"
  "runtime.bulkBarrierPreWrite" -> "runtime.activeModules"
  "runtime.bulkBarrierPreWrite" -> "runtime.bulkBarrierBitmap"
  "runtime.bulkBarrierPreWrite" -> "runtime.bulkBarrierBitmap"
  "runtime.bulkBarrierPreWrite" -> "runtime.getg"
  "runtime.bulkBarrierPreWrite" -> "(runtime.puintptr).ptr"
  "runtime.bulkBarrierPreWrite" -> "(*runtime.mspan).base"
  "(*runtime.mspan).typePointersOfType" -> "runtime.throw"
  "(*runtime.mspan).typePointersOfType" -> "(runtime.spanClass).noscan"
  "(*runtime.mspan).typePointersOfType" -> "runtime.readUintptr"
  "runtime.doubleCheckTypePointersOfType" -> "(*runtime.mspan).typePointersOfType"
  "runtime.doubleCheckTypePointersOfType" -> "(*runtime.mspan).typePointersOf"
  "runtime.doubleCheckTypePointersOfType" -> "(runtime.typePointers).next"
  "runtime.doubleCheckTypePointersOfType" -> "(runtime.typePointers).next"
  "runtime.doubleCheckTypePointersOfType" -> "(*runtime.mspan).typePointersOfType"
  "runtime.doubleCheckTypePointersOfType" -> "(*runtime.mspan).typePointersOf"
  "runtime.doubleCheckTypePointersOfType" -> "runtime.toRType"
  "runtime.doubleCheckTypePointersOfType" -> "(runtime.rtype).string"
  "runtime.doubleCheckTypePointersOfType" -> "runtime.dumpTypePointers"
  "runtime.doubleCheckTypePointersOfType" -> "runtime.dumpTypePointers"
  "runtime.doubleCheckTypePointersOfType" -> "(runtime.typePointers).next"
  "runtime.doubleCheckTypePointersOfType" -> "(runtime.typePointers).next"
  "runtime.doubleCheckTypePointersOfType" -> "runtime.throw"
  "runtime.bulkBarrierPreWrite" -> "runtime.doubleCheckTypePointersOfType"
  "runtime.bulkBarrierPreWrite" -> "(*runtime.mspan).typePointersOfType"
  "runtime.bulkBarrierPreWrite" -> "(*runtime.mspan).typePointersOf"
  "runtime.bulkBarrierPreWrite" -> "(runtime.typePointers).next"
  "runtime.bulkBarrierPreWrite" -> "(*runtime.wbBuf).get1"
  "runtime.bulkBarrierPreWrite" -> "(runtime.typePointers).next"
  "runtime.bulkBarrierPreWrite" -> "(*runtime.wbBuf).get2"
  "runtime.typedmemmove" -> "runtime.bulkBarrierPreWrite"
  "runtime.typedmemmove" -> "runtime.memmove"
  "runtime.cgoCheckMemmove2" -> "runtime.cgoIsGoPointer"
  "runtime.cgoCheckMemmove2" -> "runtime.cgoIsGoPointer"
  "runtime.cgoCheckTypedBlock" -> "runtime.cgoCheckBits"
  "runtime.cgoCheckTypedBlock" -> "runtime.activeModules"
  "runtime.cgoCheckTypedBlock" -> "runtime.cgoInRange"
  "runtime.cgoCheckTypedBlock" -> "runtime.spanOfUnchecked"
  "runtime.cgoCheckTypedBlock" -> "(*runtime.mSpanStateBox).get"
  "runtime.cgoCheckTypedBlock" -> "runtime.add"
  "runtime.cgoCheckTypedBlock" -> "runtime.cgoCheckBits"
  "runtime.cgoCheckTypedBlock" -> "runtime.cgoInRange"
  "runtime.cgoCheckTypedBlock" -> "runtime.add"
  "runtime.cgoCheckTypedBlock" -> "runtime.cgoCheckBits"
  "runtime.cgoCheckTypedBlock" -> "runtime.systemstack"
  "runtime.cgoCheckTypedBlock" -> "(*runtime.mspan).typePointersOf"
  "runtime.cgoCheckTypedBlock" -> "runtime.heapBitsForAddr"
  "runtime.cgoCheckTypedBlock" -> "(runtime.typePointers).next"
  "runtime.cgoCheckTypedBlock" -> "runtime.cgoIsGoPointer"
  "runtime.cgoCheckTypedBlock" -> "runtime.throw"
  "runtime.cgoCheckTypedBlock" -> "runtime.isPinned"
  "runtime.cgoCheckTypedBlock" -> "(runtime.heapBits).next"
  "runtime.cgoCheckTypedBlock" -> "runtime.cgoIsGoPointer"
  "runtime.cgoCheckTypedBlock" -> "runtime.throw"
  "runtime.cgoCheckTypedBlock" -> "runtime.isPinned"
  "runtime.cgoCheckMemmove2" -> "runtime.cgoCheckTypedBlock"
  "runtime.typedmemmove" -> "runtime.cgoCheckMemmove2"
  "runtime.chansend" -> "runtime.typedmemmove"
  "runtime.chansend" -> "runtime.unlock"
  "runtime.chansend" -> "runtime.unlock"
  "runtime.chansend" -> "runtime.getg"
  "runtime.chansend" -> "runtime.acquireSudog"
  "runtime.chansend" -> "(*runtime.waitq).enqueue"
  "runtime.chansend" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.chansend" -> "runtime.gopark"
  "runtime.chansend" -> "runtime.KeepAlive"
  "runtime.chansend" -> "runtime.throw"
  "runtime.chansend" -> "runtime.blockevent"
  "runtime.chansend" -> "runtime.releaseSudog"
  "runtime.chansend" -> "runtime.throw"
  "(reflect.Value).Call" -> "runtime.chansend"
  "runtime.chanrecv" -> "runtime.gopark"
  "runtime.chanrecv" -> "runtime.throw"
  "runtime.chanrecv" -> "runtime/internal/atomic.Load"
  "runtime.empty" -> "runtime/internal/atomic.Loadp"
  "runtime.empty" -> "runtime/internal/atomic.Loaduint"
  "runtime.chanrecv" -> "runtime.empty"
  "runtime.chanrecv" -> "runtime.empty"
  "runtime.chanrecv" -> "(*runtime.hchan).raceaddr"
  "runtime.chanrecv" -> "runtime.raceacquire"
  "runtime.typedmemclr" -> "runtime.bulkBarrierPreWrite"
  "runtime.typedmemclr" -> "runtime.memclrNoHeapPointers"
  "runtime.chanrecv" -> "runtime.typedmemclr"
  "runtime.chanrecv" -> "runtime.cputicks"
  "runtime.chanrecv" -> "runtime.lock"
  "runtime.chanrecv" -> "(*runtime.waitq).dequeue"
  "runtime.chanrecv" -> "(*runtime.hchan).raceaddr"
  "runtime.chanrecv" -> "runtime.raceacquire"
  "runtime.chanrecv" -> "runtime.unlock"
  "runtime.chanrecv" -> "runtime.typedmemclr"
  "runtime.recv" -> "runtime.asyncPreempt"
  "runtime.recv" -> "flag.commandLineUsage"
  "runtime.recv" -> "runtime.init$1"
  "runtime.recv" -> "internal/poll.CopyFileRange$1"
  "runtime.recv" -> "runtime.chansend$1"
  "runtime.recv" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "runtime.recv" -> "os/signal.Notify$1$1"
  "runtime.recv" -> "flag.init$1"
  "runtime.recv" -> "time.initLocal"
  "runtime.recv" -> "sync.poolCleanup"
  "runtime.recv" -> "runtime.chanrecv$1"
  "runtime.recv" -> "runtime.asyncPreempt2"
  "runtime.recv" -> "internal/poll.runtime_pollServerInit"
  "runtime.recv" -> "runtime.throw$1"
  "runtime.recv" -> "(*flag.FlagSet).defaultUsage"
  "runtime.recv" -> "time.FixedZone$1"
  "runtime.recv" -> "(*fmt.ss).Token$1"
  "runtime.recv" -> "reflect.methodValueCall"
  "runtime.recv" -> "os/signal.loop"
  "runtime.recv" -> "runtime.chanbuf"
  "runtime.recv" -> "runtime.racesync"
  "runtime.recvDirect" -> "runtime.typeBitsBulkBarrier"
  "runtime.recvDirect" -> "runtime.memmove"
  "runtime.recv" -> "runtime.recvDirect"
  "runtime.recv" -> "runtime.racenotify"
  "runtime.recv" -> "runtime.racenotify"
  "runtime.recv" -> "runtime.typedmemmove"
  "runtime.recv" -> "runtime.typedmemmove"
  "runtime.recv" -> "runtime.cputicks"
  "runtime.recv" -> "runtime.goready"
  "runtime.recv" -> "runtime.SetFinalizer$1"
  "runtime.recv" -> "runtime.SetFinalizer$2"
  "runtime.recv" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "runtime.recv" -> "syscall.copyenv"
  "runtime.recv" -> "(*encoding/json.encodeState).marshal$1"
  "runtime.recv" -> "runtime.fatalthrow$1"
  "runtime.recv" -> "runtime.goready$1"
  "runtime.recv" -> "runtime.gcResetMarkState"
  "runtime.recv" -> "runtime.gcStart$1"
  "runtime.recv" -> "runtime.gcStart$2"
  "runtime.recv" -> "runtime.gcStart$3"
  "runtime.recv" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "runtime.recv" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "runtime.recv" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "runtime.recv" -> "runtime.Stack$1"
  "runtime.recv" -> "runtime/pprof.printCountProfile$2"
  "runtime.recv" -> "runtime.ReadMemStats$1"
  "runtime.recv" -> "runtime/pprof.writeHeapProto$1"
  "runtime.recv" -> "(*internal/godebug.Setting).IncNonDefault"
  "runtime.recv" -> "hash/crc32.ieeeInit"
  "runtime.recv" -> "runtime.sweepone$1"
  "runtime.recv" -> "runtime.casgstatus$1"
  "runtime.recv" -> "runtime.osyield"
  "runtime.recv" -> "runtime.cgoCheckTypedBlock$1"
  "runtime.recv" -> "runtime.callers$1"
  "runtime.recv" -> "flag.isZeroValue$1"
  "runtime.recv" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "runtime.recv" -> "runtime.stopTheWorld$1"
  "runtime.recv" -> "runtime.startTheWorld$1"
  "runtime.recv" -> "(*runtime/pprof.profileBuilder).build$1"
  "runtime.recv" -> "(*internal/godebug.Setting).Value$1"
  "runtime.recv" -> "(*runtime.sweepLocked).sweep$1"
  "runtime.recv" -> "(*runtime.sweepLocked).sweep$2"
  "runtime.recv" -> "reflect.embeddedIfaceMethStub"
  "runtime.recv" -> "runtime.futexwakeup$1"
  "runtime.recv" -> "runtime.wbBufFlush$1"
  "runtime.recv" -> "runtime.gcBgMarkWorker$2"
  "runtime.recv" -> "runtime.mspinning"
  "runtime.recv" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "runtime.recv" -> "runtime.flushallmcaches"
  "runtime.recv" -> "(*internal/godebug.Setting).register"
  "runtime.recv" -> "runtime.persistentalloc$1"
  "runtime.recv" -> "runtime.tracefree$1"
  "runtime.recv" -> "(*runtime.mheap).freeSpan$1"
  "runtime.recv" -> "runtime.doRecordGoroutineProfile$1"
  "runtime.recv" -> "runtime._LostContendedRuntimeLock"
  "runtime.recv" -> "(*runtime.mLockProfile).captureStack$1"
  "runtime.recv" -> "runtime.gcMarkDone$2"
  "runtime.recv" -> "runtime.gcMarkDone$3"
  "runtime.recv" -> "runtime.gcMarkDone$4"
  "runtime.recv" -> "runtime.entersyscallblock$1"
  "runtime.recv" -> "runtime.entersyscallblock$2"
  "runtime.recv" -> "runtime.entersyscallblock_handoff"
  "runtime.recv" -> "runtime.exitsyscall$1"
  "runtime.recv" -> "runtime.exitsyscall$2"
  "runtime.recv" -> "runtime.cgoCheckPtrWrite$1"
  "runtime.recv" -> "runtime.unreachableMethod"
  "runtime.recv" -> "runtime.heapSetType$1"
  "runtime.recv" -> "runtime.tracealloc$1"
  "runtime.recv" -> "runtime.wirep$1"
  "runtime.recv" -> "runtime.wirep$2"
  "runtime.recv" -> "runtime.sigreturn__sigaction"
  "runtime.recv" -> "runtime.cgoSigtramp"
  "runtime.recv" -> "runtime.sigtramp"
  "runtime.recv" -> "runtime.forEachP$1"
  "runtime.recv" -> "runtime.gcMarkTermination$1"
  "runtime.recv" -> "runtime.gcMarkTermination$2"
  "runtime.recv" -> "runtime.gcControllerCommit"
  "runtime.recv" -> "runtime.gcMarkTermination$3"
  "runtime.recv" -> "runtime.freeStackSpans"
  "runtime.recv" -> "runtime.gcMarkTermination$5"
  "runtime.recv" -> "runtime.exitsyscallfast$1"
  "runtime.recv" -> "runtime.allocm$1"
  "runtime.recv" -> "runtime.mstart"
  "runtime.recv" -> "runtime.getempty$1"
  "runtime.recv" -> "(*runtime.p).destroy$1"
  "runtime.recv" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "runtime.recv" -> "runtime.gcAssistAlloc$1"
  "runtime.recv" -> "(*runtime.mheap).alloc$1"
  "runtime.recv" -> "runtime.mProf_Malloc$1"
  "runtime.recv" -> "runtime.mmap$1"
  "runtime.recv" -> "(*runtime.traceMap).put$1"
  "runtime.recv" -> "runtime.fatal$1"
  "runtime.recv" -> "(runtime.traceWriter).refill$1"
  "runtime.recv" -> "runtime.sigaction$1"
  "runtime.recv" -> "runtime.gcMarkTermination$4$1"
  "runtime.recv" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "runtime.recv" -> "runtime.exitsyscallfast_reacquired$1"
  "runtime.recv" -> "(*runtime.traceStringTable).put$1"
  "runtime.recv" -> "(*runtime.rwmutex).rlock$1"
  "runtime.recv" -> "runtime.traceThreadDestroy$1"
  "runtime.recv" -> "runtime.malg$1"
  "runtime.recv" -> "runtime.allocmcache$1"
  "runtime.recv" -> "runtime.freemcache$1"
  "runtime.recv" -> "runtime.reentersyscall$1"
  "runtime.recv" -> "runtime.reentersyscall$2"
  "runtime.recv" -> "runtime.entersyscall_sysmon"
  "runtime.recv" -> "runtime.runSafePointFn"
  "runtime.recv" -> "runtime.entersyscall_gcwait"
  "runtime.recv" -> "runtime._VDSO"
  "runtime.recv" -> "runtime._ExternalCode"
  "runtime.recv" -> "runtime._GC"
  "runtime.recv" -> "runtime._System"
  "runtime.recv" -> "runtime.sigpanic"
  "runtime.recv" -> "runtime.sysSigaction$1"
  "runtime.recv" -> "runtime.markrootFreeGStacks"
  "runtime.recv" -> "runtime.markroot$1"
  "runtime.recv" -> "runtime.printArgs$3"
  "runtime.recv" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "runtime.recv" -> "runtime.freeSomeWbufs$1"
  "runtime.recv" -> "(*runtime.pageAlloc).scavenge$1"
  "runtime.recv" -> "runtime._LostExternalCode"
  "runtime.recv" -> "runtime._LostSIGPROFDuringAtomic64"
  "runtime.recv" -> "runtime.munmap$1"
  "runtime.chanrecv" -> "runtime.recv"
  "runtime.chanrecv" -> "runtime.chanbuf"
  "runtime.chanrecv" -> "runtime.racenotify"
  "runtime.chanrecv" -> "runtime.typedmemmove"
  "runtime.chanrecv" -> "runtime.typedmemclr"
  "runtime.chanrecv" -> "runtime.unlock"
  "runtime.chanrecv" -> "runtime.unlock"
  "runtime.chanrecv" -> "runtime.getg"
  "runtime.chanrecv" -> "runtime.acquireSudog"
  "runtime.chanrecv" -> "(*runtime.waitq).enqueue"
  "runtime.chanrecv" -> "(*runtime/internal/atomic.Bool).Store"
  "runtime.chanrecv" -> "runtime.gopark"
  "runtime.chanrecv" -> "runtime.throw"
  "runtime.chanrecv" -> "runtime.blockevent"
  "runtime.chanrecv" -> "runtime.releaseSudog"
  "(reflect.Value).Call" -> "runtime.chanrecv"
  "(reflect.Value).Call" -> "(*flag.FlagSet).defaultUsage"
  "(reflect.Value).Call" -> "flag.commandLineUsage"
  "(reflect.Value).Call" -> "log.init$1"
  "(reflect.Value).Call" -> "(encoding/json.floatEncoder).encode"
  "(reflect.Value).Call" -> "(*runtime.pageAlloc).sysGrow$3"
  "(reflect.Value).Call" -> "encoding/json.init$1"
  "(reflect.Value).Call" -> "image/color.rgbaModel"
  "(reflect.Value).Call" -> "image/color.rgba64Model"
  "(reflect.Value).Call" -> "image/color.nrgbaModel"
  "(reflect.Value).Call" -> "image/color.nrgba64Model"
  "(reflect.Value).Call" -> "image/color.alphaModel"
  "(reflect.Value).Call" -> "image/color.alpha16Model"
  "(reflect.Value).Call" -> "image/color.grayModel"
  "(reflect.Value).Call" -> "image/color.gray16Model"
  "(reflect.Value).Call" -> "image/color.yCbCrModel"
  "(reflect.Value).Call" -> "image/color.nYCbCrAModel"
  "(reflect.Value).Call" -> "image/color.cmykModel"
  "(reflect.Value).Call" -> "golang.org/x/image/draw.init$1"
  "(reflect.Value).Call" -> "golang.org/x/image/draw.init$2"
  "runtime.gcount" -> "runtime/internal/atomic.Loaduintptr"
  "runtime.gcount" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.NumGoroutine" -> "runtime.gcount"
  "runtime/pprof.countGoroutine" -> "runtime.NumGoroutine"
  "(reflect.Value).Call" -> "runtime/pprof.countGoroutine"
  "runtime.Stack" -> "runtime.stopTheWorld"
  "runtime.Stack" -> "runtime.getg"
  "runtime.Stack" -> "runtime.getcallersp"
  "runtime.Stack" -> "runtime.getcallerpc"
  "runtime.Stack" -> "runtime.systemstack"
  "runtime.Stack" -> "runtime.startTheWorld"
  "runtime/pprof.writeGoroutineStacks" -> "runtime.Stack"
  "runtime/pprof.writeGoroutineStacks" -> "(*bytes.Buffer).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*os.File).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*internal/poll.FD).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(io.discard).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*fmt.pp).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*bufio.Writer).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*compress/flate.dictWriter).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*strings.Builder).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*hash/crc32.digest).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*text/tabwriter.Writer).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*compress/flate.Writer).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*golang.org/x/text/transform.Writer).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*compress/zlib.Writer).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*internal/godebug.runtimeStderr).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*image/png.encoder).Write"
  "runtime/pprof.writeGoroutineStacks" -> "(*hash/adler32.digest).Write"
  "runtime/pprof.writeGoroutine" -> "runtime/pprof.writeGoroutineStacks"
  "runtime/pprof.writeGoroutine" -> "runtime/pprof.writeRuntimeProfile"
  "(reflect.Value).Call" -> "runtime/pprof.writeGoroutine"
  "runtime/pprof.countThreadCreate" -> "runtime.ThreadCreateProfile"
  "(reflect.Value).Call" -> "runtime/pprof.countThreadCreate"
  "(reflect.Value).Call" -> "runtime/pprof.writeThreadCreate"
  "runtime.MemProfile" -> "(*runtime.mProfCycleHolder).read"
  "runtime.MemProfile" -> "runtime.lock"
  "runtime.MemProfile" -> "runtime.lock"
  "runtime.MemProfile" -> "runtime.mProf_FlushLocked"
  "runtime.MemProfile" -> "runtime.unlock"
  "runtime.MemProfile" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.MemProfile" -> "(*runtime.bucket).mp"
  "runtime.MemProfile" -> "(*runtime.bucket).mp"
  "runtime.MemProfile" -> "runtime.lock"
  "runtime.MemProfile" -> "(*runtime.memRecordCycle).add"
  "runtime.MemProfile" -> "runtime.unlock"
  "runtime.MemProfile" -> "runtime.unlock"
  "runtime.MemProfile" -> "(*runtime.bucket).mp"
  "runtime.record" -> "(*runtime.bucket).mp"
  "runtime.record" -> "runtime.getcallerpc"
  "runtime.record" -> "internal/abi.FuncPCABIInternal"
  "runtime.racewriterangepc" -> "runtime.throw"
  "runtime.record" -> "runtime.racewriterangepc"
  "runtime.record" -> "runtime.msanwrite"
  "runtime.record" -> "runtime.asanwrite"
  "runtime.record" -> "(*runtime.bucket).stk"
  "runtime.MemProfile" -> "runtime.record"
  "runtime/pprof.countHeap" -> "runtime.MemProfile"
  "(reflect.Value).Call" -> "runtime/pprof.countHeap"
  "runtime.ReadMemStats" -> "runtime.stopTheWorld"
  "runtime.ReadMemStats" -> "runtime.systemstack"
  "runtime.ReadMemStats" -> "runtime.startTheWorld"
  "runtime/pprof.writeHeapInternal" -> "runtime.ReadMemStats"
  "runtime/pprof.writeHeapInternal" -> "runtime.MemProfile"
  "runtime/pprof.writeHeapInternal" -> "runtime.MemProfile"
  "runtime/pprof.writeHeapProto" -> "runtime/pprof.newProfileBuilder"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).stringIndex"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).build"
  "runtime/pprof.writeHeapProto" -> "(*runtime.MemProfileRecord).Stack"
  "math.Exp" -> "math.archExp"
  "math.exp" -> "math.IsNaN"
  "math.exp" -> "math.IsInf"
  "math.exp" -> "math.IsInf"
  "math.exp" -> "math.Inf"
  "math.expmulti" -> "math.Ldexp"
  "math.exp" -> "math.expmulti"
  "math.Exp" -> "math.exp"
  "runtime/pprof.scaleHeapSample" -> "math.Exp"
  "runtime/pprof.writeHeapProto" -> "runtime/pprof.scaleHeapSample"
  "runtime/pprof.writeHeapProto" -> "(*runtime.MemProfileRecord).InUseObjects"
  "runtime/pprof.writeHeapProto" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapProto" -> "runtime/pprof.scaleHeapSample"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "runtime.FuncForPC" -> "runtime.findfunc"
  "runtime.FuncForPC" -> "(runtime.funcInfo).valid"
  "runtime.FuncForPC" -> "runtime.newInlineUnwinder"
  "runtime.FuncForPC" -> "(*runtime.inlineUnwinder).isInlined"
  "runtime.FuncForPC" -> "(runtime.funcInfo)._Func"
  "runtime.FuncForPC" -> "(*runtime.inlineUnwinder).srcFunc"
  "runtime.FuncForPC" -> "(*runtime.inlineUnwinder).fileLine"
  "runtime.FuncForPC" -> "(runtime.funcInfo).entry"
  "runtime.FuncForPC" -> "(runtime.srcFunc).name"
  "runtime/pprof.writeHeapProto" -> "runtime.FuncForPC"
  "runtime/pprof.writeHeapProto" -> "(*runtime.Func).Name"
  "runtime/pprof.writeHeapProto" -> "strings.HasPrefix"
  "runtime/pprof.writeHeapProto" -> "(*runtime/pprof.profileBuilder).pbSample"
  "runtime/pprof.writeHeapInternal" -> "runtime/pprof.writeHeapProto"
  "runtime/pprof.writeHeapInternal" -> "sort.Slice"
  "bufio.NewWriter" -> "bufio.NewWriterSize"
  "runtime/pprof.writeHeapInternal" -> "bufio.NewWriter"
  "runtime/pprof.writeHeapInternal" -> "text/tabwriter.NewWriter"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseObjects"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseObjects"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).InUseBytes"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).Stack"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "syscall.Getrusage" -> "syscall.RawSyscall"
  "syscall.Getrusage" -> "syscall.errnoErr"
  "runtime/pprof.addMaxRSS" -> "syscall.Getrusage"
  "runtime/pprof.addMaxRSS" -> "syscall.Getpagesize"
  "runtime/pprof.addMaxRSS" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "runtime/pprof.addMaxRSS"
  "runtime/pprof.writeHeapInternal" -> "(*text/tabwriter.Writer).Flush"
  "runtime/pprof.writeHeapInternal" -> "(*bufio.Writer).Flush"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeHeapInternal" -> "(*runtime.MemProfileRecord).Stack"
  "runtime/pprof.writeHeapInternal" -> "runtime/pprof.printStackRecord"
  "runtime/pprof.writeHeap" -> "runtime/pprof.writeHeapInternal"
  "(reflect.Value).Call" -> "runtime/pprof.writeHeap"
  "runtime/pprof.writeAlloc" -> "runtime/pprof.writeHeapInternal"
  "(reflect.Value).Call" -> "runtime/pprof.writeAlloc"
  "runtime.BlockProfile" -> "runtime.lock"
  "runtime.BlockProfile" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.BlockProfile" -> "runtime.unlock"
  "runtime.BlockProfile" -> "(*runtime.bucket).bp"
  "runtime.BlockProfile" -> "runtime.getcallerpc"
  "runtime.BlockProfile" -> "internal/abi.FuncPCABIInternal"
  "runtime.BlockProfile" -> "runtime.racewriterangepc"
  "runtime.BlockProfile" -> "runtime.msanwrite"
  "runtime.BlockProfile" -> "runtime.asanwrite"
  "runtime.BlockProfile" -> "(*runtime.bucket).stk"
  "runtime/pprof.countBlock" -> "runtime.BlockProfile"
  "(reflect.Value).Call" -> "runtime/pprof.countBlock"
  "runtime/pprof.writeProfileInternal" -> "runtime.BlockProfile"
  "runtime.MutexProfile" -> "runtime.lock"
  "runtime.MutexProfile" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.MutexProfile" -> "runtime.unlock"
  "runtime.MutexProfile" -> "(*runtime.bucket).bp"
  "runtime.MutexProfile" -> "(*runtime.bucket).stk"
  "runtime/pprof.writeProfileInternal" -> "runtime.MutexProfile"
  "runtime/pprof.writeProfileInternal" -> "runtime.BlockProfile"
  "runtime/pprof.writeProfileInternal" -> "runtime.MutexProfile"
  "runtime/pprof.writeProfileInternal" -> "sort.Slice"
  "runtime/pprof.printCountCycleProfile" -> "runtime/pprof.newProfileBuilder"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.protobuf).int64Opt"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbValueType"
  "runtime/pprof.printCountCycleProfile" -> "runtime/pprof.runtime_cyclesPerSecond"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime.StackRecord).Stack"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).appendLocsForStack"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).pbSample"
  "runtime/pprof.printCountCycleProfile" -> "(*runtime/pprof.profileBuilder).build"
  "runtime/pprof.writeProfileInternal" -> "runtime/pprof.printCountCycleProfile"
  "runtime/pprof.writeProfileInternal" -> "bufio.NewWriter"
  "runtime/pprof.writeProfileInternal" -> "text/tabwriter.NewWriter"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "runtime/pprof.runtime_cyclesPerSecond"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime.SetMutexProfileFraction" -> "runtime/internal/atomic.Store64"
  "runtime/pprof.writeProfileInternal" -> "runtime.SetMutexProfileFraction"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "(*runtime.StackRecord).Stack"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprintf"
  "runtime/pprof.writeProfileInternal" -> "fmt.Fprint"
  "runtime/pprof.writeProfileInternal" -> "(*runtime.StackRecord).Stack"
  "runtime/pprof.writeProfileInternal" -> "runtime/pprof.printStackRecord"
  "runtime/pprof.writeProfileInternal" -> "(*text/tabwriter.Writer).Flush"
  "runtime/pprof.writeProfileInternal" -> "(*bufio.Writer).Flush"
  "runtime/pprof.writeBlock" -> "runtime/pprof.writeProfileInternal"
  "(reflect.Value).Call" -> "runtime/pprof.writeBlock"
  "runtime/pprof.countMutex" -> "runtime.MutexProfile"
  "(reflect.Value).Call" -> "runtime/pprof.countMutex"
  "runtime/pprof.writeMutex" -> "runtime/pprof.writeProfileInternal"
  "(reflect.Value).Call" -> "runtime/pprof.writeMutex"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/gg/color.hsiModel"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/gg/color.hslModel"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/gg/color.hspModel"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/gg/color.hsvModel"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/gg/color.rgbafModel"
  "(reflect.Value).Call" -> "syscall.init$1"
  "(reflect.Value).Call" -> "syscall.mmap"
  "(reflect.Value).Call" -> "syscall.munmap"
  "(reflect.Value).Call" -> "internal/poll.init$1"
  "(reflect.Value).Call" -> "syscall.Accept4"
  "(reflect.Value).Call" -> "syscall.Close"
  "(reflect.Value).Call" -> "syscall.Accept"
  "(reflect.Value).Call" -> "internal/poll.newPoolPipe"
  "(reflect.Value).Call" -> "internal/poll.CopyFileRange$1"
  "(reflect.Value).Call" -> "os/signal.loop"
  "(reflect.Value).Call" -> "github.com/stefan-muehlebach/adatft.eventDispatcher"
  "(reflect.Value).Call" -> "time.initLocal"
  "(reflect.Value).Call" -> "time.FixedZone$1"
  "(reflect.Value).Call" -> "(*internal/poll.FD).Fchmod$1"
  "(reflect.Value).Call" -> "(*internal/poll.FD).Fchown$1"
  "(reflect.Value).Call" -> "(*internal/poll.FD).Fstat$1"
  "(reflect.Value).Call" -> "(*internal/poll.FD).Fsync$1"
  "(reflect.Value).Call" -> "(*internal/poll.FD).Ftruncate$1"
  "(reflect.Value).Call" -> "syscall.Read"
  "(reflect.Value).Call" -> "syscall.ReadDirent"
  "(reflect.Value).Call" -> "syscall.Write"
  "(reflect.Value).Call" -> "(*github.com/stefan-muehlebach/adagui.Screen).eventThread$1"
  "(reflect.Value).Call" -> "os/signal.Notify$1"
  "(reflect.Value).Call" -> "sync.poolCleanup"
  "(reflect.Value).Call" -> "(reflect.flag).mustBe"
  "(reflect.Value).Call" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).call" -> "(reflect.Value).typ"
  "(reflect.Value).call" -> "reflect.methodReceiver"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).NumIn"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).IsVariadic"
  "(reflect.Value).call" -> "(reflect.Value).Kind"
  "(reflect.Value).call" -> "(reflect.Value).Type"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).In"
  "(reflect.Value).call" -> "reflect.toRType"
  "(*reflect.rtype).AssignableTo" -> "(*reflect.rtype).common"
  "(*reflect.rtype).AssignableTo" -> "(*reflect.rtype).common"
  "(*reflect.rtype).AssignableTo" -> "reflect.directlyAssignable"
  "(*reflect.rtype).AssignableTo" -> "(*reflect.rtype).common"
  "(*reflect.rtype).AssignableTo" -> "reflect.implements"
  "(reflect.Value).call" -> "(*reflect.rtype).AssignableTo"
  "(reflect.Value).call" -> "(*reflect.rtype).String"
  "(reflect.Value).call" -> "reflect.stringFor"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).In"
  "(reflect.Value).call" -> "reflect.toRType"
  "(reflect.Value).call" -> "reflect.MakeSlice"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).In"
  "(reflect.Value).call" -> "reflect.toRType"
  "(reflect.Value).call" -> "(*reflect.rtype).Elem"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).NumIn"
  "(reflect.Value).call" -> "(reflect.Value).Type"
  "(reflect.Value).call" -> "(*reflect.rtype).AssignableTo"
  "(reflect.Value).call" -> "(*reflect.rtype).String"
  "(reflect.Value).call" -> "(*reflect.rtype).String"
  "(reflect.Value).call" -> "(reflect.Value).Index"
  "(reflect.Value).call" -> "(reflect.Value).Set"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).NumOut"
  "(reflect.Value).call" -> "reflect.funcLayout"
  "(reflect.Value).call" -> "(*internal/abi.Type).Size"
  "(reflect.Value).call" -> "(*internal/abi.Type).Size"
  "(reflect.Value).call" -> "(*sync.Pool).Get"
  "(reflect.Value).call" -> "reflect.unsafe_New"
  "(reflect.Value).call" -> "reflect.stringFor"
  "(*reflect.abiDesc).dump" -> "(*reflect.abiSeq).dump"
  "(*reflect.abiDesc).dump" -> "(*reflect.abiSeq).dump"
  "reflect.dumpPtrBitMap" -> "(*internal/abi.IntArgRegBitmap).Get"
  "(*reflect.abiDesc).dump" -> "reflect.dumpPtrBitMap"
  "(*reflect.abiDesc).dump" -> "reflect.dumpPtrBitMap"
  "(reflect.Value).call" -> "(*reflect.abiDesc).dump"
  "reflect.storeRcvr" -> "(reflect.Value).typ"
  "reflect.storeRcvr" -> "(*internal/abi.Type).Kind"
  "reflect.storeRcvr" -> "reflect.ifaceIndir"
  "(reflect.Value).call" -> "reflect.storeRcvr"
  "(reflect.Value).call" -> "reflect.storeRcvr"
  "(reflect.Value).call" -> "reflect.storeRcvr"
  "(reflect.Value).call" -> "reflect.storeRcvr"
  "(reflect.Value).call" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).In"
  "(reflect.Value).call" -> "reflect.toRType"
  "(reflect.Value).call" -> "(reflect.Value).assignTo"
  "(reflect.Value).call" -> "(*reflect.abiSeq).stepsForValue"
  "(reflect.Value).call" -> "reflect.align"
  "(reflect.Value).call" -> "reflect.add"
  "(reflect.Value).call" -> "reflect.typedmemmove"
  "(reflect.Value).call" -> "reflect.add"
  "reflect.intToReg" -> "(*internal/abi.RegArgs).IntRegArgAddr"
  "reflect.intToReg" -> "reflect.memmove"
  "(reflect.Value).call" -> "reflect.intToReg"
  "(reflect.Value).call" -> "reflect.add"
  "reflect.floatToReg" -> "reflect.archFloat32ToReg"
  "(reflect.Value).call" -> "reflect.floatToReg"
  "(reflect.Value).call" -> "(*internal/abi.RegArgs).Dump"
  "runtime.GC" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.gcWaitOnMark" -> "runtime.lock"
  "runtime.gcWaitOnMark" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.gcWaitOnMark" -> "runtime.unlock"
  "runtime.gcWaitOnMark" -> "runtime.getg"
  "runtime.gcWaitOnMark" -> "(*runtime.gList).push"
  "runtime.gcWaitOnMark" -> "runtime.goparkunlock"
  "runtime.GC" -> "runtime.gcWaitOnMark"
  "runtime.GC" -> "runtime.gcStart"
  "runtime.GC" -> "runtime.gcWaitOnMark"
  "runtime.GC" -> "runtime.Gosched"
  "runtime.GC" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.GC" -> "runtime.sweepone"
  "runtime.GC" -> "runtime.Gosched"
  "runtime.GC" -> "runtime.acquirem"
  "runtime.GC" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.GC" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.GC" -> "runtime.isSweepDone"
  "runtime.mProf_PostSweep" -> "(*runtime.mProfCycleHolder).read"
  "runtime.mProf_PostSweep" -> "runtime.lock"
  "runtime.mProf_PostSweep" -> "runtime.lock"
  "runtime.mProf_PostSweep" -> "runtime.mProf_FlushLocked"
  "runtime.mProf_PostSweep" -> "runtime.unlock"
  "runtime.mProf_PostSweep" -> "runtime.unlock"
  "runtime.GC" -> "runtime.mProf_PostSweep"
  "runtime.GC" -> "runtime.releasem"
  "(reflect.Value).call" -> "runtime.GC"
  "(reflect.Value).call" -> "(*internal/abi.Type).Size"
  "(reflect.Value).call" -> "reflect.call"
  "(reflect.Value).call" -> "runtime.GC"
  "(reflect.Value).call" -> "reflect.typedmemclr"
  "(reflect.Value).call" -> "(*sync.Pool).Put"
  "(reflect.Value).call" -> "reflect.typedmemclrpartial"
  "(reflect.Value).call" -> "(*internal/abi.FuncType).Out"
  "(reflect.Value).call" -> "(*internal/abi.Type).Size"
  "(reflect.Value).call" -> "reflect.toRType"
  "(reflect.Value).call" -> "reflect.Zero"
  "(reflect.Value).call" -> "(*reflect.abiSeq).stepsForValue"
  "(reflect.Value).call" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).call" -> "reflect.add"
  "(reflect.Value).call" -> "reflect.ifaceIndir"
  "(reflect.Value).call" -> "reflect.unsafe_New"
  "(reflect.Value).call" -> "reflect.stringFor"
  "(reflect.Value).call" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).call" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).call" -> "reflect.add"
  "reflect.intFromReg" -> "(*internal/abi.RegArgs).IntRegArgAddr"
  "reflect.intFromReg" -> "reflect.memmove"
  "(reflect.Value).call" -> "reflect.intFromReg"
  "(reflect.Value).call" -> "reflect.add"
  "(reflect.Value).call" -> "reflect.add"
  "(reflect.Value).call" -> "reflect.floatFromReg"
  "(reflect.Value).Call" -> "(reflect.Value).call"
  "(reflect.Value).Call" -> "(*fmt.ss).Token$1"
  "(reflect.Value).Call" -> "fmt.notSpace"
  "(reflect.Value).Call" -> "runtime.chansend$1"
  "(reflect.Value).Call" -> "runtime.chanparkcommit"
  "(reflect.Value).Call" -> "runtime.chanrecv$1"
  "(reflect.Value).Call" -> "runtime.asyncPreempt"
  "(reflect.Value).Call" -> "runtime.asyncPreempt2"
  "log.init#1$1" -> "(*log.Logger).output"
  "(reflect.Value).Call" -> "log.init#1$1"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/sysfs.ioctlOpenDefault"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/sysfs.fileIOOpenDefault"
  "(reflect.Value).Call" -> "github.com/golang/freetype/raster.roundCapper"
  "(reflect.Value).Call" -> "github.com/golang/freetype/raster.buttCapper"
  "(reflect.Value).Call" -> "github.com/golang/freetype/raster.squareCapper"
  "(reflect.Value).Call" -> "github.com/golang/freetype/raster.roundJoiner"
  "(reflect.Value).Call" -> "github.com/golang/freetype/raster.bevelJoiner"
  "(reflect.Value).Call" -> "runtime/pprof.runtime_goroutineProfileWithLabels"
  "(reflect.Value).Call" -> "runtime/pprof.writeThreadCreate$1"
  "(reflect.Value).Call" -> "runtime.BlockProfile"
  "(reflect.Value).Call" -> "runtime.MutexProfile"
  "(reflect.Value).Call" -> "image/png.Decode"
  "(reflect.Value).Call" -> "image/png.DecodeConfig"
  "(reflect.Value).Call" -> "internal/poll.destroyPipe"
  "(reflect.Value).Call" -> "os.newFile$1"
  "(reflect.Value).Call" -> "(*os.file).close"
  "(reflect.Value).Call" -> "os.lstatNolog$1"
  "(reflect.Value).Call" -> "(*log.Logger).Output$1"
  "(reflect.Value).Call" -> "(*github.com/stefan-muehlebach/adatft/stmpe610.STMPE610).SetCallback$1"
  "(reflect.Value).Call" -> "time.sendTime"
  "(reflect.Value).Call" -> "time.parseRFC3339[[]byte]$1"
  "(reflect.Value).Call" -> "unicode.IsSpace"
  "(reflect.Value).Call" -> "(*os.File).writeTo$1"
  "(reflect.Value).Call" -> "internal/poll.runtime_pollServerInit"
  "(reflect.Value).Call" -> "os/signal.Notify$1$1"
  "(reflect.Value).Call" -> "reflect.cvtInt"
  "(reflect.Value).Call" -> "reflect.cvtIntFloat"
  "reflect.cvtIntString" -> "(reflect.Value).Int"
  "reflect.cvtIntString" -> "(reflect.flag).ro"
  "reflect.makeString" -> "reflect.New"
  "reflect.makeString" -> "(reflect.Value).Elem"
  "reflect.makeString" -> "(reflect.Value).SetString"
  "reflect.cvtIntString" -> "reflect.makeString"
  "(reflect.Value).Call" -> "reflect.cvtIntString"
  "reflect.cvtUint" -> "(reflect.flag).ro"
  "reflect.cvtUint" -> "(reflect.Value).Uint"
  "reflect.cvtUint" -> "reflect.makeInt"
  "(reflect.Value).Call" -> "reflect.cvtUint"
  "reflect.cvtUintFloat" -> "(reflect.flag).ro"
  "reflect.cvtUintFloat" -> "(reflect.Value).Uint"
  "reflect.cvtUintFloat" -> "reflect.makeFloat"
  "(reflect.Value).Call" -> "reflect.cvtUintFloat"
  "reflect.cvtUintString" -> "(reflect.Value).Uint"
  "reflect.cvtUintString" -> "(reflect.flag).ro"
  "reflect.cvtUintString" -> "reflect.makeString"
  "(reflect.Value).Call" -> "reflect.cvtUintString"
  "(reflect.Value).Call" -> "reflect.cvtFloatInt"
  "reflect.cvtFloatUint" -> "(reflect.flag).ro"
  "reflect.cvtFloatUint" -> "(reflect.Value).Float"
  "reflect.cvtFloatUint" -> "reflect.makeInt"
  "(reflect.Value).Call" -> "reflect.cvtFloatUint"
  "reflect.cvtFloat" -> "(reflect.Value).Type"
  "reflect.cvtFloat" -> "(*reflect.rtype).Kind"
  "reflect.cvtFloat" -> "(reflect.flag).ro"
  "reflect.makeFloat32" -> "(*reflect.rtype).common"
  "reflect.makeFloat32" -> "reflect.unsafe_New"
  "reflect.makeFloat32" -> "(*internal/abi.Type).Kind"
  "reflect.cvtFloat" -> "reflect.makeFloat32"
  "reflect.cvtFloat" -> "(reflect.flag).ro"
  "reflect.cvtFloat" -> "(reflect.Value).Float"
  "reflect.cvtFloat" -> "reflect.makeFloat"
  "reflect.cvtFloat" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Call" -> "reflect.cvtFloat"
  "reflect.cvtComplex" -> "(reflect.flag).ro"
  "reflect.cvtComplex" -> "(reflect.Value).Complex"
  "reflect.makeComplex" -> "(*reflect.rtype).common"
  "reflect.makeComplex" -> "reflect.unsafe_New"
  "reflect.makeComplex" -> "(*internal/abi.Type).Size"
  "reflect.makeComplex" -> "(*internal/abi.Type).Kind"
  "reflect.cvtComplex" -> "reflect.makeComplex"
  "(reflect.Value).Call" -> "reflect.cvtComplex"
  "reflect.cvtStringBytes" -> "(reflect.flag).ro"
  "reflect.cvtStringBytes" -> "(reflect.Value).String"
  "reflect.makeBytes" -> "reflect.New"
  "reflect.makeBytes" -> "(reflect.Value).Elem"
  "reflect.makeBytes" -> "(reflect.Value).SetBytes"
  "reflect.cvtStringBytes" -> "reflect.makeBytes"
  "(reflect.Value).Call" -> "reflect.cvtStringBytes"
  "reflect.cvtStringRunes" -> "(reflect.flag).ro"
  "reflect.cvtStringRunes" -> "(reflect.Value).String"
  "reflect.makeRunes" -> "reflect.New"
  "reflect.makeRunes" -> "(reflect.Value).Elem"
  "(reflect.Value).setRunes" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).setRunes" -> "(reflect.flag).mustBe"
  "(reflect.Value).setRunes" -> "(reflect.Value).typ"
  "(reflect.Value).setRunes" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).setRunes" -> "(*internal/abi.Type).Kind"
  "reflect.makeRunes" -> "(reflect.Value).setRunes"
  "reflect.cvtStringRunes" -> "reflect.makeRunes"
  "(reflect.Value).Call" -> "reflect.cvtStringRunes"
  "reflect.cvtBytesString" -> "(reflect.flag).ro"
  "reflect.cvtBytesString" -> "(reflect.Value).Bytes"
  "reflect.cvtBytesString" -> "reflect.makeString"
  "(reflect.Value).Call" -> "reflect.cvtBytesString"
  "reflect.cvtRunesString" -> "(reflect.flag).ro"
  "(reflect.Value).runes" -> "(reflect.flag).mustBe"
  "(reflect.Value).runes" -> "(reflect.Value).typ"
  "(reflect.Value).runes" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).runes" -> "(*internal/abi.Type).Kind"
  "reflect.cvtRunesString" -> "(reflect.Value).runes"
  "reflect.cvtRunesString" -> "reflect.makeString"
  "(reflect.Value).Call" -> "reflect.cvtRunesString"
  "reflect.cvtSliceArrayPtr" -> "(*reflect.rtype).Elem"
  "(*reflect.rtype).Len" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Len" -> "(*reflect.rtype).String"
  "reflect.cvtSliceArrayPtr" -> "(*reflect.rtype).Len"
  "reflect.cvtSliceArrayPtr" -> "(reflect.Value).Len"
  "reflect.cvtSliceArrayPtr" -> "(reflect.Value).Len"
  "reflect.cvtSliceArrayPtr" -> "internal/itoa.Itoa"
  "reflect.cvtSliceArrayPtr" -> "internal/itoa.Itoa"
  "reflect.cvtSliceArrayPtr" -> "(*reflect.rtype).common"
  "(reflect.Value).Call" -> "reflect.cvtSliceArrayPtr"
  "reflect.cvtSliceArray" -> "(*reflect.rtype).Len"
  "reflect.cvtSliceArray" -> "(reflect.Value).Len"
  "reflect.cvtSliceArray" -> "(reflect.Value).Len"
  "reflect.cvtSliceArray" -> "internal/itoa.Itoa"
  "reflect.cvtSliceArray" -> "internal/itoa.Itoa"
  "reflect.cvtSliceArray" -> "(*reflect.rtype).common"
  "reflect.cvtSliceArray" -> "reflect.unsafe_New"
  "reflect.cvtSliceArray" -> "reflect.typedmemmove"
  "(reflect.Value).Call" -> "reflect.cvtSliceArray"
  "reflect.cvtDirect" -> "(*reflect.rtype).common"
  "reflect.cvtDirect" -> "reflect.unsafe_New"
  "reflect.cvtDirect" -> "reflect.typedmemmove"
  "reflect.cvtDirect" -> "(reflect.flag).ro"
  "(reflect.Value).Call" -> "reflect.cvtDirect"
  "reflect.cvtI2I" -> "(reflect.Value).IsNil"
  "reflect.cvtI2I" -> "reflect.Zero"
  "reflect.cvtI2I" -> "(reflect.flag).ro"
  "reflect.cvtI2I" -> "(reflect.Value).Elem"
  "reflect.cvtI2I" -> "reflect.cvtT2I"
  "(reflect.Value).Call" -> "reflect.cvtI2I"
  "(reflect.Value).Call" -> "reflect.cvtT2I"
  "(reflect.Value).Call" -> "reflect.methodValueCall"
  "(reflect.Value).Call" -> "runtime.park_m"
  "(reflect.Value).Call" -> "runtime.throw$1"
  "(reflect.Value).Call" -> "runtime.preemptPark"
  "(reflect.Value).Call" -> "runtime.gopreempt_m"
  "(reflect.Value).Call" -> "(*flag.FlagSet).PrintDefaults$1"
  "(reflect.Value).Call" -> "log.init#1$1$1"
  "(reflect.Value).Call" -> "os.ReadFile"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/pmem.openFileOrig"
  "periph.io/x/host/v3/cpu.openFileOrig" -> "periph.io/x/host/v3/fs.Open"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/cpu.openFileOrig"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/pin.isNum"
  "(reflect.Value).Call" -> "os.Mkdir$1"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).readByte"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).readByte"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).processSOF" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).processSOF"
  "(*image/jpeg.decoder).ignore" -> "(*image/jpeg.decoder).unreadByteStuffedByte"
  "(*image/jpeg.decoder).ignore" -> "(*image/jpeg.decoder).fill"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).processDHT" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).processDHT" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).processDHT"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).processDQT" -> "(*image/jpeg.decoder).readByte"
  "(*image/jpeg.decoder).processDQT" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).processDQT" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).processDQT"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).makeImg" -> "image.Rect"
  "(*image/jpeg.decoder).makeImg" -> "image.NewGray"
  "(*image/jpeg.decoder).makeImg" -> "image.Rect"
  "(*image.Gray).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.Gray).SubImage" -> "(image.Rectangle).Empty"
  "(*image.Gray).SubImage" -> "(*image.Gray).PixOffset"
  "(*image/jpeg.decoder).makeImg" -> "(*image.Gray).SubImage"
  "(*image/jpeg.decoder).makeImg" -> "image.Rect"
  "image.yCbCrSize" -> "(image.Rectangle).Dx"
  "image.yCbCrSize" -> "(image.Rectangle).Dy"
  "image.NewYCbCr" -> "image.yCbCrSize"
  "image.NewYCbCr" -> "image.mul3NonNeg"
  "image.NewYCbCr" -> "image.mul3NonNeg"
  "image.NewYCbCr" -> "image.add2NonNeg"
  "(*image/jpeg.decoder).makeImg" -> "image.NewYCbCr"
  "(*image/jpeg.decoder).makeImg" -> "image.Rect"
  "(*image/jpeg.decoder).makeImg" -> "(*image.YCbCr).SubImage"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).makeImg"
  "(*image/jpeg.decoder).decodeBit" -> "(*image/jpeg.decoder).ensureNBits"
  "(*image/jpeg.decoder).refine" -> "(*image/jpeg.decoder).decodeBit"
  "(*image/jpeg.decoder).decodeHuffman" -> "(*image/jpeg.decoder).ensureNBits"
  "(*image/jpeg.decoder).decodeHuffman" -> "(*image/jpeg.decoder).unreadByteStuffedByte"
  "(*image/jpeg.decoder).decodeHuffman" -> "(*image/jpeg.decoder).ensureNBits"
  "(*image/jpeg.decoder).refine" -> "(*image/jpeg.decoder).decodeHuffman"
  "(*image/jpeg.decoder).refineNonZeroes" -> "(*image/jpeg.decoder).decodeBit"
  "(*image/jpeg.decoder).refine" -> "(*image/jpeg.decoder).refineNonZeroes"
  "(*image/jpeg.decoder).refine" -> "(*image/jpeg.decoder).decodeBit"
  "(*image/jpeg.decoder).decodeBits" -> "(*image/jpeg.decoder).ensureNBits"
  "(*image/jpeg.decoder).refine" -> "(*image/jpeg.decoder).decodeBits"
  "(*image/jpeg.decoder).refine" -> "(*image/jpeg.decoder).refineNonZeroes"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).refine"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).decodeHuffman"
  "(*image/jpeg.decoder).receiveExtend" -> "(*image/jpeg.decoder).ensureNBits"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).receiveExtend"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).decodeHuffman"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).receiveExtend"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).decodeBits"
  "(*image/jpeg.decoder).reconstructBlock" -> "image/jpeg.idct"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).reconstructBlock"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).processSOS" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).processSOS"
  "(*image/jpeg.decoder).processApp0Marker" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).processApp0Marker" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).processApp0Marker" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).processApp0Marker"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).processDRI"
  "(*image/jpeg.decoder).processApp14Marker" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).processApp14Marker" -> "(*image/jpeg.decoder).readFull"
  "(*image/jpeg.decoder).processApp14Marker" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).processApp14Marker"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).ignore"
  "(*image/jpeg.decoder).reconstructProgressiveImage" -> "(*image/jpeg.decoder).reconstructBlock"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).reconstructProgressiveImage"
  "(*image/jpeg.decoder).applyBlack" -> "(*image.YCbCr).Bounds"
  "(*image/jpeg.decoder).applyBlack" -> "image.NewRGBA"
  "(*image/jpeg.decoder).applyBlack" -> "image/internal/imageutil.DrawYCbCr"
  "(*image/jpeg.decoder).applyBlack" -> "(*image.YCbCr).Bounds"
  "image.NewCMYK" -> "image.pixelBufferLength"
  "image.NewCMYK" -> "(image.Rectangle).Dx"
  "(*image/jpeg.decoder).applyBlack" -> "image.NewCMYK"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).applyBlack"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).isRGB"
  "(*image/jpeg.decoder).convertToRGB" -> "(*image.YCbCr).Bounds"
  "(*image/jpeg.decoder).convertToRGB" -> "image.NewRGBA"
  "(*image/jpeg.decoder).convertToRGB" -> "(*image.RGBA).PixOffset"
  "(*image/jpeg.decoder).convertToRGB" -> "(*image.YCbCr).YOffset"
  "(*image/jpeg.decoder).convertToRGB" -> "(*image.YCbCr).COffset"
  "(*image/jpeg.decoder).decode" -> "(*image/jpeg.decoder).convertToRGB"
  "image/jpeg.Decode" -> "(*image/jpeg.decoder).decode"
  "(reflect.Value).Call" -> "image/jpeg.Decode"
  "image/jpeg.DecodeConfig" -> "(*image/jpeg.decoder).decode"
  "image/jpeg.DecodeConfig" -> "(*image/jpeg.decoder).isRGB"
  "(reflect.Value).Call" -> "image/jpeg.DecodeConfig"
  "(reflect.Value).Call" -> "runtime/pprof.writeHeapInternal$1"
  "(reflect.Value).Call" -> "runtime/pprof.writeProfileInternal$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.init$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.init$2"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.init$3"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.init$4"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.init$5"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.init$6"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.init$7"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CStem"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CVmoveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CRlineto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CHlineto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CVlineto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CRrcurveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CCallsubr"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CReturn"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CEndchar"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CMask"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CRmoveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CHmoveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CRcurveline"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CRlinecurve"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CVvcurveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CHhcurveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CCallgsubr"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CVhcurveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CHvcurveto"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CHflex"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.t2CHflex1"
  "(reflect.Value).Call" -> "internal/godebug.update"
  "internal/godebug.newIncNonDefault" -> "internal/godebug.New"
  "internal/godebug.newIncNonDefault" -> "(*internal/godebug.Setting).Value"
  "(reflect.Value).Call" -> "internal/godebug.newIncNonDefault"
  "(reflect.Value).Call" -> "runtime.SetFinalizer$1"
  "(reflect.Value).Call" -> "runtime.SetFinalizer$2"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/spi/spireg.Open$1"
  "(reflect.Value).Call" -> "syscall.copyenv"
  "(reflect.Value).Call" -> "time.parseRFC3339[string]$1"
  "(reflect.Value).Call" -> "image/draw.drawPaletted$1"
  "(reflect.Value).Call" -> "image/draw.drawPaletted$2"
  "(reflect.Value).Call" -> "image/draw.drawPaletted$3"
  "(reflect.Value).Call" -> "image/draw.drawPaletted$4"
  "(reflect.Value).Call" -> "(*github.com/golang/freetype/truetype.Font).Name$1"
  "(reflect.Value).Call" -> "encoding/json.stateBeginValue"
  "(reflect.Value).Call" -> "(*encoding/json.encodeState).marshal$1"
  "(reflect.Value).Call" -> "(*github.com/stefan-muehlebach/adagui/binding.base).trigger$1"
  "(reflect.Value).Call" -> "(*github.com/stefan-muehlebach/adagui/binding.base).trigger$2"
  "(reflect.Value).Call" -> "reflect.funcLayout$1"
  "(reflect.Value).Call" -> "(*reflect.structType).FieldByName$1"
  "reflect.FuncOf$1" -> "(*sync.Map).Load"
  "reflect.FuncOf$1" -> "(*sync.Map).Store"
  "reflect.FuncOf$1" -> "reflect.toType"
  "(reflect.Value).Call" -> "reflect.FuncOf$1"
  "(reflect.Value).Call" -> "runtime.fatalthrow$1"
  "(reflect.Value).Call" -> "runtime.goready$1"
  "(reflect.Value).Call" -> "runtime.parkunlock_c"
  "(reflect.Value).Call" -> "runtime.gcResetMarkState"
  "(reflect.Value).Call" -> "runtime.gcStart$1"
  "(reflect.Value).Call" -> "runtime.gcStart$2"
  "(reflect.Value).Call" -> "runtime.gcStart$3"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/videocore.Alloc"
  "periph.io/x/host/v3/bcm283x.setSpeed" -> "errors.New"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/bcm283x.setSpeed"
  "periph.io/x/host/v3/sysfs.newI2C" -> "fmt.Sprintf"
  "periph.io/x/host/v3/sysfs.newI2C" -> "periph.io/x/host/v3/sysfs.ioctlOpenDefault"
  "periph.io/x/host/v3/sysfs.newI2C" -> "os.IsNotExist"
  "periph.io/x/host/v3/sysfs.newI2C" -> "(*periph.io/x/host/v3/fs.File).Ioctl"
  "periph.io/x/host/v3/sysfs.newI2C" -> "fmt.Errorf"
  "periph.io/x/host/v3/sysfs.newI2C" -> "fmt.Errorf"
  "periph.io/x/host/v3/sysfs.newI2C" -> "fmt.Errorf"
  "periph.io/x/host/v3/sysfs.NewI2C" -> "periph.io/x/host/v3/sysfs.newI2C"
  "periph.io/x/host/v3/sysfs.NewI2C" -> "errors.New"
  "(periph.io/x/host/v3/sysfs.openerI2C).Open" -> "periph.io/x/host/v3/sysfs.NewI2C"
  "(reflect.Value).Call" -> "(periph.io/x/host/v3/sysfs.openerI2C).Open"
  "(reflect.Value).Call" -> "(*periph.io/x/host/v3/sysfs.openerSPI).Open"
  "(reflect.Value).Call" -> "os.statNolog$1"
  "(reflect.Value).Call" -> "os.Remove$1"
  "(reflect.Value).Call" -> "os.Remove$2"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$1"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$2"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/driver/driverreg.initImpl$3"
  "(reflect.Value).Call" -> "runtime.Stack$1"
  "(reflect.Value).Call" -> "runtime/pprof.printCountProfile$1"
  "(reflect.Value).Call" -> "runtime/pprof.printCountProfile$2"
  "(reflect.Value).Call" -> "runtime.MemProfile"
  "(reflect.Value).Call" -> "runtime.ReadMemStats$1"
  "(reflect.Value).Call" -> "runtime/pprof.writeHeapProto$1"
  "(reflect.Value).Call" -> "(embed.FS).lookup$1"
  "(reflect.Value).Call" -> "(embed.FS).readDir$1"
  "(reflect.Value).Call" -> "(embed.FS).readDir$2"
  "(reflect.Value).Call" -> "internal/godebug.update$1"
  "(reflect.Value).Call" -> "(*internal/godebug.Setting).IncNonDefault"
  "(reflect.Value).Call" -> "(*log.Logger).Printf$1"
  "(reflect.Value).Call" -> "encoding/json.stateBeginStringOrEmpty"
  "(reflect.Value).Call" -> "encoding/json.stateBeginValueOrEmpty"
  "(reflect.Value).Call" -> "encoding/json.stateInString"
  "(reflect.Value).Call" -> "encoding/json.stateNeg"
  "(reflect.Value).Call" -> "encoding/json.state0"
  "(reflect.Value).Call" -> "encoding/json.stateT"
  "(reflect.Value).Call" -> "encoding/json.stateF"
  "(reflect.Value).Call" -> "encoding/json.stateN"
  "(reflect.Value).Call" -> "encoding/json.state1"
  "(reflect.Value).Call" -> "hash/crc32.ieeeInit"
  "(reflect.Value).Call" -> "runtime.gosched_m"
  "(reflect.Value).Call" -> "runtime.sweepone$1"
  "(reflect.Value).Call" -> "runtime.casgstatus$1"
  "(reflect.Value).Call" -> "runtime.osyield"
  "(reflect.Value).Call" -> "runtime.cgoCheckTypedBlock$1"
  "(reflect.Value).Call" -> "runtime.callers$1"
  "(reflect.Value).Call" -> "runtime.gcResetMarkState$1"
  "(reflect.Value).Call" -> "flag.isZeroValue$1"
  "(reflect.Value).Call" -> "flag.sortFlags$1"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/allwinner.smokeTest$1"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/allwinner.smokeTest$2"
  "(reflect.Value).Call" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1"
  "(reflect.Value).Call" -> "runtime.stopTheWorld$1"
  "(reflect.Value).Call" -> "runtime.startTheWorld$1"
  "(reflect.Value).Call" -> "(*runtime/pprof.profileBuilder).build$1"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$1"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$2"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$9"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$3"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$4"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$5"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$6"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$7"
  "(reflect.Value).Call" -> "internal/reflectlite.Swapper$8"
  "(reflect.Value).Call" -> "(*internal/godebug.Setting).Value$1"
  "(reflect.Value).Call" -> "runtime.finalizercommit"
  "(reflect.Value).Call" -> "encoding/json.stateEndValue"
  "(reflect.Value).Call" -> "encoding/json.stateInStringEsc"
  "(reflect.Value).Call" -> "encoding/json.stateDot"
  "(reflect.Value).Call" -> "encoding/json.stateE"
  "(reflect.Value).Call" -> "encoding/json.stateTr"
  "(reflect.Value).Call" -> "encoding/json.stateFa"
  "(reflect.Value).Call" -> "encoding/json.stateNu"
  "(reflect.Value).Call" -> "encoding/json.stateError"
  "(reflect.Value).Call" -> "encoding/json.stateEndTop"
  "(reflect.Value).Call" -> "encoding/json.stateBeginString"
  "(reflect.Value).Call" -> "encoding/json.invalidValueEncoder"
  "(reflect.Value).Call" -> "hash/crc32.archUpdateIEEE"
  "(reflect.Value).Call" -> "hash/crc32.ieeeInit$1"
  "(reflect.Value).Call" -> "(*runtime.sweepLocked).sweep$1"
  "(reflect.Value).Call" -> "(*runtime.sweepLocked).sweep$2"
  "(reflect.Value).Call" -> "reflect.ArrayOf$1"
  "(reflect.Value).Call" -> "reflect.embeddedIfaceMethStub"
  "(reflect.Value).Call" -> "reflect.StructOf$1"
  "(reflect.Value).Call" -> "reflect.StructOf$2"
  "(reflect.Value).Call" -> "runtime.futexwakeup$1"
  "(reflect.Value).Call" -> "runtime.wbBufFlush$1"
  "(reflect.Value).Call" -> "runtime.gcBgMarkWorker$1"
  "(reflect.Value).Call" -> "runtime.gcBgMarkWorker$2"
  "(reflect.Value).Call" -> "runtime.mspinning"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/allwinner.smokeTest$2$1"
  "(reflect.Value).Call" -> "os.chmod$1"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/driver/driverreg.insertDriver$1"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/driver/driverreg.insertDriverFailure$1"
  "(reflect.Value).Call" -> "periph.io/x/conn/v3/driver/driverreg.insertString$1"
  "(reflect.Value).Call" -> "(*periph.io/x/conn/v3/driver/driverreg.stage).loadParallel$1$1"
  "(reflect.Value).Call" -> "runtime.tracebackothers$1"
  "(reflect.Value).Call" -> "(*runtime/pprof.profileBuilder).addMapping"
  "(reflect.Value).Call" -> "runtime.flushallmcaches"
  "(reflect.Value).Call" -> "(*internal/godebug.Setting).register"
  "(reflect.Value).Call" -> "runtime.persistentalloc$1"
  "(reflect.Value).Call" -> "(*runtime.itabTableType).add"
  "(reflect.Value).Call" -> "runtime.cgocall"
  "(reflect.Value).Call" -> "runtime.asmcgocall"
  "(reflect.Value).Call" -> "encoding/json.stateInStringEscU"
  "(reflect.Value).Call" -> "encoding/json.stateDot0"
  "(reflect.Value).Call" -> "encoding/json.stateESign"
  "(reflect.Value).Call" -> "encoding/json.stateTru"
  "(reflect.Value).Call" -> "encoding/json.stateFal"
  "(reflect.Value).Call" -> "encoding/json.stateNul"
  "(reflect.Value).Call" -> "encoding/json.typeFields$1"
  "(reflect.Value).Call" -> "encoding/json.typeEncoder$1"
  "(reflect.Value).Call" -> "runtime.tracefree$1"
  "(reflect.Value).Call" -> "(*runtime.mheap).freeSpan$1"
  "(reflect.Value).Call" -> "runtime.doRecordGoroutineProfile$1"
  "(reflect.Value).Call" -> "runtime.schedtrace$1"
  "(reflect.Value).Call" -> "runtime._LostContendedRuntimeLock"
  "(reflect.Value).Call" -> "(*runtime.mLockProfile).captureStack$1"
  "(reflect.Value).Call" -> "runtime.goyield_m"
  "(reflect.Value).Call" -> "runtime.gcMarkDone$1"
  "(reflect.Value).Call" -> "runtime.gcMarkDone$2"
  "(reflect.Value).Call" -> "runtime.gcMarkDone$3"
  "(reflect.Value).Call" -> "runtime.gcMarkDone$4"
  "(reflect.Value).Call" -> "runtime.entersyscallblock$1"
  "(reflect.Value).Call" -> "runtime.entersyscallblock$2"
  "(reflect.Value).Call" -> "runtime.entersyscallblock_handoff"
  "(reflect.Value).Call" -> "runtime.exitsyscall$1"
  "(reflect.Value).Call" -> "runtime.exitsyscall$2"
  "(reflect.Value).Call" -> "runtime.exitsyscall0"
  "(reflect.Value).Call" -> "runtime.cgoCheckPtrWrite$1"
  "(reflect.Value).Call" -> "runtime.traceback1$1"
  "(reflect.Value).Call" -> "runtime/pprof.parseProcSelfMaps$1"
  "(reflect.Value).Call" -> "runtime.unreachableMethod"
  "(reflect.Value).Call" -> "runtime.heapSetType$1"
  "(reflect.Value).Call" -> "runtime.tracealloc$1"
  "(reflect.Value).Call" -> "encoding/json.stateInStringEscU1"
  "(reflect.Value).Call" -> "encoding/json.stateE0"
  "(reflect.Value).Call" -> "encoding/json.stateFals"
  "(reflect.Value).Call" -> "encoding/json.addrMarshalerEncoder"
  "(reflect.Value).Call" -> "encoding/json.marshalerEncoder"
  "(reflect.Value).Call" -> "encoding/json.addrTextMarshalerEncoder"
  "(reflect.Value).Call" -> "encoding/json.textMarshalerEncoder"
  "(reflect.Value).Call" -> "encoding/json.boolEncoder"
  "(reflect.Value).Call" -> "encoding/json.intEncoder"
  "(reflect.Value).Call" -> "encoding/json.uintEncoder"
  "(reflect.Value).Call" -> "encoding/json.stringEncoder"
  "(reflect.Value).Call" -> "encoding/json.interfaceEncoder"
  "(reflect.Value).Call" -> "encoding/json.unsupportedTypeEncoder"
  "(reflect.Value).Call" -> "runtime.checkdead$1"
  "(reflect.Value).Call" -> "runtime.wirep$1"
  "(reflect.Value).Call" -> "runtime.wirep$2"
  "(reflect.Value).Call" -> "runtime.runqputbatch$1"
  "(reflect.Value).Call" -> "runtime.slicebytetostringtmp"
  "(reflect.Value).Call" -> "runtime.sigreturn__sigaction"
  "runtime.sighandler" -> "runtime.getg"
  "(*runtime.sigctxt).pc" -> "(*runtime.sigctxt).regs"
  "(*runtime.sigctxt).sigpc" -> "(*runtime.sigctxt).pc"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigpc"
  "(*runtime.sigctxt).sp" -> "(*runtime.sigctxt).regs"
  "(*runtime.sigctxt).sigsp" -> "(*runtime.sigctxt).sp"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigsp"
  "(*runtime.sigctxt).lr" -> "(*runtime.sigctxt).regs"
  "(*runtime.sigctxt).siglr" -> "(*runtime.sigctxt).lr"
  "runtime.sighandler" -> "(*runtime.sigctxt).siglr"
  "runtime.sigprof" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.sigprof" -> "runtime.findfunc"
  "runtime.sigprof" -> "(runtime.funcInfo).valid"
  "runtime.sigprof" -> "runtime.getg"
  "runtime.sigprof" -> "runtime.funcname"
  "runtime.sigprof" -> "runtime.hasPrefix"
  "runtime.sigprof" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.sigprof" -> "runtime.tracebackPCs"
  "runtime.sigprof" -> "runtime.usesLibcall"
  "runtime.sigprof" -> "(*runtime.unwinder).initAt"
  "runtime.sigprof" -> "(runtime.guintptr).ptr"
  "runtime.sigprof" -> "(*runtime.unwinder).initAt"
  "runtime.sigprof" -> "(*runtime.unwinder).initAt"
  "runtime.sigprof" -> "(*runtime.unwinder).initAt"
  "runtime.sigprof" -> "runtime.inVDSOPage"
  "runtime.sigprof" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.sigprof" -> "internal/abi.FuncPCABIInternal"
  "runtime.sigprof" -> "internal/abi.FuncPCABIInternal"
  "runtime.sigprof" -> "internal/abi.FuncPCABIInternal"
  "runtime.sigprof" -> "internal/abi.FuncPCABIInternal"
  "runtime.sigprof" -> "runtime.getg"
  "(*runtime.cpuProfile).add" -> "runtime.osyield"
  "(*runtime.cpuProfile).add" -> "(*runtime/internal/atomic.Int32).Load"
  "(*runtime.cpuProfile).add" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "(*runtime.cpuProfile).add" -> "(*runtime/internal/atomic.Uint32).Store"
  "(*runtime.profBuf).write" -> "runtime.throw"
  "(*runtime.profBuf).write" -> "(*runtime.profBuf).hasOverflow"
  "(*runtime.profBuf).takeOverflow" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.profBuf).takeOverflow" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.profBuf).takeOverflow" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "(*runtime.profBuf).takeOverflow" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.profBuf).takeOverflow" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.profBuf).write" -> "(*runtime.profBuf).takeOverflow"
  "(*runtime.profBuf).write" -> "(*runtime.profAtomic).load"
  "(*runtime.profBuf).write" -> "(*runtime.profAtomic).load"
  "(*runtime.profBuf).write" -> "(runtime.profIndex).tagCount"
  "(*runtime.profBuf).write" -> "(*runtime.profBuf).canWriteTwoRecords"
  "(*runtime.profBuf).write" -> "(*runtime.profBuf).write"
  "(*runtime.profBuf).incrementOverflow" -> "(*runtime/internal/atomic.Uint64).Load"
  "(*runtime.profBuf).incrementOverflow" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.profBuf).incrementOverflow" -> "(*runtime/internal/atomic.Uint64).Store"
  "(*runtime.profBuf).incrementOverflow" -> "(*runtime/internal/atomic.Uint64).CompareAndSwap"
  "(*runtime.profBuf).write" -> "(*runtime.profBuf).incrementOverflow"
  "(*runtime.profBuf).wakeupExtra" -> "(*runtime.profAtomic).load"
  "(*runtime.profAtomic).cas" -> "runtime/internal/atomic.Cas64"
  "(*runtime.profBuf).wakeupExtra" -> "(*runtime.profAtomic).cas"
  "(*runtime.profBuf).wakeupExtra" -> "runtime.notewakeup"
  "(*runtime.profBuf).write" -> "(*runtime.profBuf).wakeupExtra"
  "(*runtime.profBuf).write" -> "(*runtime.profBuf).canWriteRecord"
  "(*runtime.profBuf).write" -> "(runtime.profIndex).dataCount"
  "(*runtime.profBuf).write" -> "(runtime.profIndex).dataCount"
  "(*runtime.profBuf).write" -> "(runtime.profIndex).dataCount"
  "(*runtime.profBuf).write" -> "runtime.countSub"
  "(*runtime.profBuf).write" -> "(*runtime.profAtomic).load"
  "(*runtime.profBuf).write" -> "(runtime.profIndex).addCountsAndClearFlags"
  "(*runtime.profBuf).write" -> "(*runtime.profAtomic).cas"
  "(*runtime.profBuf).write" -> "runtime.notewakeup"
  "(*runtime.cpuProfile).addExtra" -> "(*runtime.profBuf).write"
  "(*runtime.cpuProfile).addExtra" -> "internal/abi.FuncPCABIInternal"
  "(*runtime.cpuProfile).addExtra" -> "internal/abi.FuncPCABIInternal"
  "(*runtime.cpuProfile).addExtra" -> "(*runtime.profBuf).write"
  "(*runtime.cpuProfile).addExtra" -> "internal/abi.FuncPCABIInternal"
  "(*runtime.cpuProfile).addExtra" -> "internal/abi.FuncPCABIInternal"
  "(*runtime.cpuProfile).addExtra" -> "(*runtime.profBuf).write"
  "(*runtime.cpuProfile).add" -> "(*runtime.cpuProfile).addExtra"
  "(*runtime.cpuProfile).add" -> "runtime.nanotime"
  "(*runtime.cpuProfile).add" -> "(*runtime.profBuf).write"
  "runtime.sigprof" -> "(*runtime.cpuProfile).add"
  "runtime.traceCPUSample" -> "runtime.traceEnabled"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Uintptr).Load"
  "runtime.traceCPUSample" -> "runtime.traceClockNow"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.traceCPUSample" -> "runtime.osyield"
  "(*runtime/internal/atomic.Pointer[runtime.profBuf]).Load[runtime.profBuf]" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Pointer[runtime.profBuf]).Load[runtime.profBuf]"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.traceCPUSample" -> "(*runtime.profBuf).write"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.traceCPUSample" -> "(*runtime/internal/atomic.Uintptr).Add"
  "runtime.sigprof" -> "runtime.traceCPUSample"
  "runtime.sigprof" -> "(runtime.puintptr).ptr"
  "runtime.sighandler" -> "runtime.sigprof"
  "runtime.validSIGPROF" -> "(*runtime.sigctxt).sigcode"
  "runtime.validSIGPROF" -> "(*runtime/internal/atomic.Bool).Load"
  "runtime.sighandler" -> "runtime.validSIGPROF"
  "runtime.sighandler" -> "runtime.noescape"
  "runtime.runPerThreadSyscall" -> "runtime.getg"
  "runtime.runPerThreadSyscall" -> "(*runtime/internal/atomic.Uint8).Load"
  "runtime.runPerThreadSyscall" -> "runtime/internal/syscall.Syscall6"
  "runtime.runPerThreadSyscall" -> "runtime.fatal"
  "runtime.runPerThreadSyscall" -> "(*runtime/internal/atomic.Uint8).Store"
  "runtime.sighandler" -> "runtime.runPerThreadSyscall"
  "runtime.wantAsyncPreempt" -> "runtime.readgstatus"
  "runtime.wantAsyncPreempt" -> "(runtime.puintptr).ptr"
  "runtime.doSigPreempt" -> "runtime.wantAsyncPreempt"
  "runtime.doSigPreempt" -> "(*runtime.sigctxt).sigpc"
  "runtime.doSigPreempt" -> "(*runtime.sigctxt).sigsp"
  "runtime.doSigPreempt" -> "(*runtime.sigctxt).siglr"
  "runtime.isAsyncSafePoint" -> "runtime.canPreemptM"
  "runtime.isAsyncSafePoint" -> "runtime.findfunc"
  "runtime.isAsyncSafePoint" -> "(runtime.funcInfo).valid"
  "runtime.pcdatavalue2" -> "runtime.pcdatastart"
  "runtime.pcdatavalue2" -> "runtime.pcvalue"
  "runtime.isAsyncSafePoint" -> "runtime.pcdatavalue2"
  "runtime.isAsyncSafePoint" -> "runtime.funcspdelta"
  "runtime.isAsyncSafePoint" -> "runtime.funcdata"
  "runtime.isAsyncSafePoint" -> "runtime.newInlineUnwinder"
  "runtime.isAsyncSafePoint" -> "(*runtime.inlineUnwinder).srcFunc"
  "runtime.isAsyncSafePoint" -> "(runtime.srcFunc).name"
  "runtime.isAsyncSafePoint" -> "runtime.hasPrefix"
  "runtime.isAsyncSafePoint" -> "runtime.hasPrefix"
  "runtime.isAsyncSafePoint" -> "runtime.hasPrefix"
  "runtime.isAsyncSafePoint" -> "(runtime.funcInfo).entry"
  "runtime.isAsyncSafePoint" -> "runtime.throw"
  "runtime.doSigPreempt" -> "runtime.isAsyncSafePoint"
  "runtime.doSigPreempt" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.doSigPreempt" -> "(*runtime/internal/atomic.Uint32).Store"
  "runtime.doSigPreempt" -> "internal/abi.FuncPCABI0"
  "(*runtime.sigctxt).pushCall" -> "(*runtime.sigctxt).sp"
  "(*runtime.sigctxt).set_sp" -> "(*runtime.sigctxt).regs"
  "(*runtime.sigctxt).pushCall" -> "(*runtime.sigctxt).set_sp"
  "(*runtime.sigctxt).pushCall" -> "(*runtime.sigctxt).lr"
  "(*runtime.sigctxt).r29" -> "(*runtime.sigctxt).regs"
  "(*runtime.sigctxt).pushCall" -> "(*runtime.sigctxt).r29"
  "(*runtime.sigctxt).set_lr" -> "(*runtime.sigctxt).regs"
  "(*runtime.sigctxt).pushCall" -> "(*runtime.sigctxt).set_lr"
  "(*runtime.sigctxt).set_pc" -> "(*runtime.sigctxt).regs"
  "(*runtime.sigctxt).pushCall" -> "(*runtime.sigctxt).set_pc"
  "runtime.doSigPreempt" -> "(*runtime.sigctxt).pushCall"
  "runtime.doSigPreempt" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.sighandler" -> "runtime.doSigPreempt"
  "(*runtime.sigctxt).sigFromUser" -> "(*runtime.sigctxt).sigcode"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigFromUser"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigpc"
  "runtime.isAbortPC" -> "runtime.findfunc"
  "runtime.isAbortPC" -> "(runtime.funcInfo).valid"
  "runtime.sighandler" -> "runtime.isAbortPC"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigFromUser"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigcode"
  "(*runtime.sigctxt).fault" -> "(*runtime.sigctxt).regs"
  "runtime.sighandler" -> "(*runtime.sigctxt).fault"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigpc"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).sp"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).set_sp"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).lr"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).r29"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).lr"
  "(*runtime.sigctxt).preparePanic" -> "runtime.shouldPushSigpanic"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).set_lr"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).set_r28"
  "(*runtime.sigctxt).preparePanic" -> "internal/abi.FuncPCABIInternal"
  "(*runtime.sigctxt).preparePanic" -> "(*runtime.sigctxt).set_pc"
  "runtime.sighandler" -> "(*runtime.sigctxt).preparePanic"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigFromUser"
  "runtime.sigsend" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.sigsend" -> "runtime/internal/atomic.Load"
  "runtime.sigsend" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.sigsend" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.sigsend" -> "runtime/internal/atomic.Cas"
  "runtime.sigsend" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.sigsend" -> "(*runtime/internal/atomic.Uint32).Add"
  "runtime.sigsend" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.sigsend" -> "(*runtime/internal/atomic.Uint32).CompareAndSwap"
  "runtime.sigsend" -> "runtime.throw"
  "runtime.sigNoteWakeup" -> "runtime.throw"
  "runtime.sigsend" -> "runtime.sigNoteWakeup"
  "runtime.sigsend" -> "runtime.notewakeup"
  "runtime.sighandler" -> "runtime.sigsend"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigFromUser"
  "runtime.signal_ignored" -> "runtime/internal/atomic.Load"
  "runtime.sighandler" -> "runtime.signal_ignored"
  "runtime.sighandler" -> "runtime.dieFromSignal"
  "runtime.sighandler" -> "(*runtime.guintptr).set"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.sighandler" -> "runtime.startpanic_m"
  "runtime.fatalsignal" -> "runtime.isSecureMode"
  "runtime.fatalsignal" -> "runtime.exit"
  "runtime.fatalsignal" -> "(*runtime.sigctxt).sigpc"
  "runtime.fatalsignal" -> "(*runtime.sigctxt).sigcode"
  "runtime.fatalsignal" -> "(*runtime.sigctxt).fault"
  "runtime.fatalsignal" -> "(*runtime.sigctxt).sigpc"
  "runtime.sighandler" -> "runtime.fatalsignal"
  "runtime.sighandler" -> "runtime.gotraceback"
  "runtime.sighandler" -> "runtime.goroutineheader"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigpc"
  "runtime.sighandler" -> "(*runtime.sigctxt).sigsp"
  "runtime.sighandler" -> "(*runtime.sigctxt).siglr"
  "runtime.tracebacktrap" -> "(runtime.guintptr).ptr"
  "runtime.tracebacktrap" -> "runtime.traceback1"
  "runtime.tracebacktrap" -> "runtime.traceback1"
  "runtime.sighandler" -> "runtime.tracebacktrap"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.sighandler" -> "runtime.goroutineheader"
  "runtime.sighandler" -> "runtime.traceback"
  "(*runtime.sigctxt).r0" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r0"
  "(*runtime.sigctxt).r1" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r1"
  "(*runtime.sigctxt).r2" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r2"
  "(*runtime.sigctxt).r3" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r3"
  "(*runtime.sigctxt).r4" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r4"
  "(*runtime.sigctxt).r5" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r5"
  "(*runtime.sigctxt).r6" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r6"
  "(*runtime.sigctxt).r7" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r7"
  "(*runtime.sigctxt).r8" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r8"
  "(*runtime.sigctxt).r9" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r9"
  "(*runtime.sigctxt).r10" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r10"
  "(*runtime.sigctxt).r11" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r11"
  "(*runtime.sigctxt).r12" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r12"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r13"
  "(*runtime.sigctxt).r14" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r14"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r15"
  "(*runtime.sigctxt).r16" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r16"
  "(*runtime.sigctxt).r17" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r17"
  "(*runtime.sigctxt).r18" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r18"
  "(*runtime.sigctxt).r19" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r19"
  "(*runtime.sigctxt).r20" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r20"
  "(*runtime.sigctxt).r21" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r21"
  "(*runtime.sigctxt).r22" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r22"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r23"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r24"
  "(*runtime.sigctxt).r25" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r25"
  "(*runtime.sigctxt).r26" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r26"
  "(*runtime.sigctxt).r27" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r27"
  "(*runtime.sigctxt).r28" -> "(*runtime.sigctxt).regs"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r28"
  "runtime.dumpregs" -> "(*runtime.sigctxt).r29"
  "runtime.dumpregs" -> "(*runtime.sigctxt).lr"
  "runtime.dumpregs" -> "(*runtime.sigctxt).sp"
  "runtime.dumpregs" -> "(*runtime.sigctxt).pc"
  "runtime.dumpregs" -> "(*runtime.sigctxt).fault"
  "runtime.sighandler" -> "runtime.dumpregs"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.sighandler" -> "runtime.readgstatus"
  "runtime.sighandler" -> "runtime.tracebackothers"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Int32).CompareAndSwap"
  "runtime.sighandler" -> "runtime.printDebugLog"
  "runtime.sighandler" -> "runtime.exit"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.sighandler" -> "runtime.mcount"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Uint32).Load"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Int32).Add"
  "runtime.sighandler" -> "runtime.raiseproc"
  "runtime.sighandler" -> "runtime.printDebugLog"
  "runtime.sighandler" -> "runtime.crash"
  "runtime.sighandler" -> "runtime.usleep"
  "runtime.sighandler" -> "runtime.usleep"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Int32).Load"
  "runtime.sighandler" -> "runtime.mcount"
  "runtime.sighandler" -> "(*runtime/internal/atomic.Uint32).Load"
  "(reflect.Value).Call" -> "runtime.sighandler"
  "(reflect.Value).Call" -> "runtime.cgoSigtramp"
  "(reflect.Value).Call" -> "runtime.sigtramp"
  "(reflect.Value).Call" -> "runtime.tracebackHexdump$1"
  "(reflect.Value).Call" -> "runtime.forEachP$1"
  "(reflect.Value).Call" -> "runtime.gcMarkTermination$1"
  "(reflect.Value).Call" -> "runtime.gcMarkTermination$2"
  "(reflect.Value).Call" -> "runtime.gcControllerCommit"
  "(reflect.Value).Call" -> "runtime.gcMarkTermination$3"
  "(reflect.Value).Call" -> "runtime.freeStackSpans"
  "(reflect.Value).Call" -> "runtime.gcMarkTermination$4"
  "(reflect.Value).Call" -> "runtime.gcMarkTermination$5"
  "(reflect.Value).Call" -> "runtime.exitsyscallfast$1"
  "(reflect.Value).Call" -> "runtime.allocm$1"
  "(reflect.Value).Call" -> "runtime.mstart"
  "(reflect.Value).Call" -> "runtime.getempty$1"
  "(reflect.Value).Call" -> "(*runtime.p).destroy$1"
  "(reflect.Value).Call" -> "periph.io/x/host/v3/pmem.isWSL$1"
  "(reflect.Value).Call" -> "log.Printf$1"
  "(reflect.Value).Call" -> "runtime.printCgoTraceback$1"
  "(reflect.Value).Call" -> "(*runtime.pageAlloc).sysGrow$2"
  "(reflect.Value).Call" -> "(*compress/flate.compressor).store"
  "(reflect.Value).Call" -> "(*compress/flate.compressor).fillStore"
  "(reflect.Value).Call" -> "(*compress/flate.compressor).storeHuff"
  "(reflect.Value).Call" -> "(*compress/flate.decompressor).copyData"
  "(reflect.Value).Call" -> "(*compress/flate.compressor).encSpeed"
  "(reflect.Value).Call" -> "(*compress/flate.compressor).fillDeflate"
  "(reflect.Value).Call" -> "(*compress/flate.compressor).deflate"
  "(reflect.Value).Call" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat0$1"
  "(reflect.Value).Call" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat4$1"
  "(reflect.Value).Call" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat6$1"
  "(reflect.Value).Call" -> "(*golang.org/x/image/font/sfnt.Font).makeCachedGlyphIndexFormat12$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat1$1"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1" -> "sort.Search"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1" -> "golang.org/x/image/font/sfnt.u16"
  "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat1$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1"
  "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1" -> "golang.org/x/image/font/sfnt.u16"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1"
  "(reflect.Value).Call" -> "(*sync/atomic.Uint64).Load"
  "(reflect.Value).Call" -> "runtime.gcAssistAlloc$1"
  "(reflect.Value).Call" -> "(*runtime.mheap).alloc$1"
  "(reflect.Value).Call" -> "runtime.mProf_Malloc$1"
  "(reflect.Value).Call" -> "runtime.goschedguarded_m"
  "(reflect.Value).Call" -> "encoding/json.stateInStringEscU12"
  "(reflect.Value).Call" -> "(encoding/json.condAddrEncoder).encode"
  "(reflect.Value).Call" -> "(encoding/json.structEncoder).encode"
  "(reflect.Value).Call" -> "(encoding/json.mapEncoder).encode"
  "(reflect.Value).Call" -> "(encoding/json.sliceEncoder).encode"
  "(reflect.Value).Call" -> "encoding/json.encodeByteSlice"
  "(reflect.Value).Call" -> "(encoding/json.arrayEncoder).encode"
  "(reflect.Value).Call" -> "(encoding/json.ptrEncoder).encode"
  "(reflect.Value).Call" -> "runtime.mmap$1"
  "(reflect.Value).Call" -> "(*runtime.traceMap).put$1"
  "(reflect.Value).Call" -> "runtime.fatal$1"
  "(reflect.Value).Call" -> "runtime.runtimer"
  "(reflect.Value).Call" -> "(runtime.traceWriter).refill$1"
  "(reflect.Value).Call" -> "runtime.sigaction$1"
  "(reflect.Value).Call" -> "runtime.pollWork"
  "(reflect.Value).Call" -> "runtime.pollFractionalWorkerExit"
  "(reflect.Value).Call" -> "runtime.gcMarkTermination$4$1"
  "(reflect.Value).Call" -> "(*runtime.mspan).setUserArenaChunkToFault$1"
  "(reflect.Value).Call" -> "runtime.exitsyscallfast_reacquired$1"
  "(reflect.Value).Call" -> "(*runtime.traceStringTable).put$1"
  "(reflect.Value).Call" -> "(*runtime.rwmutex).rlock$1"
  "(reflect.Value).Call" -> "runtime.traceThreadDestroy$1"
  "(reflect.Value).Call" -> "runtime.malg$1"
  "(reflect.Value).Call" -> "runtime.clone"
  "(reflect.Value).Call" -> "runtime.newosproc$1"
  "(reflect.Value).Call" -> "runtime.allocmcache$1"
  "(reflect.Value).Call" -> "runtime.freemcache$1"
  "(reflect.Value).Call" -> "runtime.traceback2$1"
  "(reflect.Value).Call" -> "compress/flate.bulkHash4"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedCoverageList$1$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedCoverageRange$1$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat1$1"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1"
  "(reflect.Value).Call" -> "runtime.reentersyscall$1"
  "(reflect.Value).Call" -> "runtime.reentersyscall$2"
  "(reflect.Value).Call" -> "runtime.entersyscall_sysmon"
  "(reflect.Value).Call" -> "runtime.runSafePointFn"
  "(reflect.Value).Call" -> "runtime.entersyscall_gcwait"
  "(reflect.Value).Call" -> "encoding/json.stateInStringEscU123"
  "(reflect.Value).Call" -> "(*compress/flate.decompressor).nextBlock"
  "(reflect.Value).Call" -> "(*runtime.pageAlloc).sysGrow$1"
  "(reflect.Value).Call" -> "runtime._VDSO"
  "(reflect.Value).Call" -> "runtime._ExternalCode"
  "(reflect.Value).Call" -> "runtime._GC"
  "(reflect.Value).Call" -> "runtime._System"
  "(reflect.Value).Call" -> "runtime.sigpanic"
  "(reflect.Value).Call" -> "runtime.sysSigaction$1"
  "(reflect.Value).Call" -> "runtime.markrootFreeGStacks"
  "(reflect.Value).Call" -> "runtime.markroot$1"
  "(reflect.Value).Call" -> "runtime.printArgs$1"
  "(reflect.Value).Call" -> "runtime.printArgs$2"
  "(reflect.Value).Call" -> "runtime.printArgs$3"
  "(reflect.Value).Call" -> "golang.org/x/image/font/sfnt.makeCachedClassLookupFormat2$1$1"
  "(reflect.Value).Call" -> "(*runtime.mheap).allocSpan$1"
  "(reflect.Value).Call" -> "(encoding/json.mapEncoder).encode$1"
  "(reflect.Value).Call" -> "compress/flate.fixedHuffmanDecoderInit$1"
  "(reflect.Value).Call" -> "runtime.munmap$1"
  "(reflect.Value).Call" -> "runtime.gcMarkRootCheck$1"
  "(reflect.Value).Call" -> "runtime.freeSomeWbufs$1"
  "(reflect.Value).Call" -> "(*runtime.pageAlloc).find$1"
  "(reflect.Value).Call" -> "(*runtime.pageAlloc).scavenge$1"
  "(reflect.Value).Call" -> "runtime._LostExternalCode"
  "(reflect.Value).Call" -> "runtime._LostSIGPROFDuringAtomic64"
  "(reflect.Value).Call" -> "(*compress/flate.decompressor).huffmanBlock"
  "(reflect.Value).Call" -> "runtime.scanConservative$1"
  "(*bufio.Writer).WriteByte" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteByte" -> "(*bufio.Writer).Flush"
  "(*image/jpeg.encoder).writeByte" -> "(*bufio.Writer).WriteByte"
  "(*image/jpeg.encoder).emit" -> "(*image/jpeg.encoder).writeByte"
  "(*image/jpeg.encoder).emit" -> "(*image/jpeg.encoder).writeByte"
  "github.com/stefan-muehlebach/gg.SavePNG" -> "os.Create"
  "github.com/stefan-muehlebach/gg.SavePNG" -> "(*os.File).Close"
  "github.com/stefan-muehlebach/gg.SavePNG" -> "image/png.Encode"
  "(*github.com/stefan-muehlebach/gg.Context).SavePNG" -> "github.com/stefan-muehlebach/gg.SavePNG"
  "(github.com/stefan-muehlebach/gg/color.RGBAF).Alpha" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*internal/abi.Type).StructType" -> "(*internal/abi.Type).Kind"
  "(internal/reflectlite.rtype).NumField" -> "(*internal/abi.Type).StructType"
  "(*reflect.MapIter).Reset" -> "(reflect.Value).IsValid"
  "(*reflect.MapIter).Reset" -> "(reflect.flag).mustBe"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SelectedLineColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*reflect.rtype).Method" -> "(*reflect.rtype).Kind"
  "(*reflect.interfaceType).Method" -> "(*reflect.interfaceType).nameOff"
  "(*reflect.interfaceType).Method" -> "(internal/abi.Name).Name"
  "(*reflect.interfaceType).Method" -> "(internal/abi.Name).IsExported"
  "(*reflect.interfaceType).Method" -> "reflect.pkgPath"
  "(*reflect.interfaceType).Method" -> "(*reflect.interfaceType).typeOff"
  "(*reflect.interfaceType).Method" -> "reflect.toType"
  "(*reflect.interfaceType).Method" -> "(internal/abi.Name).Name"
  "(*reflect.rtype).Method" -> "(*reflect.interfaceType).Method"
  "(*reflect.rtype).Method" -> "(*reflect.rtype).exportedMethods"
  "(*reflect.rtype).Method" -> "(*reflect.rtype).nameOff"
  "(*reflect.rtype).Method" -> "(internal/abi.Name).Name"
  "(*reflect.rtype).Method" -> "(*reflect.rtype).typeOff"
  "(*reflect.rtype).Method" -> "(*internal/abi.FuncType).NumIn"
  "(*reflect.rtype).Method" -> "(*internal/abi.FuncType).InSlice"
  "(*reflect.rtype).Method" -> "reflect.toRType"
  "(*reflect.rtype).Method" -> "(*internal/abi.FuncType).NumOut"
  "(*reflect.rtype).Method" -> "(*internal/abi.FuncType).OutSlice"
  "(*reflect.rtype).Method" -> "reflect.toRType"
  "(*reflect.rtype).Method" -> "(*internal/abi.FuncType).IsVariadic"
  "reflect.FuncOf" -> "(*reflect.rtype).Kind"
  "reflect.FuncOf" -> "reflect.initFuncTypes"
  "reflect.FuncOf" -> "reflect.New"
  "reflect.FuncOf" -> "(reflect.Value).Elem"
  "reflect.FuncOf" -> "(reflect.Value).Field"
  "reflect.FuncOf" -> "(reflect.Value).Addr"
  "reflect.FuncOf" -> "(reflect.Value).Pointer"
  "reflect.FuncOf" -> "(reflect.Value).Field"
  "reflect.FuncOf" -> "(reflect.Value).Addr"
  "reflect.FuncOf" -> "(reflect.Value).Pointer"
  "reflect.FuncOf" -> "reflect.fnv1"
  "reflect.FuncOf" -> "reflect.fnv1"
  "reflect.FuncOf" -> "reflect.fnv1"
  "reflect.FuncOf" -> "reflect.fnv1"
  "reflect.FuncOf" -> "(*sync.Map).Load"
  "reflect.FuncOf" -> "(*sync.Mutex).Lock"
  "reflect.FuncOf" -> "(*sync.Mutex).Unlock"
  "reflect.FuncOf" -> "(*sync.Map).Load"
  "reflect.FuncOf" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.FuncOf" -> "reflect.toRType"
  "reflect.funcStr" -> "(*internal/abi.FuncType).InSlice"
  "reflect.funcStr" -> "(*internal/abi.FuncType).OutSlice"
  "reflect.funcStr" -> "(*internal/abi.FuncType).IsVariadic"
  "reflect.funcStr" -> "reflect.stringFor"
  "reflect.funcStr" -> "reflect.stringFor"
  "reflect.funcStr" -> "reflect.stringFor"
  "reflect.FuncOf" -> "reflect.funcStr"
  "reflect.FuncOf" -> "reflect.typesByString"
  "reflect.FuncOf" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.FuncOf" -> "reflect.toRType"
  "reflect.FuncOf" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.FuncOf" -> "reflect.newName"
  "reflect.FuncOf" -> "reflect.resolveReflectName"
  "reflect.FuncOf" -> "reflect.FuncOf$1"
  "reflect.FuncOf" -> "reflect.FuncOf$1"
  "(*reflect.rtype).Method" -> "reflect.FuncOf"
  "(*reflect.rtype).Method" -> "(*reflect.rtype).textOff"
  "(github.com/stefan-muehlebach/gg/color.HSV).Dark" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*github.com/stefan-muehlebach/adagui.Line).P1" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(*github.com/stefan-muehlebach/adagui.Line).P1" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(github.com/stefan-muehlebach/gg/geom.Point).Angle" -> "math.Atan2"
  "github.com/stefan-muehlebach/gg/geom.init" -> "fmt.init"
  "github.com/stefan-muehlebach/gg/geom.init" -> "math.init"
  "github.com/stefan-muehlebach/gg/geom.init" -> "golang.org/x/image/math/fixed.init"
  "github.com/stefan-muehlebach/gg/geom.init" -> "image.init"
  "(*sync/atomic.Pointer[internal/godebug.value]).CompareAndSwap[internal/godebug.value]" -> "sync/atomic.CompareAndSwapPointer"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).haltDMA"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "(*periph.io/x/host/v3/bcm283x.clock).set"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "fmt.Errorf"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "periph.io/x/host/v3/bcm283x.allocateCB"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "(*periph.io/x/host/v3/pmem.Slice).Uint32"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "periph.io/x/host/v3/bcm283x.physToBus"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "periph.io/x/host/v3/bcm283x.physToUncachedPhys"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "periph.io/x/host/v3/bcm283x.physToBus"
  "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock" -> "periph.io/x/host/v3/bcm283x.physToUncachedPhys"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.pickChannel" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).isAvailable"
  "periph.io/x/host/v3/bcm283x.pickChannel" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).reset"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "periph.io/x/host/v3/bcm283x.pickChannel"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).startIO"
  "periph.io/x/host/v3/bcm283x.setPWMClockSource" -> "periph.io/x/host/v3/bcm283x.dmaWritePWMFIFO"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "periph.io/x/host/v3/bcm283x.setPWMClockSource"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "periph.io/x/host/v3/bcm283x.allocateCB"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/pmem.Slice).Uint32"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "periph.io/x/host/v3/bcm283x.pickChannel"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.startPWMbyDMA" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).startIO"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "periph.io/x/host/v3/bcm283x.startPWMbyDMA"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "periph.io/x/host/v3/bcm283x.setPWMClockSource"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "(*periph.io/x/host/v3/bcm283x.Pin).PWM" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "(*reflect.rtype).ConvertibleTo" -> "(*reflect.rtype).common"
  "(*reflect.rtype).ConvertibleTo" -> "(*reflect.rtype).common"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "reflect.pkgPathFor"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "reflect.pkgPathFor"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "(*internal/abi.Type).Elem"
  "reflect.convertOp" -> "reflect.specialChannelAssignability"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "reflect.implements"
  "reflect.convertOp" -> "reflect.elem"
  "reflect.convertOp" -> "reflect.elem"
  "reflect.convertOp" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.convertOp" -> "reflect.nameFor"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "reflect.convertOp" -> "reflect.nameFor"
  "reflect.convertOp" -> "(*internal/abi.Type).Kind"
  "(*reflect.rtype).ConvertibleTo" -> "reflect.convertOp"
  "(reflect.Value).Method" -> "(reflect.Value).typ"
  "(reflect.Value).Method" -> "(reflect.Value).typ"
  "(reflect.Value).Method" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).Method" -> "(reflect.Value).typ"
  "(reflect.Value).Method" -> "reflect.toRType"
  "(reflect.Value).Method" -> "(*reflect.rtype).NumMethod"
  "(reflect.Value).Method" -> "(reflect.flag).ro"
  "(reflect.Value).Method" -> "(reflect.Value).typ"
  "(reflect.Value).Method" -> "(reflect.Value).IsNil"
  "(*periph.io/x/host/v3/allwinner.Pin).Function" -> "(*periph.io/x/host/v3/allwinner.Pin).Func"
  "(time.Time).Truncate" -> "(*time.Time).stripMono"
  "(time.Time).Truncate" -> "time.div"
  "(time.Time).Truncate" -> "(time.Time).Add"
  "(*time.Ticker).Stop" -> "time.stopTimer"
  "(*periph.io/x/host/v3/allwinner.PinPL).Function" -> "(*periph.io/x/host/v3/allwinner.PinPL).Func"
  "golang.org/x/text/transform.NewWriter" -> "(golang.org/x/text/transform.NopResetter).Reset"
  "(*golang.org/x/text/encoding.Encoder).Writer" -> "golang.org/x/text/transform.NewWriter"
  "(*periph.io/x/host/v3/allwinner.Pin).Read" -> "(*periph.io/x/host/v3/sysfs.Pin).Read"
  "(*hash/crc32.digest).Sum" -> "(*hash/crc32.digest).Sum32"
  "github.com/stefan-muehlebach/gg/geom.Rotate" -> "math.Sin"
  "github.com/stefan-muehlebach/gg/geom.Rotate" -> "math.Cos"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).Rotate" -> "github.com/stefan-muehlebach/gg/geom.Rotate"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).Rotate" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetPushedBarColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Len"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Len"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).ChanDir"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalType" -> "internal/reflectlite.toRType"
  "internal/reflectlite.haveIdenticalType" -> "(internal/reflectlite.rtype).Name"
  "internal/reflectlite.haveIdenticalType" -> "internal/reflectlite.toRType"
  "internal/reflectlite.haveIdenticalType" -> "(internal/reflectlite.rtype).Name"
  "internal/reflectlite.haveIdenticalType" -> "internal/reflectlite.haveIdenticalUnderlyingType"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.haveIdenticalType" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).ChanDir"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).ChanDir"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).NumIn"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).In"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).In"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).NumOut"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).Out"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.FuncType).Out"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Key"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Key"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.Type).Elem"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Name"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "internal/reflectlite.haveIdenticalType"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Tag"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(internal/abi.Name).Tag"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.StructField).Embedded"
  "internal/reflectlite.haveIdenticalUnderlyingType" -> "(*internal/abi.StructField).Embedded"
  "command-line-arguments.init" -> "fmt.init"
  "command-line-arguments.init" -> "flag.init"
  "command-line-arguments.init" -> "github.com/stefan-muehlebach/adatft.init"
  "github.com/stefan-muehlebach/adagui.init" -> "log.init"
  "github.com/stefan-muehlebach/adagui.init" -> "image/color.init"
  "github.com/stefan-muehlebach/adagui.init" -> "time.init"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/gg/geom.init"
  "github.com/stefan-muehlebach/adagui.init" -> "strconv.init"
  "github.com/stefan-muehlebach/adagui.init" -> "container/list.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "log.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "sync.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "bytes.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "errors.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "reflect.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "fmt.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "strconv.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "strings.init"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "errors.New"
  "github.com/stefan-muehlebach/adagui/binding.init#1" -> "log.SetFlags"
  "github.com/stefan-muehlebach/adagui/binding.init#1" -> "log.SetPrefix"
  "github.com/stefan-muehlebach/adagui/binding.init" -> "github.com/stefan-muehlebach/adagui/binding.init#1"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/binding.init"
  "github.com/stefan-muehlebach/adagui/touch.init" -> "fmt.init"
  "github.com/stefan-muehlebach/adagui/touch.init" -> "time.init"
  "github.com/stefan-muehlebach/adagui/touch.init" -> "github.com/stefan-muehlebach/gg/geom.init"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/touch.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "embed.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "encoding/json.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "errors.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "fmt.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "path/filepath.init"
  "github.com/stefan-muehlebach/gg/color.init" -> "image/color.init"
  "github.com/stefan-muehlebach/gg/color.init" -> "log.init"
  "github.com/stefan-muehlebach/gg/color.init" -> "math.init"
  "github.com/stefan-muehlebach/gg/color.init" -> "image/color.ModelFunc"
  "github.com/stefan-muehlebach/gg/color.init" -> "image/color.ModelFunc"
  "github.com/stefan-muehlebach/gg/color.init" -> "image/color.ModelFunc"
  "github.com/stefan-muehlebach/gg/color.init" -> "image/color.ModelFunc"
  "github.com/stefan-muehlebach/gg/color.init" -> "image/color.ModelFunc"
  "github.com/stefan-muehlebach/adagui/props.init" -> "github.com/stefan-muehlebach/gg/color.init"
  "github.com/stefan-muehlebach/gg/colornames.init" -> "errors.init"
  "github.com/stefan-muehlebach/gg/colornames.init" -> "github.com/stefan-muehlebach/gg/color.init"
  "github.com/stefan-muehlebach/gg/colornames.init" -> "math/rand.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "github.com/stefan-muehlebach/gg/colornames.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "github.com/stefan-muehlebach/gg/fonts.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "log.init"
  "github.com/stefan-muehlebach/adagui/props.init" -> "os.init"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile" -> "path/filepath.Join"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile" -> "(embed.FS).ReadFile"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile" -> "log.Fatal"
  "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromData"
  "github.com/stefan-muehlebach/adagui/props.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.init"
  "github.com/stefan-muehlebach/gg.init" -> "github.com/stefan-muehlebach/gg/geom.init"
  "github.com/stefan-muehlebach/gg.init" -> "math.init"
  "github.com/stefan-muehlebach/gg.init" -> "bytes.init"
  "github.com/stefan-muehlebach/gg.init" -> "encoding/base64.init"
  "github.com/stefan-muehlebach/gg.init" -> "errors.init"
  "github.com/stefan-muehlebach/gg.init" -> "fmt.init"
  "github.com/stefan-muehlebach/gg.init" -> "image.init"
  "github.com/stefan-muehlebach/gg.init" -> "image/color.init"
  "image/jpeg.init" -> "io.init"
  "image/jpeg.init" -> "image.init"
  "image/jpeg.init" -> "image/color.init"
  "image/jpeg.init" -> "image/internal/imageutil.init"
  "image/jpeg.init" -> "bufio.init"
  "image/jpeg.init" -> "errors.init"
  "image.RegisterFormat" -> "(*sync.Mutex).Lock"
  "image.RegisterFormat" -> "(*sync/atomic.Value).Load"
  "(*sync/atomic.Value).Store" -> "sync/atomic.LoadPointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.runtime_procPin"
  "(*sync/atomic.Value).Store" -> "sync/atomic.CompareAndSwapPointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).Store" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.StorePointer"
  "(*sync/atomic.Value).Store" -> "sync/atomic.runtime_procUnpin"
  "(*sync/atomic.Value).Store" -> "sync/atomic.StorePointer"
  "image.RegisterFormat" -> "(*sync/atomic.Value).Store"
  "image.RegisterFormat" -> "(*sync.Mutex).Unlock"
  "image/jpeg.init#1" -> "image.RegisterFormat"
  "image/jpeg.init" -> "image/jpeg.init#1"
  "image/jpeg.init#2" -> "(*image/jpeg.huffmanLUT).init"
  "image/jpeg.init" -> "image/jpeg.init#2"
  "github.com/stefan-muehlebach/gg.init" -> "image/jpeg.init"
  "compress/zlib.init" -> "bufio.init"
  "compress/zlib.init" -> "compress/flate.init"
  "compress/zlib.init" -> "encoding/binary.init"
  "compress/zlib.init" -> "errors.init"
  "compress/zlib.init" -> "hash.init"
  "hash/adler32.init" -> "errors.init"
  "hash/adler32.init" -> "hash.init"
  "compress/zlib.init" -> "hash/adler32.init"
  "compress/zlib.init" -> "io.init"
  "compress/zlib.init" -> "fmt.init"
  "compress/zlib.init" -> "errors.New"
  "compress/zlib.init" -> "errors.New"
  "compress/zlib.init" -> "errors.New"
  "image/png.init" -> "compress/zlib.init"
  "image/png.init" -> "encoding/binary.init"
  "image/png.init" -> "fmt.init"
  "image/png.init" -> "hash.init"
  "image/png.init" -> "hash/crc32.init"
  "image/png.init" -> "image.init"
  "image/png.init" -> "image/color.init"
  "image/png.init" -> "io.init"
  "image/png.init" -> "bufio.init"
  "image/png.init" -> "strconv.init"
  "image/png.init#1" -> "image.RegisterFormat"
  "image/png.init" -> "image/png.init#1"
  "github.com/stefan-muehlebach/gg.init" -> "image/png.init"
  "github.com/stefan-muehlebach/gg.init" -> "io.init"
  "github.com/stefan-muehlebach/gg.init" -> "log.init"
  "github.com/stefan-muehlebach/gg.init" -> "strings.init"
  "github.com/golang/freetype/raster.init" -> "fmt.init"
  "github.com/golang/freetype/raster.init" -> "math.init"
  "github.com/golang/freetype/raster.init" -> "golang.org/x/image/math/fixed.init"
  "github.com/golang/freetype/raster.init" -> "image.init"
  "github.com/golang/freetype/raster.init" -> "image/color.init"
  "github.com/golang/freetype/raster.init" -> "image/draw.init"
  "github.com/golang/freetype/raster.init" -> "strconv.init"
  "github.com/stefan-muehlebach/gg.init" -> "github.com/golang/freetype/raster.init"
  "golang.org/x/image/draw.init" -> "image.init"
  "golang.org/x/image/draw.init" -> "image/draw.init"
  "golang.org/x/image/draw.init" -> "image/color.init"
  "golang.org/x/image/draw.init" -> "math.init"
  "golang.org/x/image/draw.init" -> "golang.org/x/image/math/f64.init"
  "golang.org/x/image/draw.init" -> "sync.init"
  "github.com/stefan-muehlebach/gg.init" -> "golang.org/x/image/draw.init"
  "github.com/stefan-muehlebach/gg.init" -> "golang.org/x/image/font.init"
  "golang.org/x/image/font/basicfont.init" -> "image.init"
  "golang.org/x/image/font/basicfont.init" -> "golang.org/x/image/font.init"
  "golang.org/x/image/font/basicfont.init" -> "golang.org/x/image/math/fixed.init"
  "github.com/stefan-muehlebach/gg.init" -> "golang.org/x/image/font/basicfont.init"
  "github.com/stefan-muehlebach/gg.init" -> "golang.org/x/image/math/f64.init"
  "github.com/stefan-muehlebach/gg.init" -> "sort.init"
  "github.com/stefan-muehlebach/gg.init" -> "golang.org/x/image/math/fixed.init"
  "github.com/stefan-muehlebach/gg.init" -> "image/draw.init"
  "io/ioutil.init" -> "io.init"
  "io/ioutil.init" -> "io/fs.init"
  "io/ioutil.init" -> "os.init"
  "io/ioutil.init" -> "sort.init"
  "github.com/stefan-muehlebach/gg.init" -> "io/ioutil.init"
  "github.com/stefan-muehlebach/gg.init" -> "os.init"
  "github.com/golang/freetype/truetype.init" -> "image.init"
  "github.com/golang/freetype/truetype.init" -> "math.init"
  "github.com/golang/freetype/truetype.init" -> "github.com/golang/freetype/raster.init"
  "github.com/golang/freetype/truetype.init" -> "golang.org/x/image/font.init"
  "github.com/golang/freetype/truetype.init" -> "golang.org/x/image/math/fixed.init"
  "github.com/golang/freetype/truetype.init" -> "errors.init"
  "github.com/golang/freetype/truetype.init" -> "fmt.init"
  "github.com/stefan-muehlebach/gg.init" -> "github.com/golang/freetype/truetype.init"
  "github.com/stefan-muehlebach/gg.init" -> "unicode.init"
  "github.com/stefan-muehlebach/gg.init" -> "github.com/stefan-muehlebach/gg.NewSolidPattern"
  "github.com/stefan-muehlebach/gg.init" -> "github.com/stefan-muehlebach/gg.NewSolidPattern"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/gg.init"
  "github.com/stefan-muehlebach/adagui.init" -> "golang.org/x/image/draw.init"
  "github.com/stefan-muehlebach/adagui.init" -> "image.init"
  "github.com/stefan-muehlebach/adagui.init" -> "math.init"
  "github.com/stefan-muehlebach/adagui.init" -> "flag.init"
  "github.com/stefan-muehlebach/adagui.init" -> "fmt.init"
  "github.com/stefan-muehlebach/adagui.init" -> "os.init"
  "github.com/stefan-muehlebach/adagui.init" -> "path.init"
  "github.com/stefan-muehlebach/adagui.init" -> "runtime.init"
  "runtime/pprof.init" -> "encoding/binary.init"
  "runtime/pprof.init" -> "errors.init"
  "runtime/pprof.init" -> "fmt.init"
  "runtime/pprof.init" -> "os.init"
  "runtime/pprof.init" -> "context.init"
  "runtime/pprof.init" -> "sort.init"
  "runtime/pprof.init" -> "strings.init"
  "runtime/pprof.init" -> "unsafe.init"
  "runtime/pprof.init" -> "bufio.init"
  "runtime/pprof.init" -> "internal/abi.init"
  "runtime/pprof.init" -> "io.init"
  "runtime/pprof.init" -> "runtime.init"
  "runtime/pprof.init" -> "sync.init"
  "runtime/pprof.init" -> "text/tabwriter.init"
  "runtime/pprof.init" -> "time.init"
  "runtime/pprof.init" -> "syscall.init"
  "runtime/pprof.init" -> "bytes.init"
  "runtime/pprof.init" -> "compress/gzip.init"
  "runtime/pprof.init" -> "strconv.init"
  "runtime/pprof.init" -> "math.init"
  "runtime/pprof.init" -> "errors.New"
  "runtime/pprof.init" -> "errors.New"
  "github.com/stefan-muehlebach/adagui.init" -> "runtime/pprof.init"
  "runtime/trace.init" -> "context.init"
  "runtime/trace.init" -> "fmt.init"
  "runtime/trace.init" -> "sync/atomic.init"
  "runtime/trace.init" -> "unsafe.init"
  "runtime/trace.init" -> "io.init"
  "runtime/trace.init" -> "runtime.init"
  "runtime/trace.init" -> "sync.init"
  "github.com/stefan-muehlebach/adagui.init" -> "runtime/trace.init"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adatft.init"
  "github.com/stefan-muehlebach/adagui.init" -> "sync.init"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/gg/fonts.init"
  "github.com/stefan-muehlebach/adagui.init" -> "golang.org/x/image/font.init"
  "github.com/stefan-muehlebach/adagui.init" -> "image/png.init"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/gg/color.init"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "github.com/stefan-muehlebach/adagui.init#1" -> "path.Base"
  "github.com/stefan-muehlebach/adagui.init#1" -> "fmt.Sprintf"
  "github.com/stefan-muehlebach/adagui.init#1" -> "path.Base"
  "github.com/stefan-muehlebach/adagui.init#1" -> "fmt.Sprintf"
  "github.com/stefan-muehlebach/adagui.init#1" -> "path.Base"
  "github.com/stefan-muehlebach/adagui.init#1" -> "fmt.Sprintf"
  "flag.BoolVar" -> "flag.newBoolValue"
  "(*flag.FlagSet).Var" -> "strings.HasPrefix"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).Var" -> "strings.Contains"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).Var" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).String"
  "(*flag.FlagSet).Var" -> "(periph.io/x/conn/v3/physic.Frequency).String"
  "(*flag.FlagSet).Var" -> "(github.com/stefan-muehlebach/gg/geom.Point).String"
  "(*flag.FlagSet).Var" -> "(periph.io/x/conn/v3/physic.ElectricCurrent).String"
  "(*flag.FlagSet).Var" -> "(*flag.boolValue).String"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).Var" -> "(*flag.FlagSet).sprintf"
  "(*flag.FlagSet).Var" -> "fmt.Sprintf"
  "flag.BoolVar" -> "(*flag.FlagSet).Var"
  "github.com/stefan-muehlebach/adagui.init#1" -> "flag.BoolVar"
  "github.com/stefan-muehlebach/adagui.init#1" -> "flag.BoolVar"
  "github.com/stefan-muehlebach/adagui.init#1" -> "flag.BoolVar"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui.init#1"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui.init#2"
  "github.com/stefan-muehlebach/adagui.init" -> "github.com/stefan-muehlebach/adagui/props.newProps"
  "command-line-arguments.init" -> "github.com/stefan-muehlebach/adagui.init"
  "command-line-arguments.init" -> "github.com/stefan-muehlebach/adagui/touch.init"
  "command-line-arguments.init" -> "github.com/stefan-muehlebach/adagui/props.init"
  "command-line-arguments.init" -> "github.com/stefan-muehlebach/gg/colornames.init"
  "command-line-arguments.init" -> "github.com/stefan-muehlebach/gg/geom.init"
  "command-line-arguments.init" -> "os.init"
  "os/signal.init" -> "context.init"
  "os/signal.init" -> "os.init"
  "os/signal.init" -> "sync.init"
  "os/signal.init" -> "syscall.init"
  "os/signal.init" -> "os/signal.init#1"
  "command-line-arguments.init" -> "os/signal.init"
  "(*time.Ticker).Reset" -> "time.when"
  "(*time.Ticker).Reset" -> "time.modTimer"
  "(time.Duration).Round" -> "time.lessThanHalf"
  "(time.Duration).Round" -> "time.lessThanHalf"
  "syscall.recvmsgRaw" -> "(*syscall.Iovec).SetLen"
  "syscall.recvmsg" -> "syscall.Syscall"
  "syscall.recvmsg" -> "syscall.errnoErr"
  "syscall.recvmsgRaw" -> "syscall.recvmsg"
  "syscall.GetsockoptInt" -> "syscall.getsockopt"
  "syscall.recvmsgRaw" -> "syscall.GetsockoptInt"
  "syscall.recvmsgRaw" -> "(*syscall.Msghdr).SetControllen"
  "syscall.recvmsgRaw" -> "(*syscall.Iovec).SetLen"
  "(*periph.io/x/host/v3/bcm283x.pcmMap).reset" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "(*periph.io/x/host/v3/sysfs.Pin).Function" -> "(*periph.io/x/host/v3/sysfs.Pin).Func"
  "syscall.Recvmsg" -> "syscall.recvmsgRaw"
  "syscall.Recvmsg" -> "syscall.anyToSockaddr"
  "(golang.org/x/image/draw.floydSteinberg).Draw" -> "(golang.org/x/image/draw.floydSteinberg).Draw"
  "(image/draw.Op).Draw" -> "image/draw.DrawMask"
  "(golang.org/x/image/draw.floydSteinberg).Draw" -> "(image/draw.Op).Draw"
  "(image/draw.floydSteinberg).Draw" -> "image/draw.clip"
  "(image/draw.floydSteinberg).Draw" -> "(image.Rectangle).Empty"
  "(image/draw.floydSteinberg).Draw" -> "image/draw.drawPaletted"
  "(golang.org/x/image/draw.floydSteinberg).Draw" -> "(image/draw.floydSteinberg).Draw"
  "(*github.com/stefan-muehlebach/adagui.Embed).Local2Parent" -> "(*github.com/stefan-muehlebach/adagui.Embed).Matrix"
  "(*github.com/stefan-muehlebach/adagui.Embed).Local2Parent" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Transform"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Local2Parent" -> "(*github.com/stefan-muehlebach/adagui.Embed).Local2Parent"
  "(github.com/stefan-muehlebach/gg/color.HSL).Interpolate" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*runtime/internal/atomic.Uint32).CompareAndSwapRelease" -> "runtime/internal/atomic.CasRel"
  "syscall.SetsockoptIPMreqn" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptIPMreqn" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptIPMreqn" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetsockoptIPMreqn" -> "syscall.SetsockoptIPMreqn"
  "(*internal/poll.FD).SetsockoptInet4Addr" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptInet4Addr" -> "(*internal/poll.FD).decref"
  "syscall.SetsockoptInet4Addr" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptInet4Addr" -> "syscall.SetsockoptInet4Addr"
  "(*reflect.rtype).IsVariadic" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).IsVariadic" -> "(*reflect.rtype).String"
  "(*reflect.rtype).IsVariadic" -> "(*internal/abi.FuncType).IsVariadic"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SelectedBorderWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*internal/poll.FD).WaitWrite" -> "(*internal/poll.pollDesc).waitWrite"
  "(reflect.Value).CanFloat" -> "(reflect.flag).kind"
  "(*os.File).setReadDeadline" -> "(*os.File).checkValid"
  "(*internal/poll.FD).SetReadDeadline" -> "internal/poll.setDeadlineImpl"
  "(*os.File).setReadDeadline" -> "(*internal/poll.FD).SetReadDeadline"
  "(*os.File).SetReadDeadline" -> "(*os.File).setReadDeadline"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetTextColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(reflect.Value).Comparable" -> "(reflect.Value).Kind"
  "(reflect.Value).Comparable" -> "(reflect.Value).Type"
  "(reflect.Value).Comparable" -> "(reflect.Value).Elem"
  "(reflect.Value).Comparable" -> "(reflect.Value).Comparable"
  "(reflect.Value).Comparable" -> "(reflect.Value).Type"
  "(reflect.Value).Comparable" -> "(reflect.Value).Type"
  "(reflect.Value).Comparable" -> "(reflect.Value).Index"
  "(reflect.Value).Comparable" -> "(reflect.Value).Comparable"
  "(reflect.Value).Comparable" -> "(reflect.Value).Type"
  "(reflect.Value).Comparable" -> "(reflect.Value).NumField"
  "(reflect.Value).Comparable" -> "(reflect.Value).Field"
  "(reflect.Value).Comparable" -> "(reflect.Value).Comparable"
  "(reflect.Value).Comparable" -> "(*reflect.rtype).Elem"
  "(reflect.Value).Comparable" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Comparable" -> "(*reflect.rtype).Comparable"
  "(reflect.Value).Comparable" -> "(*reflect.rtype).Len"
  "(reflect.Value).Comparable" -> "(*reflect.rtype).Comparable"
  "(*periph.io/x/host/v3/sysfs.I2C).SetSpeed" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.I2C).SetSpeed" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.I2C).SetSpeed" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.I2C).SetSpeed" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.I2C).SetSpeed" -> "periph.io/x/host/v3/bcm283x.setSpeed"
  "(*periph.io/x/host/v3/sysfs.I2C).SetSpeed" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "(*periph.io/x/host/v3/sysfs.spiConn).txPackets"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.spiConn).TxPackets" -> "fmt.Errorf"
  "(*internal/abi.Type).MapType" -> "(*internal/abi.Type).Kind"
  "(*image/jpeg.encoder).emitHuff" -> "(*image/jpeg.encoder).emit"
  "(*image/jpeg.encoder).emitHuffRLE" -> "(*image/jpeg.encoder).emitHuff"
  "(*image/jpeg.encoder).emitHuffRLE" -> "(*image/jpeg.encoder).emit"
  "(*strings.Builder).WriteByte" -> "(*strings.Builder).copyCheck"
  "(*periph.io/x/host/v3/sysfs.spiConn).MISO" -> "(*periph.io/x/host/v3/sysfs.spiConn).initPins"
  "(*image.RGBA64).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.RGBA64).SubImage" -> "(image.Rectangle).Empty"
  "(*image.RGBA64).SubImage" -> "(*image.RGBA64).PixOffset"
  "(*golang.org/x/image/font/sfnt.Font).GlyphName" -> "(*golang.org/x/image/font/sfnt.Font).NumGlyphs"
  "(*golang.org/x/image/font/sfnt.Font).GlyphName" -> "(*golang.org/x/image/font/sfnt.Font).glyphNameFormat10"
  "(*golang.org/x/image/font/sfnt.Font).glyphNameFormat20" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).glyphNameFormat20" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).glyphNameFormat20" -> "(*golang.org/x/image/font/sfnt.Font).NumGlyphs"
  "(*golang.org/x/image/font/sfnt.Font).glyphNameFormat20" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).GlyphName" -> "(*golang.org/x/image/font/sfnt.Font).glyphNameFormat20"
  "github.com/stefan-muehlebach/gg/geom.RotateAbout" -> "github.com/stefan-muehlebach/gg/geom.Translate"
  "github.com/stefan-muehlebach/gg/geom.RotateAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Rotate"
  "github.com/stefan-muehlebach/gg/geom.RotateAbout" -> "(github.com/stefan-muehlebach/gg/geom.Point).Neg"
  "github.com/stefan-muehlebach/gg/geom.RotateAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Translate"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).RotateAbout" -> "github.com/stefan-muehlebach/gg/geom.RotateAbout"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).RotateAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "(time.Time).UnixMicro" -> "(*time.Time).unixSec"
  "(time.Time).UnixMicro" -> "(*time.Time).nsec"
  "syscall.SetsockoptIPv6Mreq" -> "syscall.setsockopt"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/sysfs.Pin).SetFunc"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).In"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).In"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).In"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).In"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(periph.io/x/conn/v3/pin.Func).Generalize"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).Halt"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(periph.io/x/conn/v3/pin.Func).Generalize"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*periph.io/x/host/v3/bcm283x.Pin).SetFunc" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored" -> "(*github.com/stefan-muehlebach/gg.Context).MeasureString"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "image.NewUniform"
  "github.com/stefan-muehlebach/gg.fixp" -> "github.com/stefan-muehlebach/gg.fix"
  "github.com/stefan-muehlebach/gg.fixp" -> "github.com/stefan-muehlebach/gg.fix"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "github.com/stefan-muehlebach/gg.fixp"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(image.Rectangle).Sub"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Translate"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(golang.org/x/image/draw.nnInterpolator).Transform"
  "(*golang.org/x/image/font/basicfont.Face).Glyph" -> "(*golang.org/x/image/font/basicfont.Face).find"
  "(*golang.org/x/image/font/basicfont.Face).Glyph" -> "golang.org/x/image/math/fixed.I"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(*golang.org/x/image/font/basicfont.Face).Glyph"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(golang.org/x/image/draw.ablInterpolator).Transform"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(*golang.org/x/image/font/basicfont.Face).Kern"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(*github.com/stefan-muehlebach/gg.solidPattern).ColorAt"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(*github.com/golang/freetype/truetype.face).Kern"
  "(*github.com/golang/freetype/truetype.face).Glyph" -> "(*github.com/golang/freetype/truetype.face).index"
  "(*github.com/golang/freetype/truetype.face).rasterize" -> "(*github.com/golang/freetype/truetype.GlyphBuf).Load"
  "(*github.com/golang/freetype/truetype.face).rasterize" -> "(*github.com/golang/freetype/raster.Rasterizer).Clear"
  "(*github.com/golang/freetype/truetype.face).rasterize" -> "github.com/golang/freetype/truetype.clear"
  "(*github.com/golang/freetype/truetype.face).drawContour" -> "(*github.com/golang/freetype/raster.Rasterizer).Start"
  "(*github.com/golang/freetype/truetype.face).drawContour" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/truetype.face).drawContour" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "(*github.com/golang/freetype/truetype.face).drawContour" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "(*github.com/golang/freetype/truetype.face).drawContour" -> "(*github.com/golang/freetype/raster.Rasterizer).Add1"
  "(*github.com/golang/freetype/truetype.face).drawContour" -> "(*github.com/golang/freetype/raster.Rasterizer).Add2"
  "(*github.com/golang/freetype/truetype.face).rasterize" -> "(*github.com/golang/freetype/truetype.face).drawContour"
  "(*github.com/golang/freetype/truetype.face).rasterize" -> "(*github.com/golang/freetype/raster.Rasterizer).Rasterize"
  "(*github.com/golang/freetype/truetype.face).Glyph" -> "(*github.com/golang/freetype/truetype.face).rasterize"
  "(*github.com/stefan-muehlebach/gg.Context).drawString" -> "(*github.com/golang/freetype/truetype.face).Glyph"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored" -> "(*github.com/stefan-muehlebach/gg.Context).drawString"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored" -> "image.Rect"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored" -> "image.NewRGBA"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored" -> "(*github.com/stefan-muehlebach/gg.Context).drawString"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored" -> "golang.org/x/image/draw.DrawMask"
  "(reflect.Value).send" -> "(reflect.Value).typ"
  "(reflect.Value).send" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).send" -> "(reflect.Value).assignTo"
  "(reflect.Value).send" -> "(reflect.Value).pointer"
  "reflect.chansend" -> "reflect.contentEscapes"
  "reflect.chansend" -> "reflect.chansend0"
  "(reflect.Value).send" -> "reflect.chansend"
  "fmt.Println" -> "fmt.Fprintln"
  "(*image.Alpha).SetAlpha" -> "(image.Point).In"
  "(*image.Alpha).SetAlpha" -> "(*image.Alpha).PixOffset"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.pollDesc).prepareWrite"
  "syscall.SendmsgN" -> "(*syscall.SockaddrInet4).sockaddr"
  "syscall.SendmsgN" -> "(*syscall.SockaddrInet6).sockaddr"
  "syscall.sendmsgN" -> "(*syscall.Iovec).SetLen"
  "syscall.sendmsg" -> "syscall.Syscall"
  "syscall.sendmsg" -> "syscall.errnoErr"
  "syscall.sendmsgN" -> "syscall.sendmsg"
  "syscall.sendmsgN" -> "syscall.GetsockoptInt"
  "syscall.sendmsgN" -> "(*syscall.Msghdr).SetControllen"
  "syscall.sendmsgN" -> "(*syscall.Iovec).SetLen"
  "syscall.SendmsgN" -> "syscall.sendmsgN"
  "syscall.SendmsgN" -> "(*syscall.SockaddrNetlink).sockaddr"
  "syscall.SendmsgN" -> "(*syscall.SockaddrLinklayer).sockaddr"
  "syscall.SendmsgN" -> "(*syscall.SockaddrUnix).sockaddr"
  "(*internal/poll.FD).WriteMsg" -> "syscall.SendmsgN"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteMsg" -> "(*internal/poll.pollDesc).pollable"
  "periph.io/x/host/v3/bcm283x.setPCMClockSource" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.setPCMClockSource" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.setPCMClockSource" -> "(*periph.io/x/host/v3/bcm283x.clock).set"
  "(*periph.io/x/host/v3/allwinner.Pin).PWM" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).PWM" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetPushedBorderWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(*github.com/stefan-muehlebach/adagui.Embed).Rect" -> "(*github.com/stefan-muehlebach/adagui.Embed).ParentBounds"
  "(*runtime/internal/atomic.Uintptr).StoreRelease" -> "runtime/internal/atomic.StoreReluintptr"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetMenuBackgroundColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "periph.io/x/host/v3/bcm283x.runIO" -> "periph.io/x/host/v3/bcm283x.pickChannel"
  "periph.io/x/host/v3/bcm283x.runIO" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.runIO" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).reset"
  "periph.io/x/host/v3/bcm283x.runIO" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).startIO"
  "periph.io/x/host/v3/bcm283x.runIO" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "(*periph.io/x/host/v3/bcm283x.dmaChannel).wait" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.dmaChannel).wait" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.dmaChannel).wait" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.runIO" -> "(*periph.io/x/host/v3/bcm283x.dmaChannel).wait"
  "(*golang.org/x/image/font/sfnt.Font).GlyphAdvance" -> "(*golang.org/x/image/font/sfnt.Font).NumGlyphs"
  "(*golang.org/x/image/font/sfnt.Font).GlyphAdvance" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).GlyphAdvance" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).GlyphAdvance" -> "golang.org/x/image/font/sfnt.scale"
  "(*os.File).setDeadline" -> "(*os.File).checkValid"
  "(*internal/poll.FD).SetDeadline" -> "internal/poll.setDeadlineImpl"
  "(*os.File).setDeadline" -> "(*internal/poll.FD).SetDeadline"
  "(time.Time).MarshalBinary" -> "(time.Time).Location"
  "(time.Time).MarshalBinary" -> "(*time.Time).sec"
  "(time.Time).MarshalBinary" -> "(*time.Time).nsec"
  "(time.Time).Zone" -> "(*time.Time).unixSec"
  "(time.Time).Zone" -> "(*time.Location).lookup"
  "(time.Time).MarshalBinary" -> "(time.Time).Zone"
  "(time.Time).MarshalBinary" -> "errors.New"
  "(*internal/abi.Type).FuncType" -> "(*internal/abi.Type).Kind"
  "(internal/reflectlite.rtype).Out" -> "(*internal/abi.Type).FuncType"
  "(internal/reflectlite.rtype).Out" -> "(*internal/abi.FuncType).OutSlice"
  "(internal/reflectlite.rtype).Out" -> "internal/reflectlite.toType"
  "(*github.com/stefan-muehlebach/gg.Context).Rotate" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Rotate"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetLineColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "syscall.Shutdown" -> "syscall.Syscall"
  "syscall.Shutdown" -> "syscall.errnoErr"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetBackgroundColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*internal/abi.Type).ArrayType" -> "(*internal/abi.Type).Kind"
  "(*github.com/stefan-muehlebach/gg.Context).Translate" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Translate"
  "(*container/list.List).MoveAfter" -> "(*container/list.List).move"
  "(*internal/poll.FD).Fsync" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fsync" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fsync" -> "internal/poll.ignoringEINTR"
  "(time.Time).Round" -> "(*time.Time).stripMono"
  "(time.Time).Round" -> "time.div"
  "(time.Time).Round" -> "time.lessThanHalf"
  "(time.Time).Round" -> "(time.Time).Add"
  "(time.Time).Round" -> "(time.Time).Add"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteMsgInet4" -> "internal/syscall/unix.SendmsgNInet4"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteMsgInet4" -> "(*internal/poll.pollDesc).pollable"
  "(internal/reflectlite.rtype).NumMethod" -> "(*internal/abi.Type).InterfaceType"
  "(internal/reflectlite.rtype).NumMethod" -> "(*internal/abi.InterfaceType).NumMethod"
  "(internal/reflectlite.rtype).uncommon" -> "(*internal/abi.Type).Uncommon"
  "(internal/reflectlite.rtype).exportedMethods" -> "(internal/reflectlite.rtype).uncommon"
  "(internal/reflectlite.rtype).exportedMethods" -> "(*internal/abi.UncommonType).ExportedMethods"
  "(internal/reflectlite.rtype).NumMethod" -> "(internal/reflectlite.rtype).exportedMethods"
  "(*reflect.rtype).FieldByNameFunc" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).FieldByNameFunc" -> "(*reflect.rtype).String"
  "(*reflect.rtype).FieldByNameFunc" -> "(*reflect.structType).FieldByNameFunc"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "(*golang.org/x/image/font/sfnt.Font).NumGlyphs"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "golang.org/x/image/font/sfnt.u32"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "golang.org/x/image/font/sfnt.makeCachedPairPosGlyph$1"
  "(*golang.org/x/image/font/sfnt.Font).Kern" -> "golang.org/x/image/font/sfnt.makeCachedPairPosClass$1"
  "(*runtime/internal/atomic.Pointer[runtime._defer]).CompareAndSwapNoWB[runtime._defer]" -> "(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB"
  "image/jpeg.toYCbCr" -> "(*image.Uniform).Bounds"
  "image/jpeg.toYCbCr" -> "(*image.Alpha).Bounds"
  "image/jpeg.toYCbCr" -> "(*image.Gray).At"
  "image/jpeg.toYCbCr" -> "(*image.RGBA).Bounds"
  "image/jpeg.toYCbCr" -> "(image.Rectangle).Bounds"
  "image/jpeg.toYCbCr" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "image/jpeg.toYCbCr" -> "(*image.YCbCr).Bounds"
  "image/jpeg.toYCbCr" -> "(*image.Paletted).Bounds"
  "image/jpeg.toYCbCr" -> "(*image.Uniform).At"
  "image/jpeg.toYCbCr" -> "(*image.Alpha).At"
  "image/jpeg.toYCbCr" -> "(*image.NRGBA64).At"
  "image/jpeg.toYCbCr" -> "(*image.RGBA).At"
  "image/jpeg.toYCbCr" -> "(image.Rectangle).At"
  "image/jpeg.toYCbCr" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).At"
  "image/jpeg.toYCbCr" -> "(*image.YCbCr).At"
  "image/jpeg.toYCbCr" -> "(*image.Paletted).At"
  "image/jpeg.toYCbCr" -> "(*image.NRGBA64).Bounds"
  "image/jpeg.toYCbCr" -> "(image/color.Gray16).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.RGBA64).Bounds"
  "image/jpeg.toYCbCr" -> "(image/color.RGBA).RGBA"
  "image/jpeg.toYCbCr" -> "(image/color.RGBA64).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.CMYK).Bounds"
  "image/jpeg.toYCbCr" -> "(github.com/stefan-muehlebach/gg/color.RGBAF).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.Gray).Bounds"
  "image/jpeg.toYCbCr" -> "(image/color.Alpha16).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.Uniform).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.Gray16).At"
  "image/jpeg.toYCbCr" -> "(image/color.Alpha).RGBA"
  "image/jpeg.toYCbCr" -> "(github.com/stefan-muehlebach/gg/color.HSV).RGBA"
  "image/jpeg.toYCbCr" -> "(github.com/stefan-muehlebach/adatft.ILIColor).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.NRGBA).At"
  "image/jpeg.toYCbCr" -> "(image/color.YCbCr).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.CMYK).At"
  "image/jpeg.toYCbCr" -> "(image/color.NRGBA).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.RGBA64).At"
  "image/jpeg.toYCbCr" -> "(image/color.NRGBA64).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.NRGBA).Bounds"
  "image/jpeg.toYCbCr" -> "(image/color.Gray).RGBA"
  "image/jpeg.toYCbCr" -> "image/color.RGBToYCbCr"
  "image/jpeg.toYCbCr" -> "(image/color.NYCbCrA).RGBA"
  "image/jpeg.toYCbCr" -> "(github.com/stefan-muehlebach/gg/color.HSP).RGBA"
  "image/jpeg.toYCbCr" -> "(*image.Gray16).Bounds"
  "image/jpeg.toYCbCr" -> "(image/color.CMYK).RGBA"
  "image/jpeg.toYCbCr" -> "(github.com/stefan-muehlebach/gg/color.HSL).RGBA"
  "image/jpeg.toYCbCr" -> "(github.com/stefan-muehlebach/gg/color.HSI).RGBA"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Union" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Union" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "(*bufio.Reader).ReadSlice" -> "bytes.IndexByte"
  "(*bufio.Reader).ReadSlice" -> "(*bufio.Reader).readErr"
  "(*bufio.Reader).ReadSlice" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).ReadSlice" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).collectFragments" -> "(*bufio.Reader).ReadSlice"
  "(*bufio.Reader).collectFragments" -> "bytes.Clone"
  "(*bufio.Reader).ReadBytes" -> "(*bufio.Reader).collectFragments"
  "(*runtime/internal/atomic.UnsafePointer).Store" -> "runtime/internal/atomic.storePointer"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToFront" -> "log.Fatal"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToFront" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToFront" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToFront" -> "(*container/list.List).MoveToBack"
  "(image.Rectangle).Eq" -> "(image.Rectangle).Empty"
  "(image.Rectangle).Eq" -> "(image.Rectangle).Empty"
  "(*github.com/stefan-muehlebach/adagui/props.Properties).Font" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Font"
  "(*image.RGBA).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.RGBA).SubImage" -> "(image.Rectangle).Empty"
  "(*image.RGBA).SubImage" -> "(*image.RGBA).PixOffset"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BarWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(reflect.Value).MethodByName" -> "(reflect.Value).typ"
  "(reflect.Value).MethodByName" -> "(reflect.Value).typ"
  "(reflect.Value).MethodByName" -> "reflect.toRType"
  "(*reflect.rtype).MethodByName" -> "(*reflect.rtype).Kind"
  "(*reflect.interfaceType).MethodByName" -> "(*reflect.interfaceType).nameOff"
  "(*reflect.interfaceType).MethodByName" -> "(internal/abi.Name).Name"
  "(*reflect.interfaceType).MethodByName" -> "(*reflect.interfaceType).Method"
  "(*reflect.rtype).MethodByName" -> "(*reflect.interfaceType).MethodByName"
  "(*reflect.rtype).MethodByName" -> "(*reflect.rtype).uncommon"
  "(*reflect.rtype).MethodByName" -> "(*internal/abi.UncommonType).ExportedMethods"
  "(*reflect.rtype).MethodByName" -> "(*reflect.rtype).nameOff"
  "(*reflect.rtype).MethodByName" -> "(internal/abi.Name).Name"
  "(*reflect.rtype).MethodByName" -> "(*reflect.rtype).Method"
  "(*reflect.rtype).MethodByName" -> "(*reflect.rtype).nameOff"
  "(*reflect.rtype).MethodByName" -> "(internal/abi.Name).Name"
  "(reflect.Value).MethodByName" -> "(*reflect.rtype).MethodByName"
  "(reflect.Value).MethodByName" -> "(reflect.Value).Method"
  "(*internal/bisect.Matcher).fileLine" -> "internal/bisect.Hash"
  "(*internal/bisect.Matcher).fileLine" -> "(*internal/bisect.Matcher).ShouldPrint"
  "(*internal/bisect.Matcher).fileLine" -> "(*internal/bisect.Matcher).MarkerOnly"
  "(*internal/bisect.Matcher).fileLine" -> "(*internal/bisect.Matcher).ShouldEnable"
  "(*internal/bisect.Matcher).fileLine" -> "internal/bisect.PrintMarker"
  "internal/bisect.printFileLine" -> "internal/bisect.AppendMarker"
  "internal/bisect.printFileLine" -> "internal/bisect.appendFileLine"
  "internal/bisect.printFileLine" -> "(*bytes.Buffer).Write"
  "internal/bisect.printFileLine" -> "(*os.File).Write"
  "internal/bisect.printFileLine" -> "(*internal/poll.FD).Write"
  "internal/bisect.printFileLine" -> "(io.discard).Write"
  "internal/bisect.printFileLine" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "internal/bisect.printFileLine" -> "(*fmt.pp).Write"
  "internal/bisect.printFileLine" -> "(*bufio.Writer).Write"
  "internal/bisect.printFileLine" -> "(*compress/flate.dictWriter).Write"
  "internal/bisect.printFileLine" -> "(*strings.Builder).Write"
  "internal/bisect.printFileLine" -> "(*hash/crc32.digest).Write"
  "internal/bisect.printFileLine" -> "(*text/tabwriter.Writer).Write"
  "internal/bisect.printFileLine" -> "(*compress/flate.Writer).Write"
  "internal/bisect.printFileLine" -> "(*golang.org/x/text/transform.Writer).Write"
  "internal/bisect.printFileLine" -> "(*compress/zlib.Writer).Write"
  "internal/bisect.printFileLine" -> "(*internal/godebug.runtimeStderr).Write"
  "internal/bisect.printFileLine" -> "(*image/png.encoder).Write"
  "internal/bisect.printFileLine" -> "(*hash/adler32.digest).Write"
  "(*internal/bisect.Matcher).fileLine" -> "internal/bisect.printFileLine"
  "(*internal/bisect.Matcher).FileLine" -> "(*internal/bisect.Matcher).fileLine"
  "(*golang.org/x/text/encoding.Encoder).Bytes" -> "golang.org/x/text/transform.Bytes"
  "(*github.com/stefan-muehlebach/gg.Context).SetPixel" -> "(*image.RGBA).Set"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadMsg" -> "syscall.Recvmsg"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadMsg" -> "(*internal/poll.pollDesc).pollable"
  "(*internal/poll.FD).SetsockoptLinger" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptLinger" -> "(*internal/poll.FD).decref"
  "syscall.SetsockoptLinger" -> "syscall.setsockopt"
  "(*internal/poll.FD).SetsockoptLinger" -> "syscall.SetsockoptLinger"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetBarColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*golang.org/x/image/font/sfnt.Font).GlyphBounds" -> "(*golang.org/x/image/font/sfnt.Font).NumGlyphs"
  "(*golang.org/x/image/font/sfnt.Font).GlyphBounds" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).GlyphBounds" -> "golang.org/x/image/font/sfnt.u16"
  "(*golang.org/x/image/font/sfnt.Font).GlyphBounds" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).GlyphBounds" -> "(*golang.org/x/image/font/sfnt.Font).LoadGlyph"
  "(*golang.org/x/image/font/sfnt.Font).GlyphBounds" -> "(golang.org/x/image/font/sfnt.Segments).Bounds"
  "(*github.com/stefan-muehlebach/adagui.Embed).Local2Screen" -> "(*github.com/stefan-muehlebach/adagui.Embed).Matrix"
  "(*github.com/stefan-muehlebach/adagui.Embed).Local2Screen" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Transform"
  "(*github.com/stefan-muehlebach/adagui.Embed).Local2Screen" -> "(*github.com/stefan-muehlebach/adagui.Embed).Local2Screen"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).In"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).In"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).In"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).In"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).Out"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).Out"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(periph.io/x/conn/v3/pin.Func).Generalize"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).wrap"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).Halt"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(periph.io/x/conn/v3/pin.Func).Generalize"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).setFunction"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).setFunction"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).setFunction"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).setFunction"
  "(*periph.io/x/host/v3/allwinner.Pin).SetFunc" -> "(*periph.io/x/host/v3/allwinner.Pin).setFunction"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnEnter" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "github.com/stefan-muehlebach/gg/geom.ScaleAbout" -> "github.com/stefan-muehlebach/gg/geom.Translate"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).Scale" -> "github.com/stefan-muehlebach/gg/geom.Scale"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).Scale" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "github.com/stefan-muehlebach/gg/geom.ScaleAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Scale"
  "github.com/stefan-muehlebach/gg/geom.ScaleAbout" -> "(github.com/stefan-muehlebach/gg/geom.Point).Neg"
  "github.com/stefan-muehlebach/gg/geom.ScaleAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Translate"
  "(*github.com/stefan-muehlebach/adagui.Embed).ScaleAbout" -> "github.com/stefan-muehlebach/gg/geom.ScaleAbout"
  "(*github.com/stefan-muehlebach/adagui.Embed).ScaleAbout" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteToInet4" -> "internal/syscall/unix.SendtoInet4"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteToInet4" -> "(*internal/poll.pollDesc).pollable"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadMsgInet4" -> "internal/syscall/unix.RecvmsgInet4"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadMsgInet4" -> "(*internal/poll.pollDesc).pollable"
  "(encoding/json.Number).Int64" -> "strconv.ParseInt"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).WriteByte"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).Flush"
  "(*bufio.Writer).WriteRune" -> "unicode/utf8.EncodeRune"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).Available"
  "(*bufio.Writer).WriteRune" -> "(*bufio.Writer).WriteString"
  "(time.Time).IsDST" -> "(time.Time).Unix"
  "(time.Time).IsDST" -> "(*time.Location).lookup"
  "(time.Time).YearDay" -> "(time.Time).date"
  "(*internal/poll.FD).Fchdir" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fchdir" -> "(*internal/poll.FD).decref"
  "syscall.Fchdir" -> "syscall.Syscall"
  "syscall.Fchdir" -> "syscall.errnoErr"
  "(*internal/poll.FD).Fchdir" -> "syscall.Fchdir"
  "(time.Time).Day" -> "(time.Time).date"
  "(*runtime/internal/atomic.UnsafePointer).CompareAndSwap" -> "runtime/internal/atomic.casPointer"
  "(*runtime/internal/atomic.Pointer[runtime._defer]).CompareAndSwap[runtime._defer]" -> "(*runtime/internal/atomic.UnsafePointer).CompareAndSwap"
  "(*internal/poll.FD).SetsockoptIPv6Mreq" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptIPv6Mreq" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetsockoptIPv6Mreq" -> "syscall.SetsockoptIPv6Mreq"
  "(*github.com/stefan-muehlebach/adagui.Embed).Scale" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Embed).Scale" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Embed).Scale" -> "(*github.com/stefan-muehlebach/adagui.Embed).ScaleAbout"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadFrom" -> "syscall.Recvfrom"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadFrom" -> "(*internal/poll.pollDesc).pollable"
  "(github.com/stefan-muehlebach/gg/color.HSI).Alpha" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedBarColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "(*periph.io/x/host/v3/bcm283x.Pin).Out"
  "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Duration" -> "(periph.io/x/conn/v3/physic.Frequency).Period"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Duration"
  "periph.io/x/host/v3/bcm283x.overSamples" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Frequency"
  "periph.io/x/host/v3/bcm283x.overSamples" -> "fmt.Errorf"
  "periph.io/x/host/v3/bcm283x.overSamples" -> "fmt.Errorf"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.overSamples"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "fmt.Errorf"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.getBit"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Frequency"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.getBit"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.allocateCB"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/host/v3/pmem.Slice).Uint32"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/host/v3/pmem.Slice).Bytes"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.getBit"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.getBit"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.setPWMClockSource"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges" -> "periph.io/x/host/v3/bcm283x.runIO"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "periph.io/x/host/v3/bcm283x.dmaWriteStreamEdges"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "(*periph.io/x/host/v3/bcm283x.Pin).setFunction"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Duration"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Frequency"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "periph.io/x/host/v3/bcm283x.calcSource"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/bcm283x.pcmMap).reset"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "periph.io/x/host/v3/bcm283x.setPCMClockSource"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Frequency"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "periph.io/x/host/v3/videocore.Alloc"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/pmem.Slice).Uint32"
  "periph.io/x/host/v3/bcm283x.copyStreamToDMABuf" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.copyStreamToDMABuf" -> "(encoding/binary.bigEndian).Uint32"
  "periph.io/x/host/v3/bcm283x.copyStreamToDMABuf" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.copyStreamToDMABuf" -> "errors.New"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "periph.io/x/host/v3/bcm283x.copyStreamToDMABuf"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "periph.io/x/host/v3/bcm283x.allocateCB"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/bcm283x.pcmMap).reset"
  "(*periph.io/x/host/v3/bcm283x.pcmMap).set" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "(*periph.io/x/host/v3/bcm283x.pcmMap).set"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "periph.io/x/host/v3/bcm283x.runIO"
  "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM" -> "periph.io/x/host/v3/bcm283x.Nanospin"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "periph.io/x/host/v3/bcm283x.dmaWriteStreamPCM"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamOut" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(reflect.Value).recv" -> "(reflect.Value).typ"
  "(reflect.Value).recv" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).recv" -> "reflect.ifaceIndir"
  "(reflect.Value).recv" -> "reflect.unsafe_New"
  "(reflect.Value).recv" -> "(reflect.Value).pointer"
  "(reflect.Value).recv" -> "reflect.chanrecv"
  "(*internal/poll.FD).SetsockoptInt" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptInt" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetsockoptInt" -> "syscall.SetsockoptInt"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetSelectedColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).ScaleAbout" -> "github.com/stefan-muehlebach/gg/geom.ScaleAbout"
  "(github.com/stefan-muehlebach/gg/geom.Matrix).ScaleAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Multiply"
  "(*github.com/stefan-muehlebach/gg.Context).ScaleAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).ScaleAbout"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).BackgroundColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*image.NRGBA64).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.NRGBA64).SubImage" -> "(image.Rectangle).Empty"
  "(*image.NRGBA64).SubImage" -> "(*image.NRGBA64).PixOffset"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRegularPolygon" -> "(*github.com/stefan-muehlebach/gg.Context).NewSubPath"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRegularPolygon" -> "math.Cos"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRegularPolygon" -> "math.Sin"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRegularPolygon" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawRegularPolygon" -> "(*github.com/stefan-muehlebach/gg.Context).ClosePath"
  "(*github.com/stefan-muehlebach/gg.Context).SetMask" -> "(*image.Alpha).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).SetMask" -> "(image.Rectangle).Size"
  "(*github.com/stefan-muehlebach/gg.Context).SetMask" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).SetMask" -> "(image.Rectangle).Size"
  "(*github.com/stefan-muehlebach/gg.Context).SetMask" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.I2C).Tx" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.I2C).Tx" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.I2C).Tx" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.I2C).Tx" -> "(*periph.io/x/host/v3/fs.File).Ioctl"
  "(*periph.io/x/host/v3/sysfs.I2C).Tx" -> "fmt.Errorf"
  "(*os.File).Sync" -> "(*os.File).checkValid"
  "(*os.File).Sync" -> "(*internal/poll.FD).Fsync"
  "(*os.File).Sync" -> "(*os.File).wrapErr"
  "(*bytes.Buffer).Next" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).ReadString" -> "(*bytes.Buffer).readSlice"
  "(*periph.io/x/host/v3/sysfs.spiConn).CLK" -> "(*periph.io/x/host/v3/sysfs.spiConn).initPins"
  "(*image/jpeg.encoder).writeDQT" -> "(*image/jpeg.encoder).writeMarkerHeader"
  "(*image/jpeg.encoder).writeDQT" -> "(*image/jpeg.encoder).writeByte"
  "(*image/jpeg.encoder).writeDQT" -> "(*image/jpeg.encoder).write"
  "(*bufio.Reader).ReadString" -> "(*bufio.Reader).collectFragments"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).Grow"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).Write"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).Write"
  "(*bufio.Reader).ReadString" -> "(*strings.Builder).String"
  "(*reflect.rtype).FieldAlign" -> "(*internal/abi.Type).FieldAlign"
  "(github.com/stefan-muehlebach/gg/color.HSV).Alpha" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*hash/crc32.digest).MarshalBinary" -> "hash/crc32.tableSum"
  "(*hash/crc32.digest).MarshalBinary" -> "hash/crc32.appendUint32"
  "(*hash/crc32.digest).MarshalBinary" -> "hash/crc32.appendUint32"
  "(*runtime/internal/atomic.Pointer[runtime._defer]).StoreNoWB[runtime._defer]" -> "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
  "(*os.unixDirent).Info" -> "os.Lstat"
  "golang.org/x/text/transform.NewReader" -> "(golang.org/x/text/transform.NopResetter).Reset"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetPushedColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*periph.io/x/host/v3/sysfs.SPI).CLK" -> "(*periph.io/x/host/v3/sysfs.spiConn).CLK"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).MenuBackgroundColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadFromInet4" -> "internal/syscall/unix.RecvfromInet4"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadFromInet4" -> "(*internal/poll.pollDesc).pollable"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetBorderColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*sync/atomic.Pointer[sync.readOnly]).CompareAndSwap[sync.readOnly]" -> "sync/atomic.CompareAndSwapPointer"
  "(github.com/stefan-muehlebach/gg/color.HSL).Bright" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*encoding/base64.Encoding).EncodeToString" -> "(*encoding/base64.Encoding).EncodedLen"
  "(*encoding/base64.Encoding).EncodeToString" -> "(*encoding/base64.Encoding).Encode"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedLineColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*io/fs.PathError).Timeout" -> "(syscall.Errno).Timeout"
  "(*io/fs.PathError).Timeout" -> "(context.deadlineExceededError).Timeout"
  "(*io/fs.PathError).Timeout" -> "(internal/poll.errNetClosing).Timeout"
  "(*os.SyscallError).Timeout" -> "(syscall.Errno).Timeout"
  "(*os.SyscallError).Timeout" -> "(context.deadlineExceededError).Timeout"
  "(*os.SyscallError).Timeout" -> "(internal/poll.errNetClosing).Timeout"
  "(*os.SyscallError).Timeout" -> "(*os.SyscallError).Timeout"
  "(*os.SyscallError).Timeout" -> "(*io/fs.PathError).Timeout"
  "(*os.SyscallError).Timeout" -> "(*internal/poll.DeadlineExceededError).Timeout"
  "(*io/fs.PathError).Timeout" -> "(*os.SyscallError).Timeout"
  "(*io/fs.PathError).Timeout" -> "(*io/fs.PathError).Timeout"
  "(*io/fs.PathError).Timeout" -> "(*internal/poll.DeadlineExceededError).Timeout"
  "(*github.com/stefan-muehlebach/gg.Context).MeasureMultilineString" -> "strings.Split"
  "(*github.com/stefan-muehlebach/gg.Context).MeasureMultilineString" -> "(*golang.org/x/image/font.Drawer).MeasureString"
  "(reflect.Value).Equal" -> "(reflect.Value).Kind"
  "(reflect.Value).Equal" -> "(reflect.Value).Elem"
  "(reflect.Value).Equal" -> "(reflect.Value).Kind"
  "(reflect.Value).Equal" -> "(reflect.Value).Elem"
  "(reflect.Value).Equal" -> "(reflect.Value).IsValid"
  "(reflect.Value).Equal" -> "(reflect.Value).IsValid"
  "(reflect.Value).Equal" -> "(reflect.Value).IsValid"
  "(reflect.Value).Equal" -> "(reflect.Value).Kind"
  "(reflect.Value).Equal" -> "(reflect.Value).Kind"
  "(reflect.Value).Equal" -> "(reflect.Value).IsValid"
  "(reflect.Value).Equal" -> "(reflect.Value).Kind"
  "(reflect.Value).Equal" -> "(reflect.Value).Type"
  "(reflect.Value).Equal" -> "(reflect.Value).Type"
  "(reflect.Value).Equal" -> "(reflect.Value).Type"
  "(reflect.Value).Equal" -> "(reflect.Value).Bool"
  "(reflect.Value).Equal" -> "(reflect.Value).Bool"
  "(reflect.Value).Equal" -> "(reflect.Value).Int"
  "(reflect.Value).Equal" -> "(reflect.Value).Int"
  "(reflect.Value).Equal" -> "(reflect.Value).Uint"
  "(reflect.Value).Equal" -> "(reflect.Value).Uint"
  "(reflect.Value).Equal" -> "(reflect.Value).Float"
  "(reflect.Value).Equal" -> "(reflect.Value).Float"
  "(reflect.Value).Equal" -> "(reflect.Value).Complex"
  "(reflect.Value).Equal" -> "(reflect.Value).Complex"
  "(reflect.Value).Equal" -> "(reflect.Value).String"
  "(reflect.Value).Equal" -> "(reflect.Value).String"
  "(reflect.Value).Equal" -> "(reflect.Value).Pointer"
  "(reflect.Value).Equal" -> "(reflect.Value).Pointer"
  "(reflect.Value).Equal" -> "(reflect.Value).Len"
  "(reflect.Value).Equal" -> "(reflect.Value).NumField"
  "(reflect.Value).Equal" -> "(reflect.Value).Type"
  "(reflect.Value).Equal" -> "(reflect.Value).Index"
  "(reflect.Value).Equal" -> "(reflect.Value).Index"
  "(reflect.Value).Equal" -> "(reflect.Value).Equal"
  "(reflect.Value).Equal" -> "(reflect.Value).Field"
  "(reflect.Value).Equal" -> "(reflect.Value).Field"
  "(reflect.Value).Equal" -> "(reflect.Value).Equal"
  "(reflect.Value).Equal" -> "(*reflect.rtype).String"
  "(reflect.Value).Equal" -> "(*reflect.rtype).Elem"
  "(reflect.Value).Equal" -> "(*reflect.rtype).Comparable"
  "(reflect.Value).TryRecv" -> "(reflect.flag).mustBe"
  "(reflect.Value).TryRecv" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).TryRecv" -> "(reflect.Value).recv"
  "image/jpeg.Encode" -> "(*image.Uniform).Bounds"
  "image/jpeg.Encode" -> "(*image.Alpha).Bounds"
  "image/jpeg.Encode" -> "(*image.RGBA64).Bounds"
  "image/jpeg.Encode" -> "(*image.RGBA).Bounds"
  "image/jpeg.Encode" -> "(image.Rectangle).Bounds"
  "image/jpeg.Encode" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "image/jpeg.Encode" -> "(*image.YCbCr).Bounds"
  "image/jpeg.Encode" -> "(image.Rectangle).Dx"
  "image/jpeg.Encode" -> "errors.New"
  "image/jpeg.Encode" -> "(image.Rectangle).Dy"
  "image/jpeg.Encode" -> "bufio.NewWriter"
  "image/jpeg.Encode" -> "(*image/jpeg.encoder).write"
  "image/jpeg.Encode" -> "(*image/jpeg.encoder).writeDQT"
  "image/jpeg.Encode" -> "(image.Rectangle).Size"
  "(*image/jpeg.encoder).writeSOF0" -> "(*image/jpeg.encoder).writeMarkerHeader"
  "(*image/jpeg.encoder).writeSOF0" -> "(*image/jpeg.encoder).write"
  "image/jpeg.Encode" -> "(*image/jpeg.encoder).writeSOF0"
  "(*image/jpeg.encoder).writeDHT" -> "(*image/jpeg.encoder).writeMarkerHeader"
  "(*image/jpeg.encoder).writeDHT" -> "(*image/jpeg.encoder).writeByte"
  "(*image/jpeg.encoder).writeDHT" -> "(*image/jpeg.encoder).write"
  "(*image/jpeg.encoder).writeDHT" -> "(*image/jpeg.encoder).write"
  "image/jpeg.Encode" -> "(*image/jpeg.encoder).writeDHT"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.Uniform).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.Alpha).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.RGBA64).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.RGBA).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(image.Rectangle).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.YCbCr).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.Paletted).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image/jpeg.encoder).write"
  "(*image/jpeg.encoder).writeSOS" -> "(*image/jpeg.encoder).write"
  "(*image/jpeg.encoder).writeSOS" -> "(*image/jpeg.encoder).emit"
  "(*image/jpeg.encoder).writeSOS" -> "image.Pt"
  "image/jpeg.grayToY" -> "(*image.Gray).Bounds"
  "image/jpeg.grayToY" -> "(*image.Gray).PixOffset"
  "(*image/jpeg.encoder).writeSOS" -> "image/jpeg.grayToY"
  "(*image/jpeg.encoder).writeBlock" -> "image/jpeg.fdct"
  "(*image/jpeg.encoder).writeBlock" -> "image/jpeg.div"
  "(*image/jpeg.encoder).writeBlock" -> "(*image/jpeg.encoder).emitHuffRLE"
  "(*image/jpeg.encoder).writeBlock" -> "image/jpeg.div"
  "(*image/jpeg.encoder).writeBlock" -> "(*image/jpeg.encoder).emitHuff"
  "(*image/jpeg.encoder).writeBlock" -> "(*image/jpeg.encoder).emitHuffRLE"
  "(*image/jpeg.encoder).writeBlock" -> "(*image/jpeg.encoder).emitHuff"
  "(*image/jpeg.encoder).writeSOS" -> "(*image/jpeg.encoder).writeBlock"
  "(*image/jpeg.encoder).writeSOS" -> "image.Pt"
  "(*image/jpeg.encoder).writeSOS" -> "image/jpeg.scale"
  "(*image/jpeg.encoder).writeSOS" -> "(*image/jpeg.encoder).writeBlock"
  "(*image/jpeg.encoder).writeSOS" -> "image/jpeg.scale"
  "(*image/jpeg.encoder).writeSOS" -> "(*image/jpeg.encoder).writeBlock"
  "image/jpeg.rgbaToYCbCr" -> "(*image.RGBA).Bounds"
  "image/jpeg.rgbaToYCbCr" -> "image/color.RGBToYCbCr"
  "(*image/jpeg.encoder).writeSOS" -> "image/jpeg.rgbaToYCbCr"
  "(*image/jpeg.encoder).writeSOS" -> "(*image/jpeg.encoder).writeBlock"
  "image/jpeg.yCbCrToYCbCr" -> "(*image.YCbCr).Bounds"
  "image/jpeg.yCbCrToYCbCr" -> "(*image.YCbCr).YOffset"
  "image/jpeg.yCbCrToYCbCr" -> "(*image.YCbCr).COffset"
  "(*image/jpeg.encoder).writeSOS" -> "image/jpeg.yCbCrToYCbCr"
  "(*image/jpeg.encoder).writeSOS" -> "image/jpeg.toYCbCr"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.Gray).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.CMYK).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.NRGBA).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.NRGBA64).Bounds"
  "(*image/jpeg.encoder).writeSOS" -> "(*image.Gray16).Bounds"
  "image/jpeg.Encode" -> "(*image/jpeg.encoder).writeSOS"
  "image/jpeg.Encode" -> "(*image/jpeg.encoder).write"
  "(*image/jpeg.encoder).flush" -> "(*bufio.Writer).Flush"
  "image/jpeg.Encode" -> "(*image/jpeg.encoder).flush"
  "image/jpeg.Encode" -> "(*image.Paletted).Bounds"
  "image/jpeg.Encode" -> "(*image.Gray).Bounds"
  "image/jpeg.Encode" -> "(*image.CMYK).Bounds"
  "image/jpeg.Encode" -> "(*image.NRGBA).Bounds"
  "image/jpeg.Encode" -> "(*image.NRGBA64).Bounds"
  "image/jpeg.Encode" -> "(*image.Gray16).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).EncodeJPG" -> "image/jpeg.Encode"
  "(*sync.entry).tryCompareAndSwap" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.entry).tryCompareAndSwap" -> "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
  "(*sync.entry).tryCompareAndSwap" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(internal/reflectlite.rtype).PkgPath" -> "(internal/reflectlite.rtype).uncommon"
  "(internal/reflectlite.rtype).PkgPath" -> "(internal/reflectlite.rtype).nameOff"
  "(internal/reflectlite.rtype).PkgPath" -> "(internal/abi.Name).Name"
  "(internal/reflectlite.rtype).Key" -> "(*internal/abi.Type).MapType"
  "(internal/reflectlite.rtype).Key" -> "internal/reflectlite.toType"
  "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetOnDoubleTap" -> "(*github.com/stefan-muehlebach/adagui/touch.TouchEmbed).SetTouchFunc"
  "(*sync.Map).CompareAndDelete" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).CompareAndDelete" -> "(*sync.Mutex).Lock"
  "(*sync.Map).CompareAndDelete" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).CompareAndDelete" -> "(*sync.Map).missLocked"
  "(*sync.Map).CompareAndDelete" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).CompareAndDelete" -> "(*sync/atomic.Pointer[any]).Load[any]"
  "(*sync.Map).CompareAndDelete" -> "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetCornerRadius" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(*github.com/stefan-muehlebach/adagui.Animation).Stop" -> "github.com/stefan-muehlebach/adagui.CurrentScreen"
  "(*github.com/stefan-muehlebach/adagui.Animation).Stop" -> "(*github.com/stefan-muehlebach/adagui.Screen).StopAnimation"
  "(*periph.io/x/host/v3/sysfs.Pin).PWM" -> "errors.New"
  "(*periph.io/x/host/v3/sysfs.Pin).PWM" -> "(*periph.io/x/host/v3/sysfs.Pin).wrap"
  "(*os.File).chmod" -> "(*os.File).checkValid"
  "(*os.File).chmod" -> "os.syscallMode"
  "(*os.File).chmod" -> "(*internal/poll.FD).Fchmod"
  "(*os.File).chmod" -> "(*os.File).wrapErr"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Init2" -> "github.com/stefan-muehlebach/adagui/props.NewPropsFromFile"
  "(*github.com/golang/freetype/truetype.Font).Name" -> "github.com/golang/freetype/truetype.parseSubtables"
  "(*github.com/golang/freetype/truetype.Font).Name" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).Name" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).Name" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).Name" -> "github.com/golang/freetype/truetype.u16"
  "(*github.com/golang/freetype/truetype.Font).Name" -> "github.com/golang/freetype/truetype.printable"
  "(*github.com/golang/freetype/truetype.Font).Name" -> "github.com/golang/freetype/truetype.printable"
  "(internal/reflectlite.rtype).AssignableTo" -> "(internal/reflectlite.rtype).common"
  "(internal/reflectlite.rtype).AssignableTo" -> "internal/reflectlite.implements"
  "(internal/reflectlite.rtype).AssignableTo" -> "(internal/reflectlite.rtype).common"
  "internal/reflectlite.directlyAssignable" -> "(*internal/abi.Type).HasName"
  "internal/reflectlite.directlyAssignable" -> "internal/reflectlite.haveIdenticalUnderlyingType"
  "internal/reflectlite.directlyAssignable" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.directlyAssignable" -> "(*internal/abi.Type).Kind"
  "internal/reflectlite.directlyAssignable" -> "(*internal/abi.Type).HasName"
  "(internal/reflectlite.rtype).AssignableTo" -> "internal/reflectlite.directlyAssignable"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetPushedBorderColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*sync/atomic.Int32).CompareAndSwap" -> "sync/atomic.CompareAndSwapInt32"
  "(*github.com/stefan-muehlebach/adagui.Embed).RotateAbout" -> "github.com/stefan-muehlebach/gg/geom.RotateAbout"
  "(*github.com/stefan-muehlebach/adagui.Embed).RotateAbout" -> "(*github.com/stefan-muehlebach/adagui.Embed).Mark"
  "(github.com/stefan-muehlebach/gg/color.HSI).Bright" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*reflect.rtype).In" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).In" -> "(*reflect.rtype).String"
  "(*reflect.rtype).In" -> "(*internal/abi.FuncType).InSlice"
  "(*reflect.rtype).In" -> "reflect.toType"
  "syscall.SetsockoptIPMreq" -> "syscall.setsockopt"
  "(github.com/stefan-muehlebach/gg/color.HSP).Bright" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(time.Time).Compare" -> "(*time.Time).sec"
  "(time.Time).Compare" -> "(*time.Time).sec"
  "(time.Time).Compare" -> "(*time.Time).nsec"
  "(time.Time).Compare" -> "(*time.Time).nsec"
  "(*os.rawConn).Control" -> "(*os.File).checkValid"
  "(*os.rawConn).Control" -> "(*internal/poll.FD).RawControl"
  "(*os.rawConn).Control" -> "runtime.KeepAlive"
  "(*internal/poll.FD).Dup" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Dup" -> "(*internal/poll.FD).decref"
  "internal/poll.DupCloseOnExec" -> "internal/syscall/unix.Fcntl"
  "internal/poll.DupCloseOnExec" -> "internal/poll.dupCloseOnExecOld"
  "internal/poll.DupCloseOnExec" -> "(*sync/atomic.Bool).Load"
  "internal/poll.DupCloseOnExec" -> "(*sync/atomic.Bool).Store"
  "(*internal/poll.FD).Dup" -> "internal/poll.DupCloseOnExec"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.Value).Field"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.flag).mustBe"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.Value).Kind"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.Value).Field"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.Value).IsNil"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.Value).typ"
  "(reflect.Value).FieldByIndexErr" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).FieldByIndexErr" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.Value).typ"
  "(reflect.Value).FieldByIndexErr" -> "(*internal/abi.Type).Elem"
  "(reflect.Value).FieldByIndexErr" -> "reflect.nameFor"
  "(reflect.Value).FieldByIndexErr" -> "errors.New"
  "(reflect.Value).FieldByIndexErr" -> "(reflect.Value).Elem"
  "(*internal/poll.FD).Pwrite" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Pwrite" -> "(*internal/poll.FD).decref"
  "syscall.Pwrite" -> "internal/race.ReleaseMerge"
  "syscall.pwrite" -> "syscall.Syscall6"
  "syscall.pwrite" -> "syscall.errnoErr"
  "syscall.Pwrite" -> "syscall.pwrite"
  "syscall.Pwrite" -> "internal/race.ReadRange"
  "syscall.Pwrite" -> "syscall.msanRead"
  "syscall.Pwrite" -> "syscall.asanRead"
  "(*internal/poll.FD).Pwrite" -> "syscall.Pwrite"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetInnerPadding" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(*reflect.rtype).Out" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Out" -> "(*reflect.rtype).String"
  "(*reflect.rtype).Out" -> "(*internal/abi.FuncType).OutSlice"
  "(*reflect.rtype).Out" -> "reflect.toType"
  "(time.Time).ISOWeek" -> "(time.Time).abs"
  "(time.Time).ISOWeek" -> "time.absWeekday"
  "(time.Time).ISOWeek" -> "time.absDate"
  "(*container/list.List).MoveToFront" -> "(*container/list.List).move"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Padding" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.FD).readLock"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.FD).readUnlock"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.pollDesc).prepareRead"
  "(*internal/poll.FD).ReadFromInet6" -> "internal/syscall/unix.RecvfromInet6"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.FD).eofError"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.pollDesc).waitRead"
  "(*internal/poll.FD).ReadFromInet6" -> "(*internal/poll.pollDesc).pollable"
  "(*github.com/stefan-muehlebach/gg.Context).WordWrap" -> "github.com/stefan-muehlebach/gg.wordWrap"
  "(*github.com/stefan-muehlebach/adagui.Embed).Remove" -> "log.Fatal"
  "(*github.com/stefan-muehlebach/adagui.Embed).Remove" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.Embed).Remove" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.Embed).Remove" -> "(*container/list.List).Remove"
  "(github.com/stefan-muehlebach/gg/color.HSV).Interpolate" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(time.Time).Hour" -> "(time.Time).abs"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetHeight" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(*internal/poll.FD).Fchown" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Fchown" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Fchown" -> "internal/poll.ignoringEINTR"
  "(*periph.io/x/host/v3/sysfs.SPI).LimitSpeed" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.SPI).LimitSpeed" -> "fmt.Errorf"
  "(*periph.io/x/host/v3/sysfs.SPI).LimitSpeed" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.SPI).LimitSpeed" -> "(*sync.Mutex).Unlock"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetSelectedBorderWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(*github.com/stefan-muehlebach/adatft.Display).Bounds" -> "image.Rect"
  "(*github.com/stefan-muehlebach/adagui.Embed).Rotate" -> "(*github.com/stefan-muehlebach/adagui.Embed).Size"
  "(*github.com/stefan-muehlebach/adagui.Embed).Rotate" -> "(github.com/stefan-muehlebach/gg/geom.Point).Mul"
  "(*github.com/stefan-muehlebach/adagui.Embed).Rotate" -> "(*github.com/stefan-muehlebach/adagui.Embed).RotateAbout"
  "(*hash/adler32.digest).MarshalBinary" -> "hash/adler32.appendUint32"
  "(reflect.Value).Clear" -> "(reflect.Value).Kind"
  "(reflect.Value).Clear" -> "(reflect.Value).typ"
  "(reflect.Value).Clear" -> "reflect.typedarrayclear"
  "(reflect.Value).Clear" -> "(reflect.Value).typ"
  "(reflect.Value).Clear" -> "(reflect.Value).pointer"
  "(reflect.Value).Clear" -> "reflect.mapclear"
  "(reflect.Value).Clear" -> "(reflect.Value).Kind"
  "(*image.Gray16).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.Gray16).SubImage" -> "(image.Rectangle).Empty"
  "(*image.Gray16).SubImage" -> "(*image.Gray16).PixOffset"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).DelAll" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).DelAll" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).DelAll" -> "(*container/list.List).Init"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).DelAll" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout"
  "(time.Time).GobEncode" -> "(time.Time).MarshalBinary"
  "(*internal/poll.FD).SetsockoptIPMreq" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).SetsockoptIPMreq" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).SetsockoptIPMreq" -> "syscall.SetsockoptIPMreq"
  "(reflect.Value).MapKeys" -> "(reflect.flag).mustBe"
  "(reflect.Value).MapKeys" -> "(reflect.Value).typ"
  "(reflect.Value).MapKeys" -> "(reflect.flag).ro"
  "(reflect.Value).MapKeys" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).MapKeys" -> "(reflect.Value).pointer"
  "(reflect.Value).MapKeys" -> "reflect.maplen"
  "(reflect.Value).MapKeys" -> "(reflect.Value).typ"
  "(reflect.Value).MapKeys" -> "reflect.mapiterinit"
  "(reflect.Value).MapKeys" -> "reflect.mapiterkey"
  "(reflect.Value).MapKeys" -> "reflect.copyVal"
  "(reflect.Value).MapKeys" -> "reflect.mapiternext"
  "(*periph.io/x/host/v3/sysfs.SPI).MOSI" -> "(*periph.io/x/host/v3/sysfs.spiConn).MOSI"
  "(*sync.Mutex).TryLock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).TryLock" -> "internal/race.Acquire"
  "(*sync.Map).CompareAndSwap" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).CompareAndSwap" -> "(*sync.entry).tryCompareAndSwap"
  "(*sync.Map).CompareAndSwap" -> "(*sync.Mutex).Lock"
  "(*sync.Map).CompareAndSwap" -> "(*sync.Mutex).Unlock"
  "(*sync.Map).CompareAndSwap" -> "(*sync.Map).loadReadOnly"
  "(*sync.Map).CompareAndSwap" -> "(*sync.entry).tryCompareAndSwap"
  "(*sync.Map).CompareAndSwap" -> "(*sync.entry).tryCompareAndSwap"
  "(*sync.Map).CompareAndSwap" -> "(*sync.Map).missLocked"
  "(*periph.io/x/host/v3/sysfs.spiConn).GetFlag" -> "(*periph.io/x/host/v3/fs.File).Ioctl"
  "(*container/list.List).InsertBefore" -> "(*container/list.List).insertValue"
  "(*github.com/stefan-muehlebach/gg.Context).AsMask" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).AsMask" -> "image.NewAlpha"
  "(*github.com/stefan-muehlebach/gg.Context).AsMask" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).AsMask" -> "golang.org/x/image/draw.Draw"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).SetILIColor" -> "(image.Point).In"
  "(*github.com/stefan-muehlebach/adatft.ILIImage).SetILIColor" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).PixOffset"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).Buffered"
  "(*bufio.Reader).Discard" -> "(*bufio.Reader).readErr"
  "(*github.com/stefan-muehlebach/adagui/binding.base).AddCallback" -> "(*sync.Map).Store"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).CtrlWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(*sync/atomic.Uint64).Swap" -> "sync/atomic.SwapUint64"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Local2Screen" -> "(*github.com/stefan-muehlebach/adagui.Embed).Local2Screen"
  "(periph.io/x/conn/v3/physic.Frequency).Duration" -> "(periph.io/x/conn/v3/physic.Frequency).Period"
  "(*bytes.Buffer).ReadBytes" -> "(*bytes.Buffer).readSlice"
  "github.com/stefan-muehlebach/gg.SaveJPG" -> "os.Create"
  "github.com/stefan-muehlebach/gg.SaveJPG" -> "(*os.File).Close"
  "github.com/stefan-muehlebach/gg.SaveJPG" -> "image/jpeg.Encode"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).WriteConfig" -> "path/filepath.Join"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).WriteConfig" -> "(*github.com/stefan-muehlebach/adatft.DistortedPlane).WriteConfigFile"
  "(*os.File).SetDeadline" -> "(*os.File).setDeadline"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Disable"
  "(*sync.RWMutex).TryRLock" -> "(*sync/atomic.Int32).Load"
  "(*sync.RWMutex).TryRLock" -> "(*sync/atomic.Int32).CompareAndSwap"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryRLock" -> "internal/race.Acquire"
  "(github.com/stefan-muehlebach/gg/color.HSV).Less" -> "log.Fatalf"
  "(reflect.Value).CanComplex" -> "(reflect.flag).kind"
  "(internal/reflectlite.rtype).NumOut" -> "(*internal/abi.Type).FuncType"
  "(internal/reflectlite.rtype).NumOut" -> "(*internal/abi.FuncType).NumOut"
  "(github.com/stefan-muehlebach/gg/color.HSL).Alpha" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetSelectedBorderColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetLineWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteMsgInet6" -> "internal/syscall/unix.SendmsgNInet6"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteMsgInet6" -> "(*internal/poll.pollDesc).pollable"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).TextColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*runtime/internal/atomic.Uintptr).Swap" -> "runtime/internal/atomic.Xchguintptr"
  "(*periph.io/x/host/v3/sysfs.spiConn).CS" -> "(*periph.io/x/host/v3/sysfs.spiConn).initPins"
  "(*hash/adler32.digest).UnmarshalBinary" -> "errors.New"
  "(*hash/adler32.digest).UnmarshalBinary" -> "errors.New"
  "(*hash/adler32.digest).UnmarshalBinary" -> "hash/adler32.readUint32"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetFont" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetFont"
  "(*github.com/golang/freetype/truetype.face).GlyphBounds" -> "(*github.com/golang/freetype/truetype.face).index"
  "(*github.com/golang/freetype/truetype.face).GlyphBounds" -> "(*github.com/golang/freetype/truetype.GlyphBuf).Load"
  "(*internal/poll.FD).WriteOnce" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteOnce" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteOnce" -> "internal/poll.ignoringEINTRIO"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Eq" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Eq" -> "(github.com/stefan-muehlebach/gg/geom.Rectangle).Empty"
  "(*github.com/stefan-muehlebach/adatft.Display).DrawSync" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Convert"
  "(*github.com/stefan-muehlebach/adatft.Display).DrawSync" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).Diff"
  "(*github.com/stefan-muehlebach/adatft.Display).DrawSync" -> "(*github.com/stefan-muehlebach/adatft.ILIImage).SubImage"
  "(*github.com/stefan-muehlebach/adatft.Display).DrawSync" -> "(*github.com/stefan-muehlebach/adatft.Display).sendImage"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*bytes.Buffer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*golang.org/x/image/font/sfnt.Buffer).view"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*bytes.Buffer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*os.File).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*os.File).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*internal/poll.FD).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*internal/poll.FD).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(io.discard).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(io.discard).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*fmt.pp).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*fmt.pp).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*bufio.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*bufio.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*compress/flate.dictWriter).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*compress/flate.dictWriter).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*strings.Builder).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*strings.Builder).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*hash/crc32.digest).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*hash/crc32.digest).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*text/tabwriter.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*text/tabwriter.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*compress/flate.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*compress/flate.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*compress/zlib.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*compress/zlib.Writer).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*internal/godebug.runtimeStderr).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*internal/godebug.runtimeStderr).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*image/png.encoder).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*image/png.encoder).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*hash/adler32.digest).Write"
  "(*golang.org/x/image/font/sfnt.Font).WriteSourceTo" -> "(*hash/adler32.digest).Write"
  "(*golang.org/x/image/font/basicfont.Face).GlyphBounds" -> "(*golang.org/x/image/font/basicfont.Face).find"
  "(*golang.org/x/image/font/basicfont.Face).GlyphBounds" -> "golang.org/x/image/math/fixed.R"
  "(*golang.org/x/image/font/basicfont.Face).GlyphBounds" -> "golang.org/x/image/math/fixed.I"
  "(*hash/crc32.digest).UnmarshalBinary" -> "errors.New"
  "(*hash/crc32.digest).UnmarshalBinary" -> "errors.New"
  "(*hash/crc32.digest).UnmarshalBinary" -> "hash/crc32.tableSum"
  "(*hash/crc32.digest).UnmarshalBinary" -> "hash/crc32.readUint32"
  "(*hash/crc32.digest).UnmarshalBinary" -> "errors.New"
  "(*hash/crc32.digest).UnmarshalBinary" -> "hash/crc32.readUint32"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).PushedTextColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*sync/atomic.Uint32).CompareAndSwap" -> "sync/atomic.CompareAndSwapUint32"
  "(*github.com/golang/freetype/truetype.Font).HMetric" -> "(*github.com/golang/freetype/truetype.Font).unscaledHMetric"
  "(*github.com/golang/freetype/truetype.Font).HMetric" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.Font).HMetric" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(time.Time).AddDate" -> "(time.Time).Date"
  "(time.Time).AddDate" -> "(time.Time).Clock"
  "(time.Time).AddDate" -> "(*time.Time).nsec"
  "(time.Time).AddDate" -> "(time.Time).Location"
  "(time.Time).AddDate" -> "time.Date"
  "(*periph.io/x/host/v3/sysfs.I2C).initPins" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.I2C).initPins" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.I2C).initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "(*periph.io/x/host/v3/sysfs.I2C).initPins" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.I2C).initPins" -> "fmt.Sprintf"
  "(*periph.io/x/host/v3/sysfs.I2C).initPins" -> "periph.io/x/conn/v3/gpio/gpioreg.ByName"
  "(*periph.io/x/host/v3/sysfs.I2C).SCL" -> "(*periph.io/x/host/v3/sysfs.I2C).initPins"
  "(*internal/chacha8rand.State).Init" -> "internal/chacha8rand.leUint64"
  "(*internal/chacha8rand.State).Init" -> "internal/chacha8rand.leUint64"
  "(*internal/chacha8rand.State).Init" -> "internal/chacha8rand.leUint64"
  "(*internal/chacha8rand.State).Init" -> "internal/chacha8rand.leUint64"
  "(*internal/chacha8rand.State).Init" -> "(*internal/chacha8rand.State).Init64"
  "(*github.com/stefan-muehlebach/gg.Context).DrawString" -> "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored"
  "(time.Time).Month" -> "(time.Time).date"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToBack" -> "log.Fatal"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToBack" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToBack" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.Embed).ToBack" -> "(*container/list.List).MoveToFront"
  "(*periph.io/x/host/v3/sysfs.I2C).SDA" -> "(*periph.io/x/host/v3/sysfs.I2C).initPins"
  "(*sync/atomic.Uint32).Add" -> "sync/atomic.AddUint32"
  "(image.Rectangle).Inset" -> "(image.Rectangle).Dx"
  "(image.Rectangle).Inset" -> "(image.Rectangle).Dy"
  "(*github.com/golang/freetype/truetype.Font).VMetric" -> "(*github.com/golang/freetype/truetype.Font).unscaledVMetric"
  "(*github.com/golang/freetype/truetype.Font).VMetric" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(*github.com/golang/freetype/truetype.Font).VMetric" -> "(*github.com/golang/freetype/truetype.Font).scale"
  "(github.com/stefan-muehlebach/gg/color.HSI).Less" -> "log.Fatalf"
  "(*compress/flate.Writer).Flush" -> "(*compress/flate.compressor).syncFlush"
  "(reflect.Value).Recv" -> "(reflect.flag).mustBe"
  "(reflect.Value).Recv" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).Recv" -> "(reflect.Value).recv"
  "(*os.File).pwrite" -> "(*internal/poll.FD).Pwrite"
  "(*os.File).pwrite" -> "runtime.KeepAlive"
  "(*sync/atomic.Int32).Swap" -> "sync/atomic.SwapInt32"
  "(*runtime/internal/atomic.Uint32).StoreRelease" -> "runtime/internal/atomic.StoreRel"
  "(internal/abi.Name).IsBlank" -> "(internal/abi.Name).ReadVarint"
  "(internal/abi.Name).IsBlank" -> "(internal/abi.Name).Data"
  "(*periph.io/x/host/v3/sysfs.SPI).Close" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.SPI).Close" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.SPI).Close" -> "(*os.File).Close"
  "(*periph.io/x/host/v3/sysfs.SPI).Close" -> "fmt.Errorf"
  "(reflect.Value).InterfaceData" -> "(reflect.flag).mustBe"
  "(reflect.Value).InterfaceData" -> "reflect.escapes"
  "(*sync.rlocker).Lock" -> "(*sync.RWMutex).RLock"
  "(*sync/atomic.Pointer[sync.readOnly]).Swap[sync.readOnly]" -> "sync/atomic.SwapPointer"
  "(*os.File).Truncate" -> "(*os.File).checkValid"
  "(*internal/poll.FD).Ftruncate" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Ftruncate" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Ftruncate" -> "internal/poll.ignoringEINTR"
  "(*os.File).Truncate" -> "(*internal/poll.FD).Ftruncate"
  "(*os.File).Truncate" -> "(*os.File).wrapErr"
  "(github.com/stefan-muehlebach/gg/color.RGBAF).Dark" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*github.com/stefan-muehlebach/adagui.Line).P0" -> "(*github.com/stefan-muehlebach/adagui.Embed).Pos"
  "(*github.com/stefan-muehlebach/adagui.Line).P0" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/transform.NopResetter).Reset"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/transform.nop).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/transform.discard).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/transform.discard).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.replacementEncoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.replacementDecoder).Transform"
  "golang.org/x/text/transform.String" -> "bytes.Equal"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding/charmap.charmapDecoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/transform.discard).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.replacementEncoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/transform.nop).Transform"
  "golang.org/x/text/transform.String" -> "golang.org/x/text/transform.grow"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding/charmap.charmapDecoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.utf8Validator).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.replacementDecoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/transform.nop).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.replacementEncoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.utf8Validator).Transform"
  "golang.org/x/text/transform.String" -> "golang.org/x/text/transform.grow"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.replacementDecoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding/charmap.charmapDecoder).Transform"
  "golang.org/x/text/transform.String" -> "(golang.org/x/text/encoding.utf8Validator).Transform"
  "(*golang.org/x/text/encoding.Encoder).String" -> "golang.org/x/text/transform.String"
  "(*github.com/stefan-muehlebach/gg.Context).Clip" -> "(*github.com/stefan-muehlebach/gg.Context).ClipPreserve"
  "(*github.com/stefan-muehlebach/gg.Context).Clip" -> "(*github.com/stefan-muehlebach/gg.Context).ClearPath"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetFontSize" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(github.com/stefan-muehlebach/gg/color.HSV).Bright" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringWrapped" -> "(*github.com/stefan-muehlebach/gg.Context).WordWrap"
  "(*github.com/stefan-muehlebach/gg.Context).DrawStringWrapped" -> "(*github.com/stefan-muehlebach/gg.Context).DrawStringAnchored"
  "(internal/reflectlite.rtype).Implements" -> "(internal/reflectlite.rtype).common"
  "(internal/reflectlite.rtype).Implements" -> "(*internal/abi.Type).Kind"
  "(internal/reflectlite.rtype).Implements" -> "(internal/reflectlite.rtype).common"
  "(internal/reflectlite.rtype).Implements" -> "internal/reflectlite.implements"
  "(*runtime/internal/atomic.Uint64).StoreRelease" -> "runtime/internal/atomic.StoreRel64"
  "(*runtime/internal/atomic.Uint8).Or" -> "runtime/internal/atomic.Or8"
  "github.com/stefan-muehlebach/gg.CubicBezier" -> "math.Hypot"
  "github.com/stefan-muehlebach/gg.CubicBezier" -> "math.Hypot"
  "github.com/stefan-muehlebach/gg.CubicBezier" -> "math.Hypot"
  "github.com/stefan-muehlebach/gg.CubicBezier" -> "github.com/stefan-muehlebach/gg.cubic"
  "(*github.com/stefan-muehlebach/adagui.Screen).Save" -> "(*github.com/stefan-muehlebach/adagui.Screen).Window"
  "(*github.com/stefan-muehlebach/adagui.Screen).Save" -> "(*github.com/stefan-muehlebach/adagui.Window).Save"
  "(*runtime/internal/atomic.Uint8).And" -> "runtime/internal/atomic.And8"
  "(reflect.Value).SetCap" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetCap" -> "(reflect.flag).mustBe"
  "(*periph.io/x/host/v3/bcm283x.Pin).Function" -> "(*periph.io/x/host/v3/bcm283x.Pin).Func"
  "(*internal/poll.FD).Shutdown" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).Shutdown" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).Shutdown" -> "syscall.Shutdown"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).LineWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(github.com/stefan-muehlebach/gg/color.RGBAF).Bright" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(image.Rectangle).Union" -> "(image.Rectangle).Empty"
  "(image.Rectangle).Union" -> "(image.Rectangle).Empty"
  "(*container/list.List).PushBackList" -> "(*container/list.List).lazyInit"
  "(*container/list.List).PushBackList" -> "(*container/list.List).Len"
  "(*container/list.List).PushBackList" -> "(*container/list.List).Front"
  "(*container/list.List).PushBackList" -> "(*container/list.List).insertValue"
  "(*container/list.List).PushBackList" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/gg.Context).CubicTo" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/gg.Context).CubicTo" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).CubicTo" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).CubicTo" -> "(*github.com/stefan-muehlebach/gg.Context).TransformPoint"
  "(*github.com/stefan-muehlebach/gg.Context).CubicTo" -> "github.com/stefan-muehlebach/gg.CubicBezier"
  "(*github.com/stefan-muehlebach/gg.Context).CubicTo" -> "(github.com/stefan-muehlebach/gg/geom.Point).Fixed"
  "(*github.com/stefan-muehlebach/gg.Context).CubicTo" -> "(*github.com/golang/freetype/raster.Path).Add1"
  "(*github.com/stefan-muehlebach/adagui.LeafEmbed).Parent2Local" -> "(*github.com/stefan-muehlebach/adagui.Embed).Parent2Local"
  "(*github.com/stefan-muehlebach/gg.Context).DrawLine" -> "(*github.com/stefan-muehlebach/gg.Context).MoveTo"
  "(*github.com/stefan-muehlebach/gg.Context).DrawLine" -> "(*github.com/stefan-muehlebach/gg.Context).LineTo"
  "(*github.com/stefan-muehlebach/gg.Context).RotateAbout" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).RotateAbout"
  "(reflect.Value).OverflowComplex" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowComplex" -> "reflect.overflowFloat32"
  "(reflect.Value).OverflowComplex" -> "reflect.overflowFloat32"
  "(reflect.Value).OverflowComplex" -> "(reflect.flag).kind"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Del" -> "(*container/list.List).Front"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Del" -> "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).layout"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Del" -> "(*container/list.Element).Next"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Del" -> "(*github.com/stefan-muehlebach/adagui.Embed).Wrappee"
  "(*github.com/stefan-muehlebach/adagui.ContainerEmbed).Del" -> "(*container/list.List).Remove"
  "(*image.RGBA).SetRGBA" -> "(image.Point).In"
  "(*image.RGBA).SetRGBA" -> "(*image.RGBA).PixOffset"
  "(*periph.io/x/host/v3/bcm283x.Pin).Read" -> "(*periph.io/x/host/v3/sysfs.Pin).Read"
  "(reflect.Value).Close" -> "(reflect.flag).mustBe"
  "(reflect.Value).Close" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).Close" -> "(reflect.Value).typ"
  "(reflect.Value).Close" -> "(reflect.Value).pointer"
  "(reflect.Value).Close" -> "reflect.chanclose"
  "(github.com/stefan-muehlebach/gg/color.RGBAF).Less" -> "log.Fatalf"
  "(time.Time).In" -> "(*time.Time).setLoc"
  "(internal/reflectlite.rtype).Len" -> "(*internal/abi.Type).ArrayType"
  "(reflect.Value).Send" -> "(reflect.flag).mustBe"
  "(reflect.Value).Send" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).Send" -> "(reflect.Value).send"
  "(*periph.io/x/host/v3/sysfs.I2C).Close" -> "(*sync.Mutex).Lock"
  "(*periph.io/x/host/v3/sysfs.I2C).Close" -> "(*sync.Mutex).Unlock"
  "(*periph.io/x/host/v3/sysfs.I2C).Close" -> "(*os.File).Close"
  "(*periph.io/x/host/v3/sysfs.I2C).Close" -> "fmt.Errorf"
  "(*runtime/internal/atomic.Pointer[runtime._defer]).Store[runtime._defer]" -> "(*runtime/internal/atomic.UnsafePointer).Store"
  "(*os.File).Chmod" -> "(*os.File).chmod"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "(*periph.io/x/conn/v3/gpio/gpiostream.BitStream).Duration"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "errors.New"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "(*periph.io/x/host/v3/bcm283x.Pin).In"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "periph.io/x/host/v3/bcm283x.overSamples"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "periph.io/x/host/v3/bcm283x.setPWMClockSource"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "periph.io/x/host/v3/videocore.Alloc"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "periph.io/x/host/v3/bcm283x.allocateCB"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "(*periph.io/x/host/v3/videocore.Mem).Close"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "(*periph.io/x/host/v3/pmem.View).PhysAddr"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "(*periph.io/x/host/v3/bcm283x.controlBlock).initBlock"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "periph.io/x/host/v3/bcm283x.runIO"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "(*periph.io/x/host/v3/pmem.Slice).Bytes"
  "periph.io/x/host/v3/bcm283x.dmaReadStream" -> "periph.io/x/host/v3/bcm283x.uint32ToBitLSBF"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "periph.io/x/host/v3/bcm283x.dmaReadStream"
  "(*periph.io/x/host/v3/bcm283x.Pin).StreamIn" -> "(*periph.io/x/host/v3/bcm283x.Pin).wrap"
  "(*golang.org/x/text/transform.Writer).Close" -> "(golang.org/x/text/encoding.replacementEncoder).Transform"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*golang.org/x/text/transform.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*compress/flate.dictWriter).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(golang.org/x/text/encoding/charmap.charmapEncoder).Transform"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*hash/adler32.digest).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(golang.org/x/text/encoding/charmap.charmapDecoder).Transform"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*hash/crc32.digest).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(golang.org/x/text/transform.nop).Transform"
  "(*golang.org/x/text/transform.Writer).Close" -> "(golang.org/x/text/transform.discard).Transform"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*bytes.Buffer).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*os.File).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*internal/poll.FD).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(io.discard).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*image/png.encoder).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*fmt.pp).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*bufio.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*periph.io/x/host/v3/sysfs.spiConn).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*compress/zlib.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*internal/godebug.runtimeStderr).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*text/tabwriter.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*strings.Builder).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(golang.org/x/text/encoding.utf8Validator).Transform"
  "(*golang.org/x/text/transform.Writer).Close" -> "(*compress/flate.Writer).Write"
  "(*golang.org/x/text/transform.Writer).Close" -> "(golang.org/x/text/encoding.replacementDecoder).Transform"
  "(*container/list.List).PushFrontList" -> "(*container/list.List).lazyInit"
  "(*container/list.List).PushFrontList" -> "(*container/list.List).Len"
  "(*container/list.List).PushFrontList" -> "(*container/list.List).Back"
  "(*container/list.List).PushFrontList" -> "(*container/list.List).insertValue"
  "(*container/list.List).PushFrontList" -> "(*container/list.Element).Prev"
  "(*os.File).Chown" -> "(*os.File).checkValid"
  "(*os.File).Chown" -> "(*internal/poll.FD).Fchown"
  "(*os.File).Chown" -> "(*os.File).wrapErr"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).WriteToInet6" -> "internal/syscall/unix.SendtoInet6"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).WriteToInet6" -> "(*internal/poll.pollDesc).pollable"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetPushedTextColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetBarWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(reflect.Value).FieldByNameFunc" -> "(reflect.Value).typ"
  "(reflect.Value).FieldByNameFunc" -> "reflect.toRType"
  "(reflect.Value).FieldByNameFunc" -> "(*reflect.rtype).FieldByNameFunc"
  "(reflect.Value).FieldByNameFunc" -> "(reflect.Value).FieldByIndex"
  "(reflect.Value).CanConvert" -> "(reflect.Value).Type"
  "(reflect.Value).CanConvert" -> "(reflect.Value).Len"
  "(reflect.Value).CanConvert" -> "(reflect.Value).Len"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).ConvertibleTo"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Kind"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Len"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Elem"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Len"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Kind"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Kind"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Elem"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Kind"
  "(reflect.Value).CanConvert" -> "(*reflect.rtype).Kind"
  "(time.Time).Minute" -> "(time.Time).abs"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetPushedLineColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*container/list.List).PushFront" -> "(*container/list.List).lazyInit"
  "(*container/list.List).PushFront" -> "(*container/list.List).insertValue"
  "(*github.com/stefan-muehlebach/adatft.DistortedPlane).SetRefPoint" -> "(*github.com/stefan-muehlebach/adatft.DistortedPlane).update"
  "(golang.org/x/image/math/fixed.Rectangle26_6).Intersect" -> "(golang.org/x/image/math/fixed.Rectangle26_6).Empty"
  "(*image.Alpha).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.Alpha).SubImage" -> "(image.Rectangle).Empty"
  "(*image.Alpha).SubImage" -> "(*image.Alpha).PixOffset"
  "(periph.io/x/conn/v3/pin.Func).Specialize" -> "strings.SplitN"
  "(periph.io/x/conn/v3/pin.Func).Specialize" -> "strconv.Itoa"
  "(periph.io/x/conn/v3/pin.Func).Specialize" -> "strconv.Itoa"
  "(*bytes.Buffer).Truncate" -> "(*bytes.Buffer).Reset"
  "(*bytes.Buffer).Truncate" -> "(*bytes.Buffer).Len"
  "(*sync.rlocker).Unlock" -> "(*sync.RWMutex).RUnlock"
  "(*periph.io/x/conn/v3/pin.BasicPin).SetFunc" -> "errors.New"
  "(reflect.Value).CanInt" -> "(reflect.flag).kind"
  "internal/poll.writev" -> "syscall.Syscall"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).Font" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Font"
  "(time.Time).Weekday" -> "(time.Time).abs"
  "(time.Time).Weekday" -> "time.absWeekday"
  "(reflect.Value).SetIterKey" -> "(*reflect.hiter).initialized"
  "(reflect.Value).SetIterKey" -> "reflect.mapiterkey"
  "(reflect.Value).SetIterKey" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetIterKey" -> "(reflect.flag).kind"
  "(reflect.Value).SetIterKey" -> "(reflect.Value).typ"
  "(reflect.Value).SetIterKey" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetIterKey" -> "(*internal/abi.Type).Kind"
  "(reflect.Value).SetIterKey" -> "(reflect.Value).typ"
  "(reflect.Value).SetIterKey" -> "(reflect.Value).assignTo"
  "(reflect.Value).SetIterKey" -> "(reflect.Value).typ"
  "(reflect.Value).SetIterKey" -> "reflect.typedmemmove"
  "(*runtime/internal/atomic.Pointer[runtime._defer]).Load[runtime._defer]" -> "(*runtime/internal/atomic.UnsafePointer).Load"
  "(*github.com/stefan-muehlebach/gg.Context).TransformVector" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).TransformVector"
  "(*github.com/stefan-muehlebach/gg.Context).EncodeHTML" -> "image/png.Encode"
  "(*github.com/stefan-muehlebach/gg.Context).EncodeHTML" -> "log.Fatal"
  "(*github.com/stefan-muehlebach/gg.Context).EncodeHTML" -> "(*bytes.Buffer).Bytes"
  "(*github.com/stefan-muehlebach/gg.Context).EncodeHTML" -> "(*encoding/base64.Encoding).EncodeToString"
  "(*github.com/stefan-muehlebach/gg.Context).EncodeHTML" -> "fmt.Println"
  "(reflect.Value).CanUint" -> "(reflect.flag).kind"
  "(time.Time).UnixMilli" -> "(*time.Time).unixSec"
  "(time.Time).UnixMilli" -> "(*time.Time).nsec"
  "(reflect.Value).TrySend" -> "(reflect.flag).mustBe"
  "(reflect.Value).TrySend" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).TrySend" -> "(reflect.Value).send"
  "(*bufio.Reader).Peek" -> "(*bufio.Reader).fill"
  "(*bufio.Reader).Peek" -> "(*bufio.Reader).readErr"
  "(*fmt.ss).Token" -> "(*fmt.ss).Token$1"
  "(*fmt.ss).Token" -> "(*fmt.ss).token"
  "(*os.File).Chdir" -> "(*os.File).checkValid"
  "(*os.File).Chdir" -> "(*internal/poll.FD).Fchdir"
  "(*os.File).Chdir" -> "(*os.File).wrapErr"
  "(*internal/poll.FD).GetsockoptInt" -> "(*internal/poll.FD).incref"
  "(*internal/poll.FD).GetsockoptInt" -> "(*internal/poll.FD).decref"
  "(*internal/poll.FD).GetsockoptInt" -> "syscall.GetsockoptInt"
  "(internal/reflectlite.rtype).NumIn" -> "(*internal/abi.Type).FuncType"
  "(github.com/stefan-muehlebach/gg/color.HSL).Dark" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).LineColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(golang.org/x/image/math/fixed.Rectangle26_6).Union" -> "(golang.org/x/image/math/fixed.Rectangle26_6).Empty"
  "(golang.org/x/image/math/fixed.Rectangle26_6).Union" -> "(golang.org/x/image/math/fixed.Rectangle26_6).Empty"
  "(time.Time).ZoneBounds" -> "(*time.Time).unixSec"
  "(time.Time).ZoneBounds" -> "(*time.Location).lookup"
  "(time.Time).ZoneBounds" -> "time.unixTime"
  "(time.Time).ZoneBounds" -> "(*time.Time).setLoc"
  "(time.Time).ZoneBounds" -> "time.unixTime"
  "(time.Time).ZoneBounds" -> "(*time.Time).setLoc"
  "(*golang.org/x/image/font/sfnt.Font).Bounds" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Bounds" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Bounds" -> "golang.org/x/image/font/sfnt.scale"
  "(*golang.org/x/image/font/sfnt.Font).Bounds" -> "golang.org/x/image/font/sfnt.scale"
  "(*os.File).WriteAt" -> "(*os.File).checkValid"
  "(*os.File).WriteAt" -> "errors.New"
  "(*os.File).WriteAt" -> "(*os.File).pwrite"
  "(*os.File).WriteAt" -> "(*os.File).wrapErr"
  "(github.com/stefan-muehlebach/gg/color.HSL).Less" -> "log.Fatalf"
  "(*periph.io/x/host/v3/allwinner.PinPL).Read" -> "(*periph.io/x/host/v3/sysfs.Pin).Read"
  "(*image.Paletted).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.Paletted).SubImage" -> "(image.Rectangle).Empty"
  "(*image.Paletted).SubImage" -> "(*image.Paletted).PixOffset"
  "(*image.Paletted).SubImage" -> "(image.Rectangle).Intersect"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.FD).writeLock"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.FD).writeUnlock"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.pollDesc).prepareWrite"
  "(*internal/poll.FD).Writev" -> "internal/poll.newIovecWithBase"
  "(*internal/poll.FD).Writev" -> "(*syscall.Iovec).SetLen"
  "(*internal/poll.FD).Writev" -> "(*syscall.Iovec).SetLen"
  "(*internal/poll.FD).Writev" -> "internal/poll.writev"
  "(*internal/poll.FD).Writev" -> "internal/poll.init$1"
  "(*internal/poll.FD).Writev" -> "internal/poll.consume"
  "(*internal/poll.FD).Writev" -> "(*internal/poll.pollDesc).waitWrite"
  "(*internal/poll.FD).Writev" -> "(*github.com/stefan-muehlebach/adagui.Screen).eventThread$1"
  "(*internal/poll.FD).Writev" -> "os/signal.Notify$1"
  "(*periph.io/x/host/v3/sysfs.SPI).CS" -> "(*periph.io/x/host/v3/sysfs.spiConn).CS"
  "(*github.com/golang/freetype/raster.Path).AddStroke" -> "github.com/golang/freetype/raster.Stroke"
  "(*sync.RWMutex).TryLock" -> "internal/race.Disable"
  "(*sync.RWMutex).TryLock" -> "(*sync.Mutex).TryLock"
  "(*sync.RWMutex).TryLock" -> "(*sync/atomic.Int32).CompareAndSwap"
  "(*sync.RWMutex).TryLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryLock" -> "(*sync.Mutex).Unlock"
  "(*sync.RWMutex).TryLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryLock" -> "internal/race.Enable"
  "(*sync.RWMutex).TryLock" -> "internal/race.Acquire"
  "(*sync.RWMutex).TryLock" -> "internal/race.Acquire"
  "(*reflect.rtype).NumIn" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).NumIn" -> "(*reflect.rtype).String"
  "(*reflect.rtype).NumIn" -> "(*internal/abi.FuncType).NumIn"
  "(*periph.io/x/host/v3/sysfs.SPI).MISO" -> "(*periph.io/x/host/v3/sysfs.spiConn).MISO"
  "(*runtime/internal/atomic.Uint64).LoadAcquire" -> "runtime/internal/atomic.LoadAcq64"
  "(*strings.Builder).WriteRune" -> "(*strings.Builder).copyCheck"
  "(*strings.Builder).WriteRune" -> "unicode/utf8.AppendRune"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Sub" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Sub" -> "(github.com/stefan-muehlebach/gg/geom.Point).Sub"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetCtrlWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(time.Time).Local" -> "(*time.Time).setLoc"
  "(syscall.Errno).Temporary" -> "(syscall.Errno).Timeout"
  "(reflect.Value).Convert" -> "reflect.makeMethodValue"
  "(reflect.Value).Convert" -> "(reflect.Value).typ"
  "(reflect.Value).Convert" -> "reflect.convertOp"
  "(reflect.Value).Convert" -> "(reflect.Value).typ"
  "(reflect.Value).Convert" -> "reflect.stringFor"
  "(reflect.Value).Convert" -> "(*reflect.rtype).common"
  "(reflect.Value).Convert" -> "(*reflect.rtype).String"
  "(reflect.Value).Convert" -> "reflect.cvtInt"
  "(reflect.Value).Convert" -> "reflect.cvtIntFloat"
  "(reflect.Value).Convert" -> "reflect.cvtIntString"
  "(reflect.Value).Convert" -> "reflect.cvtUint"
  "(reflect.Value).Convert" -> "reflect.cvtUintFloat"
  "(reflect.Value).Convert" -> "reflect.cvtUintString"
  "(reflect.Value).Convert" -> "reflect.cvtFloatInt"
  "(reflect.Value).Convert" -> "reflect.cvtFloatUint"
  "(reflect.Value).Convert" -> "reflect.cvtFloat"
  "(reflect.Value).Convert" -> "reflect.cvtComplex"
  "(reflect.Value).Convert" -> "reflect.cvtStringBytes"
  "(reflect.Value).Convert" -> "reflect.cvtStringRunes"
  "(reflect.Value).Convert" -> "reflect.cvtBytesString"
  "(reflect.Value).Convert" -> "reflect.cvtRunesString"
  "(reflect.Value).Convert" -> "reflect.cvtSliceArrayPtr"
  "(reflect.Value).Convert" -> "reflect.cvtSliceArray"
  "(reflect.Value).Convert" -> "reflect.cvtDirect"
  "(reflect.Value).Convert" -> "reflect.cvtI2I"
  "(reflect.Value).Convert" -> "reflect.cvtT2I"
  "(*compress/zlib.Writer).Flush" -> "(*compress/zlib.Writer).writeHeader"
  "(*compress/zlib.Writer).Flush" -> "(*compress/flate.Writer).Flush"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetSelectedLineColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetColor"
  "(*image.NRGBA).SubImage" -> "(image.Rectangle).Intersect"
  "(*image.NRGBA).SubImage" -> "(image.Rectangle).Empty"
  "(*image.NRGBA).SubImage" -> "(*image.NRGBA).PixOffset"
  "(*golang.org/x/text/encoding.Decoder).String" -> "golang.org/x/text/transform.String"
  "(reflect.Value).Slice3" -> "(reflect.flag).kind"
  "(reflect.Value).Slice3" -> "(reflect.Value).typ"
  "(reflect.Value).Slice3" -> "(reflect.Value).typ"
  "(reflect.Value).Slice3" -> "(reflect.flag).kind"
  "(reflect.Value).Slice3" -> "(*internal/abi.Type).Size"
  "(reflect.Value).Slice3" -> "reflect.arrayAt"
  "(reflect.Value).Slice3" -> "(reflect.flag).ro"
  "(reflect.Value).Slice3" -> "(*internal/abi.Type).Common"
  "(*sync/atomic.Uint32).Swap" -> "sync/atomic.SwapUint32"
  "(time.Time).Year" -> "(time.Time).date"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).WriteByte"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).tryGrowByReslice"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).grow"
  "(*bytes.Buffer).WriteRune" -> "unicode/utf8.AppendRune"
  "(*github.com/stefan-muehlebach/gg/geom.Rectangle).Move" -> "(*github.com/stefan-muehlebach/gg/geom.Point).Move"
  "(*github.com/stefan-muehlebach/gg/geom.Rectangle).Move" -> "(*github.com/stefan-muehlebach/gg/geom.Point).Move"
  "(*golang.org/x/text/encoding.Decoder).Reader" -> "golang.org/x/text/transform.NewReader"
  "(*periph.io/x/host/v3/allwinner.PinPL).PWM" -> "errors.New"
  "(*periph.io/x/host/v3/allwinner.PinPL).PWM" -> "(*periph.io/x/host/v3/allwinner.PinPL).wrap"
  "(*container/list.List).MoveBefore" -> "(*container/list.List).move"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).RelPos" -> "(github.com/stefan-muehlebach/gg/geom.Point).Add"
  "(image.Point).Mod" -> "(image.Rectangle).Dx"
  "(image.Point).Mod" -> "(image.Rectangle).Dy"
  "(image.Point).Mod" -> "(image.Point).Sub"
  "(image.Point).Mod" -> "(image.Point).Add"
  "(github.com/stefan-muehlebach/gg/color.RGBAF).Interpolate" -> "github.com/stefan-muehlebach/gg/color.setIn"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Canon" -> "(github.com/stefan-muehlebach/gg/geom.Point).Min"
  "(github.com/stefan-muehlebach/gg/geom.Rectangle).Canon" -> "(github.com/stefan-muehlebach/gg/geom.Point).Max"
  "(*github.com/stefan-muehlebach/gg.Context).SaveJPG" -> "github.com/stefan-muehlebach/gg.SaveJPG"
  "(*github.com/stefan-muehlebach/gg.Context).Scale" -> "(github.com/stefan-muehlebach/gg/geom.Matrix).Scale"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SelectedTextColor" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Color"
  "(*os.rawConn).Write" -> "(*os.File).checkValid"
  "(*os.rawConn).Write" -> "(*internal/poll.FD).RawWrite"
  "(*os.rawConn).Write" -> "runtime.KeepAlive"
  "(*github.com/stefan-muehlebach/gg.Context).InvertMask" -> "(*image.RGBA).Bounds"
  "(*github.com/stefan-muehlebach/gg.Context).InvertMask" -> "image.NewAlpha"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).FontSize" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).Size"
  "(reflect.Value).SetPointer" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetPointer" -> "(reflect.flag).mustBe"
  "(*github.com/stefan-muehlebach/adagui/props.PropertyEmbed).SetWidth" -> "(*github.com/stefan-muehlebach/adagui/props.Properties).SetSize"
  "(*image.CMYK).SetCMYK" -> "(image.Point).In"
  "(*image.CMYK).SetCMYK" -> "(*image.CMYK).PixOffset"
  "(*time.Time).GobDecode" -> "(*time.Time).UnmarshalBinary"
  "(*bufio.Reader).ReadLine" -> "(*bufio.Reader).ReadSlice"
  "(reflect.Value).CallSlice" -> "(reflect.flag).mustBe"
  "(reflect.Value).CallSlice" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).CallSlice" -> "(reflect.Value).call"
  "(internal/reflectlite.rtype).In" -> "(*internal/abi.Type).FuncType"
  "(internal/reflectlite.rtype).In" -> "(*internal/abi.FuncType).InSlice"
  "(internal/reflectlite.rtype).In" -> "internal/reflectlite.toType"
}
